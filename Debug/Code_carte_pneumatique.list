
Code_carte_pneumatique.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a9c  08007a9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007a9c  08007a9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a9c  08007a9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000057c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000588  20000588  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001665e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288e  00000000  00000000  0003669a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00038f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  0003a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d395  00000000  00000000  0003b410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017be2  00000000  00000000  000587a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0f2e  00000000  00000000  00070387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001212b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005258  00000000  00000000  00121308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a44 	.word	0x08007a44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007a44 	.word	0x08007a44

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <dshot_init>:

int dshot_ready = 0;

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f83f 	bl	80008c4 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000846:	f000 f8fb 	bl	8000a40 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800084a:	f000 f91d 	bl	8000a88 <dshot_start_pwm>
  dshot_ready = 1;
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <dshot_init+0x28>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000190 	.word	0x20000190

08000860 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if (!dshot_ready) return;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <dshot_write+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <dshot_write+0x20>

	dshot_prepare_dmabuffer_all(motor_value);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f98d 	bl	8000b90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000876:	f000 f9bf 	bl	8000bf8 <dshot_dma_start>
	dshot_enable_dma_request();
 800087a:	f000 fa03 	bl	8000c84 <dshot_enable_dma_request>
 800087e:	e000      	b.n	8000882 <dshot_write+0x22>
  if (!dshot_ready) return;
 8000880:	bf00      	nop
}
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000190 	.word	0x20000190

0800088c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d003      	beq.n	80008a4 <dshot_choose_type+0x18>
 800089c:	2b02      	cmp	r3, #2
 800089e:	d103      	bne.n	80008a8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <dshot_choose_type+0x2c>)
 80008a2:	e002      	b.n	80008aa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <dshot_choose_type+0x30>)
 80008a6:	e000      	b.n	80008aa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <dshot_choose_type+0x34>)
	}
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	00b71b00 	.word	0x00b71b00
 80008bc:	005b8d80 	.word	0x005b8d80
 80008c0:	002dc6c0 	.word	0x002dc6c0

080008c4 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	ed2d 8b02 	vpush	{d8}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <dshot_set_timer+0xc4>)
 80008d4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffd2 	bl	800088c <dshot_choose_type>
 80008e8:	ee07 0a90 	vmov	s15, r0
 80008ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008f4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800098c <dshot_set_timer+0xc8>
 80008f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000900:	f007 f860 	bl	80079c4 <lrintf>
 8000904:	4603      	mov	r3, r0
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <dshot_set_timer+0xcc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	897a      	ldrh	r2, [r7, #10]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <dshot_set_timer+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2214      	movs	r2, #20
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <dshot_set_timer+0xcc>)
 800091e:	2214      	movs	r2, #20
 8000920:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <dshot_set_timer+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <dshot_set_timer+0xd0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2214      	movs	r2, #20
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <dshot_set_timer+0xd0>)
 8000934:	2214      	movs	r2, #20
 8000936:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <dshot_set_timer+0xd4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	897a      	ldrh	r2, [r7, #10]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <dshot_set_timer+0xd4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2214      	movs	r2, #20
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <dshot_set_timer+0xd4>)
 800094a:	2214      	movs	r2, #20
 800094c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <dshot_set_timer+0xd0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	897a      	ldrh	r2, [r7, #10]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <dshot_set_timer+0xd0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2214      	movs	r2, #20
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <dshot_set_timer+0xd0>)
 8000960:	2214      	movs	r2, #20
 8000962:	60da      	str	r2, [r3, #12]

	// motor5
	__HAL_TIM_SET_PRESCALER(MOTOR_5_TIM, dshot_prescaler);
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <dshot_set_timer+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	897a      	ldrh	r2, [r7, #10]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_5_TIM, MOTOR_BITLENGTH);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <dshot_set_timer+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2214      	movs	r2, #20
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <dshot_set_timer+0xcc>)
 8000976:	2214      	movs	r2, #20
 8000978:	60da      	str	r2, [r3, #12]
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	ecbd 8b02 	vpop	{d8}
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	016e3600 	.word	0x016e3600
 800098c:	3c23d70a 	.word	0x3c23d70a
 8000990:	200002b8 	.word	0x200002b8
 8000994:	20000304 	.word	0x20000304
 8000998:	2000026c 	.word	0x2000026c

0800099c <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[MOTOR_1_TIM_DMA_ID])
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d108      	bne.n	80009c6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_1_TIM_DMA);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009c2:	60da      	str	r2, [r3, #12]
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
	}

}
 80009c4:	e036      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_2_TIM_DMA_ID])
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d108      	bne.n	80009e2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_2_TIM_DMA);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	e028      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_3_TIM_DMA_ID])
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d108      	bne.n	80009fe <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_3_TIM_DMA);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009fa:	60da      	str	r2, [r3, #12]
}
 80009fc:	e01a      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_4_TIM_DMA_ID])
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d108      	bne.n	8000a1a <dshot_dma_tc_callback+0x7e>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_4_TIM_DMA);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00c      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d107      	bne.n	8000a34 <dshot_dma_tc_callback+0x98>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a32:	60da      	str	r2, [r3, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <dshot_put_tc_callback_function+0x44>)
 8000a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a58:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200002b8 	.word	0x200002b8
 8000a7c:	0800099d 	.word	0x0800099d
 8000a80:	20000304 	.word	0x20000304
 8000a84:	2000026c 	.word	0x2000026c

08000a88 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000a90:	f005 fb78 	bl	8006184 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a94:	210c      	movs	r1, #12
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <dshot_start_pwm+0x34>)
 8000a98:	f005 fb74 	bl	8006184 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <dshot_start_pwm+0x38>)
 8000aa0:	f005 fb70 	bl	8006184 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <dshot_start_pwm+0x34>)
 8000aa8:	f005 fb6c 	bl	8006184 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_5_TIM, MOTOR_5_TIM_CHANNEL);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000ab0:	f005 fb68 	bl	8006184 <HAL_TIM_PWM_Start>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200002b8 	.word	0x200002b8
 8000abc:	20000304 	.word	0x20000304
 8000ac0:	2000026c 	.word	0x2000026c

08000ac4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000ae6:	893b      	ldrh	r3, [r7, #8]
 8000ae8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e009      	b.n	8000b04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4053      	eors	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddf2      	ble.n	8000af0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000b12:	893b      	ldrh	r3, [r7, #8]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000b20:	893b      	ldrh	r3, [r7, #8]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffc1 	bl	8000ac4 <dshot_prepare_packet>
 8000b42:	4603      	mov	r3, r0
 8000b44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e011      	b.n	8000b70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da01      	bge.n	8000b58 <dshot_prepare_dmabuffer+0x2a>
 8000b54:	220e      	movs	r2, #14
 8000b56:	e000      	b.n	8000b5a <dshot_prepare_dmabuffer+0x2c>
 8000b58:	2207      	movs	r2, #7
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	440b      	add	r3, r1
 8000b62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	ddea      	ble.n	8000b4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3340      	adds	r3, #64	; 0x40
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3344      	adds	r3, #68	; 0x44
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <dshot_prepare_dmabuffer_all+0x54>)
 8000ba0:	f7ff ffc5 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <dshot_prepare_dmabuffer_all+0x58>)
 8000bae:	f7ff ffbe 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <dshot_prepare_dmabuffer_all+0x5c>)
 8000bbc:	f7ff ffb7 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3306      	adds	r3, #6
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <dshot_prepare_dmabuffer_all+0x60>)
 8000bca:	f7ff ffb0 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor5_dmabuffer, motor_value[4]);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <dshot_prepare_dmabuffer_all+0x64>)
 8000bd8:	f7ff ffa9 	bl	8000b2e <dshot_prepare_dmabuffer>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000028 	.word	0x20000028
 8000be8:	20000070 	.word	0x20000070
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	20000100 	.word	0x20000100
 8000bf4:	20000148 	.word	0x20000148

08000bf8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <dshot_dma_start+0x6c>)
 8000bfe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c00:	4919      	ldr	r1, [pc, #100]	; (8000c68 <dshot_dma_start+0x70>)
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	333c      	adds	r3, #60	; 0x3c
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	f002 fe80 	bl	8003910 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <dshot_dma_start+0x74>)
 8000c12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c14:	4916      	ldr	r1, [pc, #88]	; (8000c70 <dshot_dma_start+0x78>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <dshot_dma_start+0x74>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2312      	movs	r3, #18
 8000c20:	f002 fe76 	bl	8003910 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c28:	4913      	ldr	r1, [pc, #76]	; (8000c78 <dshot_dma_start+0x80>)
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3334      	adds	r3, #52	; 0x34
 8000c30:	461a      	mov	r2, r3
 8000c32:	2312      	movs	r3, #18
 8000c34:	f002 fe6c 	bl	8003910 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <dshot_dma_start+0x74>)
 8000c3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c3c:	490f      	ldr	r1, [pc, #60]	; (8000c7c <dshot_dma_start+0x84>)
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <dshot_dma_start+0x74>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3334      	adds	r3, #52	; 0x34
 8000c44:	461a      	mov	r2, r3
 8000c46:	2312      	movs	r3, #18
 8000c48:	f002 fe62 	bl	8003910 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID], (uint32_t)motor5_dmabuffer, (uint32_t)&MOTOR_5_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c50:	490b      	ldr	r1, [pc, #44]	; (8000c80 <dshot_dma_start+0x88>)
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3334      	adds	r3, #52	; 0x34
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f002 fe58 	bl	8003910 <HAL_DMA_Start_IT>

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200002b8 	.word	0x200002b8
 8000c68:	20000028 	.word	0x20000028
 8000c6c:	20000304 	.word	0x20000304
 8000c70:	20000070 	.word	0x20000070
 8000c74:	2000026c 	.word	0x2000026c
 8000c78:	200000b8 	.word	0x200000b8
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	20000148 	.word	0x20000148

08000c84 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, MOTOR_1_TIM_DMA);
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c96:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, MOTOR_2_TIM_DMA);
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ca6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, MOTOR_3_TIM_DMA);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, MOTOR_4_TIM_DMA);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_5_TIM, MOTOR_5_TIM_DMA);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd6:	60da      	str	r2, [r3, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200002b8 	.word	0x200002b8
 8000ce8:	20000304 	.word	0x20000304
 8000cec:	2000026c 	.word	0x2000026c

08000cf0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b09a      	sub	sp, #104	; 0x68
 8000cf4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	HAL_StatusTypeDef res1;
	HAL_StatusTypeDef res2;

	//Partie commandes et lecture des capteurs
	uint8_t command_buffer = 0; // Signal commande Rpi -> Nucléo, pas de log pour l'instant donc taille de 1
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	77fb      	strb	r3, [r7, #31]

	//partie Capteur de Pression
	//modèle : 2513130810401
	float pressure_val;
	//SENP:  Pressure sensor sensitivity : 4.196 ×10-2
	float SENP = 0.04196;
 8000cfa:	4bc1      	ldr	r3, [pc, #772]	; (8001000 <main+0x310>)
 8000cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
	//PMIN: Min Pressure output : -100 kPa
	int Pmin = -100;
 8000cfe:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000d02:	64bb      	str	r3, [r7, #72]	; 0x48
	//OUTP_MIN: digital output at Pmin = 3277
	float OUT_Pmin = 3277;
 8000d04:	4bbf      	ldr	r3, [pc, #764]	; (8001004 <main+0x314>)
 8000d06:	647b      	str	r3, [r7, #68]	; 0x44
	//P15bit = PH & PL
	float P15bit;
	//tableaux des 100 dernières valeurs de pression, toutes les valeurs initialisées à 0
	uint8_t pressures[PRESSURES_SIZE] = {0};
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	809a      	strh	r2, [r3, #4]
	//valeur pour remplir le tableau des valeurs de pressions avant de calculer la moyennes des pressions
	uint32_t pressures_mean = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	65fb      	str	r3, [r7, #92]	; 0x5c

	// explication de la conversion des valeurs de l'ADC en température
	// dans le fichier "Equation_Sonde_PT100, il y a 2 courbes, ces coeffs sont respectivement les pentes et les ordonnées à l'origine
	// raw = valeur numérique renvoyée par l'ADC
	// méthode de calibration sonde PT100 : mesure resistance et raw à 22°   &   mesure resistance et raw à 100° (pistolet à air chaud devant la PT100)
	float raw_to_res_mult = 0.0393;
 8000d1a:	4bbb      	ldr	r3, [pc, #748]	; (8001008 <main+0x318>)
 8000d1c:	643b      	str	r3, [r7, #64]	; 0x40
	float raw_to_res_offset = -2.47;
 8000d1e:	4bbb      	ldr	r3, [pc, #748]	; (800100c <main+0x31c>)
 8000d20:	63fb      	str	r3, [r7, #60]	; 0x3c
	float res_to_temp_mult = -0.74;
 8000d22:	4bbb      	ldr	r3, [pc, #748]	; (8001010 <main+0x320>)
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
	float res_to_temp_offset = 104;
 8000d26:	4bbb      	ldr	r3, [pc, #748]	; (8001014 <main+0x324>)
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34

	//Partie Arrêt d'urgence
	uint8_t AU_Current_Status = GPIO_PIN_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t AU_Old_Status = GPIO_PIN_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d36:	f001 fb99 	bl	800246c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d3a:	f000 fbb9 	bl	80014b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d3e:	f000 fef7 	bl	8001b30 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d42:	f000 feb7 	bl	8001ab4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000d46:	f000 fe85 	bl	8001a54 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000d4a:	f000 fd83 	bl	8001854 <MX_TIM2_Init>
	MX_TIM6_Init();
 8000d4e:	f000 fe4b 	bl	80019e8 <MX_TIM6_Init>
	MX_TIM3_Init();
 8000d52:	f000 fde3 	bl	800191c <MX_TIM3_Init>
	MX_TIM1_Init();
 8000d56:	f000 fced 	bl	8001734 <MX_TIM1_Init>
	MX_I2C1_Init();
 8000d5a:	f000 fcab 	bl	80016b4 <MX_I2C1_Init>
	MX_ADC1_Init();
 8000d5e:	f000 fc05 	bl	800156c <MX_ADC1_Init>
	MX_CAN_Init();
 8000d62:	f000 fc73 	bl	800164c <MX_CAN_Init>
	/* USER CODE BEGIN 2 */

	dshot_init(DSHOT_SPEED);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff fd64 	bl	8000834 <dshot_init>
	//Initialization Des ESC des moteurs ET TOUT LE RESTE
	my_motor_value[0] = 0;
 8000d6c:	4baa      	ldr	r3, [pc, #680]	; (8001018 <main+0x328>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	801a      	strh	r2, [r3, #0]
	my_motor_value[1] = 0;
 8000d72:	4ba9      	ldr	r3, [pc, #676]	; (8001018 <main+0x328>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	805a      	strh	r2, [r3, #2]
	my_motor_value[2] = 0;
 8000d78:	4ba7      	ldr	r3, [pc, #668]	; (8001018 <main+0x328>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	809a      	strh	r2, [r3, #4]
	my_motor_value[3] = 0;
 8000d7e:	4ba6      	ldr	r3, [pc, #664]	; (8001018 <main+0x328>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	80da      	strh	r2, [r3, #6]
	my_motor_value[4] = 0;
 8000d84:	4ba4      	ldr	r3, [pc, #656]	; (8001018 <main+0x328>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f003 f897 	bl	8003ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2110      	movs	r1, #16
 8000d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9e:	f003 f891 	bl	8003ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2108      	movs	r1, #8
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f003 f88b 	bl	8003ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2101      	movs	r1, #1
 8000db2:	489a      	ldr	r0, [pc, #616]	; (800101c <main+0x32c>)
 8000db4:	f003 f886 	bl	8003ec4 <HAL_GPIO_WritePin>
	//start to count (for tim6 interruption)
	HAL_TIM_Base_Start_IT(&htim6);
 8000db8:	4899      	ldr	r0, [pc, #612]	; (8001020 <main+0x330>)
 8000dba:	f005 f92f 	bl	800601c <HAL_TIM_Base_Start_IT>
	//a peu près temps minimal de delay pour laisser le temps aux moteurs de s'initialiser
	HAL_Delay(2600);
 8000dbe:	f640 2028 	movw	r0, #2600	; 0xa28
 8000dc2:	f001 fbb9 	bl	8002538 <HAL_Delay>
	while (1)
	{
		//récupération du mot de commande

		//fréquence recommandée de boucle totale : 10Hz
		AU_Current_Status = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4894      	ldr	r0, [pc, #592]	; (800101c <main+0x32c>)
 8000dca:	f003 f863 	bl	8003e94 <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		//Reset de tout lorsque l'AU repasse à l'état haut (non coupé) alors qu'il était à l'état bas (coupé) juste avant
		if ((AU_Current_Status == GPIO_PIN_RESET) && AU_Old_Status == GPIO_PIN_SET){
 8000dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d13a      	bne.n	8000e52 <main+0x162>
 8000ddc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d136      	bne.n	8000e52 <main+0x162>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000de4:	4b8c      	ldr	r3, [pc, #560]	; (8001018 <main+0x328>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000dea:	4b8b      	ldr	r3, [pc, #556]	; (8001018 <main+0x328>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000df0:	4b89      	ldr	r3, [pc, #548]	; (8001018 <main+0x328>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000df6:	4b88      	ldr	r3, [pc, #544]	; (8001018 <main+0x328>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000dfc:	4b86      	ldr	r3, [pc, #536]	; (8001018 <main+0x328>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	811a      	strh	r2, [r3, #8]
			HAL_Delay(2600);
 8000e02:	f640 2028 	movw	r0, #2600	; 0xa28
 8000e06:	f001 fb97 	bl	8002538 <HAL_Delay>
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e12:	f003 f857 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2110      	movs	r1, #16
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e1e:	f003 f851 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2108      	movs	r1, #8
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f003 f84b 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	487a      	ldr	r0, [pc, #488]	; (800101c <main+0x32c>)
 8000e34:	f003 f846 	bl	8003ec4 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	4879      	ldr	r0, [pc, #484]	; (8001024 <main+0x334>)
 8000e3e:	f003 f841 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2110      	movs	r1, #16
 8000e46:	4877      	ldr	r0, [pc, #476]	; (8001024 <main+0x334>)
 8000e48:	f003 f83c 	bl	8003ec4 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000e4c:	4b76      	ldr	r3, [pc, #472]	; (8001028 <main+0x338>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
		}

		//Si l'AU passe à l'état bas (coupé) alors qu'il était à l'état haut (non coupé), reset tout et lancer un timer de 2 minutes, au bout duquel on purge !
		if (AU_Current_Status == GPIO_PIN_SET && AU_Old_Status == GPIO_PIN_RESET){
 8000e52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d139      	bne.n	8000ece <main+0x1de>
 8000e5a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d135      	bne.n	8000ece <main+0x1de>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000e62:	4b6d      	ldr	r3, [pc, #436]	; (8001018 <main+0x328>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000e68:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <main+0x328>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <main+0x328>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000e74:	4b68      	ldr	r3, [pc, #416]	; (8001018 <main+0x328>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000e7a:	4b67      	ldr	r3, [pc, #412]	; (8001018 <main+0x328>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	811a      	strh	r2, [r3, #8]
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f003 f81c 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2110      	movs	r1, #16
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f003 f816 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2108      	movs	r1, #8
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea0:	f003 f810 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	485c      	ldr	r0, [pc, #368]	; (800101c <main+0x32c>)
 8000eaa:	f003 f80b 	bl	8003ec4 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2120      	movs	r1, #32
 8000eb2:	485c      	ldr	r0, [pc, #368]	; (8001024 <main+0x334>)
 8000eb4:	f003 f806 	bl	8003ec4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4859      	ldr	r0, [pc, #356]	; (8001024 <main+0x334>)
 8000ebe:	f003 f801 	bl	8003ec4 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000ec2:	4b59      	ldr	r3, [pc, #356]	; (8001028 <main+0x338>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]
			// tempo de 2 min, puis purge
			BAU_tick_enable = 1;
 8000ec8:	4b58      	ldr	r3, [pc, #352]	; (800102c <main+0x33c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
		}
		//changer les valeurs des AU status
		AU_Old_Status = AU_Current_Status;
 8000ece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ed2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		//Réception du mot de 8 Bit de Goldo (par UART à priori)
		res1 = HAL_UART_Receive(&huart2, &command_buffer, 1, 100);
 8000ed6:	f107 011f 	add.w	r1, r7, #31
 8000eda:	2364      	movs	r3, #100	; 0x64
 8000edc:	2201      	movs	r2, #1
 8000ede:	4854      	ldr	r0, [pc, #336]	; (8001030 <main+0x340>)
 8000ee0:	f006 f92e 	bl	8007140 <HAL_UART_Receive>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


		//Lecture de la pression en I2C et activation OU NON du compresseur en fonction
		res2 = HAL_I2C_Master_Receive(&hi2c1, 0xf1, I2C_buf, 4, 200);
 8000eea:	f107 0218 	add.w	r2, r7, #24
 8000eee:	23c8      	movs	r3, #200	; 0xc8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	21f1      	movs	r1, #241	; 0xf1
 8000ef6:	484f      	ldr	r0, [pc, #316]	; (8001034 <main+0x344>)
 8000ef8:	f003 f8a6 	bl	8004048 <HAL_I2C_Master_Receive>
 8000efc:	4603      	mov	r3, r0
 8000efe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		if (res2 == HAL_OK){
 8000f02:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 80b3 	bne.w	8001072 <main+0x382>
			//sprintf((char*)p_buf, "I2C : %d %d %d %d\r\n", (int)I2C_buf[0], (int)I2C_buf[1], (int)I2C_buf[2], (int)I2C_buf[3]);
			//HAL_UART_Receive(&huart2, p_buf, 4, 100);

			//Calcul de la pression en 10èmes de bar RELATIFS
			//voir infos_pressure_sensor plus haut pour infos sur variables
			P15bit = (int)((I2C_buf[0] << 8)|I2C_buf[1]);
 8000f0c:	7e3b      	ldrb	r3, [r7, #24]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	7e7a      	ldrb	r2, [r7, #25]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			//formule d'après la datasheet du capteur : pressure_val = [(P15bit - OUTP_MIN)*SENP)] + PMIN;
			//Conversion en 10èmes de bar à la fin
			pressure_val = P15bit - OUT_Pmin; //2383
 8000f20:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000f24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val*SENP; //99.99068
 8000f30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f34:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val + Pmin; // -0,00932
 8000f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f52:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val * 0.1; // -0,000932
 8000f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f58:	f7ff fbc4 	bl	80006e4 <__aeabi_f2d>
 8000f5c:	a326      	add	r3, pc, #152	; (adr r3, 8000ff8 <main+0x308>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff f931 	bl	80001c8 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fc11 	bl	8000794 <__aeabi_d2f>
 8000f72:	4603      	mov	r3, r0
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
			//	pressures[pressures_full_counter] = (int)pressure_val;
			//}
			//dès qu'il est plein, on calcule la moyenne du tableau renouvelé
			//on décale tout le tableau vers la droite, en faisant donc disparaître la valeur la plus ancienne

			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8000f76:	2309      	movs	r3, #9
 8000f78:	657b      	str	r3, [r7, #84]	; 0x54
 8000f7a:	e010      	b.n	8000f9e <main+0x2ae>
				pressures[i] = pressures[i-1];
 8000f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	3358      	adds	r3, #88	; 0x58
 8000f82:	f107 0208 	add.w	r2, r7, #8
 8000f86:	4413      	add	r3, r2
 8000f88:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 8000f8c:	f107 020c 	add.w	r2, r7, #12
 8000f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f92:	4413      	add	r3, r2
 8000f94:	460a      	mov	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]
			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8000f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8000f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dceb      	bgt.n	8000f7c <main+0x28c>
			}
			//On ajoute la nouvelle valeure
			pressures[0] = (int)pressure_val;
 8000fa4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fac:	edc7 7a01 	vstr	s15, [r7, #4]
 8000fb0:	793b      	ldrb	r3, [r7, #4]
 8000fb2:	733b      	strb	r3, [r7, #12]

			//puis on fait la moyenne des pressions
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	653b      	str	r3, [r7, #80]	; 0x50
 8000fb8:	e00b      	b.n	8000fd2 <main+0x2e2>
				pressures_mean+=pressures[i];
 8000fba:	f107 020c 	add.w	r2, r7, #12
 8000fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fc8:	4413      	add	r3, r2
 8000fca:	65fb      	str	r3, [r7, #92]	; 0x5c
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8000fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fce:	3301      	adds	r3, #1
 8000fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8000fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fd4:	2b09      	cmp	r3, #9
 8000fd6:	ddf0      	ble.n	8000fba <main+0x2ca>
			}
			pressures_mean/=PRESSURES_SIZE;
 8000fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <main+0x348>)
 8000fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe0:	08db      	lsrs	r3, r3, #3
 8000fe2:	65fb      	str	r3, [r7, #92]	; 0x5c

			if (pressures_mean > (Press_order)){ // arrêter compresseur si dépassement de la pression de consigne
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <main+0x338>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d925      	bls.n	800103c <main+0x34c>
				my_motor_value[4] = 0;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <main+0x328>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	811a      	strh	r2, [r3, #8]
 8000ff6:	e030      	b.n	800105a <main+0x36a>
 8000ff8:	9999999a 	.word	0x9999999a
 8000ffc:	3fb99999 	.word	0x3fb99999
 8001000:	3d2bde40 	.word	0x3d2bde40
 8001004:	454cd000 	.word	0x454cd000
 8001008:	3d20f909 	.word	0x3d20f909
 800100c:	c01e147b 	.word	0xc01e147b
 8001010:	bf3d70a4 	.word	0xbf3d70a4
 8001014:	42d00000 	.word	0x42d00000
 8001018:	20000578 	.word	0x20000578
 800101c:	48001400 	.word	0x48001400
 8001020:	20000350 	.word	0x20000350
 8001024:	48000400 	.word	0x48000400
 8001028:	20000194 	.word	0x20000194
 800102c:	2000019c 	.word	0x2000019c
 8001030:	200004f0 	.word	0x200004f0
 8001034:	20000218 	.word	0x20000218
 8001038:	cccccccd 	.word	0xcccccccd
			}
			else if (pressures_mean < (Press_order - 2)) { // démarrage compresseur avec hysteresis de 0.4 bar
 800103c:	4b9a      	ldr	r3, [pc, #616]	; (80012a8 <main+0x5b8>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3b02      	subs	r3, #2
 8001042:	461a      	mov	r2, r3
 8001044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001046:	4293      	cmp	r3, r2
 8001048:	d207      	bcs.n	800105a <main+0x36a>
				if(Press_order <= 0){}
 800104a:	4b97      	ldr	r3, [pc, #604]	; (80012a8 <main+0x5b8>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <main+0x36a>
				else {
					my_motor_value[4] = COMPRESSOR_SPEED;
 8001052:	4b96      	ldr	r3, [pc, #600]	; (80012ac <main+0x5bc>)
 8001054:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001058:	811a      	strh	r2, [r3, #8]
				}
			}
			else {}

			//on remet à 0 la moyenne des pressions
			pressures_mean = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	65fb      	str	r3, [r7, #92]	; 0x5c


			//retourner à la Rpi la pression courante du réservoir en dixième de bar [0ZZZZZZZ], MSB utilisé pour erreur de lecture en I2C de la pression
			return_buffer[0] = (uint8_t)pressure_val;
 800105e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001066:	edc7 7a01 	vstr	s15, [r7, #4]
 800106a:	793b      	ldrb	r3, [r7, #4]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	773b      	strb	r3, [r7, #28]
 8001070:	e004      	b.n	800107c <main+0x38c>
		}
		//retourner [10000000] si on arrive pas à communiquer avec le capteur de Pression
		else {
			return_buffer[0]|=128;
 8001072:	7f3b      	ldrb	r3, [r7, #28]
 8001074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001078:	b2db      	uxtb	r3, r3
 800107a:	773b      	strb	r3, [r7, #28]
		}

		//Lecture Température du compresseur réservoir et activation ou désactivation du compresseur en fonction SSI il est pas déjà désactivé
		//#####A IMPLEMENTER : Lecture de la température en analogique sonde PT100#####
		//start an ADC conversion
		HAL_ADC_Start(&hadc1);
 800107c:	488c      	ldr	r0, [pc, #560]	; (80012b0 <main+0x5c0>)
 800107e:	f001 fc11 	bl	80028a4 <HAL_ADC_Start>
		//processor waits for an ADC conversion to complete
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001082:	f04f 31ff 	mov.w	r1, #4294967295
 8001086:	488a      	ldr	r0, [pc, #552]	; (80012b0 <main+0x5c0>)
 8001088:	f001 fcc2 	bl	8002a10 <HAL_ADC_PollForConversion>
		//get raw value from the ADC channel register
		raw = HAL_ADC_GetValue(&hadc1);
 800108c:	4888      	ldr	r0, [pc, #544]	; (80012b0 <main+0x5c0>)
 800108e:	f001 fd8d 	bl	8002bac <HAL_ADC_GetValue>
 8001092:	4603      	mov	r3, r0
 8001094:	84fb      	strh	r3, [r7, #38]	; 0x26

		//get temperature value from raw value (100-Ohm = 0°C, 375-Ohm = 800°C)
		//first : conversion from raw value to resistance value : 2790=>112 kOhm, 90=>6 kOhm
		//then : conversion from resistance value to temperature value :  112 kOhm=>22 °c, 6 kOhm=>100°c
		compr_temp = res_to_temp_mult * (raw_to_res_mult * raw + raw_to_res_offset) + res_to_temp_offset;
 8001096:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80010a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80010ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80010b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	edc7 7a08 	vstr	s15, [r7, #32]

		//si Température critique, arrêter le compresseur et notifier la température critique dans le retour à la Rpi
		if (compr_temp > COMPR_CRIT_TEMP) {
 80010c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c8:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80012b4 <main+0x5c4>
 80010cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	dd07      	ble.n	80010e6 <main+0x3f6>
			my_motor_value[4] = 0;
 80010d6:	4b75      	ldr	r3, [pc, #468]	; (80012ac <main+0x5bc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	811a      	strh	r2, [r3, #8]
			return_buffer[1]|=128;
 80010dc:	7f7b      	ldrb	r3, [r7, #29]
 80010de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	777b      	strb	r3, [r7, #29]
		}


		if (res1 == HAL_OK){
 80010e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 81d4 	bne.w	8001498 <main+0x7a8>
			switch(command_buffer >> 6){
 80010f0:	7ffb      	ldrb	r3, [r7, #31]
 80010f2:	099b      	lsrs	r3, r3, #6
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	f200 81c8 	bhi.w	800148c <main+0x79c>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <main+0x414>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001115 	.word	0x08001115
 8001108:	080011ad 	.word	0x080011ad
 800110c:	0800127b 	.word	0x0800127b
 8001110:	080012c1 	.word	0x080012c1
			case 0:
				//Mode 1 [00000001] : Reset nucleo: arrêt de TOUT
				if (command_buffer == 1){
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d130      	bne.n	800117c <main+0x48c>
					// arrêt moteurs (compr, canons, turbine)
					my_motor_value[0] = 0;
 800111a:	4b64      	ldr	r3, [pc, #400]	; (80012ac <main+0x5bc>)
 800111c:	2200      	movs	r2, #0
 800111e:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 8001120:	4b62      	ldr	r3, [pc, #392]	; (80012ac <main+0x5bc>)
 8001122:	2200      	movs	r2, #0
 8001124:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 8001126:	4b61      	ldr	r3, [pc, #388]	; (80012ac <main+0x5bc>)
 8001128:	2200      	movs	r2, #0
 800112a:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 800112c:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <main+0x5bc>)
 800112e:	2200      	movs	r2, #0
 8001130:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 8001132:	4b5e      	ldr	r3, [pc, #376]	; (80012ac <main+0x5bc>)
 8001134:	2200      	movs	r2, #0
 8001136:	811a      	strh	r2, [r3, #8]
					// arrêt EV 1, 2, 3 et Purge
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f002 fec0 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f002 feba 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2108      	movs	r1, #8
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f002 feb4 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2101      	movs	r1, #1
 8001160:	4855      	ldr	r0, [pc, #340]	; (80012b8 <main+0x5c8>)
 8001162:	f002 feaf 	bl	8003ec4 <HAL_GPIO_WritePin>
					// arrêt LCD et LED Enable
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2120      	movs	r1, #32
 800116a:	4854      	ldr	r0, [pc, #336]	; (80012bc <main+0x5cc>)
 800116c:	f002 feaa 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2110      	movs	r1, #16
 8001174:	4851      	ldr	r0, [pc, #324]	; (80012bc <main+0x5cc>)
 8001176:	f002 fea5 	bl	8003ec4 <HAL_GPIO_WritePin>
					my_motor_value[3] = 0;
					my_motor_value[4] = 0;
					HAL_Delay(2600);
				}

				break;
 800117a:	e184      	b.n	8001486 <main+0x796>
				else if (command_buffer == 2){
 800117c:	7ffb      	ldrb	r3, [r7, #31]
 800117e:	2b02      	cmp	r3, #2
 8001180:	f040 8181 	bne.w	8001486 <main+0x796>
					my_motor_value[0] = 0;
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <main+0x5bc>)
 8001186:	2200      	movs	r2, #0
 8001188:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <main+0x5bc>)
 800118c:	2200      	movs	r2, #0
 800118e:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <main+0x5bc>)
 8001192:	2200      	movs	r2, #0
 8001194:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <main+0x5bc>)
 8001198:	2200      	movs	r2, #0
 800119a:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 800119c:	4b43      	ldr	r3, [pc, #268]	; (80012ac <main+0x5bc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	811a      	strh	r2, [r3, #8]
					HAL_Delay(2600);
 80011a2:	f640 2028 	movw	r0, #2600	; 0xa28
 80011a6:	f001 f9c7 	bl	8002538 <HAL_Delay>
				break;
 80011aa:	e16c      	b.n	8001486 <main+0x796>
			case 1:
				//Mode 2 [01]: Canons
				//ordre des canons : left=1 - right=2 - top=3
				//écriture dans le moteur 1 (left)
				if ((command_buffer & 48) >> 4 == 0){
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	111b      	asrs	r3, r3, #4
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <main+0x4d0>
					my_motor_value[0] = 0;
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <main+0x5bc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	e018      	b.n	80011f2 <main+0x502>
				}
				else if ((command_buffer & 48) >> 4 == 1){
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	111b      	asrs	r3, r3, #4
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d103      	bne.n	80011d4 <main+0x4e4>
					my_motor_value[0] = CANONS_SPEED_1;
 80011cc:	4b37      	ldr	r3, [pc, #220]	; (80012ac <main+0x5bc>)
 80011ce:	2264      	movs	r2, #100	; 0x64
 80011d0:	801a      	strh	r2, [r3, #0]
 80011d2:	e00e      	b.n	80011f2 <main+0x502>
				}
				else if ((command_buffer & 48) >> 4 == 2){
 80011d4:	7ffb      	ldrb	r3, [r7, #31]
 80011d6:	111b      	asrs	r3, r3, #4
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d104      	bne.n	80011ea <main+0x4fa>
					my_motor_value[0] = CANONS_SPEED_2;
 80011e0:	4b32      	ldr	r3, [pc, #200]	; (80012ac <main+0x5bc>)
 80011e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011e6:	801a      	strh	r2, [r3, #0]
 80011e8:	e003      	b.n	80011f2 <main+0x502>
				}
				else{
					my_motor_value[0] = CANONS_SPEED_3;
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <main+0x5bc>)
 80011ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011f0:	801a      	strh	r2, [r3, #0]
				}

				//écriture dans le moteur 2 (right)
				if ((command_buffer & 12) >> 2 == 0){
 80011f2:	7ffb      	ldrb	r3, [r7, #31]
 80011f4:	109b      	asrs	r3, r3, #2
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d103      	bne.n	8001206 <main+0x516>
					my_motor_value[1] = 0;
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <main+0x5bc>)
 8001200:	2200      	movs	r2, #0
 8001202:	805a      	strh	r2, [r3, #2]
 8001204:	e018      	b.n	8001238 <main+0x548>
				}
				else if ((command_buffer & 12) >> 2 == 1){
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	109b      	asrs	r3, r3, #2
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b01      	cmp	r3, #1
 8001210:	d103      	bne.n	800121a <main+0x52a>
					my_motor_value[1] = CANONS_SPEED_1;
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <main+0x5bc>)
 8001214:	2264      	movs	r2, #100	; 0x64
 8001216:	805a      	strh	r2, [r3, #2]
 8001218:	e00e      	b.n	8001238 <main+0x548>
				}
				else if ((command_buffer & 12) >> 2 == 2){
 800121a:	7ffb      	ldrb	r3, [r7, #31]
 800121c:	109b      	asrs	r3, r3, #2
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d104      	bne.n	8001230 <main+0x540>
					my_motor_value[1] = CANONS_SPEED_2;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <main+0x5bc>)
 8001228:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800122c:	805a      	strh	r2, [r3, #2]
 800122e:	e003      	b.n	8001238 <main+0x548>
				}
				else{
					my_motor_value[1] = CANONS_SPEED_3;
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <main+0x5bc>)
 8001232:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001236:	805a      	strh	r2, [r3, #2]
				}

				//écriture dans le moteur 3 (top)
				if ((command_buffer & 3) == 0){
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d103      	bne.n	800124a <main+0x55a>
					my_motor_value[2] = 0;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <main+0x5bc>)
 8001244:	2200      	movs	r2, #0
 8001246:	809a      	strh	r2, [r3, #4]
				}
				else{
					my_motor_value[2] = CANONS_SPEED_3;
				}

				break;
 8001248:	e120      	b.n	800148c <main+0x79c>
				else if ((command_buffer & 3) == 1){
 800124a:	7ffb      	ldrb	r3, [r7, #31]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d103      	bne.n	800125c <main+0x56c>
					my_motor_value[2] = CANONS_SPEED_1;
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <main+0x5bc>)
 8001256:	2264      	movs	r2, #100	; 0x64
 8001258:	809a      	strh	r2, [r3, #4]
				break;
 800125a:	e117      	b.n	800148c <main+0x79c>
				else if ((command_buffer & 3) == 2){
 800125c:	7ffb      	ldrb	r3, [r7, #31]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d104      	bne.n	8001270 <main+0x580>
					my_motor_value[2] = CANONS_SPEED_2;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <main+0x5bc>)
 8001268:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800126c:	809a      	strh	r2, [r3, #4]
				break;
 800126e:	e10d      	b.n	800148c <main+0x79c>
					my_motor_value[2] = CANONS_SPEED_3;
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <main+0x5bc>)
 8001272:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001276:	809a      	strh	r2, [r3, #4]
				break;
 8001278:	e108      	b.n	800148c <main+0x79c>
			case 2:
				//Mode 3 [10]: Compresseur
				//[10000000] : arrêt Compresseur + Consigne Pression => 0 + Purge EV4
				if ((command_buffer ^ 128) == 0){
 800127a:	7ffb      	ldrb	r3, [r7, #31]
 800127c:	2b80      	cmp	r3, #128	; 0x80
 800127e:	d10a      	bne.n	8001296 <main+0x5a6>
					my_motor_value[4] = 0;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <main+0x5bc>)
 8001282:	2200      	movs	r2, #0
 8001284:	811a      	strh	r2, [r3, #8]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2101      	movs	r1, #1
 800128a:	480b      	ldr	r0, [pc, #44]	; (80012b8 <main+0x5c8>)
 800128c:	f002 fe1a 	bl	8003ec4 <HAL_GPIO_WritePin>
					Press_order = 0;
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <main+0x5b8>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
				}
				//[10PPPPPP] : Val de consigne Pression, à récup SSI différente pour régulation au prochain tour de boucle
				Press_order = command_buffer ^ (2 << 6);
 8001296:	7ffb      	ldrb	r3, [r7, #31]
 8001298:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800129c:	43db      	mvns	r3, r3
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b01      	ldr	r3, [pc, #4]	; (80012a8 <main+0x5b8>)
 80012a2:	701a      	strb	r2, [r3, #0]

				break;
 80012a4:	e0f2      	b.n	800148c <main+0x79c>
 80012a6:	bf00      	nop
 80012a8:	20000194 	.word	0x20000194
 80012ac:	20000578 	.word	0x20000578
 80012b0:	200001a0 	.word	0x200001a0
 80012b4:	42700000 	.word	0x42700000
 80012b8:	48001400 	.word	0x48001400
 80012bc:	48000400 	.word	0x48000400
			case 3:
				//Mode 4 [11]: electrovannes OU LED OU Turbine OU LCD
				//cas 1 : Electrovannes
				if ((command_buffer & 240) >> 4 == 12){
 80012c0:	7ffb      	ldrb	r3, [r7, #31]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b0c      	cmp	r3, #12
 80012c8:	d12c      	bne.n	8001324 <main+0x634>
					//4*1 bits(ABCE) pour les EV (ordre du code : A: EV1<->PA7, B: EV2<->PA4, C: EV3<->PA3, E: EV_Purge<->PF0)
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, (command_buffer & 0x08) >> 3);
 80012ca:	7ffb      	ldrb	r3, [r7, #31]
 80012cc:	10db      	asrs	r3, r3, #3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012de:	f002 fdf1 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, (command_buffer & 0x04) >> 2);
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	109b      	asrs	r3, r3, #2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	2110      	movs	r1, #16
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f002 fde5 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, (command_buffer & 0x02) >> 1);
 80012fa:	7ffb      	ldrb	r3, [r7, #31]
 80012fc:	105b      	asrs	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	2108      	movs	r1, #8
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f002 fdd9 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOF, GPIO_PIN_0, command_buffer & 0x01);
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	2101      	movs	r1, #1
 800131e:	4861      	ldr	r0, [pc, #388]	; (80014a4 <main+0x7b4>)
 8001320:	f002 fdd0 	bl	8003ec4 <HAL_GPIO_WritePin>
				}

				//cas 2 : EV-Pulse [1101000Z] => [0] : rien, [1] pulse ON-OFF-ON 1*, avec intervalle t-pulse_OFF
				if ((command_buffer & 240) >> 4 == 13){
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b0d      	cmp	r3, #13
 800132c:	d16d      	bne.n	800140a <main+0x71a>

					//Pulse EV 1
					if ((command_buffer & 8) >> 3 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d016      	beq.n	8001366 <main+0x676>
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f002 fda9 	bl	8003e94 <HAL_GPIO_ReadPin>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00e      	beq.n	8001366 <main+0x676>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f002 fdb8 	bl	8003ec4 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 8001354:	2096      	movs	r0, #150	; 0x96
 8001356:	f001 f8ef 	bl	8002538 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2180      	movs	r1, #128	; 0x80
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f002 fdaf 	bl	8003ec4 <HAL_GPIO_WritePin>
					}
					//Pulse EV 2
					if ((command_buffer & 4) >> 2 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8001366:	7ffb      	ldrb	r3, [r7, #31]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d016      	beq.n	800139e <main+0x6ae>
 8001370:	2110      	movs	r1, #16
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f002 fd8d 	bl	8003e94 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00e      	beq.n	800139e <main+0x6ae>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2110      	movs	r1, #16
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f002 fd9c 	bl	8003ec4 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 800138c:	2096      	movs	r0, #150	; 0x96
 800138e:	f001 f8d3 	bl	8002538 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2110      	movs	r1, #16
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f002 fd93 	bl	8003ec4 <HAL_GPIO_WritePin>
					}
					//Pulse EV 3
					if ((command_buffer & 2) >> 1 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 800139e:	7ffb      	ldrb	r3, [r7, #31]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d016      	beq.n	80013d6 <main+0x6e6>
 80013a8:	2108      	movs	r1, #8
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ae:	f002 fd71 	bl	8003e94 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00e      	beq.n	80013d6 <main+0x6e6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2108      	movs	r1, #8
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f002 fd80 	bl	8003ec4 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 80013c4:	2096      	movs	r0, #150	; 0x96
 80013c6:	f001 f8b7 	bl	8002538 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2108      	movs	r1, #8
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d2:	f002 fd77 	bl	8003ec4 <HAL_GPIO_WritePin>
					}
					//Pulse EV Purge
					if ((command_buffer & 1) == 1 && HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_0)){
 80013d6:	7ffb      	ldrb	r3, [r7, #31]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d054      	beq.n	800148a <main+0x79a>
 80013e0:	2101      	movs	r1, #1
 80013e2:	4830      	ldr	r0, [pc, #192]	; (80014a4 <main+0x7b4>)
 80013e4:	f002 fd56 	bl	8003e94 <HAL_GPIO_ReadPin>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d04d      	beq.n	800148a <main+0x79a>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2101      	movs	r1, #1
 80013f2:	482c      	ldr	r0, [pc, #176]	; (80014a4 <main+0x7b4>)
 80013f4:	f002 fd66 	bl	8003ec4 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 80013f8:	2096      	movs	r0, #150	; 0x96
 80013fa:	f001 f89d 	bl	8002538 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 80013fe:	2201      	movs	r2, #1
 8001400:	2101      	movs	r1, #1
 8001402:	4828      	ldr	r0, [pc, #160]	; (80014a4 <main+0x7b4>)
 8001404:	f002 fd5e 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command_buffer & 2);

					//LED
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command_buffer & 1);
				}
				break;
 8001408:	e03f      	b.n	800148a <main+0x79a>
				else if ((command_buffer & 240) >> 4 == 14){
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	091b      	lsrs	r3, r3, #4
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b0e      	cmp	r3, #14
 8001412:	d120      	bne.n	8001456 <main+0x766>
					if ((command_buffer & 3) == 0){
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <main+0x736>
						my_motor_value[3] = 0;
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <main+0x7b8>)
 8001420:	2200      	movs	r2, #0
 8001422:	80da      	strh	r2, [r3, #6]
				break;
 8001424:	e031      	b.n	800148a <main+0x79a>
					else if ((command_buffer & 3) == 1){
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	f003 0303 	and.w	r3, r3, #3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d103      	bne.n	8001438 <main+0x748>
						my_motor_value[3] = TURBINE_SPEED_1;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <main+0x7b8>)
 8001432:	2264      	movs	r2, #100	; 0x64
 8001434:	80da      	strh	r2, [r3, #6]
				break;
 8001436:	e028      	b.n	800148a <main+0x79a>
					else if ((command_buffer & 3) == 2){
 8001438:	7ffb      	ldrb	r3, [r7, #31]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d104      	bne.n	800144c <main+0x75c>
						my_motor_value[3] = TURBINE_SPEED_2;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <main+0x7b8>)
 8001444:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001448:	80da      	strh	r2, [r3, #6]
				break;
 800144a:	e01e      	b.n	800148a <main+0x79a>
						my_motor_value[3] = TURBINE_SPEED_3;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <main+0x7b8>)
 800144e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001452:	80da      	strh	r2, [r3, #6]
				break;
 8001454:	e019      	b.n	800148a <main+0x79a>
				else if ((command_buffer & 240) >> 4 == 15){
 8001456:	7ffb      	ldrb	r3, [r7, #31]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d114      	bne.n	800148a <main+0x79a>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command_buffer & 2);
 8001460:	7ffb      	ldrb	r3, [r7, #31]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	2120      	movs	r1, #32
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <main+0x7bc>)
 800146e:	f002 fd29 	bl	8003ec4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command_buffer & 1);
 8001472:	7ffb      	ldrb	r3, [r7, #31]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	2110      	movs	r1, #16
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <main+0x7bc>)
 8001480:	f002 fd20 	bl	8003ec4 <HAL_GPIO_WritePin>
				break;
 8001484:	e001      	b.n	800148a <main+0x79a>
				break;
 8001486:	bf00      	nop
 8001488:	e000      	b.n	800148c <main+0x79c>
				break;
 800148a:	bf00      	nop
			}

			//Notifier à la Rpi la bonne réception du mot de commande
			return_buffer[1]|= 1;
 800148c:	7f7b      	ldrb	r3, [r7, #29]
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	777b      	strb	r3, [r7, #29]
 8001496:	e001      	b.n	800149c <main+0x7ac>
		}
		else {return_buffer[1]&= 0;}
 8001498:	2300      	movs	r3, #0
 800149a:	777b      	strb	r3, [r7, #29]
		//Retourner la potentielle erreur de COM avec la nucléo !

		//Retourner les infos à la Rpi !
		//HAL_UART_Transmit(&huart2, return_buffer, 2, 10);

		HAL_Delay(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f001 f84b 	bl	8002538 <HAL_Delay>
		AU_Current_Status = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 80014a2:	e490      	b.n	8000dc6 <main+0xd6>
 80014a4:	48001400 	.word	0x48001400
 80014a8:	20000578 	.word	0x20000578
 80014ac:	48000400 	.word	0x48000400

080014b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b096      	sub	sp, #88	; 0x58
 80014b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ba:	2228      	movs	r2, #40	; 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 fa78 	bl	80079b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e4:	2302      	movs	r3, #2
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e8:	2301      	movs	r3, #1
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ec:	2310      	movs	r3, #16
 80014ee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014f4:	2300      	movs	r3, #0
 80014f6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014fc:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001502:	4618      	mov	r0, r3
 8001504:	f003 f998 	bl	8004838 <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x62>
	{
		Error_Handler();
 800150e:	f000 fbcb 	bl	8001ca8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f004 f9c1 	bl	80058b4 <HAL_RCC_ClockConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8001538:	f000 fbb6 	bl	8001ca8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 800153c:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8001540:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	617b      	str	r3, [r7, #20]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fbe4 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 800155e:	f000 fba3 	bl	8001ca8 <Error_Handler>
	}
}
 8001562:	bf00      	nop
 8001564:	3758      	adds	r7, #88	; 0x58
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800158e:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <MX_ADC1_Init+0xdc>)
 8001590:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001594:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <MX_ADC1_Init+0xdc>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_ADC1_Init+0xdc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b6:	4b24      	ldr	r3, [pc, #144]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015d8:	2204      	movs	r2, #4
 80015da:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015e8:	4817      	ldr	r0, [pc, #92]	; (8001648 <MX_ADC1_Init+0xdc>)
 80015ea:	f000 ffc9 	bl	8002580 <HAL_ADC_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC1_Init+0x8c>
	{
		Error_Handler();
 80015f4:	f000 fb58 	bl	8001ca8 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_ADC1_Init+0xdc>)
 8001604:	f001 fda0 	bl	8003148 <HAL_ADCEx_MultiModeConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 800160e:	f000 fb4b 	bl	8001ca8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001612:	2301      	movs	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001616:	2301      	movs	r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	; (8001648 <MX_ADC1_Init+0xdc>)
 8001630:	f001 faca 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_ADC1_Init+0xd2>
	{
		Error_Handler();
 800163a:	f000 fb35 	bl	8001ca8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001a0 	.word	0x200001a0

0800164c <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_CAN_Init+0x60>)
 8001652:	4a17      	ldr	r2, [pc, #92]	; (80016b0 <MX_CAN_Init+0x64>)
 8001654:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_CAN_Init+0x60>)
 8001658:	2210      	movs	r2, #16
 800165a:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_CAN_Init+0x60>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_CAN_Init+0x60>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <MX_CAN_Init+0x60>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800166e:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_CAN_Init+0x60>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <MX_CAN_Init+0x60>)
 8001676:	2200      	movs	r2, #0
 8001678:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_CAN_Init+0x60>)
 800167c:	2200      	movs	r2, #0
 800167e:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_CAN_Init+0x60>)
 8001682:	2200      	movs	r2, #0
 8001684:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_CAN_Init+0x60>)
 8001688:	2200      	movs	r2, #0
 800168a:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_CAN_Init+0x60>)
 800168e:	2200      	movs	r2, #0
 8001690:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_CAN_Init+0x60>)
 8001694:	2200      	movs	r2, #0
 8001696:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_CAN_Init+0x60>)
 800169a:	f001 fee5 	bl	8003468 <HAL_CAN_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_CAN_Init+0x5c>
	{
		Error_Handler();
 80016a4:	f000 fb00 	bl	8001ca8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200001f0 	.word	0x200001f0
 80016b0:	40006400 	.word	0x40006400

080016b4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_I2C1_Init+0x78>)
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <MX_I2C1_Init+0x7c>)
 80016bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0000020C;
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <MX_I2C1_Init+0x78>)
 80016c0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80016c4:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_I2C1_Init+0x78>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_I2C1_Init+0x78>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_I2C1_Init+0x78>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_I2C1_Init+0x78>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_I2C1_Init+0x78>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_I2C1_Init+0x78>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_I2C1_Init+0x78>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016f0:	480e      	ldr	r0, [pc, #56]	; (800172c <MX_I2C1_Init+0x78>)
 80016f2:	f002 fc19 	bl	8003f28 <HAL_I2C_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80016fc:	f000 fad4 	bl	8001ca8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001704:	4809      	ldr	r0, [pc, #36]	; (800172c <MX_I2C1_Init+0x78>)
 8001706:	f002 ffdf 	bl	80046c8 <HAL_I2CEx_ConfigAnalogFilter>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_I2C1_Init+0x60>
	{
		Error_Handler();
 8001710:	f000 faca 	bl	8001ca8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001714:	2100      	movs	r1, #0
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_I2C1_Init+0x78>)
 8001718:	f003 f821 	bl	800475e <HAL_I2CEx_ConfigDigitalFilter>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_I2C1_Init+0x72>
	{
		Error_Handler();
 8001722:	f000 fac1 	bl	8001ca8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000218 	.word	0x20000218
 8001730:	40005400 	.word	0x40005400

08001734 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b096      	sub	sp, #88	; 0x58
 8001738:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	222c      	movs	r2, #44	; 0x2c
 800175e:	2100      	movs	r1, #0
 8001760:	4618      	mov	r0, r3
 8001762:	f006 f927 	bl	80079b4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <MX_TIM1_Init+0x118>)
 8001768:	4a39      	ldr	r2, [pc, #228]	; (8001850 <MX_TIM1_Init+0x11c>)
 800176a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <MX_TIM1_Init+0x118>)
 800176e:	2200      	movs	r2, #0
 8001770:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <MX_TIM1_Init+0x118>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001778:	4b34      	ldr	r3, [pc, #208]	; (800184c <MX_TIM1_Init+0x118>)
 800177a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <MX_TIM1_Init+0x118>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <MX_TIM1_Init+0x118>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <MX_TIM1_Init+0x118>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001792:	482e      	ldr	r0, [pc, #184]	; (800184c <MX_TIM1_Init+0x118>)
 8001794:	f004 fc9e 	bl	80060d4 <HAL_TIM_PWM_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 800179e:	f000 fa83 	bl	8001ca8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017b2:	4619      	mov	r1, r3
 80017b4:	4825      	ldr	r0, [pc, #148]	; (800184c <MX_TIM1_Init+0x118>)
 80017b6:	f005 fb71 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 80017c0:	f000 fa72 	bl	8001ca8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c4:	2360      	movs	r3, #96	; 0x60
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e4:	2200      	movs	r2, #0
 80017e6:	4619      	mov	r1, r3
 80017e8:	4818      	ldr	r0, [pc, #96]	; (800184c <MX_TIM1_Init+0x118>)
 80017ea:	f004 fed7 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 80017f4:	f000 fa58 	bl	8001ca8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800181a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	4807      	ldr	r0, [pc, #28]	; (800184c <MX_TIM1_Init+0x118>)
 800182e:	f005 fba3 	bl	8006f78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0x108>
	{
		Error_Handler();
 8001838:	f000 fa36 	bl	8001ca8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <MX_TIM1_Init+0x118>)
 800183e:	f000 fc7f 	bl	8002140 <HAL_TIM_MspPostInit>

}
 8001842:	bf00      	nop
 8001844:	3758      	adds	r7, #88	; 0x58
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000026c 	.word	0x2000026c
 8001850:	40012c00 	.word	0x40012c00

08001854 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001866:	463b      	mov	r3, r7
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
 8001874:	615a      	str	r2, [r3, #20]
 8001876:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MX_TIM2_Init+0xc4>)
 800187a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_TIM2_Init+0xc4>)
 8001882:	2200      	movs	r2, #0
 8001884:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b24      	ldr	r3, [pc, #144]	; (8001918 <MX_TIM2_Init+0xc4>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 800188c:	4b22      	ldr	r3, [pc, #136]	; (8001918 <MX_TIM2_Init+0xc4>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_TIM2_Init+0xc4>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_TIM2_Init+0xc4>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800189e:	481e      	ldr	r0, [pc, #120]	; (8001918 <MX_TIM2_Init+0xc4>)
 80018a0:	f004 fc18 	bl	80060d4 <HAL_TIM_PWM_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 80018aa:	f000 f9fd 	bl	8001ca8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4816      	ldr	r0, [pc, #88]	; (8001918 <MX_TIM2_Init+0xc4>)
 80018be:	f005 faed 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 80018c8:	f000 f9ee 	bl	8001ca8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	2360      	movs	r3, #96	; 0x60
 80018ce:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM2_Init+0xc4>)
 80018e4:	f004 fe5a 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 80018ee:	f000 f9db 	bl	8001ca8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	2208      	movs	r2, #8
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM2_Init+0xc4>)
 80018fa:	f004 fe4f 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001904:	f000 f9d0 	bl	8001ca8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM2_Init+0xc4>)
 800190a:	f000 fc19 	bl	8002140 <HAL_TIM_MspPostInit>

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002b8 	.word	0x200002b8

0800191c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <MX_TIM3_Init+0xc4>)
 8001942:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <MX_TIM3_Init+0xc8>)
 8001944:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <MX_TIM3_Init+0xc4>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <MX_TIM3_Init+0xc4>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <MX_TIM3_Init+0xc4>)
 8001954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001958:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <MX_TIM3_Init+0xc4>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <MX_TIM3_Init+0xc4>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001966:	481e      	ldr	r0, [pc, #120]	; (80019e0 <MX_TIM3_Init+0xc4>)
 8001968:	f004 fbb4 	bl	80060d4 <HAL_TIM_PWM_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM3_Init+0x5a>
	{
		Error_Handler();
 8001972:	f000 f999 	bl	8001ca8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4816      	ldr	r0, [pc, #88]	; (80019e0 <MX_TIM3_Init+0xc4>)
 8001986:	f005 fa89 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM3_Init+0x78>
	{
		Error_Handler();
 8001990:	f000 f98a 	bl	8001ca8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001994:	2360      	movs	r3, #96	; 0x60
 8001996:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a4:	463b      	mov	r3, r7
 80019a6:	2200      	movs	r2, #0
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <MX_TIM3_Init+0xc4>)
 80019ac:	f004 fdf6 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM3_Init+0x9e>
	{
		Error_Handler();
 80019b6:	f000 f977 	bl	8001ca8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019ba:	463b      	mov	r3, r7
 80019bc:	220c      	movs	r2, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM3_Init+0xc4>)
 80019c2:	f004 fdeb 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 80019cc:	f000 f96c 	bl	8001ca8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM3_Init+0xc4>)
 80019d2:	f000 fbb5 	bl	8002140 <HAL_TIM_MspPostInit>

}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	; 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000304 	.word	0x20000304
 80019e4:	40000400 	.word	0x40000400

080019e8 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_TIM6_Init+0x64>)
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <MX_TIM6_Init+0x68>)
 80019fc:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 1000;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a04:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 24;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a0e:	2218      	movs	r2, #24
 8001a10:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a1a:	f004 faa7 	bl	8005f6c <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001a24:	f000 f940 	bl	8001ca8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_TIM6_Init+0x64>)
 8001a36:	f005 fa31 	bl	8006e9c <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8001a40:	f000 f932 	bl	8001ca8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000350 	.word	0x20000350
 8001a50:	40001000 	.word	0x40001000

08001a54 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001a58:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a5a:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <MX_USART2_UART_Init+0x5c>)
 8001a5c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a64:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <MX_USART2_UART_Init+0x58>)
 8001a98:	f005 fb04 	bl	80070a4 <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001aa2:	f000 f901 	bl	8001ca8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200004f0 	.word	0x200004f0
 8001ab0:	40004400 	.word	0x40004400

08001ab4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <MX_DMA_Init+0x78>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <MX_DMA_Init+0x78>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6153      	str	r3, [r2, #20]
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <MX_DMA_Init+0x78>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	200b      	movs	r0, #11
 8001ad8:	f001 fe9d 	bl	8003816 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001adc:	200b      	movs	r0, #11
 8001ade:	f001 feb6 	bl	800384e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	200c      	movs	r0, #12
 8001ae8:	f001 fe95 	bl	8003816 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001aec:	200c      	movs	r0, #12
 8001aee:	f001 feae 	bl	800384e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	200d      	movs	r0, #13
 8001af8:	f001 fe8d 	bl	8003816 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001afc:	200d      	movs	r0, #13
 8001afe:	f001 fea6 	bl	800384e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	200f      	movs	r0, #15
 8001b08:	f001 fe85 	bl	8003816 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b0c:	200f      	movs	r0, #15
 8001b0e:	f001 fe9e 	bl	800384e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2010      	movs	r0, #16
 8001b18:	f001 fe7d 	bl	8003816 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b1c:	2010      	movs	r0, #16
 8001b1e:	f001 fe96 	bl	800384e <HAL_NVIC_EnableIRQ>

}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000

08001b30 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4a36      	ldr	r2, [pc, #216]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b50:	6153      	str	r3, [r2, #20]
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	6153      	str	r3, [r2, #20]
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	4b2b      	ldr	r3, [pc, #172]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	4a2a      	ldr	r2, [pc, #168]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	6153      	str	r3, [r2, #20]
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <MX_GPIO_Init+0xf4>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIO_Output_EV_P_GPIO_Port, GPIO_Output_EV_P_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
 8001b92:	4825      	ldr	r0, [pc, #148]	; (8001c28 <MX_GPIO_Init+0xf8>)
 8001b94:	f002 f996 	bl	8003ec4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2198      	movs	r1, #152	; 0x98
 8001b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba0:	f002 f990 	bl	8003ec4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2138      	movs	r1, #56	; 0x38
 8001ba8:	4820      	ldr	r0, [pc, #128]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001baa:	f002 f98b 	bl	8003ec4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : GPIO_Output_EV_P_Pin */
	GPIO_InitStruct.Pin = GPIO_Output_EV_P_Pin;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIO_Output_EV_P_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4818      	ldr	r0, [pc, #96]	; (8001c28 <MX_GPIO_Init+0xf8>)
 8001bc6:	f001 fff3 	bl	8003bb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_Input_AU_STATUS_Pin */
	GPIO_InitStruct.Pin = GPIO_Input_AU_STATUS_Pin;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Input_AU_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4812      	ldr	r0, [pc, #72]	; (8001c28 <MX_GPIO_Init+0xf8>)
 8001bde:	f001 ffe7 	bl	8003bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_Output_EV_3_Pin GPIO_Output_EV_2_Pin GPIO_Output_EV_1_Pin */
	GPIO_InitStruct.Pin = GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin;
 8001be2:	2398      	movs	r3, #152	; 0x98
 8001be4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfc:	f001 ffd8 	bl	8003bb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : Built_in_LED_Pin GPIO_Output_LED_EN_Pin GPIO_Output_LCD_EN_Pin */
	GPIO_InitStruct.Pin = Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin;
 8001c00:	2338      	movs	r3, #56	; 0x38
 8001c02:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	4619      	mov	r1, r3
 8001c16:	4805      	ldr	r0, [pc, #20]	; (8001c2c <MX_GPIO_Init+0xfc>)
 8001c18:	f001 ffca 	bl	8003bb0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	48001400 	.word	0x48001400
 8001c2c:	48000400 	.word	0x48000400

08001c30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d102      	bne.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		dshot_write(my_motor_value);
 8001c44:	4812      	ldr	r0, [pc, #72]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c46:	f7fe fe0b 	bl	8000860 <dshot_write>
	}
	//on start la tempo si le BAU est enclenché
	if (BAU_tick_enable == 1){
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d118      	bne.n	8001c84 <HAL_TIM_PeriodElapsedCallback+0x54>
		BAU_tick++;
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c5a:	6013      	str	r3, [r2, #0]
		// on purge quand on veut purger, 1000 => 1s
		if (BAU_tick > 120000){
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	dd0e      	ble.n	8001c84 <HAL_TIM_PeriodElapsedCallback+0x54>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001c66:	2108      	movs	r1, #8
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c6a:	f002 f943 	bl	8003ef4 <HAL_GPIO_TogglePin>
			BAU_tick = 0;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8001c74:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c80:	f002 f920 	bl	8003ec4 <HAL_GPIO_WritePin>
		}
	}
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000350 	.word	0x20000350
 8001c90:	20000578 	.word	0x20000578
 8001c94:	2000019c 	.word	0x2000019c
 8001c98:	20000198 	.word	0x20000198
 8001c9c:	0001d4c0 	.word	0x0001d4c0
 8001ca0:	48000400 	.word	0x48000400
 8001ca4:	48001400 	.word	0x48001400

08001ca8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <Error_Handler+0x8>
	...

08001cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6193      	str	r3, [r2, #24]
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a08      	ldr	r2, [pc, #32]	; (8001cf8 <HAL_MspInit+0x44>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_MspInit+0x44>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d1c:	d124      	bne.n	8001d68 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_ADC_MspInit+0x74>)
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <HAL_ADC_MspInit+0x74>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6153      	str	r3, [r2, #20]
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_ADC_MspInit+0x74>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_ADC_MspInit+0x74>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <HAL_ADC_MspInit+0x74>)
 8001d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d40:	6153      	str	r3, [r2, #20]
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_ADC_MspInit+0x74>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_A_TEMP_Pin|ADC1_IN2_A_PRES_Pin;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d52:	2303      	movs	r3, #3
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d64:	f001 ff24 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d68:	bf00      	nop
 8001d6a:	3728      	adds	r7, #40	; 0x28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a18      	ldr	r2, [pc, #96]	; (8001df4 <HAL_CAN_MspInit+0x80>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d129      	bne.n	8001dea <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_CAN_MspInit+0x84>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_CAN_MspInit+0x84>)
 8001d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001da0:	61d3      	str	r3, [r2, #28]
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <HAL_CAN_MspInit+0x84>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_CAN_MspInit+0x84>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	4a11      	ldr	r2, [pc, #68]	; (8001df8 <HAL_CAN_MspInit+0x84>)
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	6153      	str	r3, [r2, #20]
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_CAN_MspInit+0x84>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RD_Pin|CAN_TD_Pin;
 8001dc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001dd8:	2309      	movs	r3, #9
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de6:	f001 fee3 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40006400 	.word	0x40006400
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_I2C_MspInit+0x8c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12f      	bne.n	8001e7e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_I2C_MspInit+0x90>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <HAL_I2C_MspInit+0x90>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6153      	str	r3, [r2, #20]
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_I2C_MspInit+0x90>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e36:	23c0      	movs	r3, #192	; 0xc0
 8001e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3a:	2312      	movs	r3, #18
 8001e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e46:	2304      	movs	r3, #4
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480f      	ldr	r0, [pc, #60]	; (8001e90 <HAL_I2C_MspInit+0x94>)
 8001e52:	f001 fead 	bl	8003bb0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001e56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001e5a:	f002 fccd 	bl	80047f8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001e5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e62:	f002 fcc9 	bl	80047f8 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e66:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_I2C_MspInit+0x90>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <HAL_I2C_MspInit+0x90>)
 8001e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e70:	61d3      	str	r3, [r2, #28]
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_I2C_MspInit+0x90>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40005400 	.word	0x40005400
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	48000400 	.word	0x48000400

08001e94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a87      	ldr	r2, [pc, #540]	; (80020c0 <HAL_TIM_PWM_MspInit+0x22c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d135      	bne.n	8001f12 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea6:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a86      	ldr	r2, [pc, #536]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b84      	ldr	r3, [pc, #528]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001ebe:	4b82      	ldr	r3, [pc, #520]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ec0:	4a82      	ldr	r2, [pc, #520]	; (80020cc <HAL_TIM_PWM_MspInit+0x238>)
 8001ec2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec4:	4b80      	ldr	r3, [pc, #512]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eca:	4b7f      	ldr	r3, [pc, #508]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ed0:	4b7d      	ldr	r3, [pc, #500]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ed6:	4b7c      	ldr	r3, [pc, #496]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001edc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ede:	4b7a      	ldr	r3, [pc, #488]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001ee6:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001eec:	4b76      	ldr	r3, [pc, #472]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001eee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001ef4:	4874      	ldr	r0, [pc, #464]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ef6:	f001 fcc4 	bl	8003882 <HAL_DMA_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8001f00:	f7ff fed2 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a70      	ldr	r2, [pc, #448]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
 8001f0a:	4a6f      	ldr	r2, [pc, #444]	; (80020c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f10:	e0d2      	b.n	80020b8 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1a:	d15e      	bne.n	8001fda <HAL_TIM_PWM_MspInit+0x146>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f1c:	4b69      	ldr	r3, [pc, #420]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	4a68      	ldr	r2, [pc, #416]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	61d3      	str	r3, [r2, #28]
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001f34:	4b66      	ldr	r3, [pc, #408]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f36:	4a67      	ldr	r2, [pc, #412]	; (80020d4 <HAL_TIM_PWM_MspInit+0x240>)
 8001f38:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f3a:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f40:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f46:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f4c:	4b60      	ldr	r3, [pc, #384]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f52:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f54:	4b5e      	ldr	r3, [pc, #376]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f5a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001f5c:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f62:	4b5b      	ldr	r3, [pc, #364]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f68:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001f6a:	4859      	ldr	r0, [pc, #356]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f6c:	f001 fc89 	bl	8003882 <HAL_DMA_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_TIM_PWM_MspInit+0xe6>
      Error_Handler();
 8001f76:	f7ff fe97 	bl	8001ca8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f80:	4a53      	ldr	r2, [pc, #332]	; (80020d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001f86:	4b54      	ldr	r3, [pc, #336]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001f88:	4a54      	ldr	r2, [pc, #336]	; (80020dc <HAL_TIM_PWM_MspInit+0x248>)
 8001f8a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8c:	4b52      	ldr	r3, [pc, #328]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001f8e:	2210      	movs	r2, #16
 8001f90:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f92:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001f98:	4b4f      	ldr	r3, [pc, #316]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f9e:	4b4e      	ldr	r3, [pc, #312]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fa6:	4b4c      	ldr	r3, [pc, #304]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001fb4:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001fbc:	4846      	ldr	r0, [pc, #280]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001fbe:	f001 fc60 	bl	8003882 <HAL_DMA_Init>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_PWM_MspInit+0x138>
      Error_Handler();
 8001fc8:	f7ff fe6e 	bl	8001ca8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a42      	ldr	r2, [pc, #264]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fd2:	4a41      	ldr	r2, [pc, #260]	; (80020d8 <HAL_TIM_PWM_MspInit+0x244>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001fd8:	e06e      	b.n	80020b8 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM3)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <HAL_TIM_PWM_MspInit+0x24c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d169      	bne.n	80020b8 <HAL_TIM_PWM_MspInit+0x224>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe4:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	61d3      	str	r3, [r2, #28]
 8001ff0:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8001ffe:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <HAL_TIM_PWM_MspInit+0x254>)
 8002000:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002004:	2210      	movs	r2, #16
 8002006:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002014:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002016:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 800201e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002022:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002024:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 800202c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002030:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002032:	482c      	ldr	r0, [pc, #176]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002034:	f001 fc25 	bl	8003882 <HAL_DMA_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_TIM_PWM_MspInit+0x1ae>
      Error_Handler();
 800203e:	f7ff fe33 	bl	8001ca8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
 8002054:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 800205c:	4a24      	ldr	r2, [pc, #144]	; (80020f0 <HAL_TIM_PWM_MspInit+0x25c>)
 800205e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 8002062:	2210      	movs	r2, #16
 8002064:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 8002074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002078:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 800207c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002080:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 800208a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800208e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002090:	4816      	ldr	r0, [pc, #88]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 8002092:	f001 fbf6 	bl	8003882 <HAL_DMA_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_TIM_PWM_MspInit+0x20c>
      Error_Handler();
 800209c:	f7ff fe04 	bl	8001ca8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
 80020a6:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 80020b0:	621a      	str	r2, [r3, #32]
 80020b2:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_TIM_PWM_MspInit+0x258>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80020b8:	bf00      	nop
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40021000 	.word	0x40021000
 80020c8:	2000039c 	.word	0x2000039c
 80020cc:	4002001c 	.word	0x4002001c
 80020d0:	200003e0 	.word	0x200003e0
 80020d4:	40020058 	.word	0x40020058
 80020d8:	20000424 	.word	0x20000424
 80020dc:	40020008 	.word	0x40020008
 80020e0:	40000400 	.word	0x40000400
 80020e4:	20000468 	.word	0x20000468
 80020e8:	4002006c 	.word	0x4002006c
 80020ec:	200004ac 	.word	0x200004ac
 80020f0:	40020030 	.word	0x40020030

080020f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_TIM_Base_MspInit+0x44>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d113      	bne.n	800212e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_TIM_Base_MspInit+0x48>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a0c      	ldr	r2, [pc, #48]	; (800213c <HAL_TIM_Base_MspInit+0x48>)
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_TIM_Base_MspInit+0x48>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2036      	movs	r0, #54	; 0x36
 8002124:	f001 fb77 	bl	8003816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002128:	2036      	movs	r0, #54	; 0x36
 800212a:	f001 fb90 	bl	800384e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40001000 	.word	0x40001000
 800213c:	40021000 	.word	0x40021000

08002140 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	; 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_TIM_MspPostInit+0x150>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11e      	bne.n	80021a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	4a4b      	ldr	r2, [pc, #300]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 8002168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216c:	6153      	str	r3, [r2, #20]
 800216e:	4b49      	ldr	r3, [pc, #292]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_DS_M3_Pin;
 800217a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002188:	2300      	movs	r3, #0
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800218c:	2306      	movs	r3, #6
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH1_DS_M3_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219a:	f001 fd09 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800219e:	e072      	b.n	8002286 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d12f      	bne.n	800220a <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4a39      	ldr	r2, [pc, #228]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	6153      	str	r3, [r2, #20]
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_DS_COMP_Pin;
 80021c2:	2320      	movs	r3, #32
 80021c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021d2:	2301      	movs	r3, #1
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_DS_COMP_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e0:	f001 fce6 	bl	8003bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_DS_M1_Pin;
 80021e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80021f6:	230a      	movs	r3, #10
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_DS_M1_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002204:	f001 fcd4 	bl	8003bb0 <HAL_GPIO_Init>
}
 8002208:	e03d      	b.n	8002286 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a22      	ldr	r2, [pc, #136]	; (8002298 <HAL_TIM_MspPostInit+0x158>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d138      	bne.n	8002286 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 800221a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221e:	6153      	str	r3, [r2, #20]
 8002220:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 8002232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002236:	6153      	str	r3, [r2, #20]
 8002238:	4b16      	ldr	r3, [pc, #88]	; (8002294 <HAL_TIM_MspPostInit+0x154>)
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_DS_TURB_Pin;
 8002244:	2340      	movs	r3, #64	; 0x40
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002250:	2300      	movs	r3, #0
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002254:	2302      	movs	r3, #2
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_DS_TURB_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 031c 	add.w	r3, r7, #28
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002262:	f001 fca5 	bl	8003bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4_DS_M2_Pin;
 8002266:	2302      	movs	r3, #2
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002276:	2302      	movs	r3, #2
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH4_DS_M2_GPIO_Port, &GPIO_InitStruct);
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	4619      	mov	r1, r3
 8002280:	4806      	ldr	r0, [pc, #24]	; (800229c <HAL_TIM_MspPostInit+0x15c>)
 8002282:	f001 fc95 	bl	8003bb0 <HAL_GPIO_Init>
}
 8002286:	bf00      	nop
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40012c00 	.word	0x40012c00
 8002294:	40021000 	.word	0x40021000
 8002298:	40000400 	.word	0x40000400
 800229c:	48000400 	.word	0x48000400

080022a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	; 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a18      	ldr	r2, [pc, #96]	; (8002320 <HAL_UART_MspInit+0x80>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d129      	bne.n	8002316 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_UART_MspInit+0x84>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_UART_MspInit+0x84>)
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	61d3      	str	r3, [r2, #28]
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_UART_MspInit+0x84>)
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_UART_MspInit+0x84>)
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	4a11      	ldr	r2, [pc, #68]	; (8002324 <HAL_UART_MspInit+0x84>)
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e4:	6153      	str	r3, [r2, #20]
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_UART_MspInit+0x84>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80022f2:	f248 0304 	movw	r3, #32772	; 0x8004
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002300:	2303      	movs	r3, #3
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002304:	2307      	movs	r3, #7
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002312:	f001 fc4d 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002316:	bf00      	nop
 8002318:	3728      	adds	r7, #40	; 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40004400 	.word	0x40004400
 8002324:	40021000 	.word	0x40021000

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002374:	f000 f8c0 	bl	80024f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <DMA1_Channel1_IRQHandler+0x10>)
 8002382:	f001 fb24 	bl	80039ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000424 	.word	0x20000424

08002390 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <DMA1_Channel2_IRQHandler+0x10>)
 8002396:	f001 fb1a 	bl	80039ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000039c 	.word	0x2000039c

080023a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <DMA1_Channel3_IRQHandler+0x10>)
 80023aa:	f001 fb10 	bl	80039ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200004ac 	.word	0x200004ac

080023b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <DMA1_Channel5_IRQHandler+0x10>)
 80023be:	f001 fb06 	bl	80039ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200003e0 	.word	0x200003e0

080023cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Channel6_IRQHandler+0x10>)
 80023d2:	f001 fafc 	bl	80039ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000468 	.word	0x20000468

080023e0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <TIM6_DAC1_IRQHandler+0x10>)
 80023e6:	f003 ffb9 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000350 	.word	0x20000350

080023f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <SystemInit+0x20>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	4a05      	ldr	r2, [pc, #20]	; (8002414 <SystemInit+0x20>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002450 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800241c:	f7ff ffea 	bl	80023f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <LoopForever+0x6>)
  ldr r1, =_edata
 8002422:	490d      	ldr	r1, [pc, #52]	; (8002458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <LoopForever+0xe>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002438:	4c0a      	ldr	r4, [pc, #40]	; (8002464 <LoopForever+0x16>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002446:	f005 fa91 	bl	800796c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800244a:	f7fe fc51 	bl	8000cf0 <main>

0800244e <LoopForever>:

LoopForever:
    b LoopForever
 800244e:	e7fe      	b.n	800244e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002450:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800245c:	08007aa4 	.word	0x08007aa4
  ldr r2, =_sbss
 8002460:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002464:	20000588 	.word	0x20000588

08002468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC1_2_IRQHandler>
	...

0800246c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_Init+0x28>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_Init+0x28>)
 8002476:	f043 0310 	orr.w	r3, r3, #16
 800247a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247c:	2003      	movs	r0, #3
 800247e:	f001 f9bf 	bl	8003800 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002482:	2003      	movs	r0, #3
 8002484:	f000 f808 	bl	8002498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002488:	f7ff fc14 	bl	8001cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000

08002498 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x54>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x58>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 f9d7 	bl	800386a <HAL_SYSTICK_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00e      	b.n	80024e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d80a      	bhi.n	80024e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024cc:	2200      	movs	r2, #0
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f001 f99f 	bl	8003816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <HAL_InitTick+0x5c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000000 	.word	0x20000000
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000004 	.word	0x20000004

080024f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_IncTick+0x20>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x24>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a04      	ldr	r2, [pc, #16]	; (800251c <HAL_IncTick+0x24>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008
 800251c:	20000584 	.word	0x20000584

08002520 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return uwTick;  
 8002524:	4b03      	ldr	r3, [pc, #12]	; (8002534 <HAL_GetTick+0x14>)
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000584 	.word	0x20000584

08002538 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002540:	f7ff ffee 	bl	8002520 <HAL_GetTick>
 8002544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d005      	beq.n	800255e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_Delay+0x44>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800255e:	bf00      	nop
 8002560:	f7ff ffde 	bl	8002520 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	429a      	cmp	r2, r3
 800256e:	d8f7      	bhi.n	8002560 <HAL_Delay+0x28>
  {
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000008 	.word	0x20000008

08002580 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b09a      	sub	sp, #104	; 0x68
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e172      	b.n	8002886 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d176      	bne.n	80026a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d152      	bne.n	8002660 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fb91 	bl	8001cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d13b      	bne.n	8002660 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fed7 	bl	800339c <ADC_Disable>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d12f      	bne.n	8002660 <HAL_ADC_Init+0xe0>
 8002600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002604:	2b00      	cmp	r3, #0
 8002606:	d12b      	bne.n	8002660 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002610:	f023 0302 	bic.w	r3, r3, #2
 8002614:	f043 0202 	orr.w	r2, r3, #2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800262a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800263a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800263c:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_ADC_Init+0x310>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a94      	ldr	r2, [pc, #592]	; (8002894 <HAL_ADC_Init+0x314>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9a      	lsrs	r2, r3, #18
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002652:	e002      	b.n	800265a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	3b01      	subs	r3, #1
 8002658:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f9      	bne.n	8002654 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d007      	beq.n	800267e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800267c:	d110      	bne.n	80026a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f023 0312 	bic.w	r3, r3, #18
 8002686:	f043 0210 	orr.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 80df 	bne.w	800286c <HAL_ADC_Init+0x2ec>
 80026ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 80da 	bne.w	800286c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 80d2 	bne.w	800286c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026d0:	f043 0202 	orr.w	r2, r3, #2
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d8:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <HAL_ADC_Init+0x318>)
 80026da:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e4:	d102      	bne.n	80026ec <HAL_ADC_Init+0x16c>
 80026e6:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_ADC_Init+0x31c>)
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_Init+0x172>
 80026ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026f0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d108      	bne.n	8002712 <HAL_ADC_Init+0x192>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADC_Init+0x192>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_ADC_Init+0x194>
 8002712:	2300      	movs	r3, #0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d11c      	bne.n	8002752 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002718:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800271a:	2b00      	cmp	r3, #0
 800271c:	d010      	beq.n	8002740 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_ADC_Init+0x1ba>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x1ba>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_ADC_Init+0x1bc>
 800273a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800273c:	2b00      	cmp	r3, #0
 800273e:	d108      	bne.n	8002752 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	431a      	orrs	r2, r3
 800274e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002750:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7e5b      	ldrb	r3, [r3, #25]
 8002756:	035b      	lsls	r3, r3, #13
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800275c:	2a01      	cmp	r2, #1
 800275e:	d002      	beq.n	8002766 <HAL_ADC_Init+0x1e6>
 8002760:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002764:	e000      	b.n	8002768 <HAL_ADC_Init+0x1e8>
 8002766:	2200      	movs	r2, #0
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4313      	orrs	r3, r2
 8002776:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002778:	4313      	orrs	r3, r2
 800277a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d11b      	bne.n	80027be <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7e5b      	ldrb	r3, [r3, #25]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d109      	bne.n	80027a2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	3b01      	subs	r3, #1
 8002794:	045a      	lsls	r2, r3, #17
 8002796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002798:	4313      	orrs	r3, r2
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	663b      	str	r3, [r7, #96]	; 0x60
 80027a0:	e00d      	b.n	80027be <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d007      	beq.n	80027d6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	4313      	orrs	r3, r2
 80027d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027d2:	4313      	orrs	r3, r2
 80027d4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d114      	bne.n	800280e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027f2:	f023 0302 	bic.w	r3, r3, #2
 80027f6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e1b      	ldrb	r3, [r3, #24]
 80027fc:	039a      	lsls	r2, r3, #14
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4313      	orrs	r3, r2
 8002808:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800280a:	4313      	orrs	r3, r2
 800280c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <HAL_ADC_Init+0x320>)
 8002816:	4013      	ands	r3, r2
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800281e:	430b      	orrs	r3, r1
 8002820:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10c      	bne.n	8002844 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	f023 010f 	bic.w	r1, r3, #15
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
 8002842:	e007      	b.n	8002854 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 020f 	bic.w	r2, r2, #15
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f023 0303 	bic.w	r3, r3, #3
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
 800286a:	e00a      	b.n	8002882 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	f023 0312 	bic.w	r3, r3, #18
 8002874:	f043 0210 	orr.w	r2, r3, #16
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800287c:	2301      	movs	r3, #1
 800287e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002882:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002886:	4618      	mov	r0, r3
 8002888:	3768      	adds	r7, #104	; 0x68
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000000 	.word	0x20000000
 8002894:	431bde83 	.word	0x431bde83
 8002898:	50000300 	.word	0x50000300
 800289c:	50000100 	.word	0x50000100
 80028a0:	fff0c007 	.word	0xfff0c007

080028a4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0304 	and.w	r3, r3, #4
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 809c 	bne.w	80029f8 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Start+0x2a>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e097      	b.n	80029fe <HAL_ADC_Start+0x15a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fcfc 	bl	80032d4 <ADC_Enable>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 8083 	bne.w	80029ee <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028fc:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <HAL_ADC_Start+0x164>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	2b00      	cmp	r3, #0
 8002906:	d004      	beq.n	8002912 <HAL_ADC_Start+0x6e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002910:	d115      	bne.n	800293e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d027      	beq.n	800297c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002934:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800293c:	e01e      	b.n	800297c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002952:	d004      	beq.n	800295e <HAL_ADC_Start+0xba>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <HAL_ADC_Start+0x168>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10e      	bne.n	800297c <HAL_ADC_Start+0xd8>
 800295e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002974:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d106      	bne.n	8002998 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f023 0206 	bic.w	r2, r3, #6
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
 8002996:	e002      	b.n	800299e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	221c      	movs	r2, #28
 80029ac:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029ae:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_ADC_Start+0x164>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d010      	beq.n	80029dc <HAL_ADC_Start+0x138>
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_ADC_Start+0x164>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d00a      	beq.n	80029dc <HAL_ADC_Start+0x138>
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_ADC_Start+0x164>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d004      	beq.n	80029dc <HAL_ADC_Start+0x138>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029da:	d10f      	bne.n	80029fc <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0204 	orr.w	r2, r2, #4
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e006      	b.n	80029fc <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029f6:	e001      	b.n	80029fc <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
 80029fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	50000300 	.word	0x50000300
 8002a0c:	50000100 	.word	0x50000100

08002a10 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d102      	bne.n	8002a2c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002a26:	2308      	movs	r3, #8
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e02e      	b.n	8002a8a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_ADC_PollForConversion+0x198>)
 8002a2e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d112      	bne.n	8002a62 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d11d      	bne.n	8002a86 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e09d      	b.n	8002b9e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e08b      	b.n	8002b9e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002a86:	230c      	movs	r3, #12
 8002a88:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_ADC_PollForConversion+0x198>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 031f 	and.w	r3, r3, #31
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADC_PollForConversion+0x90>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a9e:	d104      	bne.n	8002aaa <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	e003      	b.n	8002ab2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002aaa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002ab2:	f7ff fd35 	bl	8002520 <HAL_GetTick>
 8002ab6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ab8:	e021      	b.n	8002afe <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d01d      	beq.n	8002afe <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_ADC_PollForConversion+0xc8>
 8002ac8:	f7ff fd2a 	bl	8002520 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d212      	bcs.n	8002afe <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e04f      	b.n	8002b9e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0d6      	beq.n	8002aba <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d131      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d12c      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d125      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d112      	bne.n	8002b72 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d112      	bne.n	8002b8a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b70:	e00b      	b.n	8002b8a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	50000300 	.word	0x50000300

08002bac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b09b      	sub	sp, #108	; 0x6c
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x22>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e2a4      	b.n	8003134 <HAL_ADC_ConfigChannel+0x56c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f040 8288 	bne.w	8003112 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d81c      	bhi.n	8002c44 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	231f      	movs	r3, #31
 8002c20:	4093      	lsls	r3, r2
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4019      	ands	r1, r3
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4413      	add	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30
 8002c42:	e063      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	d81e      	bhi.n	8002c8a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	3b1e      	subs	r3, #30
 8002c60:	221f      	movs	r2, #31
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	4019      	ands	r1, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	3b1e      	subs	r3, #30
 8002c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
 8002c88:	e040      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b0e      	cmp	r3, #14
 8002c90:	d81e      	bhi.n	8002cd0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	3b3c      	subs	r3, #60	; 0x3c
 8002ca6:	221f      	movs	r2, #31
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4019      	ands	r1, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	3b3c      	subs	r3, #60	; 0x3c
 8002cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8002cce:	e01d      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4413      	add	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	3b5a      	subs	r3, #90	; 0x5a
 8002ce4:	221f      	movs	r2, #31
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	4019      	ands	r1, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4413      	add	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	3b5a      	subs	r3, #90	; 0x5a
 8002d00:	fa00 f203 	lsl.w	r2, r0, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 80e5 	bne.w	8002ee6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d91c      	bls.n	8002d5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6999      	ldr	r1, [r3, #24]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	3b1e      	subs	r3, #30
 8002d36:	2207      	movs	r2, #7
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	4019      	ands	r1, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6898      	ldr	r0, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b1e      	subs	r3, #30
 8002d50:	fa00 f203 	lsl.w	r2, r0, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	619a      	str	r2, [r3, #24]
 8002d5c:	e019      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6959      	ldr	r1, [r3, #20]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	4413      	add	r3, r2
 8002d6e:	2207      	movs	r2, #7
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	4019      	ands	r1, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	6898      	ldr	r0, [r3, #8]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	08db      	lsrs	r3, r3, #3
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d84f      	bhi.n	8002e54 <HAL_ADC_ConfigChannel+0x28c>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <HAL_ADC_ConfigChannel+0x1f4>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002dcd 	.word	0x08002dcd
 8002dc0:	08002def 	.word	0x08002def
 8002dc4:	08002e11 	.word	0x08002e11
 8002dc8:	08002e33 	.word	0x08002e33
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dd2:	4b94      	ldr	r3, [pc, #592]	; (8003024 <HAL_ADC_ConfigChannel+0x45c>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	0691      	lsls	r1, r2, #26
 8002ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dde:	430a      	orrs	r2, r1
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002dea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002dec:	e07e      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002df4:	4b8b      	ldr	r3, [pc, #556]	; (8003024 <HAL_ADC_ConfigChannel+0x45c>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	0691      	lsls	r1, r2, #26
 8002dfe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e00:	430a      	orrs	r2, r1
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e0c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e0e:	e06d      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e16:	4b83      	ldr	r3, [pc, #524]	; (8003024 <HAL_ADC_ConfigChannel+0x45c>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	0691      	lsls	r1, r2, #26
 8002e20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e22:	430a      	orrs	r2, r1
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e2e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e30:	e05c      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e38:	4b7a      	ldr	r3, [pc, #488]	; (8003024 <HAL_ADC_ConfigChannel+0x45c>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	0691      	lsls	r1, r2, #26
 8002e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e44:	430a      	orrs	r2, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e50:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e52:	e04b      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	069b      	lsls	r3, r3, #26
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d107      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e76:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	069b      	lsls	r3, r3, #26
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e9a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ebe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d10a      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ee2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002ee4:	e001      	b.n	8002eea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <HAL_ADC_ConfigChannel+0x324>
      break;
 8002eea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d108      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x344>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x344>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x346>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 810a 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d00f      	beq.n	8002f3c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	400a      	ands	r2, r1
 8002f36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f3a:	e049      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	409a      	lsls	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b09      	cmp	r3, #9
 8002f5c:	d91c      	bls.n	8002f98 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6999      	ldr	r1, [r3, #24]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3b1b      	subs	r3, #27
 8002f70:	2207      	movs	r2, #7
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	4019      	ands	r1, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	6898      	ldr	r0, [r3, #8]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	3b1b      	subs	r3, #27
 8002f8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	619a      	str	r2, [r3, #24]
 8002f96:	e01b      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6959      	ldr	r1, [r3, #20]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	2207      	movs	r2, #7
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	4019      	ands	r1, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6898      	ldr	r0, [r3, #8]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd0:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_ADC_ConfigChannel+0x460>)
 8002fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d105      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d015      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002fec:	2b11      	cmp	r3, #17
 8002fee:	d105      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003000:	2b12      	cmp	r3, #18
 8003002:	f040 8091 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 808a 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800301c:	d108      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x468>
 800301e:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_ADC_ConfigChannel+0x464>)
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e008      	b.n	8003036 <HAL_ADC_ConfigChannel+0x46e>
 8003024:	83fff000 	.word	0x83fff000
 8003028:	50000300 	.word	0x50000300
 800302c:	50000100 	.word	0x50000100
 8003030:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003034:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d108      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x48e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_ADC_ConfigChannel+0x48e>
 8003052:	2301      	movs	r3, #1
 8003054:	e000      	b.n	8003058 <HAL_ADC_ConfigChannel+0x490>
 8003056:	2300      	movs	r3, #0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d150      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800305c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800305e:	2b00      	cmp	r3, #0
 8003060:	d010      	beq.n	8003084 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <HAL_ADC_ConfigChannel+0x4b6>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_ADC_ConfigChannel+0x4b6>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_ADC_ConfigChannel+0x4b8>
 800307e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003080:	2b00      	cmp	r3, #0
 8003082:	d13c      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b10      	cmp	r3, #16
 800308a:	d11d      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x500>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003094:	d118      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800309e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030a2:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_ADC_ConfigChannel+0x578>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a27      	ldr	r2, [pc, #156]	; (8003144 <HAL_ADC_ConfigChannel+0x57c>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	0c9a      	lsrs	r2, r3, #18
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030b8:	e002      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3b01      	subs	r3, #1
 80030be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f9      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030c6:	e02e      	b.n	8003126 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b11      	cmp	r3, #17
 80030ce:	d10b      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x520>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d8:	d106      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80030da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80030e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030e6:	e01e      	b.n	8003126 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b12      	cmp	r3, #18
 80030ee:	d11a      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80030f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030fa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030fc:	e013      	b.n	8003126 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003110:	e00a      	b.n	8003128 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f043 0220 	orr.w	r2, r3, #32
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003124:	e000      	b.n	8003128 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003126:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003130:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003134:	4618      	mov	r0, r3
 8003136:	376c      	adds	r7, #108	; 0x6c
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	20000000 	.word	0x20000000
 8003144:	431bde83 	.word	0x431bde83

08003148 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003148:	b480      	push	{r7}
 800314a:	b099      	sub	sp, #100	; 0x64
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003160:	d102      	bne.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003162:	4b5a      	ldr	r3, [pc, #360]	; (80032cc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	e002      	b.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8003168:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800316c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0a2      	b.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003182:	2302      	movs	r3, #2
 8003184:	e09b      	b.n	80032be <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d17f      	bne.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d179      	bne.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a8:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80031aa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d040      	beq.n	8003236 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80031b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031c6:	035b      	lsls	r3, r3, #13
 80031c8:	430b      	orrs	r3, r1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ce:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d108      	bne.n	80031f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80031f0:	2300      	movs	r3, #0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d15c      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d107      	bne.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003212:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003214:	2b00      	cmp	r3, #0
 8003216:	d14b      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003218:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003220:	f023 030f 	bic.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	6811      	ldr	r1, [r2, #0]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	6892      	ldr	r2, [r2, #8]
 800322c:	430a      	orrs	r2, r1
 800322e:	431a      	orrs	r2, r3
 8003230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003232:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003234:	e03c      	b.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800323e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003240:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d108      	bne.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d123      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003284:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003286:	2b00      	cmp	r3, #0
 8003288:	d112      	bne.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800328a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003292:	f023 030f 	bic.w	r3, r3, #15
 8003296:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003298:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800329a:	e009      	b.n	80032b0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80032ae:	e000      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032b0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80032ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80032be:	4618      	mov	r0, r3
 80032c0:	3764      	adds	r7, #100	; 0x64
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	50000100 	.word	0x50000100
 80032d0:	50000300 	.word	0x50000300

080032d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d108      	bne.n	8003300 <ADC_Enable+0x2c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <ADC_Enable+0x2c>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <ADC_Enable+0x2e>
 8003300:	2300      	movs	r3, #0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d143      	bne.n	800338e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <ADC_Enable+0xc4>)
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f043 0210 	orr.w	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e02f      	b.n	8003390 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003340:	f7ff f8ee 	bl	8002520 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003346:	e01b      	b.n	8003380 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003348:	f7ff f8ea 	bl	8002520 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d914      	bls.n	8003380 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d00d      	beq.n	8003380 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0210 	orr.w	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e007      	b.n	8003390 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d1dc      	bne.n	8003348 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	8000003f 	.word	0x8000003f

0800339c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d108      	bne.n	80033c8 <ADC_Disable+0x2c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <ADC_Disable+0x2c>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <ADC_Disable+0x2e>
 80033c8:	2300      	movs	r3, #0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d047      	beq.n	800345e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030d 	and.w	r3, r3, #13
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d10f      	bne.n	80033fc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0202 	orr.w	r2, r2, #2
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2203      	movs	r2, #3
 80033f2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80033f4:	f7ff f894 	bl	8002520 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033fa:	e029      	b.n	8003450 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	f043 0210 	orr.w	r2, r3, #16
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e023      	b.n	8003460 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003418:	f7ff f882 	bl	8002520 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d914      	bls.n	8003450 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10d      	bne.n	8003450 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f043 0210 	orr.w	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e007      	b.n	8003460 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d0dc      	beq.n	8003418 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0ed      	b.n	8003656 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fe fc74 	bl	8001d74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800349c:	f7ff f840 	bl	8002520 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034a2:	e012      	b.n	80034ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034a4:	f7ff f83c 	bl	8002520 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b0a      	cmp	r3, #10
 80034b0:	d90b      	bls.n	80034ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0c5      	b.n	8003656 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0e5      	beq.n	80034a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0202 	bic.w	r2, r2, #2
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e8:	f7ff f81a 	bl	8002520 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034ee:	e012      	b.n	8003516 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034f0:	f7ff f816 	bl	8002520 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b0a      	cmp	r3, #10
 80034fc:	d90b      	bls.n	8003516 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2205      	movs	r2, #5
 800350e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e09f      	b.n	8003656 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e5      	bne.n	80034f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	7e1b      	ldrb	r3, [r3, #24]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e007      	b.n	800354e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800354c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7e5b      	ldrb	r3, [r3, #25]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d108      	bne.n	8003568 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e007      	b.n	8003578 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7e9b      	ldrb	r3, [r3, #26]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d108      	bne.n	8003592 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0220 	orr.w	r2, r2, #32
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e007      	b.n	80035a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0220 	bic.w	r2, r2, #32
 80035a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7edb      	ldrb	r3, [r3, #27]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d108      	bne.n	80035bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0210 	bic.w	r2, r2, #16
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e007      	b.n	80035cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0210 	orr.w	r2, r2, #16
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7f1b      	ldrb	r3, [r3, #28]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d108      	bne.n	80035e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0208 	orr.w	r2, r2, #8
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e007      	b.n	80035f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0208 	bic.w	r2, r2, #8
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7f5b      	ldrb	r3, [r3, #29]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d108      	bne.n	8003610 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0204 	orr.w	r2, r2, #4
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e007      	b.n	8003620 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0204 	bic.w	r2, r2, #4
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	ea42 0103 	orr.w	r1, r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	1e5a      	subs	r2, r3, #1
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800367c:	4013      	ands	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800368c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003692:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	60d3      	str	r3, [r2, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <__NVIC_GetPriorityGrouping+0x18>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	0a1b      	lsrs	r3, r3, #8
 80036b2:	f003 0307 	and.w	r3, r3, #7
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	db0b      	blt.n	80036ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	f003 021f 	and.w	r2, r3, #31
 80036dc:	4907      	ldr	r1, [pc, #28]	; (80036fc <__NVIC_EnableIRQ+0x38>)
 80036de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	2001      	movs	r0, #1
 80036e6:	fa00 f202 	lsl.w	r2, r0, r2
 80036ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	e000e100 	.word	0xe000e100

08003700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	6039      	str	r1, [r7, #0]
 800370a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003710:	2b00      	cmp	r3, #0
 8003712:	db0a      	blt.n	800372a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	490c      	ldr	r1, [pc, #48]	; (800374c <__NVIC_SetPriority+0x4c>)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	0112      	lsls	r2, r2, #4
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	440b      	add	r3, r1
 8003724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003728:	e00a      	b.n	8003740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	b2da      	uxtb	r2, r3
 800372e:	4908      	ldr	r1, [pc, #32]	; (8003750 <__NVIC_SetPriority+0x50>)
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	3b04      	subs	r3, #4
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	440b      	add	r3, r1
 800373e:	761a      	strb	r2, [r3, #24]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000e100 	.word	0xe000e100
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f1c3 0307 	rsb	r3, r3, #7
 800376e:	2b04      	cmp	r3, #4
 8003770:	bf28      	it	cs
 8003772:	2304      	movcs	r3, #4
 8003774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3304      	adds	r3, #4
 800377a:	2b06      	cmp	r3, #6
 800377c:	d902      	bls.n	8003784 <NVIC_EncodePriority+0x30>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3b03      	subs	r3, #3
 8003782:	e000      	b.n	8003786 <NVIC_EncodePriority+0x32>
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43da      	mvns	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	401a      	ands	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800379c:	f04f 31ff 	mov.w	r1, #4294967295
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43d9      	mvns	r1, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	4313      	orrs	r3, r2
         );
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037cc:	d301      	bcc.n	80037d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ce:	2301      	movs	r3, #1
 80037d0:	e00f      	b.n	80037f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037d2:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <SysTick_Config+0x40>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037da:	210f      	movs	r1, #15
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	f7ff ff8e 	bl	8003700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <SysTick_Config+0x40>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ea:	4b04      	ldr	r3, [pc, #16]	; (80037fc <SysTick_Config+0x40>)
 80037ec:	2207      	movs	r2, #7
 80037ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	e000e010 	.word	0xe000e010

08003800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff29 	bl	8003660 <__NVIC_SetPriorityGrouping>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	4603      	mov	r3, r0
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003828:	f7ff ff3e 	bl	80036a8 <__NVIC_GetPriorityGrouping>
 800382c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7ff ff8e 	bl	8003754 <NVIC_EncodePriority>
 8003838:	4602      	mov	r2, r0
 800383a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff5d 	bl	8003700 <__NVIC_SetPriority>
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff31 	bl	80036c4 <__NVIC_EnableIRQ>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ffa2 	bl	80037bc <SysTick_Config>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003882:	b580      	push	{r7, lr}
 8003884:	b084      	sub	sp, #16
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e037      	b.n	8003908 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2202      	movs	r2, #2
 800389c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80038b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80038bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f940 	bl	8003b70 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}  
 8003908:	4618      	mov	r0, r3
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_DMA_Start_IT+0x20>
 800392c:	2302      	movs	r3, #2
 800392e:	e04a      	b.n	80039c6 <HAL_DMA_Start_IT+0xb6>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800393e:	2b01      	cmp	r3, #1
 8003940:	d13a      	bne.n	80039b8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 f8d4 	bl	8003b14 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 020e 	orr.w	r2, r2, #14
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e00f      	b.n	80039a6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 020a 	orr.w	r2, r2, #10
 8003994:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0204 	bic.w	r2, r2, #4
 80039a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e005      	b.n	80039c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
 80039c2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	2204      	movs	r2, #4
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d024      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x72>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01f      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d107      	bne.n	8003a1e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0204 	bic.w	r2, r2, #4
 8003a1c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	2104      	movs	r1, #4
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d06a      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003a3e:	e065      	b.n	8003b0c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	2202      	movs	r2, #2
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d02c      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdc>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d027      	beq.n	8003aaa <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 020a 	bic.w	r2, r2, #10
 8003a76:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	2102      	movs	r1, #2
 8003a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d035      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003aa8:	e030      	b.n	8003b0c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2208      	movs	r2, #8
 8003ab0:	409a      	lsls	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d028      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x13e>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d023      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 020e 	bic.w	r2, r2, #14
 8003ad2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	2101      	movs	r1, #1
 8003ade:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d004      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	4798      	blx	r3
    }
  }
}  
 8003b0a:	e7ff      	b.n	8003b0c <HAL_DMA_IRQHandler+0x13e>
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b30:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d108      	bne.n	8003b54 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b52:	e007      	b.n	8003b64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <DMA_CalcBaseAndBitshift+0x34>)
 8003b80:	4413      	add	r3, r2
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x38>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	009a      	lsls	r2, r3, #2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a06      	ldr	r2, [pc, #24]	; (8003bac <DMA_CalcBaseAndBitshift+0x3c>)
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	bffdfff8 	.word	0xbffdfff8
 8003ba8:	cccccccd 	.word	0xcccccccd
 8003bac:	40020000 	.word	0x40020000

08003bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bbe:	e14e      	b.n	8003e5e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8140 	beq.w	8003e58 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d005      	beq.n	8003bf0 <HAL_GPIO_Init+0x40>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 0303 	and.w	r3, r3, #3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d130      	bne.n	8003c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c26:	2201      	movs	r2, #1
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0201 	and.w	r2, r3, #1
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d017      	beq.n	8003c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d123      	bne.n	8003ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	08da      	lsrs	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3208      	adds	r2, #8
 8003ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	6939      	ldr	r1, [r7, #16]
 8003cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2203      	movs	r2, #3
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0203 	and.w	r2, r3, #3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 809a 	beq.w	8003e58 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d24:	4b55      	ldr	r3, [pc, #340]	; (8003e7c <HAL_GPIO_Init+0x2cc>)
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	4a54      	ldr	r2, [pc, #336]	; (8003e7c <HAL_GPIO_Init+0x2cc>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6193      	str	r3, [r2, #24]
 8003d30:	4b52      	ldr	r3, [pc, #328]	; (8003e7c <HAL_GPIO_Init+0x2cc>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d3c:	4a50      	ldr	r2, [pc, #320]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	3302      	adds	r3, #2
 8003d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d66:	d013      	beq.n	8003d90 <HAL_GPIO_Init+0x1e0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a46      	ldr	r2, [pc, #280]	; (8003e84 <HAL_GPIO_Init+0x2d4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00d      	beq.n	8003d8c <HAL_GPIO_Init+0x1dc>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a45      	ldr	r2, [pc, #276]	; (8003e88 <HAL_GPIO_Init+0x2d8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d007      	beq.n	8003d88 <HAL_GPIO_Init+0x1d8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a44      	ldr	r2, [pc, #272]	; (8003e8c <HAL_GPIO_Init+0x2dc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d101      	bne.n	8003d84 <HAL_GPIO_Init+0x1d4>
 8003d80:	2303      	movs	r3, #3
 8003d82:	e006      	b.n	8003d92 <HAL_GPIO_Init+0x1e2>
 8003d84:	2305      	movs	r3, #5
 8003d86:	e004      	b.n	8003d92 <HAL_GPIO_Init+0x1e2>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e002      	b.n	8003d92 <HAL_GPIO_Init+0x1e2>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <HAL_GPIO_Init+0x1e2>
 8003d90:	2300      	movs	r3, #0
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	f002 0203 	and.w	r2, r2, #3
 8003d98:	0092      	lsls	r2, r2, #2
 8003d9a:	4093      	lsls	r3, r2
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003da2:	4937      	ldr	r1, [pc, #220]	; (8003e80 <HAL_GPIO_Init+0x2d0>)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	089b      	lsrs	r3, r3, #2
 8003da8:	3302      	adds	r3, #2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003db0:	4b37      	ldr	r3, [pc, #220]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dd4:	4a2e      	ldr	r2, [pc, #184]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003dfe:	4a24      	ldr	r2, [pc, #144]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e28:	4a19      	ldr	r2, [pc, #100]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	43db      	mvns	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e52:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <HAL_GPIO_Init+0x2e0>)
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f47f aea9 	bne.w	8003bc0 <HAL_GPIO_Init+0x10>
  }
}
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40010000 	.word	0x40010000
 8003e84:	48000400 	.word	0x48000400
 8003e88:	48000800 	.word	0x48000800
 8003e8c:	48000c00 	.word	0x48000c00
 8003e90:	40010400 	.word	0x40010400

08003e94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	e001      	b.n	8003eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	807b      	strh	r3, [r7, #2]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ed4:	787b      	ldrb	r3, [r7, #1]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eda:	887a      	ldrh	r2, [r7, #2]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee0:	e002      	b.n	8003ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee2:	887a      	ldrh	r2, [r7, #2]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	041a      	lsls	r2, r3, #16
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43d9      	mvns	r1, r3
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	400b      	ands	r3, r1
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e081      	b.n	800403e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fd ff54 	bl	8001dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	; 0x24
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d107      	bne.n	8003fa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	e006      	b.n	8003fb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d104      	bne.n	8003fc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69d9      	ldr	r1, [r3, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	461a      	mov	r2, r3
 8004054:	460b      	mov	r3, r1
 8004056:	817b      	strh	r3, [r7, #10]
 8004058:	4613      	mov	r3, r2
 800405a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b20      	cmp	r3, #32
 8004066:	f040 80db 	bne.w	8004220 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2C_Master_Receive+0x30>
 8004074:	2302      	movs	r3, #2
 8004076:	e0d4      	b.n	8004222 <HAL_I2C_Master_Receive+0x1da>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004080:	f7fe fa4e 	bl	8002520 <HAL_GetTick>
 8004084:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2319      	movs	r3, #25
 800408c:	2201      	movs	r2, #1
 800408e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f8f2 	bl	800427c <I2C_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0bf      	b.n	8004222 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2222      	movs	r2, #34	; 0x22
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2210      	movs	r2, #16
 80040ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	893a      	ldrh	r2, [r7, #8]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2bff      	cmp	r3, #255	; 0xff
 80040d2:	d90e      	bls.n	80040f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	22ff      	movs	r2, #255	; 0xff
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	8979      	ldrh	r1, [r7, #10]
 80040e2:	4b52      	ldr	r3, [pc, #328]	; (800422c <HAL_I2C_Master_Receive+0x1e4>)
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 faba 	bl	8004664 <I2C_TransferConfig>
 80040f0:	e06d      	b.n	80041ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004100:	b2da      	uxtb	r2, r3
 8004102:	8979      	ldrh	r1, [r7, #10]
 8004104:	4b49      	ldr	r3, [pc, #292]	; (800422c <HAL_I2C_Master_Receive+0x1e4>)
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 faa9 	bl	8004664 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004112:	e05c      	b.n	80041ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	6a39      	ldr	r1, [r7, #32]
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 f941 	bl	80043a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e07c      	b.n	8004222 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d034      	beq.n	80041ce <HAL_I2C_Master_Receive+0x186>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	d130      	bne.n	80041ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2200      	movs	r2, #0
 8004174:	2180      	movs	r1, #128	; 0x80
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f880 	bl	800427c <I2C_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e04d      	b.n	8004222 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	2bff      	cmp	r3, #255	; 0xff
 800418e:	d90e      	bls.n	80041ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	22ff      	movs	r2, #255	; 0xff
 8004194:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419a:	b2da      	uxtb	r2, r3
 800419c:	8979      	ldrh	r1, [r7, #10]
 800419e:	2300      	movs	r3, #0
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fa5c 	bl	8004664 <I2C_TransferConfig>
 80041ac:	e00f      	b.n	80041ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	8979      	ldrh	r1, [r7, #10]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fa4b 	bl	8004664 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d19d      	bne.n	8004114 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	6a39      	ldr	r1, [r7, #32]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f89c 	bl	800431a <I2C_WaitOnSTOPFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e01a      	b.n	8004222 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2220      	movs	r2, #32
 80041f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_I2C_Master_Receive+0x1e8>)
 8004200:	400b      	ands	r3, r1
 8004202:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	80002400 	.word	0x80002400
 8004230:	fe00e800 	.word	0xfe00e800

08004234 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b02      	cmp	r3, #2
 8004248:	d103      	bne.n	8004252 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2200      	movs	r2, #0
 8004250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d007      	beq.n	8004270 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	619a      	str	r2, [r3, #24]
  }
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800428c:	e031      	b.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d02d      	beq.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fe f943 	bl	8002520 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d122      	bne.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699a      	ldr	r2, [r3, #24]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	bf0c      	ite	eq
 80042bc:	2301      	moveq	r3, #1
 80042be:	2300      	movne	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d113      	bne.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	f043 0220 	orr.w	r2, r3, #32
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e00f      	b.n	8004312 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	429a      	cmp	r2, r3
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	429a      	cmp	r2, r3
 800430e:	d0be      	beq.n	800428e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004326:	e02f      	b.n	8004388 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f8b9 	bl	80044a4 <I2C_IsErrorOccurred>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e02d      	b.n	8004398 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433c:	f7fe f8f0 	bl	8002520 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	429a      	cmp	r2, r3
 800434a:	d302      	bcc.n	8004352 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11a      	bne.n	8004388 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b20      	cmp	r3, #32
 800435e:	d013      	beq.n	8004388 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e007      	b.n	8004398 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b20      	cmp	r3, #32
 8004394:	d1c8      	bne.n	8004328 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043ac:	e06b      	b.n	8004486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f876 	bl	80044a4 <I2C_IsErrorOccurred>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e069      	b.n	8004496 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d138      	bne.n	8004442 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d105      	bne.n	80043ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e055      	b.n	8004496 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d107      	bne.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2210      	movs	r2, #16
 80043fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2204      	movs	r2, #4
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
 8004406:	e002      	b.n	800440e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2220      	movs	r2, #32
 8004414:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6859      	ldr	r1, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004422:	400b      	ands	r3, r1
 8004424:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e029      	b.n	8004496 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fe f86d 	bl	8002520 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d116      	bne.n	8004486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d00f      	beq.n	8004486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e007      	b.n	8004496 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b04      	cmp	r3, #4
 8004492:	d18c      	bne.n	80043ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	fe00e800 	.word	0xfe00e800

080044a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d068      	beq.n	80045a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2210      	movs	r2, #16
 80044d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044d8:	e049      	b.n	800456e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d045      	beq.n	800456e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fe f81d 	bl	8002520 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <I2C_IsErrorOccurred+0x54>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d13a      	bne.n	800456e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004502:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800450a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d121      	bne.n	8004560 <I2C_IsErrorOccurred+0xbc>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004522:	d01d      	beq.n	8004560 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	2b20      	cmp	r3, #32
 8004528:	d01a      	beq.n	8004560 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004538:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800453a:	f7fd fff1 	bl	8002520 <HAL_GetTick>
 800453e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004540:	e00e      	b.n	8004560 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004542:	f7fd ffed 	bl	8002520 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b19      	cmp	r3, #25
 800454e:	d907      	bls.n	8004560 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	f043 0320 	orr.w	r3, r3, #32
 8004556:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800455e:	e006      	b.n	800456e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b20      	cmp	r3, #32
 800456c:	d1e9      	bne.n	8004542 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b20      	cmp	r3, #32
 800457a:	d003      	beq.n	8004584 <I2C_IsErrorOccurred+0xe0>
 800457c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0aa      	beq.n	80044da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00b      	beq.n	80045cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f043 0308 	orr.w	r3, r3, #8
 80045dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00b      	beq.n	8004610 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004608:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01c      	beq.n	8004652 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fe0b 	bl	8004234 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <I2C_IsErrorOccurred+0x1bc>)
 800462a:	400b      	ands	r3, r1
 800462c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004656:	4618      	mov	r0, r3
 8004658:	3728      	adds	r7, #40	; 0x28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	fe00e800 	.word	0xfe00e800

08004664 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	460b      	mov	r3, r1
 8004670:	817b      	strh	r3, [r7, #10]
 8004672:	4613      	mov	r3, r2
 8004674:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004676:	897b      	ldrh	r3, [r7, #10]
 8004678:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800467c:	7a7b      	ldrb	r3, [r7, #9]
 800467e:	041b      	lsls	r3, r3, #16
 8004680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004684:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	4313      	orrs	r3, r2
 800468e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004692:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	0d5b      	lsrs	r3, r3, #21
 800469e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <I2C_TransferConfig+0x60>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	43db      	mvns	r3, r3
 80046a8:	ea02 0103 	and.w	r1, r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	03ff63ff 	.word	0x03ff63ff

080046c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d138      	bne.n	8004750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e032      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	; 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800471a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b20      	cmp	r3, #32
 8004772:	d139      	bne.n	80047e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800477e:	2302      	movs	r3, #2
 8004780:	e033      	b.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2224      	movs	r2, #36	; 0x24
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0201 	bic.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80047b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e000      	b.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047e8:	2302      	movs	r3, #2
  }
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6193      	str	r3, [r2, #24]
 800480c:	4b08      	ldr	r3, [pc, #32]	; (8004830 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4905      	ldr	r1, [pc, #20]	; (8004834 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4313      	orrs	r3, r2
 8004822:	600b      	str	r3, [r1, #0]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40021000 	.word	0x40021000
 8004834:	40010000 	.word	0x40010000

08004838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800483e:	af00      	add	r7, sp, #0
 8004840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004844:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004848:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800484a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800484e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f001 b823 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 817d 	beq.w	8004b6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004874:	4bbc      	ldr	r3, [pc, #752]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b04      	cmp	r3, #4
 800487e:	d00c      	beq.n	800489a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004880:	4bb9      	ldr	r3, [pc, #740]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b08      	cmp	r3, #8
 800488a:	d15c      	bne.n	8004946 <HAL_RCC_OscConfig+0x10e>
 800488c:	4bb6      	ldr	r3, [pc, #728]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004898:	d155      	bne.n	8004946 <HAL_RCC_OscConfig+0x10e>
 800489a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800489e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d102      	bne.n	80048cc <HAL_RCC_OscConfig+0x94>
 80048c6:	4ba8      	ldr	r3, [pc, #672]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	e015      	b.n	80048f8 <HAL_RCC_OscConfig+0xc0>
 80048cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80048e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80048e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80048f4:	4b9c      	ldr	r3, [pc, #624]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004900:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004904:	fa92 f2a2 	rbit	r2, r2
 8004908:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800490c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004910:	fab2 f282 	clz	r2, r2
 8004914:	b2d2      	uxtb	r2, r2
 8004916:	f042 0220 	orr.w	r2, r2, #32
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	f002 021f 	and.w	r2, r2, #31
 8004920:	2101      	movs	r1, #1
 8004922:	fa01 f202 	lsl.w	r2, r1, r2
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 811f 	beq.w	8004b6c <HAL_RCC_OscConfig+0x334>
 800492e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 8116 	bne.w	8004b6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f000 bfaf 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004956:	d106      	bne.n	8004966 <HAL_RCC_OscConfig+0x12e>
 8004958:	4b83      	ldr	r3, [pc, #524]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a82      	ldr	r2, [pc, #520]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 800495e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e036      	b.n	80049d4 <HAL_RCC_OscConfig+0x19c>
 8004966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10c      	bne.n	8004990 <HAL_RCC_OscConfig+0x158>
 8004976:	4b7c      	ldr	r3, [pc, #496]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a7b      	ldr	r2, [pc, #492]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 800497c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	4b79      	ldr	r3, [pc, #484]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a78      	ldr	r2, [pc, #480]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004988:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e021      	b.n	80049d4 <HAL_RCC_OscConfig+0x19c>
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x184>
 80049a2:	4b71      	ldr	r3, [pc, #452]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a70      	ldr	r2, [pc, #448]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b6e      	ldr	r3, [pc, #440]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a6d      	ldr	r2, [pc, #436]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	e00b      	b.n	80049d4 <HAL_RCC_OscConfig+0x19c>
 80049bc:	4b6a      	ldr	r3, [pc, #424]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a69      	ldr	r2, [pc, #420]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	4b67      	ldr	r3, [pc, #412]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a66      	ldr	r2, [pc, #408]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049d4:	4b64      	ldr	r3, [pc, #400]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	f023 020f 	bic.w	r2, r3, #15
 80049dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	495f      	ldr	r1, [pc, #380]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d059      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fd fd8f 	bl	8002520 <HAL_GetTick>
 8004a02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fd fd8a 	bl	8002520 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b64      	cmp	r3, #100	; 0x64
 8004a16:	d902      	bls.n	8004a1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	f000 bf43 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>
 8004a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004a2a:	fa93 f3a3 	rbit	r3, r3
 8004a2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004a32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a36:	fab3 f383 	clz	r3, r3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	095b      	lsrs	r3, r3, #5
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d102      	bne.n	8004a50 <HAL_RCC_OscConfig+0x218>
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	e015      	b.n	8004a7c <HAL_RCC_OscConfig+0x244>
 8004a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004a6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004a70:	fa93 f3a3 	rbit	r3, r3
 8004a74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004a78:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004a84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004a88:	fa92 f2a2 	rbit	r2, r2
 8004a8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004a90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004a94:	fab2 f282 	clz	r2, r2
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	f042 0220 	orr.w	r2, r2, #32
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	f002 021f 	and.w	r2, r2, #31
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ab      	beq.n	8004a08 <HAL_RCC_OscConfig+0x1d0>
 8004ab0:	e05d      	b.n	8004b6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fd fd35 	bl	8002520 <HAL_GetTick>
 8004ab6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fd fd30 	bl	8002520 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b64      	cmp	r3, #100	; 0x64
 8004aca:	d902      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	f000 bee9 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>
 8004ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004ae6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f043 0301 	orr.w	r3, r3, #1
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d102      	bne.n	8004b04 <HAL_RCC_OscConfig+0x2cc>
 8004afe:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	e015      	b.n	8004b30 <HAL_RCC_OscConfig+0x2f8>
 8004b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004b20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004b24:	fa93 f3a3 	rbit	r3, r3
 8004b28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <HAL_RCC_OscConfig+0x330>)
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004b38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004b3c:	fa92 f2a2 	rbit	r2, r2
 8004b40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004b44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004b48:	fab2 f282 	clz	r2, r2
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	f042 0220 	orr.w	r2, r2, #32
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	f002 021f 	and.w	r2, r2, #31
 8004b58:	2101      	movs	r1, #1
 8004b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ab      	bne.n	8004abc <HAL_RCC_OscConfig+0x284>
 8004b64:	e003      	b.n	8004b6e <HAL_RCC_OscConfig+0x336>
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 817d 	beq.w	8004e7e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b84:	4ba6      	ldr	r3, [pc, #664]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b90:	4ba3      	ldr	r3, [pc, #652]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 030c 	and.w	r3, r3, #12
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d172      	bne.n	8004c82 <HAL_RCC_OscConfig+0x44a>
 8004b9c:	4ba0      	ldr	r3, [pc, #640]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d16c      	bne.n	8004c82 <HAL_RCC_OscConfig+0x44a>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004bb2:	fa93 f3a3 	rbit	r3, r3
 8004bb6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004bba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bbe:	fab3 f383 	clz	r3, r3
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f043 0301 	orr.w	r3, r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d102      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x3a0>
 8004bd2:	4b93      	ldr	r3, [pc, #588]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	e013      	b.n	8004c00 <HAL_RCC_OscConfig+0x3c8>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004be2:	fa93 f3a3 	rbit	r3, r3
 8004be6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004bea:	2302      	movs	r3, #2
 8004bec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004bf0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004bf4:	fa93 f3a3 	rbit	r3, r3
 8004bf8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004bfc:	4b88      	ldr	r3, [pc, #544]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2202      	movs	r2, #2
 8004c02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004c06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004c0a:	fa92 f2a2 	rbit	r2, r2
 8004c0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004c12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004c16:	fab2 f282 	clz	r2, r2
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	f042 0220 	orr.w	r2, r2, #32
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	f002 021f 	and.w	r2, r2, #31
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCC_OscConfig+0x410>
 8004c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d002      	beq.n	8004c48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f000 be2e 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c48:	4b75      	ldr	r3, [pc, #468]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	21f8      	movs	r1, #248	; 0xf8
 8004c5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004c66:	fa91 f1a1 	rbit	r1, r1
 8004c6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004c6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004c72:	fab1 f181 	clz	r1, r1
 8004c76:	b2c9      	uxtb	r1, r1
 8004c78:	408b      	lsls	r3, r1
 8004c7a:	4969      	ldr	r1, [pc, #420]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c80:	e0fd      	b.n	8004e7e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 8088 	beq.w	8004da4 <HAL_RCC_OscConfig+0x56c>
 8004c94:	2301      	movs	r3, #1
 8004c96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004c9e:	fa93 f3a3 	rbit	r3, r3
 8004ca2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004ca6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004caa:	fab3 f383 	clz	r3, r3
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fc2e 	bl	8002520 <HAL_GetTick>
 8004cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc8:	e00a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cca:	f7fd fc29 	bl	8002520 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d902      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	f000 bde2 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004cea:	fa93 f3a3 	rbit	r3, r3
 8004cee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004cf2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf6:	fab3 f383 	clz	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	095b      	lsrs	r3, r3, #5
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d102      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4d8>
 8004d0a:	4b45      	ldr	r3, [pc, #276]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	e013      	b.n	8004d38 <HAL_RCC_OscConfig+0x500>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004d22:	2302      	movs	r3, #2
 8004d24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004d28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004d34:	4b3a      	ldr	r3, [pc, #232]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004d3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004d42:	fa92 f2a2 	rbit	r2, r2
 8004d46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004d4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004d4e:	fab2 f282 	clz	r2, r2
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	f042 0220 	orr.w	r2, r2, #32
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	f002 021f 	and.w	r2, r2, #31
 8004d5e:	2101      	movs	r1, #1
 8004d60:	fa01 f202 	lsl.w	r2, r1, r2
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0af      	beq.n	8004cca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6a:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	21f8      	movs	r1, #248	; 0xf8
 8004d80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004d88:	fa91 f1a1 	rbit	r1, r1
 8004d8c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004d90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004d94:	fab1 f181 	clz	r1, r1
 8004d98:	b2c9      	uxtb	r1, r1
 8004d9a:	408b      	lsls	r3, r1
 8004d9c:	4920      	ldr	r1, [pc, #128]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
 8004da2:	e06c      	b.n	8004e7e <HAL_RCC_OscConfig+0x646>
 8004da4:	2301      	movs	r3, #1
 8004da6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd0:	f7fd fba6 	bl	8002520 <HAL_GetTick>
 8004dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dda:	f7fd fba1 	bl	8002520 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d902      	bls.n	8004df0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	f000 bd5a 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>
 8004df0:	2302      	movs	r3, #2
 8004df2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d104      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5ec>
 8004e1a:	4b01      	ldr	r3, [pc, #4]	; (8004e20 <HAL_RCC_OscConfig+0x5e8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	e015      	b.n	8004e4c <HAL_RCC_OscConfig+0x614>
 8004e20:	40021000 	.word	0x40021000
 8004e24:	2302      	movs	r3, #2
 8004e26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e2e:	fa93 f3a3 	rbit	r3, r3
 8004e32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e36:	2302      	movs	r3, #2
 8004e38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004e3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e40:	fa93 f3a3 	rbit	r3, r3
 8004e44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004e48:	4bc8      	ldr	r3, [pc, #800]	; (800516c <HAL_RCC_OscConfig+0x934>)
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004e52:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004e56:	fa92 f2a2 	rbit	r2, r2
 8004e5a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004e5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004e62:	fab2 f282 	clz	r2, r2
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	f042 0220 	orr.w	r2, r2, #32
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	f002 021f 	and.w	r2, r2, #31
 8004e72:	2101      	movs	r1, #1
 8004e74:	fa01 f202 	lsl.w	r2, r1, r2
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1ad      	bne.n	8004dda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8110 	beq.w	80050b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d079      	beq.n	8004f98 <HAL_RCC_OscConfig+0x760>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eaa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004eae:	fa93 f3a3 	rbit	r3, r3
 8004eb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4bab      	ldr	r3, [pc, #684]	; (8005170 <HAL_RCC_OscConfig+0x938>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2301      	movs	r3, #1
 8004ecc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ece:	f7fd fb27 	bl	8002520 <HAL_GetTick>
 8004ed2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed8:	f7fd fb22 	bl	8002520 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d902      	bls.n	8004eee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	f000 bcdb 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ef8:	fa93 f3a3 	rbit	r3, r3
 8004efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f08:	2202      	movs	r2, #2
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	fa93 f2a3 	rbit	r2, r3
 8004f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	fa93 f2a3 	rbit	r2, r3
 8004f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f48:	4b88      	ldr	r3, [pc, #544]	; (800516c <HAL_RCC_OscConfig+0x934>)
 8004f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f54:	2102      	movs	r1, #2
 8004f56:	6019      	str	r1, [r3, #0]
 8004f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	fa93 f1a3 	rbit	r1, r3
 8004f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f6e:	6019      	str	r1, [r3, #0]
  return result;
 8004f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f003 031f 	and.w	r3, r3, #31
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0a0      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x6a0>
 8004f96:	e08d      	b.n	80050b4 <HAL_RCC_OscConfig+0x87c>
 8004f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f9c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fa8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	fa93 f2a3 	rbit	r2, r3
 8004fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fba:	601a      	str	r2, [r3, #0]
  return result;
 8004fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004fc4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc6:	fab3 f383 	clz	r3, r3
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b68      	ldr	r3, [pc, #416]	; (8005170 <HAL_RCC_OscConfig+0x938>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fd faa1 	bl	8002520 <HAL_GetTick>
 8004fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fd fa9c 	bl	8002520 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d902      	bls.n	8004ffa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	f000 bc55 	b.w	80058a4 <HAL_RCC_OscConfig+0x106c>
 8004ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005002:	2202      	movs	r2, #2
 8005004:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	fa93 f2a3 	rbit	r2, r3
 8005014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005018:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005022:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005026:	2202      	movs	r2, #2
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	fa93 f2a3 	rbit	r2, r3
 8005038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800504a:	2202      	movs	r2, #2
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	fa93 f2a3 	rbit	r2, r3
 800505c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005060:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005064:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005066:	4b41      	ldr	r3, [pc, #260]	; (800516c <HAL_RCC_OscConfig+0x934>)
 8005068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800506a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800506e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005072:	2102      	movs	r1, #2
 8005074:	6019      	str	r1, [r3, #0]
 8005076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800507a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fa93 f1a3 	rbit	r1, r3
 8005084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005088:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800508c:	6019      	str	r1, [r3, #0]
  return result;
 800508e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005092:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	fab3 f383 	clz	r3, r3
 800509c:	b2db      	uxtb	r3, r3
 800509e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2101      	movs	r1, #1
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d197      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 81a1 	beq.w	800540c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050d0:	4b26      	ldr	r3, [pc, #152]	; (800516c <HAL_RCC_OscConfig+0x934>)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d116      	bne.n	800510a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050dc:	4b23      	ldr	r3, [pc, #140]	; (800516c <HAL_RCC_OscConfig+0x934>)
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	4a22      	ldr	r2, [pc, #136]	; (800516c <HAL_RCC_OscConfig+0x934>)
 80050e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e6:	61d3      	str	r3, [r2, #28]
 80050e8:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_OscConfig+0x934>)
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80050f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005102:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <HAL_RCC_OscConfig+0x93c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d11a      	bne.n	800514c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <HAL_RCC_OscConfig+0x93c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a16      	ldr	r2, [pc, #88]	; (8005174 <HAL_RCC_OscConfig+0x93c>)
 800511c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005120:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005122:	f7fd f9fd 	bl	8002520 <HAL_GetTick>
 8005126:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512a:	e009      	b.n	8005140 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800512c:	f7fd f9f8 	bl	8002520 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b64      	cmp	r3, #100	; 0x64
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e3b1      	b.n	80058a4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005140:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <HAL_RCC_OscConfig+0x93c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ef      	beq.n	800512c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800514c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d10d      	bne.n	8005178 <HAL_RCC_OscConfig+0x940>
 800515c:	4b03      	ldr	r3, [pc, #12]	; (800516c <HAL_RCC_OscConfig+0x934>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	4a02      	ldr	r2, [pc, #8]	; (800516c <HAL_RCC_OscConfig+0x934>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6213      	str	r3, [r2, #32]
 8005168:	e03c      	b.n	80051e4 <HAL_RCC_OscConfig+0x9ac>
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	10908120 	.word	0x10908120
 8005174:	40007000 	.word	0x40007000
 8005178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10c      	bne.n	80051a2 <HAL_RCC_OscConfig+0x96a>
 8005188:	4bc1      	ldr	r3, [pc, #772]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	4ac0      	ldr	r2, [pc, #768]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 800518e:	f023 0301 	bic.w	r3, r3, #1
 8005192:	6213      	str	r3, [r2, #32]
 8005194:	4bbe      	ldr	r3, [pc, #760]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	4abd      	ldr	r2, [pc, #756]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 800519a:	f023 0304 	bic.w	r3, r3, #4
 800519e:	6213      	str	r3, [r2, #32]
 80051a0:	e020      	b.n	80051e4 <HAL_RCC_OscConfig+0x9ac>
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d10c      	bne.n	80051cc <HAL_RCC_OscConfig+0x994>
 80051b2:	4bb7      	ldr	r3, [pc, #732]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	4ab6      	ldr	r2, [pc, #728]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80051b8:	f043 0304 	orr.w	r3, r3, #4
 80051bc:	6213      	str	r3, [r2, #32]
 80051be:	4bb4      	ldr	r3, [pc, #720]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	4ab3      	ldr	r2, [pc, #716]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	6213      	str	r3, [r2, #32]
 80051ca:	e00b      	b.n	80051e4 <HAL_RCC_OscConfig+0x9ac>
 80051cc:	4bb0      	ldr	r3, [pc, #704]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	4aaf      	ldr	r2, [pc, #700]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	6213      	str	r3, [r2, #32]
 80051d8:	4bad      	ldr	r3, [pc, #692]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	4aac      	ldr	r2, [pc, #688]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80051de:	f023 0304 	bic.w	r3, r3, #4
 80051e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8081 	beq.w	80052f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f6:	f7fd f993 	bl	8002520 <HAL_GetTick>
 80051fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fe:	e00b      	b.n	8005218 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005200:	f7fd f98e 	bl	8002520 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005210:	4293      	cmp	r3, r2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e345      	b.n	80058a4 <HAL_RCC_OscConfig+0x106c>
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005220:	2202      	movs	r2, #2
 8005222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005228:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	fa93 f2a3 	rbit	r2, r3
 8005232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005236:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005240:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005244:	2202      	movs	r2, #2
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	fa93 f2a3 	rbit	r2, r3
 8005256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800525e:	601a      	str	r2, [r3, #0]
  return result;
 8005260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005264:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005268:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526a:	fab3 f383 	clz	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f043 0302 	orr.w	r3, r3, #2
 8005278:	b2db      	uxtb	r3, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d102      	bne.n	8005284 <HAL_RCC_OscConfig+0xa4c>
 800527e:	4b84      	ldr	r3, [pc, #528]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	e013      	b.n	80052ac <HAL_RCC_OscConfig+0xa74>
 8005284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005288:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800528c:	2202      	movs	r2, #2
 800528e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005294:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	fa93 f2a3 	rbit	r2, r3
 800529e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	4b79      	ldr	r3, [pc, #484]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80052b4:	2102      	movs	r1, #2
 80052b6:	6011      	str	r1, [r2, #0]
 80052b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	fa92 f1a2 	rbit	r1, r2
 80052c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80052ce:	6011      	str	r1, [r2, #0]
  return result;
 80052d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80052d8:	6812      	ldr	r2, [r2, #0]
 80052da:	fab2 f282 	clz	r2, r2
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	f002 021f 	and.w	r2, r2, #31
 80052ea:	2101      	movs	r1, #1
 80052ec:	fa01 f202 	lsl.w	r2, r1, r2
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d084      	beq.n	8005200 <HAL_RCC_OscConfig+0x9c8>
 80052f6:	e07f      	b.n	80053f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f8:	f7fd f912 	bl	8002520 <HAL_GetTick>
 80052fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005300:	e00b      	b.n	800531a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fd f90d 	bl	8002520 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e2c4      	b.n	80058a4 <HAL_RCC_OscConfig+0x106c>
 800531a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800531e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005322:	2202      	movs	r2, #2
 8005324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	fa93 f2a3 	rbit	r2, r3
 8005334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005338:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005342:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005346:	2202      	movs	r2, #2
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	fa93 f2a3 	rbit	r2, r3
 8005358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005360:	601a      	str	r2, [r3, #0]
  return result;
 8005362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005366:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800536a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536c:	fab3 f383 	clz	r3, r3
 8005370:	b2db      	uxtb	r3, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f043 0302 	orr.w	r3, r3, #2
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d102      	bne.n	8005386 <HAL_RCC_OscConfig+0xb4e>
 8005380:	4b43      	ldr	r3, [pc, #268]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	e013      	b.n	80053ae <HAL_RCC_OscConfig+0xb76>
 8005386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800538a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800538e:	2202      	movs	r2, #2
 8005390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005396:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	fa93 f2a3 	rbit	r2, r3
 80053a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4b39      	ldr	r3, [pc, #228]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80053b6:	2102      	movs	r1, #2
 80053b8:	6011      	str	r1, [r2, #0]
 80053ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	fa92 f1a2 	rbit	r1, r2
 80053c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80053d0:	6011      	str	r1, [r2, #0]
  return result;
 80053d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	fab2 f282 	clz	r2, r2
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	f002 021f 	and.w	r2, r2, #31
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f202 	lsl.w	r2, r1, r2
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d184      	bne.n	8005302 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d105      	bne.n	800540c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005400:	4b23      	ldr	r3, [pc, #140]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	4a22      	ldr	r2, [pc, #136]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 8005406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800540a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800540c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005410:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8242 	beq.w	80058a2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800541e:	4b1c      	ldr	r3, [pc, #112]	; (8005490 <HAL_RCC_OscConfig+0xc58>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	2b08      	cmp	r3, #8
 8005428:	f000 8213 	beq.w	8005852 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	2b02      	cmp	r3, #2
 800543a:	f040 8162 	bne.w	8005702 <HAL_RCC_OscConfig+0xeca>
 800543e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005442:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005446:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800544a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005450:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	fa93 f2a3 	rbit	r2, r3
 800545a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005462:	601a      	str	r2, [r3, #0]
  return result;
 8005464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005468:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800546c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005478:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	461a      	mov	r2, r3
 8005480:	2300      	movs	r3, #0
 8005482:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fd f84c 	bl	8002520 <HAL_GetTick>
 8005488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800548c:	e00c      	b.n	80054a8 <HAL_RCC_OscConfig+0xc70>
 800548e:	bf00      	nop
 8005490:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005494:	f7fd f844 	bl	8002520 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e1fd      	b.n	80058a4 <HAL_RCC_OscConfig+0x106c>
 80054a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80054b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	fa93 f2a3 	rbit	r2, r3
 80054c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80054cc:	601a      	str	r2, [r3, #0]
  return result;
 80054ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80054d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d8:	fab3 f383 	clz	r3, r3
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d102      	bne.n	80054f2 <HAL_RCC_OscConfig+0xcba>
 80054ec:	4bb0      	ldr	r3, [pc, #704]	; (80057b0 <HAL_RCC_OscConfig+0xf78>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	e027      	b.n	8005542 <HAL_RCC_OscConfig+0xd0a>
 80054f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80054fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005504:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	fa93 f2a3 	rbit	r2, r3
 800550e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005512:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005520:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	fa93 f2a3 	rbit	r2, r3
 8005534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005538:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	4b9c      	ldr	r3, [pc, #624]	; (80057b0 <HAL_RCC_OscConfig+0xf78>)
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005546:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800554a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800554e:	6011      	str	r1, [r2, #0]
 8005550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005554:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	fa92 f1a2 	rbit	r1, r2
 800555e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005562:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005566:	6011      	str	r1, [r2, #0]
  return result;
 8005568:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800556c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	fab2 f282 	clz	r2, r2
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	f042 0220 	orr.w	r2, r2, #32
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	f002 021f 	and.w	r2, r2, #31
 8005582:	2101      	movs	r1, #1
 8005584:	fa01 f202 	lsl.w	r2, r1, r2
 8005588:	4013      	ands	r3, r2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d182      	bne.n	8005494 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800558e:	4b88      	ldr	r3, [pc, #544]	; (80057b0 <HAL_RCC_OscConfig+0xf78>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800559a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	430b      	orrs	r3, r1
 80055b0:	497f      	ldr	r1, [pc, #508]	; (80057b0 <HAL_RCC_OscConfig+0xf78>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
 80055b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80055be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	fa93 f2a3 	rbit	r2, r3
 80055d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80055da:	601a      	str	r2, [r3, #0]
  return result;
 80055dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80055e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e6:	fab3 f383 	clz	r3, r3
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80055f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	461a      	mov	r2, r3
 80055f8:	2301      	movs	r3, #1
 80055fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fc:	f7fc ff90 	bl	8002520 <HAL_GetTick>
 8005600:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005604:	e009      	b.n	800561a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005606:	f7fc ff8b 	bl	8002520 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e144      	b.n	80058a4 <HAL_RCC_OscConfig+0x106c>
 800561a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005622:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800562c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	fa93 f2a3 	rbit	r2, r3
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800563e:	601a      	str	r2, [r3, #0]
  return result;
 8005640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005644:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005648:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800564a:	fab3 f383 	clz	r3, r3
 800564e:	b2db      	uxtb	r3, r3
 8005650:	095b      	lsrs	r3, r3, #5
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d102      	bne.n	8005664 <HAL_RCC_OscConfig+0xe2c>
 800565e:	4b54      	ldr	r3, [pc, #336]	; (80057b0 <HAL_RCC_OscConfig+0xf78>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	e027      	b.n	80056b4 <HAL_RCC_OscConfig+0xe7c>
 8005664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005668:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800566c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005676:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	fa93 f2a3 	rbit	r2, r3
 8005680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005684:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	fa93 f2a3 	rbit	r2, r3
 80056a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <HAL_RCC_OscConfig+0xf78>)
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80056bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80056c0:	6011      	str	r1, [r2, #0]
 80056c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	fa92 f1a2 	rbit	r1, r2
 80056d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80056d8:	6011      	str	r1, [r2, #0]
  return result;
 80056da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	fab2 f282 	clz	r2, r2
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	f042 0220 	orr.w	r2, r2, #32
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	f002 021f 	and.w	r2, r2, #31
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f202 	lsl.w	r2, r1, r2
 80056fa:	4013      	ands	r3, r2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d082      	beq.n	8005606 <HAL_RCC_OscConfig+0xdce>
 8005700:	e0cf      	b.n	80058a2 <HAL_RCC_OscConfig+0x106a>
 8005702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005706:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800570a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800570e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005714:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	fa93 f2a3 	rbit	r2, r3
 800571e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005722:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005726:	601a      	str	r2, [r3, #0]
  return result;
 8005728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005730:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005732:	fab3 f383 	clz	r3, r3
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800573c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	461a      	mov	r2, r3
 8005744:	2300      	movs	r3, #0
 8005746:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005748:	f7fc feea 	bl	8002520 <HAL_GetTick>
 800574c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005750:	e009      	b.n	8005766 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005752:	f7fc fee5 	bl	8002520 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e09e      	b.n	80058a4 <HAL_RCC_OscConfig+0x106c>
 8005766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800576a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800576e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005778:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	fa93 f2a3 	rbit	r2, r3
 8005782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005786:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800578a:	601a      	str	r2, [r3, #0]
  return result;
 800578c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005790:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005794:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005796:	fab3 f383 	clz	r3, r3
 800579a:	b2db      	uxtb	r3, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f043 0301 	orr.w	r3, r3, #1
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d104      	bne.n	80057b4 <HAL_RCC_OscConfig+0xf7c>
 80057aa:	4b01      	ldr	r3, [pc, #4]	; (80057b0 <HAL_RCC_OscConfig+0xf78>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	e029      	b.n	8005804 <HAL_RCC_OscConfig+0xfcc>
 80057b0:	40021000 	.word	0x40021000
 80057b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80057bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	fa93 f2a3 	rbit	r2, r3
 80057d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80057e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	fa93 f2a3 	rbit	r2, r3
 80057f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <HAL_RCC_OscConfig+0x1078>)
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005808:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800580c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005816:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	fa92 f1a2 	rbit	r1, r2
 8005820:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005824:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005828:	6011      	str	r1, [r2, #0]
  return result;
 800582a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800582e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	fab2 f282 	clz	r2, r2
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	f042 0220 	orr.w	r2, r2, #32
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	f002 021f 	and.w	r2, r2, #31
 8005844:	2101      	movs	r1, #1
 8005846:	fa01 f202 	lsl.w	r2, r1, r2
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d180      	bne.n	8005752 <HAL_RCC_OscConfig+0xf1a>
 8005850:	e027      	b.n	80058a2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005856:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d101      	bne.n	8005866 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e01e      	b.n	80058a4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005866:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <HAL_RCC_OscConfig+0x1078>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800586e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005872:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	429a      	cmp	r2, r3
 8005884:	d10b      	bne.n	800589e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005886:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800588a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800588e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800589a:	429a      	cmp	r2, r3
 800589c:	d001      	beq.n	80058a2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40021000 	.word	0x40021000

080058b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b09e      	sub	sp, #120	; 0x78
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e162      	b.n	8005b92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058cc:	4b90      	ldr	r3, [pc, #576]	; (8005b10 <HAL_RCC_ClockConfig+0x25c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d910      	bls.n	80058fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b8d      	ldr	r3, [pc, #564]	; (8005b10 <HAL_RCC_ClockConfig+0x25c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 0207 	bic.w	r2, r3, #7
 80058e2:	498b      	ldr	r1, [pc, #556]	; (8005b10 <HAL_RCC_ClockConfig+0x25c>)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b89      	ldr	r3, [pc, #548]	; (8005b10 <HAL_RCC_ClockConfig+0x25c>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e14a      	b.n	8005b92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005908:	4b82      	ldr	r3, [pc, #520]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	497f      	ldr	r1, [pc, #508]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005916:	4313      	orrs	r3, r2
 8005918:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 80dc 	beq.w	8005ae0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d13c      	bne.n	80059aa <HAL_RCC_ClockConfig+0xf6>
 8005930:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005934:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005938:	fa93 f3a3 	rbit	r3, r3
 800593c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800593e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005940:	fab3 f383 	clz	r3, r3
 8005944:	b2db      	uxtb	r3, r3
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	b2db      	uxtb	r3, r3
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d102      	bne.n	800595a <HAL_RCC_ClockConfig+0xa6>
 8005954:	4b6f      	ldr	r3, [pc, #444]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	e00f      	b.n	800597a <HAL_RCC_ClockConfig+0xc6>
 800595a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800595e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	667b      	str	r3, [r7, #100]	; 0x64
 8005968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800596c:	663b      	str	r3, [r7, #96]	; 0x60
 800596e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005970:	fa93 f3a3 	rbit	r3, r3
 8005974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005976:	4b67      	ldr	r3, [pc, #412]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800597e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005980:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005982:	fa92 f2a2 	rbit	r2, r2
 8005986:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005988:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800598a:	fab2 f282 	clz	r2, r2
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	f042 0220 	orr.w	r2, r2, #32
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	f002 021f 	and.w	r2, r2, #31
 800599a:	2101      	movs	r1, #1
 800599c:	fa01 f202 	lsl.w	r2, r1, r2
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d17b      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e0f3      	b.n	8005b92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d13c      	bne.n	8005a2c <HAL_RCC_ClockConfig+0x178>
 80059b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ba:	fa93 f3a3 	rbit	r3, r3
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80059c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c2:	fab3 f383 	clz	r3, r3
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d102      	bne.n	80059dc <HAL_RCC_ClockConfig+0x128>
 80059d6:	4b4f      	ldr	r3, [pc, #316]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	e00f      	b.n	80059fc <HAL_RCC_ClockConfig+0x148>
 80059dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e4:	fa93 f3a3 	rbit	r3, r3
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
 80059f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f2:	fa93 f3a3 	rbit	r3, r3
 80059f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059f8:	4b46      	ldr	r3, [pc, #280]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a00:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a04:	fa92 f2a2 	rbit	r2, r2
 8005a08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a0c:	fab2 f282 	clz	r2, r2
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	f042 0220 	orr.w	r2, r2, #32
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	f002 021f 	and.w	r2, r2, #31
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d13a      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0b2      	b.n	8005b92 <HAL_RCC_ClockConfig+0x2de>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	fa93 f3a3 	rbit	r3, r3
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3a:	fab3 f383 	clz	r3, r3
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d102      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1a0>
 8005a4e:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	e00d      	b.n	8005a70 <HAL_RCC_ClockConfig+0x1bc>
 8005a54:	2302      	movs	r3, #2
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	fa93 f3a3 	rbit	r3, r3
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a60:	2302      	movs	r3, #2
 8005a62:	623b      	str	r3, [r7, #32]
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	fa93 f3a3 	rbit	r3, r3
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	2202      	movs	r2, #2
 8005a72:	61ba      	str	r2, [r7, #24]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	fa92 f2a2 	rbit	r2, r2
 8005a7a:	617a      	str	r2, [r7, #20]
  return result;
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	fab2 f282 	clz	r2, r2
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	f042 0220 	orr.w	r2, r2, #32
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	f002 021f 	and.w	r2, r2, #31
 8005a8e:	2101      	movs	r1, #1
 8005a90:	fa01 f202 	lsl.w	r2, r1, r2
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e079      	b.n	8005b92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f023 0203 	bic.w	r2, r3, #3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	491a      	ldr	r1, [pc, #104]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ab0:	f7fc fd36 	bl	8002520 <HAL_GetTick>
 8005ab4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab8:	f7fc fd32 	bl	8002520 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e061      	b.n	8005b92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <HAL_RCC_ClockConfig+0x260>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 020c 	and.w	r2, r3, #12
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d1eb      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <HAL_RCC_ClockConfig+0x25c>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d214      	bcs.n	8005b18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aee:	4b08      	ldr	r3, [pc, #32]	; (8005b10 <HAL_RCC_ClockConfig+0x25c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 0207 	bic.w	r2, r3, #7
 8005af6:	4906      	ldr	r1, [pc, #24]	; (8005b10 <HAL_RCC_ClockConfig+0x25c>)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005afe:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <HAL_RCC_ClockConfig+0x25c>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e040      	b.n	8005b92 <HAL_RCC_ClockConfig+0x2de>
 8005b10:	40022000 	.word	0x40022000
 8005b14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d008      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b24:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <HAL_RCC_ClockConfig+0x2e8>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	491a      	ldr	r1, [pc, #104]	; (8005b9c <HAL_RCC_ClockConfig+0x2e8>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0308 	and.w	r3, r3, #8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d009      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b42:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <HAL_RCC_ClockConfig+0x2e8>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	4912      	ldr	r1, [pc, #72]	; (8005b9c <HAL_RCC_ClockConfig+0x2e8>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005b56:	f000 f829 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005b5a:	4601      	mov	r1, r0
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <HAL_RCC_ClockConfig+0x2e8>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b64:	22f0      	movs	r2, #240	; 0xf0
 8005b66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	fa92 f2a2 	rbit	r2, r2
 8005b6e:	60fa      	str	r2, [r7, #12]
  return result;
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	fab2 f282 	clz	r2, r2
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	40d3      	lsrs	r3, r2
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <HAL_RCC_ClockConfig+0x2ec>)
 8005b7c:	5cd3      	ldrb	r3, [r2, r3]
 8005b7e:	fa21 f303 	lsr.w	r3, r1, r3
 8005b82:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <HAL_RCC_ClockConfig+0x2f0>)
 8005b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b86:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <HAL_RCC_ClockConfig+0x2f4>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fc fc84 	bl	8002498 <HAL_InitTick>
  
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3778      	adds	r7, #120	; 0x78
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40021000 	.word	0x40021000
 8005ba0:	08007a5c 	.word	0x08007a5c
 8005ba4:	20000000 	.word	0x20000000
 8005ba8:	20000004 	.word	0x20000004

08005bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b08b      	sub	sp, #44	; 0x2c
 8005bb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005bc6:	4b29      	ldr	r3, [pc, #164]	; (8005c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d002      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0x30>
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCC_GetSysClockFreq+0x36>
 8005bda:	e03c      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bdc:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bde:	623b      	str	r3, [r7, #32]
      break;
 8005be0:	e03c      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005be8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005bec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	fa92 f2a2 	rbit	r2, r2
 8005bf4:	607a      	str	r2, [r7, #4]
  return result;
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	fab2 f282 	clz	r2, r2
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	40d3      	lsrs	r3, r2
 8005c00:	4a1c      	ldr	r2, [pc, #112]	; (8005c74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005c02:	5cd3      	ldrb	r3, [r2, r3]
 8005c04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005c06:	4b19      	ldr	r3, [pc, #100]	; (8005c6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	220f      	movs	r2, #15
 8005c10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	fa92 f2a2 	rbit	r2, r2
 8005c18:	60fa      	str	r2, [r7, #12]
  return result;
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	fab2 f282 	clz	r2, r2
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	40d3      	lsrs	r3, r2
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c26:	5cd3      	ldrb	r3, [r2, r3]
 8005c28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005c34:	4a0e      	ldr	r2, [pc, #56]	; (8005c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
 8005c44:	e004      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	623b      	str	r3, [r7, #32]
      break;
 8005c54:	e002      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c56:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005c58:	623b      	str	r3, [r7, #32]
      break;
 8005c5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	372c      	adds	r7, #44	; 0x2c
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	007a1200 	.word	0x007a1200
 8005c74:	08007a74 	.word	0x08007a74
 8005c78:	08007a84 	.word	0x08007a84
 8005c7c:	003d0900 	.word	0x003d0900

08005c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c86:	681b      	ldr	r3, [r3, #0]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	20000000 	.word	0x20000000

08005c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005c9e:	f7ff ffef 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005ca2:	4601      	mov	r1, r0
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005cb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	fa92 f2a2 	rbit	r2, r2
 8005cb8:	603a      	str	r2, [r7, #0]
  return result;
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	fab2 f282 	clz	r2, r2
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	40d3      	lsrs	r3, r2
 8005cc4:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005cc6:	5cd3      	ldrb	r3, [r2, r3]
 8005cc8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	08007a6c 	.word	0x08007a6c

08005cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005ce2:	f7ff ffcd 	bl	8005c80 <HAL_RCC_GetHCLKFreq>
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005cf0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005cf4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	fa92 f2a2 	rbit	r2, r2
 8005cfc:	603a      	str	r2, [r7, #0]
  return result;
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	fab2 f282 	clz	r2, r2
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	40d3      	lsrs	r3, r2
 8005d08:	4a04      	ldr	r2, [pc, #16]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005d0a:	5cd3      	ldrb	r3, [r2, r3]
 8005d0c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	08007a6c 	.word	0x08007a6c

08005d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b092      	sub	sp, #72	; 0x48
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80cd 	beq.w	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d44:	4b86      	ldr	r3, [pc, #536]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10e      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d50:	4b83      	ldr	r3, [pc, #524]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	4a82      	ldr	r2, [pc, #520]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	61d3      	str	r3, [r2, #28]
 8005d5c:	4b80      	ldr	r3, [pc, #512]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6e:	4b7d      	ldr	r3, [pc, #500]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d118      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d7a:	4b7a      	ldr	r3, [pc, #488]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a79      	ldr	r2, [pc, #484]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d86:	f7fc fbcb 	bl	8002520 <HAL_GetTick>
 8005d8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	e008      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d8e:	f7fc fbc7 	bl	8002520 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b64      	cmp	r3, #100	; 0x64
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e0db      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da0:	4b70      	ldr	r3, [pc, #448]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dac:	4b6c      	ldr	r3, [pc, #432]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d07d      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d076      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dca:	4b65      	ldr	r3, [pc, #404]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	fa93 f3a3 	rbit	r3, r3
 8005de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005de4:	fab3 f383 	clz	r3, r3
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	4b5e      	ldr	r3, [pc, #376]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	461a      	mov	r2, r3
 8005df4:	2301      	movs	r3, #1
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	fa93 f3a3 	rbit	r3, r3
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e08:	fab3 f383 	clz	r3, r3
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4b55      	ldr	r3, [pc, #340]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	461a      	mov	r2, r3
 8005e18:	2300      	movs	r3, #0
 8005e1a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e1c:	4a50      	ldr	r2, [pc, #320]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e20:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d045      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2c:	f7fc fb78 	bl	8002520 <HAL_GetTick>
 8005e30:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e32:	e00a      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e34:	f7fc fb74 	bl	8002520 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e086      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	fa93 f3a3 	rbit	r3, r3
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
 8005e56:	2302      	movs	r3, #2
 8005e58:	623b      	str	r3, [r7, #32]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	fa93 f3a3 	rbit	r3, r3
 8005e60:	61fb      	str	r3, [r7, #28]
  return result;
 8005e62:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e64:	fab3 f383 	clz	r3, r3
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f043 0302 	orr.w	r3, r3, #2
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d102      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005e78:	4b39      	ldr	r3, [pc, #228]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	e007      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	fa93 f3a3 	rbit	r3, r3
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2202      	movs	r2, #2
 8005e90:	613a      	str	r2, [r7, #16]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	fa92 f2a2 	rbit	r2, r2
 8005e98:	60fa      	str	r2, [r7, #12]
  return result;
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	fab2 f282 	clz	r2, r2
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	f002 021f 	and.w	r2, r2, #31
 8005eac:	2101      	movs	r1, #1
 8005eae:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0bd      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005eb8:	4b29      	ldr	r3, [pc, #164]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4926      	ldr	r1, [pc, #152]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005eca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed2:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005edc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d008      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eea:	4b1d      	ldr	r3, [pc, #116]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	f023 0203 	bic.w	r2, r3, #3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	491a      	ldr	r1, [pc, #104]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f08:	4b15      	ldr	r3, [pc, #84]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	f023 0210 	bic.w	r2, r3, #16
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4912      	ldr	r1, [pc, #72]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d008      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f26:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	490b      	ldr	r1, [pc, #44]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d008      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f44:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	4903      	ldr	r1, [pc, #12]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3748      	adds	r7, #72	; 0x48
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	40007000 	.word	0x40007000
 8005f68:	10908100 	.word	0x10908100

08005f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e049      	b.n	8006012 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fc f8ae 	bl	80020f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4610      	mov	r0, r2
 8005fac:	f000 fc32 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	d001      	beq.n	8006034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e040      	b.n	80060b6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00e      	beq.n	8006074 <HAL_TIM_Base_Start_IT+0x58>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d009      	beq.n	8006074 <HAL_TIM_Base_Start_IT+0x58>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <HAL_TIM_Base_Start_IT+0xac>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_TIM_Base_Start_IT+0x58>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <HAL_TIM_Base_Start_IT+0xb0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d115      	bne.n	80060a0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <HAL_TIM_Base_Start_IT+0xb4>)
 800607c:	4013      	ands	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b06      	cmp	r3, #6
 8006084:	d015      	beq.n	80060b2 <HAL_TIM_Base_Start_IT+0x96>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608c:	d011      	beq.n	80060b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0201 	orr.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800609e:	e008      	b.n	80060b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	e000      	b.n	80060b4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	00010007 	.word	0x00010007

080060d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e049      	b.n	800617a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb feca 	bl	8001e94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f000 fb7e 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <HAL_TIM_PWM_Start+0x24>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	bf14      	ite	ne
 80061a0:	2301      	movne	r3, #1
 80061a2:	2300      	moveq	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	e03c      	b.n	8006222 <HAL_TIM_PWM_Start+0x9e>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d109      	bne.n	80061c2 <HAL_TIM_PWM_Start+0x3e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	bf14      	ite	ne
 80061ba:	2301      	movne	r3, #1
 80061bc:	2300      	moveq	r3, #0
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	e02f      	b.n	8006222 <HAL_TIM_PWM_Start+0x9e>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d109      	bne.n	80061dc <HAL_TIM_PWM_Start+0x58>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	e022      	b.n	8006222 <HAL_TIM_PWM_Start+0x9e>
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2b0c      	cmp	r3, #12
 80061e0:	d109      	bne.n	80061f6 <HAL_TIM_PWM_Start+0x72>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	bf14      	ite	ne
 80061ee:	2301      	movne	r3, #1
 80061f0:	2300      	moveq	r3, #0
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	e015      	b.n	8006222 <HAL_TIM_PWM_Start+0x9e>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d109      	bne.n	8006210 <HAL_TIM_PWM_Start+0x8c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	bf14      	ite	ne
 8006208:	2301      	movne	r3, #1
 800620a:	2300      	moveq	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	e008      	b.n	8006222 <HAL_TIM_PWM_Start+0x9e>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b01      	cmp	r3, #1
 800621a:	bf14      	ite	ne
 800621c:	2301      	movne	r3, #1
 800621e:	2300      	moveq	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e088      	b.n	800633c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Start+0xb6>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006238:	e023      	b.n	8006282 <HAL_TIM_PWM_Start+0xfe>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d104      	bne.n	800624a <HAL_TIM_PWM_Start+0xc6>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006248:	e01b      	b.n	8006282 <HAL_TIM_PWM_Start+0xfe>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d104      	bne.n	800625a <HAL_TIM_PWM_Start+0xd6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006258:	e013      	b.n	8006282 <HAL_TIM_PWM_Start+0xfe>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b0c      	cmp	r3, #12
 800625e:	d104      	bne.n	800626a <HAL_TIM_PWM_Start+0xe6>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006268:	e00b      	b.n	8006282 <HAL_TIM_PWM_Start+0xfe>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b10      	cmp	r3, #16
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Start+0xf6>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006278:	e003      	b.n	8006282 <HAL_TIM_PWM_Start+0xfe>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fde0 	bl	8006e50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2b      	ldr	r2, [pc, #172]	; (8006344 <HAL_TIM_PWM_Start+0x1c0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00e      	beq.n	80062b8 <HAL_TIM_PWM_Start+0x134>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2a      	ldr	r2, [pc, #168]	; (8006348 <HAL_TIM_PWM_Start+0x1c4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d009      	beq.n	80062b8 <HAL_TIM_PWM_Start+0x134>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a28      	ldr	r2, [pc, #160]	; (800634c <HAL_TIM_PWM_Start+0x1c8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <HAL_TIM_PWM_Start+0x134>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a27      	ldr	r2, [pc, #156]	; (8006350 <HAL_TIM_PWM_Start+0x1cc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d101      	bne.n	80062bc <HAL_TIM_PWM_Start+0x138>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <HAL_TIM_PWM_Start+0x13a>
 80062bc:	2300      	movs	r3, #0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1b      	ldr	r2, [pc, #108]	; (8006344 <HAL_TIM_PWM_Start+0x1c0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00e      	beq.n	80062fa <HAL_TIM_PWM_Start+0x176>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e4:	d009      	beq.n	80062fa <HAL_TIM_PWM_Start+0x176>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1a      	ldr	r2, [pc, #104]	; (8006354 <HAL_TIM_PWM_Start+0x1d0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_TIM_PWM_Start+0x176>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a14      	ldr	r2, [pc, #80]	; (8006348 <HAL_TIM_PWM_Start+0x1c4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d115      	bne.n	8006326 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	4b15      	ldr	r3, [pc, #84]	; (8006358 <HAL_TIM_PWM_Start+0x1d4>)
 8006302:	4013      	ands	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b06      	cmp	r3, #6
 800630a:	d015      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1b4>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006312:	d011      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0201 	orr.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006324:	e008      	b.n	8006338 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e000      	b.n	800633a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006338:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400
 8006350:	40014800 	.word	0x40014800
 8006354:	40000400 	.word	0x40000400
 8006358:	00010007 	.word	0x00010007

0800635c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b02      	cmp	r3, #2
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0202 	mvn.w	r2, #2
 8006388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa1a 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa0c 	bl	80067c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fa1d 	bl	80067ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0204 	mvn.w	r2, #4
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9f0 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9e2 	bl	80067c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9f3 	bl	80067ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b08      	cmp	r3, #8
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b08      	cmp	r3, #8
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0208 	mvn.w	r2, #8
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f9c6 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f9b8 	bl	80067c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9c9 	bl	80067ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b10      	cmp	r3, #16
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0210 	mvn.w	r2, #16
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2208      	movs	r2, #8
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f99c 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f98e 	bl	80067c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f99f 	bl	80067ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0201 	mvn.w	r2, #1
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb fba8 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b80      	cmp	r3, #128	; 0x80
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fdb8 	bl	800707c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	d10e      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d107      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fdab 	bl	8007090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d10e      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f94d 	bl	8006800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b20      	cmp	r3, #32
 8006572:	d10e      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d107      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f06f 0220 	mvn.w	r2, #32
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fd6b 	bl	8007068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e0ff      	b.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b14      	cmp	r3, #20
 80065c6:	f200 80f0 	bhi.w	80067aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006625 	.word	0x08006625
 80065d4:	080067ab 	.word	0x080067ab
 80065d8:	080067ab 	.word	0x080067ab
 80065dc:	080067ab 	.word	0x080067ab
 80065e0:	08006665 	.word	0x08006665
 80065e4:	080067ab 	.word	0x080067ab
 80065e8:	080067ab 	.word	0x080067ab
 80065ec:	080067ab 	.word	0x080067ab
 80065f0:	080066a7 	.word	0x080066a7
 80065f4:	080067ab 	.word	0x080067ab
 80065f8:	080067ab 	.word	0x080067ab
 80065fc:	080067ab 	.word	0x080067ab
 8006600:	080066e7 	.word	0x080066e7
 8006604:	080067ab 	.word	0x080067ab
 8006608:	080067ab 	.word	0x080067ab
 800660c:	080067ab 	.word	0x080067ab
 8006610:	08006729 	.word	0x08006729
 8006614:	080067ab 	.word	0x080067ab
 8006618:	080067ab 	.word	0x080067ab
 800661c:	080067ab 	.word	0x080067ab
 8006620:	08006769 	.word	0x08006769
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f96a 	bl	8006904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0208 	orr.w	r2, r2, #8
 800663e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0204 	bic.w	r2, r2, #4
 800664e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6999      	ldr	r1, [r3, #24]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	619a      	str	r2, [r3, #24]
      break;
 8006662:	e0a5      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f9d0 	bl	8006a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6999      	ldr	r1, [r3, #24]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	021a      	lsls	r2, r3, #8
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	619a      	str	r2, [r3, #24]
      break;
 80066a4:	e084      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fa2f 	bl	8006b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0208 	orr.w	r2, r2, #8
 80066c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0204 	bic.w	r2, r2, #4
 80066d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69d9      	ldr	r1, [r3, #28]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	61da      	str	r2, [r3, #28]
      break;
 80066e4:	e064      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fa8d 	bl	8006c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69d9      	ldr	r1, [r3, #28]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	021a      	lsls	r2, r3, #8
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	61da      	str	r2, [r3, #28]
      break;
 8006726:	e043      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fad0 	bl	8006cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0208 	orr.w	r2, r2, #8
 8006742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006766:	e023      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fb0e 	bl	8006d90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067a8:	e002      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	75fb      	strb	r3, [r7, #23]
      break;
 80067ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop

080067c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a32      	ldr	r2, [pc, #200]	; (80068f0 <TIM_Base_SetConfig+0xdc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_Base_SetConfig+0x28>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0x28>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a2f      	ldr	r2, [pc, #188]	; (80068f4 <TIM_Base_SetConfig+0xe0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d108      	bne.n	800684e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a27      	ldr	r2, [pc, #156]	; (80068f0 <TIM_Base_SetConfig+0xdc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d00f      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a24      	ldr	r2, [pc, #144]	; (80068f4 <TIM_Base_SetConfig+0xe0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00b      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a23      	ldr	r2, [pc, #140]	; (80068f8 <TIM_Base_SetConfig+0xe4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d007      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a22      	ldr	r2, [pc, #136]	; (80068fc <TIM_Base_SetConfig+0xe8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d003      	beq.n	800687e <TIM_Base_SetConfig+0x6a>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <TIM_Base_SetConfig+0xec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d108      	bne.n	8006890 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <TIM_Base_SetConfig+0xdc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0xc0>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a0e      	ldr	r2, [pc, #56]	; (80068f8 <TIM_Base_SetConfig+0xe4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0xc0>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <TIM_Base_SetConfig+0xe8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0xc0>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <TIM_Base_SetConfig+0xec>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d103      	bne.n	80068dc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	615a      	str	r2, [r3, #20]
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40014000 	.word	0x40014000
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800

08006904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a1b      	ldr	r3, [r3, #32]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0303 	bic.w	r3, r3, #3
 800693e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f023 0302 	bic.w	r3, r3, #2
 8006950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <TIM_OC1_SetConfig+0xfc>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00b      	beq.n	800697c <TIM_OC1_SetConfig+0x78>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <TIM_OC1_SetConfig+0x100>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d007      	beq.n	800697c <TIM_OC1_SetConfig+0x78>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a26      	ldr	r2, [pc, #152]	; (8006a08 <TIM_OC1_SetConfig+0x104>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_OC1_SetConfig+0x78>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <TIM_OC1_SetConfig+0x108>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d10c      	bne.n	8006996 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f023 0308 	bic.w	r3, r3, #8
 8006982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 0304 	bic.w	r3, r3, #4
 8006994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a19      	ldr	r2, [pc, #100]	; (8006a00 <TIM_OC1_SetConfig+0xfc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00b      	beq.n	80069b6 <TIM_OC1_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a18      	ldr	r2, [pc, #96]	; (8006a04 <TIM_OC1_SetConfig+0x100>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d007      	beq.n	80069b6 <TIM_OC1_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <TIM_OC1_SetConfig+0x104>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d003      	beq.n	80069b6 <TIM_OC1_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a16      	ldr	r2, [pc, #88]	; (8006a0c <TIM_OC1_SetConfig+0x108>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d111      	bne.n	80069da <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	621a      	str	r2, [r3, #32]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40014400 	.word	0x40014400
 8006a0c:	40014800 	.word	0x40014800

08006a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0210 	bic.w	r2, r3, #16
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0320 	bic.w	r3, r3, #32
 8006a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a24      	ldr	r2, [pc, #144]	; (8006b00 <TIM_OC2_SetConfig+0xf0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10d      	bne.n	8006a90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <TIM_OC2_SetConfig+0xf0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00b      	beq.n	8006ab0 <TIM_OC2_SetConfig+0xa0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	; (8006b04 <TIM_OC2_SetConfig+0xf4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d007      	beq.n	8006ab0 <TIM_OC2_SetConfig+0xa0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a19      	ldr	r2, [pc, #100]	; (8006b08 <TIM_OC2_SetConfig+0xf8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d003      	beq.n	8006ab0 <TIM_OC2_SetConfig+0xa0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a18      	ldr	r2, [pc, #96]	; (8006b0c <TIM_OC2_SetConfig+0xfc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d113      	bne.n	8006ad8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006abe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40012c00 	.word	0x40012c00
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800

08006b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	021b      	lsls	r3, r3, #8
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a23      	ldr	r2, [pc, #140]	; (8006bfc <TIM_OC3_SetConfig+0xec>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d10d      	bne.n	8006b8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1a      	ldr	r2, [pc, #104]	; (8006bfc <TIM_OC3_SetConfig+0xec>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00b      	beq.n	8006bae <TIM_OC3_SetConfig+0x9e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <TIM_OC3_SetConfig+0xf0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d007      	beq.n	8006bae <TIM_OC3_SetConfig+0x9e>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <TIM_OC3_SetConfig+0xf4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_OC3_SetConfig+0x9e>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC3_SetConfig+0xf8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d113      	bne.n	8006bd6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	621a      	str	r2, [r3, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400
 8006c08:	40014800 	.word	0x40014800

08006c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	031b      	lsls	r3, r3, #12
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <TIM_OC4_SetConfig+0xb8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <TIM_OC4_SetConfig+0x7c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <TIM_OC4_SetConfig+0xbc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d007      	beq.n	8006c88 <TIM_OC4_SetConfig+0x7c>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a14      	ldr	r2, [pc, #80]	; (8006ccc <TIM_OC4_SetConfig+0xc0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC4_SetConfig+0x7c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <TIM_OC4_SetConfig+0xc4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d109      	bne.n	8006c9c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	019b      	lsls	r3, r3, #6
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40014000 	.word	0x40014000
 8006ccc:	40014400 	.word	0x40014400
 8006cd0:	40014800 	.word	0x40014800

08006cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	041b      	lsls	r3, r3, #16
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <TIM_OC5_SetConfig+0xac>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00b      	beq.n	8006d46 <TIM_OC5_SetConfig+0x72>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <TIM_OC5_SetConfig+0xb0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <TIM_OC5_SetConfig+0x72>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <TIM_OC5_SetConfig+0xb4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_OC5_SetConfig+0x72>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a12      	ldr	r2, [pc, #72]	; (8006d8c <TIM_OC5_SetConfig+0xb8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d109      	bne.n	8006d5a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	621a      	str	r2, [r3, #32]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40014400 	.word	0x40014400
 8006d8c:	40014800 	.word	0x40014800

08006d90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	051b      	lsls	r3, r3, #20
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <TIM_OC6_SetConfig+0xb0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_OC6_SetConfig+0x74>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <TIM_OC6_SetConfig+0xb4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_OC6_SetConfig+0x74>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a14      	ldr	r2, [pc, #80]	; (8006e48 <TIM_OC6_SetConfig+0xb8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_OC6_SetConfig+0x74>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <TIM_OC6_SetConfig+0xbc>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d109      	bne.n	8006e18 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	029b      	lsls	r3, r3, #10
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	621a      	str	r2, [r3, #32]
}
 8006e32:	bf00      	nop
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40012c00 	.word	0x40012c00
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800

08006e50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	2201      	movs	r2, #1
 8006e64:	fa02 f303 	lsl.w	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1a      	ldr	r2, [r3, #32]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	401a      	ands	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1a      	ldr	r2, [r3, #32]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	fa01 f303 	lsl.w	r3, r1, r3
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
	...

08006e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e054      	b.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a24      	ldr	r2, [pc, #144]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d108      	bne.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ee4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1c:	d009      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a11      	ldr	r2, [pc, #68]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d10c      	bne.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40012c00 	.word	0x40012c00
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40014000 	.word	0x40014000

08006f78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f90:	2302      	movs	r3, #2
 8006f92:	e060      	b.n	8007056 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	041b      	lsls	r3, r3, #16
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a14      	ldr	r2, [pc, #80]	; (8007064 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d115      	bne.n	8007044 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	051b      	lsls	r3, r3, #20
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40012c00 	.word	0x40012c00

08007068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e040      	b.n	8007138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7fb f8ea 	bl	80022a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2224      	movs	r2, #36	; 0x24
 80070d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f8f6 	bl	80072d4 <UART_SetConfig>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e022      	b.n	8007138 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa20 	bl	8007540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800710e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800711e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 faa7 	bl	8007684 <UART_CheckIdleState>
 8007136:	4603      	mov	r3, r0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af02      	add	r7, sp, #8
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	4613      	mov	r3, r2
 800714e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007156:	2b20      	cmp	r3, #32
 8007158:	f040 80b6 	bne.w	80072c8 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_UART_Receive+0x28>
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e0ae      	b.n	80072ca <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2222      	movs	r2, #34	; 0x22
 8007178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007182:	f7fb f9cd 	bl	8002520 <HAL_GetTick>
 8007186:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a0:	d10e      	bne.n	80071c0 <HAL_UART_Receive+0x80>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <HAL_UART_Receive+0x76>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071b4:	e02d      	b.n	8007212 <HAL_UART_Receive+0xd2>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	22ff      	movs	r2, #255	; 0xff
 80071ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071be:	e028      	b.n	8007212 <HAL_UART_Receive+0xd2>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10d      	bne.n	80071e4 <HAL_UART_Receive+0xa4>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_UART_Receive+0x9a>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	22ff      	movs	r2, #255	; 0xff
 80071d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071d8:	e01b      	b.n	8007212 <HAL_UART_Receive+0xd2>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	227f      	movs	r2, #127	; 0x7f
 80071de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071e2:	e016      	b.n	8007212 <HAL_UART_Receive+0xd2>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ec:	d10d      	bne.n	800720a <HAL_UART_Receive+0xca>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d104      	bne.n	8007200 <HAL_UART_Receive+0xc0>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	227f      	movs	r2, #127	; 0x7f
 80071fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071fe:	e008      	b.n	8007212 <HAL_UART_Receive+0xd2>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	223f      	movs	r2, #63	; 0x3f
 8007204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007208:	e003      	b.n	8007212 <HAL_UART_Receive+0xd2>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007218:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d108      	bne.n	8007236 <HAL_UART_Receive+0xf6>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	e003      	b.n	800723e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800723e:	e037      	b.n	80072b0 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2200      	movs	r2, #0
 8007248:	2120      	movs	r1, #32
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 fac2 	bl	80077d4 <UART_WaitOnFlagUntilTimeout>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d005      	beq.n	8007262 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e033      	b.n	80072ca <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10c      	bne.n	8007282 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800726e:	b29a      	uxth	r2, r3
 8007270:	8a7b      	ldrh	r3, [r7, #18]
 8007272:	4013      	ands	r3, r2
 8007274:	b29a      	uxth	r2, r3
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	3302      	adds	r3, #2
 800727e:	61bb      	str	r3, [r7, #24]
 8007280:	e00d      	b.n	800729e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007288:	b29b      	uxth	r3, r3
 800728a:	b2da      	uxtb	r2, r3
 800728c:	8a7b      	ldrh	r3, [r7, #18]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	4013      	ands	r3, r2
 8007292:	b2da      	uxtb	r2, r3
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	3301      	adds	r3, #1
 800729c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1c1      	bne.n	8007240 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2220      	movs	r2, #32
 80072c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80072c4:	2300      	movs	r3, #0
 80072c6:	e000      	b.n	80072ca <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80072c8:	2302      	movs	r3, #2
  }
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3720      	adds	r7, #32
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b8a      	ldr	r3, [pc, #552]	; (8007528 <UART_SetConfig+0x254>)
 8007300:	4013      	ands	r3, r2
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	6979      	ldr	r1, [r7, #20]
 8007308:	430b      	orrs	r3, r1
 800730a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	430a      	orrs	r2, r1
 8007344:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a78      	ldr	r2, [pc, #480]	; (800752c <UART_SetConfig+0x258>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d120      	bne.n	8007392 <UART_SetConfig+0xbe>
 8007350:	4b77      	ldr	r3, [pc, #476]	; (8007530 <UART_SetConfig+0x25c>)
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	2b03      	cmp	r3, #3
 800735a:	d817      	bhi.n	800738c <UART_SetConfig+0xb8>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <UART_SetConfig+0x90>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007375 	.word	0x08007375
 8007368:	08007381 	.word	0x08007381
 800736c:	08007387 	.word	0x08007387
 8007370:	0800737b 	.word	0x0800737b
 8007374:	2300      	movs	r3, #0
 8007376:	77fb      	strb	r3, [r7, #31]
 8007378:	e01d      	b.n	80073b6 <UART_SetConfig+0xe2>
 800737a:	2302      	movs	r3, #2
 800737c:	77fb      	strb	r3, [r7, #31]
 800737e:	e01a      	b.n	80073b6 <UART_SetConfig+0xe2>
 8007380:	2304      	movs	r3, #4
 8007382:	77fb      	strb	r3, [r7, #31]
 8007384:	e017      	b.n	80073b6 <UART_SetConfig+0xe2>
 8007386:	2308      	movs	r3, #8
 8007388:	77fb      	strb	r3, [r7, #31]
 800738a:	e014      	b.n	80073b6 <UART_SetConfig+0xe2>
 800738c:	2310      	movs	r3, #16
 800738e:	77fb      	strb	r3, [r7, #31]
 8007390:	e011      	b.n	80073b6 <UART_SetConfig+0xe2>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a67      	ldr	r2, [pc, #412]	; (8007534 <UART_SetConfig+0x260>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d102      	bne.n	80073a2 <UART_SetConfig+0xce>
 800739c:	2300      	movs	r3, #0
 800739e:	77fb      	strb	r3, [r7, #31]
 80073a0:	e009      	b.n	80073b6 <UART_SetConfig+0xe2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a64      	ldr	r2, [pc, #400]	; (8007538 <UART_SetConfig+0x264>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d102      	bne.n	80073b2 <UART_SetConfig+0xde>
 80073ac:	2300      	movs	r3, #0
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e001      	b.n	80073b6 <UART_SetConfig+0xe2>
 80073b2:	2310      	movs	r3, #16
 80073b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073be:	d15a      	bne.n	8007476 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80073c0:	7ffb      	ldrb	r3, [r7, #31]
 80073c2:	2b08      	cmp	r3, #8
 80073c4:	d827      	bhi.n	8007416 <UART_SetConfig+0x142>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <UART_SetConfig+0xf8>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	080073f1 	.word	0x080073f1
 80073d0:	080073f9 	.word	0x080073f9
 80073d4:	08007401 	.word	0x08007401
 80073d8:	08007417 	.word	0x08007417
 80073dc:	08007407 	.word	0x08007407
 80073e0:	08007417 	.word	0x08007417
 80073e4:	08007417 	.word	0x08007417
 80073e8:	08007417 	.word	0x08007417
 80073ec:	0800740f 	.word	0x0800740f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f0:	f7fe fc52 	bl	8005c98 <HAL_RCC_GetPCLK1Freq>
 80073f4:	61b8      	str	r0, [r7, #24]
        break;
 80073f6:	e013      	b.n	8007420 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073f8:	f7fe fc70 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 80073fc:	61b8      	str	r0, [r7, #24]
        break;
 80073fe:	e00f      	b.n	8007420 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007400:	4b4e      	ldr	r3, [pc, #312]	; (800753c <UART_SetConfig+0x268>)
 8007402:	61bb      	str	r3, [r7, #24]
        break;
 8007404:	e00c      	b.n	8007420 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007406:	f7fe fbd1 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 800740a:	61b8      	str	r0, [r7, #24]
        break;
 800740c:	e008      	b.n	8007420 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007412:	61bb      	str	r3, [r7, #24]
        break;
 8007414:	e004      	b.n	8007420 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	77bb      	strb	r3, [r7, #30]
        break;
 800741e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d074      	beq.n	8007510 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	005a      	lsls	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	085b      	lsrs	r3, r3, #1
 8007430:	441a      	add	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	fbb2 f3f3 	udiv	r3, r2, r3
 800743a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b0f      	cmp	r3, #15
 8007440:	d916      	bls.n	8007470 <UART_SetConfig+0x19c>
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007448:	d212      	bcs.n	8007470 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	b29b      	uxth	r3, r3
 800744e:	f023 030f 	bic.w	r3, r3, #15
 8007452:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	085b      	lsrs	r3, r3, #1
 8007458:	b29b      	uxth	r3, r3
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	b29a      	uxth	r2, r3
 8007460:	89fb      	ldrh	r3, [r7, #14]
 8007462:	4313      	orrs	r3, r2
 8007464:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	89fa      	ldrh	r2, [r7, #14]
 800746c:	60da      	str	r2, [r3, #12]
 800746e:	e04f      	b.n	8007510 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	77bb      	strb	r3, [r7, #30]
 8007474:	e04c      	b.n	8007510 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007476:	7ffb      	ldrb	r3, [r7, #31]
 8007478:	2b08      	cmp	r3, #8
 800747a:	d828      	bhi.n	80074ce <UART_SetConfig+0x1fa>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x1b0>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074cf 	.word	0x080074cf
 8007494:	080074bf 	.word	0x080074bf
 8007498:	080074cf 	.word	0x080074cf
 800749c:	080074cf 	.word	0x080074cf
 80074a0:	080074cf 	.word	0x080074cf
 80074a4:	080074c7 	.word	0x080074c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a8:	f7fe fbf6 	bl	8005c98 <HAL_RCC_GetPCLK1Freq>
 80074ac:	61b8      	str	r0, [r7, #24]
        break;
 80074ae:	e013      	b.n	80074d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b0:	f7fe fc14 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 80074b4:	61b8      	str	r0, [r7, #24]
        break;
 80074b6:	e00f      	b.n	80074d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b8:	4b20      	ldr	r3, [pc, #128]	; (800753c <UART_SetConfig+0x268>)
 80074ba:	61bb      	str	r3, [r7, #24]
        break;
 80074bc:	e00c      	b.n	80074d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074be:	f7fe fb75 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 80074c2:	61b8      	str	r0, [r7, #24]
        break;
 80074c4:	e008      	b.n	80074d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ca:	61bb      	str	r3, [r7, #24]
        break;
 80074cc:	e004      	b.n	80074d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	77bb      	strb	r3, [r7, #30]
        break;
 80074d6:	bf00      	nop
    }

    if (pclk != 0U)
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d018      	beq.n	8007510 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	085a      	lsrs	r2, r3, #1
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	441a      	add	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b0f      	cmp	r3, #15
 80074f6:	d909      	bls.n	800750c <UART_SetConfig+0x238>
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074fe:	d205      	bcs.n	800750c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	b29a      	uxth	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60da      	str	r2, [r3, #12]
 800750a:	e001      	b.n	8007510 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800751c:	7fbb      	ldrb	r3, [r7, #30]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	efff69f3 	.word	0xefff69f3
 800752c:	40013800 	.word	0x40013800
 8007530:	40021000 	.word	0x40021000
 8007534:	40004400 	.word	0x40004400
 8007538:	40004800 	.word	0x40004800
 800753c:	007a1200 	.word	0x007a1200

08007540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00a      	beq.n	800756a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00a      	beq.n	800758c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00a      	beq.n	80075ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01a      	beq.n	8007656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800763e:	d10a      	bne.n	8007656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	605a      	str	r2, [r3, #4]
  }
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b098      	sub	sp, #96	; 0x60
 8007688:	af02      	add	r7, sp, #8
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007694:	f7fa ff44 	bl	8002520 <HAL_GetTick>
 8007698:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d12e      	bne.n	8007706 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076b0:	2200      	movs	r2, #0
 80076b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f88c 	bl	80077d4 <UART_WaitOnFlagUntilTimeout>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d021      	beq.n	8007706 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076d6:	653b      	str	r3, [r7, #80]	; 0x50
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e0:	647b      	str	r3, [r7, #68]	; 0x44
 80076e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e6      	bne.n	80076c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e062      	b.n	80077cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b04      	cmp	r3, #4
 8007712:	d149      	bne.n	80077a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800771c:	2200      	movs	r2, #0
 800771e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f856 	bl	80077d4 <UART_WaitOnFlagUntilTimeout>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d03c      	beq.n	80077a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	623b      	str	r3, [r7, #32]
   return(result);
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007742:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800774c:	633b      	str	r3, [r7, #48]	; 0x30
 800774e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e6      	bne.n	800772e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0301 	bic.w	r3, r3, #1
 8007776:	64bb      	str	r3, [r7, #72]	; 0x48
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007780:	61fa      	str	r2, [r7, #28]
 8007782:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	69b9      	ldr	r1, [r7, #24]
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	617b      	str	r3, [r7, #20]
   return(result);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e5      	bne.n	8007760 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e011      	b.n	80077cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3758      	adds	r7, #88	; 0x58
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	4613      	mov	r3, r2
 80077e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077e4:	e049      	b.n	800787a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ec:	d045      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ee:	f7fa fe97 	bl	8002520 <HAL_GetTick>
 80077f2:	4602      	mov	r2, r0
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d302      	bcc.n	8007804 <UART_WaitOnFlagUntilTimeout+0x30>
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e048      	b.n	800789a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d031      	beq.n	800787a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b08      	cmp	r3, #8
 8007822:	d110      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2208      	movs	r2, #8
 800782a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f838 	bl	80078a2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2208      	movs	r2, #8
 8007836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e029      	b.n	800789a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007854:	d111      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800785e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f81e 	bl	80078a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e00f      	b.n	800789a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4013      	ands	r3, r2
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	429a      	cmp	r2, r3
 8007888:	bf0c      	ite	eq
 800788a:	2301      	moveq	r3, #1
 800788c:	2300      	movne	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	429a      	cmp	r2, r3
 8007896:	d0a6      	beq.n	80077e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b095      	sub	sp, #84	; 0x54
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c8:	643b      	str	r3, [r7, #64]	; 0x40
 80078ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e6      	bne.n	80078aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	f023 0301 	bic.w	r3, r3, #1
 80078f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3308      	adds	r3, #8
 80078fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e5      	bne.n	80078dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007914:	2b01      	cmp	r3, #1
 8007916:	d118      	bne.n	800794a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	60bb      	str	r3, [r7, #8]
   return(result);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f023 0310 	bic.w	r3, r3, #16
 800792c:	647b      	str	r3, [r7, #68]	; 0x44
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6979      	ldr	r1, [r7, #20]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	613b      	str	r3, [r7, #16]
   return(result);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e6      	bne.n	8007918 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800795e:	bf00      	nop
 8007960:	3754      	adds	r7, #84	; 0x54
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <__libc_init_array>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4d0d      	ldr	r5, [pc, #52]	; (80079a4 <__libc_init_array+0x38>)
 8007970:	4c0d      	ldr	r4, [pc, #52]	; (80079a8 <__libc_init_array+0x3c>)
 8007972:	1b64      	subs	r4, r4, r5
 8007974:	10a4      	asrs	r4, r4, #2
 8007976:	2600      	movs	r6, #0
 8007978:	42a6      	cmp	r6, r4
 800797a:	d109      	bne.n	8007990 <__libc_init_array+0x24>
 800797c:	4d0b      	ldr	r5, [pc, #44]	; (80079ac <__libc_init_array+0x40>)
 800797e:	4c0c      	ldr	r4, [pc, #48]	; (80079b0 <__libc_init_array+0x44>)
 8007980:	f000 f860 	bl	8007a44 <_init>
 8007984:	1b64      	subs	r4, r4, r5
 8007986:	10a4      	asrs	r4, r4, #2
 8007988:	2600      	movs	r6, #0
 800798a:	42a6      	cmp	r6, r4
 800798c:	d105      	bne.n	800799a <__libc_init_array+0x2e>
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	f855 3b04 	ldr.w	r3, [r5], #4
 8007994:	4798      	blx	r3
 8007996:	3601      	adds	r6, #1
 8007998:	e7ee      	b.n	8007978 <__libc_init_array+0xc>
 800799a:	f855 3b04 	ldr.w	r3, [r5], #4
 800799e:	4798      	blx	r3
 80079a0:	3601      	adds	r6, #1
 80079a2:	e7f2      	b.n	800798a <__libc_init_array+0x1e>
 80079a4:	08007a9c 	.word	0x08007a9c
 80079a8:	08007a9c 	.word	0x08007a9c
 80079ac:	08007a9c 	.word	0x08007a9c
 80079b0:	08007aa0 	.word	0x08007aa0

080079b4 <memset>:
 80079b4:	4402      	add	r2, r0
 80079b6:	4603      	mov	r3, r0
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d100      	bne.n	80079be <memset+0xa>
 80079bc:	4770      	bx	lr
 80079be:	f803 1b01 	strb.w	r1, [r3], #1
 80079c2:	e7f9      	b.n	80079b8 <memset+0x4>

080079c4 <lrintf>:
 80079c4:	ee10 3a10 	vmov	r3, s0
 80079c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80079cc:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 80079d0:	281e      	cmp	r0, #30
 80079d2:	b082      	sub	sp, #8
 80079d4:	dc2e      	bgt.n	8007a34 <lrintf+0x70>
 80079d6:	1c41      	adds	r1, r0, #1
 80079d8:	da02      	bge.n	80079e0 <lrintf+0x1c>
 80079da:	2000      	movs	r0, #0
 80079dc:	b002      	add	sp, #8
 80079de:	4770      	bx	lr
 80079e0:	2816      	cmp	r0, #22
 80079e2:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80079e6:	dd09      	ble.n	80079fc <lrintf+0x38>
 80079e8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80079ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80079f0:	3a96      	subs	r2, #150	; 0x96
 80079f2:	4090      	lsls	r0, r2
 80079f4:	2900      	cmp	r1, #0
 80079f6:	d0f1      	beq.n	80079dc <lrintf+0x18>
 80079f8:	4240      	negs	r0, r0
 80079fa:	e7ef      	b.n	80079dc <lrintf+0x18>
 80079fc:	4b10      	ldr	r3, [pc, #64]	; (8007a40 <lrintf+0x7c>)
 80079fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007a02:	ed93 7a00 	vldr	s14, [r3]
 8007a06:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007a0a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007a0e:	eddd 7a01 	vldr	s15, [sp, #4]
 8007a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a16:	ee17 3a90 	vmov	r3, s15
 8007a1a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007a1e:	d0dc      	beq.n	80079da <lrintf+0x16>
 8007a20:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007a24:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007a28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007a2c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007a30:	40d8      	lsrs	r0, r3
 8007a32:	e7df      	b.n	80079f4 <lrintf+0x30>
 8007a34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007a38:	ee17 0a90 	vmov	r0, s15
 8007a3c:	e7ce      	b.n	80079dc <lrintf+0x18>
 8007a3e:	bf00      	nop
 8007a40:	08007a94 	.word	0x08007a94

08007a44 <_init>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr

08007a50 <_fini>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr

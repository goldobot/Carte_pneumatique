
Code_carte_pneumatique.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008638  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080087c0  080087c0  000187c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008800  08008800  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008800  08008800  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008800  08008800  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000059c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005a8  200005a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001787e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ba7  00000000  00000000  000378ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001380  00000000  00000000  0003a468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001278  00000000  00000000  0003b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d070  00000000  00000000  0003ca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186d7  00000000  00000000  00059ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0132  00000000  00000000  000721a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001222d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000549c  00000000  00000000  0012232c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087a8 	.word	0x080087a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080087a8 	.word	0x080087a8

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <dshot_init>:

int dshot_ready = 0;

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f83f 	bl	80008c4 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000846:	f000 f8fb 	bl	8000a40 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800084a:	f000 f91d 	bl	8000a88 <dshot_start_pwm>
  dshot_ready = 1;
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <dshot_init+0x28>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000190 	.word	0x20000190

08000860 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if (!dshot_ready) return;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <dshot_write+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <dshot_write+0x20>

	dshot_prepare_dmabuffer_all(motor_value);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f98d 	bl	8000b90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000876:	f000 f9bf 	bl	8000bf8 <dshot_dma_start>
	dshot_enable_dma_request();
 800087a:	f000 fa03 	bl	8000c84 <dshot_enable_dma_request>
 800087e:	e000      	b.n	8000882 <dshot_write+0x22>
  if (!dshot_ready) return;
 8000880:	bf00      	nop
}
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000190 	.word	0x20000190

0800088c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d003      	beq.n	80008a4 <dshot_choose_type+0x18>
 800089c:	2b02      	cmp	r3, #2
 800089e:	d103      	bne.n	80008a8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <dshot_choose_type+0x2c>)
 80008a2:	e002      	b.n	80008aa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <dshot_choose_type+0x30>)
 80008a6:	e000      	b.n	80008aa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <dshot_choose_type+0x34>)
	}
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	00b71b00 	.word	0x00b71b00
 80008bc:	005b8d80 	.word	0x005b8d80
 80008c0:	002dc6c0 	.word	0x002dc6c0

080008c4 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	ed2d 8b02 	vpush	{d8}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <dshot_set_timer+0xc4>)
 80008d4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffd2 	bl	800088c <dshot_choose_type>
 80008e8:	ee07 0a90 	vmov	s15, r0
 80008ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008f4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800098c <dshot_set_timer+0xc8>
 80008f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000900:	f007 ff12 	bl	8008728 <lrintf>
 8000904:	4603      	mov	r3, r0
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <dshot_set_timer+0xcc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	897a      	ldrh	r2, [r7, #10]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <dshot_set_timer+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2214      	movs	r2, #20
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <dshot_set_timer+0xcc>)
 800091e:	2214      	movs	r2, #20
 8000920:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <dshot_set_timer+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <dshot_set_timer+0xd0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2214      	movs	r2, #20
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <dshot_set_timer+0xd0>)
 8000934:	2214      	movs	r2, #20
 8000936:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <dshot_set_timer+0xd4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	897a      	ldrh	r2, [r7, #10]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <dshot_set_timer+0xd4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2214      	movs	r2, #20
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <dshot_set_timer+0xd4>)
 800094a:	2214      	movs	r2, #20
 800094c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <dshot_set_timer+0xd0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	897a      	ldrh	r2, [r7, #10]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <dshot_set_timer+0xd0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2214      	movs	r2, #20
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <dshot_set_timer+0xd0>)
 8000960:	2214      	movs	r2, #20
 8000962:	60da      	str	r2, [r3, #12]

	// motor5
	__HAL_TIM_SET_PRESCALER(MOTOR_5_TIM, dshot_prescaler);
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <dshot_set_timer+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	897a      	ldrh	r2, [r7, #10]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_5_TIM, MOTOR_BITLENGTH);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <dshot_set_timer+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2214      	movs	r2, #20
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <dshot_set_timer+0xcc>)
 8000976:	2214      	movs	r2, #20
 8000978:	60da      	str	r2, [r3, #12]
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	ecbd 8b02 	vpop	{d8}
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	016e3600 	.word	0x016e3600
 800098c:	3c23d70a 	.word	0x3c23d70a
 8000990:	200002d8 	.word	0x200002d8
 8000994:	20000324 	.word	0x20000324
 8000998:	2000028c 	.word	0x2000028c

0800099c <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[MOTOR_1_TIM_DMA_ID])
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d108      	bne.n	80009c6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_1_TIM_DMA);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009c2:	60da      	str	r2, [r3, #12]
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
	}

}
 80009c4:	e036      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_2_TIM_DMA_ID])
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d108      	bne.n	80009e2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_2_TIM_DMA);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	e028      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_3_TIM_DMA_ID])
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d108      	bne.n	80009fe <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_3_TIM_DMA);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009fa:	60da      	str	r2, [r3, #12]
}
 80009fc:	e01a      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_4_TIM_DMA_ID])
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d108      	bne.n	8000a1a <dshot_dma_tc_callback+0x7e>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_4_TIM_DMA);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00c      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d107      	bne.n	8000a34 <dshot_dma_tc_callback+0x98>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a32:	60da      	str	r2, [r3, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <dshot_put_tc_callback_function+0x44>)
 8000a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a58:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200002d8 	.word	0x200002d8
 8000a7c:	0800099d 	.word	0x0800099d
 8000a80:	20000324 	.word	0x20000324
 8000a84:	2000028c 	.word	0x2000028c

08000a88 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000a90:	f005 fc68 	bl	8006364 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a94:	210c      	movs	r1, #12
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <dshot_start_pwm+0x34>)
 8000a98:	f005 fc64 	bl	8006364 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <dshot_start_pwm+0x38>)
 8000aa0:	f005 fc60 	bl	8006364 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <dshot_start_pwm+0x34>)
 8000aa8:	f005 fc5c 	bl	8006364 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_5_TIM, MOTOR_5_TIM_CHANNEL);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000ab0:	f005 fc58 	bl	8006364 <HAL_TIM_PWM_Start>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200002d8 	.word	0x200002d8
 8000abc:	20000324 	.word	0x20000324
 8000ac0:	2000028c 	.word	0x2000028c

08000ac4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000ae6:	893b      	ldrh	r3, [r7, #8]
 8000ae8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e009      	b.n	8000b04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4053      	eors	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddf2      	ble.n	8000af0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000b12:	893b      	ldrh	r3, [r7, #8]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000b20:	893b      	ldrh	r3, [r7, #8]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffc1 	bl	8000ac4 <dshot_prepare_packet>
 8000b42:	4603      	mov	r3, r0
 8000b44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e011      	b.n	8000b70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da01      	bge.n	8000b58 <dshot_prepare_dmabuffer+0x2a>
 8000b54:	220e      	movs	r2, #14
 8000b56:	e000      	b.n	8000b5a <dshot_prepare_dmabuffer+0x2c>
 8000b58:	2207      	movs	r2, #7
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	440b      	add	r3, r1
 8000b62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	ddea      	ble.n	8000b4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3340      	adds	r3, #64	; 0x40
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3344      	adds	r3, #68	; 0x44
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <dshot_prepare_dmabuffer_all+0x54>)
 8000ba0:	f7ff ffc5 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <dshot_prepare_dmabuffer_all+0x58>)
 8000bae:	f7ff ffbe 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <dshot_prepare_dmabuffer_all+0x5c>)
 8000bbc:	f7ff ffb7 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3306      	adds	r3, #6
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <dshot_prepare_dmabuffer_all+0x60>)
 8000bca:	f7ff ffb0 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor5_dmabuffer, motor_value[4]);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <dshot_prepare_dmabuffer_all+0x64>)
 8000bd8:	f7ff ffa9 	bl	8000b2e <dshot_prepare_dmabuffer>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000028 	.word	0x20000028
 8000be8:	20000070 	.word	0x20000070
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	20000100 	.word	0x20000100
 8000bf4:	20000148 	.word	0x20000148

08000bf8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <dshot_dma_start+0x6c>)
 8000bfe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c00:	4919      	ldr	r1, [pc, #100]	; (8000c68 <dshot_dma_start+0x70>)
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	333c      	adds	r3, #60	; 0x3c
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	f002 ff12 	bl	8003a34 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <dshot_dma_start+0x74>)
 8000c12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c14:	4916      	ldr	r1, [pc, #88]	; (8000c70 <dshot_dma_start+0x78>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <dshot_dma_start+0x74>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2312      	movs	r3, #18
 8000c20:	f002 ff08 	bl	8003a34 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c28:	4913      	ldr	r1, [pc, #76]	; (8000c78 <dshot_dma_start+0x80>)
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3334      	adds	r3, #52	; 0x34
 8000c30:	461a      	mov	r2, r3
 8000c32:	2312      	movs	r3, #18
 8000c34:	f002 fefe 	bl	8003a34 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <dshot_dma_start+0x74>)
 8000c3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c3c:	490f      	ldr	r1, [pc, #60]	; (8000c7c <dshot_dma_start+0x84>)
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <dshot_dma_start+0x74>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3334      	adds	r3, #52	; 0x34
 8000c44:	461a      	mov	r2, r3
 8000c46:	2312      	movs	r3, #18
 8000c48:	f002 fef4 	bl	8003a34 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID], (uint32_t)motor5_dmabuffer, (uint32_t)&MOTOR_5_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c50:	490b      	ldr	r1, [pc, #44]	; (8000c80 <dshot_dma_start+0x88>)
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3334      	adds	r3, #52	; 0x34
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f002 feea 	bl	8003a34 <HAL_DMA_Start_IT>

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200002d8 	.word	0x200002d8
 8000c68:	20000028 	.word	0x20000028
 8000c6c:	20000324 	.word	0x20000324
 8000c70:	20000070 	.word	0x20000070
 8000c74:	2000028c 	.word	0x2000028c
 8000c78:	200000b8 	.word	0x200000b8
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	20000148 	.word	0x20000148

08000c84 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, MOTOR_1_TIM_DMA);
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c96:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, MOTOR_2_TIM_DMA);
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ca6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, MOTOR_3_TIM_DMA);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, MOTOR_4_TIM_DMA);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_5_TIM, MOTOR_5_TIM_DMA);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd6:	60da      	str	r2, [r3, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200002d8 	.word	0x200002d8
 8000ce8:	20000324 	.word	0x20000324
 8000cec:	2000028c 	.word	0x2000028c

08000cf0 <write_r_buffer>:
uint8_t write_index;
uint8_t read_index;

uint8_t commands_buffer[RING_BUF_SIZE];

void write_r_buffer(uint8_t * r_buf, uint8_t command){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	if (r_buf_length == RING_BUF_SIZE){}
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <write_r_buffer+0x54>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	d012      	beq.n	8000d2a <write_r_buffer+0x3a>
	else {
		r_buf[write_index] = command;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <write_r_buffer+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	701a      	strb	r2, [r3, #0]
		write_index++;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <write_r_buffer+0x58>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <write_r_buffer+0x58>)
 8000d1c:	701a      	strb	r2, [r3, #0]
		r_buf_length++;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <write_r_buffer+0x54>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <write_r_buffer+0x54>)
 8000d28:	701a      	strb	r2, [r3, #0]
	}
	if (write_index == RING_BUF_SIZE){
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <write_r_buffer+0x58>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b19      	cmp	r3, #25
 8000d30:	d102      	bne.n	8000d38 <write_r_buffer+0x48>
		write_index = 0;
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <write_r_buffer+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
	}
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	2000019d 	.word	0x2000019d
 8000d48:	2000019e 	.word	0x2000019e

08000d4c <read_r_buffer>:

uint8_t read_r_buffer(uint8_t * r_buf){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	uint8_t val;
	if (r_buf_length == 0){return -1;}
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <read_r_buffer+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <read_r_buffer+0x14>
 8000d5c:	23ff      	movs	r3, #255	; 0xff
 8000d5e:	e01a      	b.n	8000d96 <read_r_buffer+0x4a>
	else {
		val = r_buf[read_index];
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <read_r_buffer+0x5c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	73fb      	strb	r3, [r7, #15]
		read_index++;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <read_r_buffer+0x5c>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b2da      	uxtb	r2, r3
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <read_r_buffer+0x5c>)
 8000d78:	701a      	strb	r2, [r3, #0]
		r_buf_length--;
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <read_r_buffer+0x58>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <read_r_buffer+0x58>)
 8000d84:	701a      	strb	r2, [r3, #0]
	}
	if (read_index == RING_BUF_SIZE){
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <read_r_buffer+0x5c>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b19      	cmp	r3, #25
 8000d8c:	d102      	bne.n	8000d94 <read_r_buffer+0x48>
		read_index = 0;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <read_r_buffer+0x5c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	}
	return val;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	2000019d 	.word	0x2000019d
 8000da8:	2000019f 	.word	0x2000019f

08000dac <HAL_UART_RxCpltCallback>:
//Partie D-Shot
uint16_t my_motor_value[5] = {0, 0, 0, 0, 0};

//Partie UART en interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	write_r_buffer(commands_buffer, command_buffer);
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_UART_RxCpltCallback+0x30>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	4809      	ldr	r0, [pc, #36]	; (8000de0 <HAL_UART_RxCpltCallback+0x34>)
 8000dbc:	f7ff ff98 	bl	8000cf0 <write_r_buffer>
	res1=HAL_UART_Receive_IT(&huart2, &command_buffer, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4906      	ldr	r1, [pc, #24]	; (8000ddc <HAL_UART_RxCpltCallback+0x30>)
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <HAL_UART_RxCpltCallback+0x38>)
 8000dc6:	f006 fb35 	bl	8007434 <HAL_UART_Receive_IT>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_UART_RxCpltCallback+0x3c>)
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001b9 	.word	0x200001b9
 8000de0:	200001a0 	.word	0x200001a0
 8000de4:	20000510 	.word	0x20000510
 8000de8:	200001be 	.word	0x200001be
 8000dec:	00000000 	.word	0x00000000

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09a      	sub	sp, #104	; 0x68
 8000df4:	af02      	add	r7, sp, #8

	//partie Capteur de Pression
	//modèle : 2513130810401
	float pressure_val;
	//SENP:  Pressure sensor sensitivity : 4.196 ×10-2
	float SENP = 0.04196;
 8000df6:	4bb4      	ldr	r3, [pc, #720]	; (80010c8 <main+0x2d8>)
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
	//PMIN: Min Pressure output : -100 kPa
	int Pmin = -100;
 8000dfa:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000dfe:	64bb      	str	r3, [r7, #72]	; 0x48
	//OUTP_MIN: digital output at Pmin = 3277
	float OUT_Pmin = 3277;
 8000e00:	4bb2      	ldr	r3, [pc, #712]	; (80010cc <main+0x2dc>)
 8000e02:	647b      	str	r3, [r7, #68]	; 0x44
	//P15bit = PH & PL
	float P15bit;
	//tableaux des 100 dernières valeurs de pression, toutes les valeurs initialisées à 0
	uint8_t pressures[PRESSURES_SIZE] = {0};
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	809a      	strh	r2, [r3, #4]
	//valeur pour remplir le tableau des valeurs de pressions avant de calculer la moyennes des pressions
	uint32_t pressures_mean = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	65fb      	str	r3, [r7, #92]	; 0x5c

	// explication de la conversion des valeurs de l'ADC en température
	// dans le fichier "Equation_Sonde_PT100, il y a 2 courbes, ces coeffs sont respectivement les pentes et les ordonnées à l'origine
	// raw = valeur numérique renvoyée par l'ADC
	// méthode de calibration sonde PT100 : mesure resistance et raw à 22°   &   mesure resistance et raw à 100° (pistolet à air chaud devant la PT100)
	float raw_to_res_mult = 0.0393;
 8000e16:	4bae      	ldr	r3, [pc, #696]	; (80010d0 <main+0x2e0>)
 8000e18:	643b      	str	r3, [r7, #64]	; 0x40
	float raw_to_res_offset = -2.47;
 8000e1a:	4bae      	ldr	r3, [pc, #696]	; (80010d4 <main+0x2e4>)
 8000e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
	float res_to_temp_mult = -0.74;
 8000e1e:	4bae      	ldr	r3, [pc, #696]	; (80010d8 <main+0x2e8>)
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
	float res_to_temp_offset = 104;
 8000e22:	4bae      	ldr	r3, [pc, #696]	; (80010dc <main+0x2ec>)
 8000e24:	637b      	str	r3, [r7, #52]	; 0x34

	//Partie Arrêt d'urgence
	uint8_t AU_Current_Status = GPIO_PIN_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t AU_Old_Status = GPIO_PIN_RESET;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e32:	f001 fbad 	bl	8002590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e36:	f000 fbc1 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3a:	f000 feff 	bl	8001c3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e3e:	f000 febf 	bl	8001bc0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e42:	f000 fe8d 	bl	8001b60 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e46:	f000 fd8b 	bl	8001960 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e4a:	f000 fe53 	bl	8001af4 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000e4e:	f000 fdeb 	bl	8001a28 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e52:	f000 fcf5 	bl	8001840 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e56:	f000 fcb3 	bl	80017c0 <MX_I2C1_Init>
  MX_CAN_Init();
 8000e5a:	f000 fc7d 	bl	8001758 <MX_CAN_Init>
  MX_ADC1_Init();
 8000e5e:	f000 fc0b 	bl	8001678 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	dshot_init(DSHOT_SPEED);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fce6 	bl	8000834 <dshot_init>
	//Initialization Des ESC des moteurs ET TOUT LE RESTE
	my_motor_value[0] = 0;
 8000e68:	4b9d      	ldr	r3, [pc, #628]	; (80010e0 <main+0x2f0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	801a      	strh	r2, [r3, #0]
	my_motor_value[1] = 0;
 8000e6e:	4b9c      	ldr	r3, [pc, #624]	; (80010e0 <main+0x2f0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	805a      	strh	r2, [r3, #2]
	my_motor_value[2] = 0;
 8000e74:	4b9a      	ldr	r3, [pc, #616]	; (80010e0 <main+0x2f0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	809a      	strh	r2, [r3, #4]
	my_motor_value[3] = 0;
 8000e7a:	4b99      	ldr	r3, [pc, #612]	; (80010e0 <main+0x2f0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	80da      	strh	r2, [r3, #6]
	my_motor_value[4] = 0;
 8000e80:	4b97      	ldr	r3, [pc, #604]	; (80010e0 <main+0x2f0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f003 f923 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2110      	movs	r1, #16
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f003 f91d 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f003 f917 	bl	80040d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2101      	movs	r1, #1
 8000eae:	488d      	ldr	r0, [pc, #564]	; (80010e4 <main+0x2f4>)
 8000eb0:	f003 f912 	bl	80040d8 <HAL_GPIO_WritePin>
	//start to count (for tim6 interruption)
	HAL_TIM_Base_Start_IT(&htim6);
 8000eb4:	488c      	ldr	r0, [pc, #560]	; (80010e8 <main+0x2f8>)
 8000eb6:	f005 f9a1 	bl	80061fc <HAL_TIM_Base_Start_IT>
	//a peu près temps minimal de delay pour laisser le temps aux moteurs de s'initialiser
	HAL_Delay(2600);
 8000eba:	f640 2028 	movw	r0, #2600	; 0xa28
 8000ebe:	f001 fbcd 	bl	800265c <HAL_Delay>
	//On lance l'interruption sur l'UART2, à relancer dans le callback !
	res1=HAL_UART_Receive_IT(&huart2, &command_buffer, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4989      	ldr	r1, [pc, #548]	; (80010ec <main+0x2fc>)
 8000ec6:	488a      	ldr	r0, [pc, #552]	; (80010f0 <main+0x300>)
 8000ec8:	f006 fab4 	bl	8007434 <HAL_UART_Receive_IT>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <main+0x304>)
 8000ed2:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Partie AU : récupération du state de l'AU
		AU_Current_Status = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	4883      	ldr	r0, [pc, #524]	; (80010e4 <main+0x2f4>)
 8000ed8:	f003 f8e6 	bl	80040a8 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		//res1=HAL_UART_Receive(&huart2, &command_buffer, 1, 100);

		//Partie Reset_small : Reset de tout lorsque l'AU repasse à l'état haut (non coupé) alors qu'il était à l'état bas (coupé) juste avant
		if ((AU_Current_Status == GPIO_PIN_RESET) && AU_Old_Status == GPIO_PIN_SET){
 8000ee2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d13c      	bne.n	8000f64 <main+0x174>
 8000eea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d138      	bne.n	8000f64 <main+0x174>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000ef2:	4b7b      	ldr	r3, [pc, #492]	; (80010e0 <main+0x2f0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000ef8:	4b79      	ldr	r3, [pc, #484]	; (80010e0 <main+0x2f0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000efe:	4b78      	ldr	r3, [pc, #480]	; (80010e0 <main+0x2f0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000f04:	4b76      	ldr	r3, [pc, #472]	; (80010e0 <main+0x2f0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000f0a:	4b75      	ldr	r3, [pc, #468]	; (80010e0 <main+0x2f0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	811a      	strh	r2, [r3, #8]
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f003 f8de 	bl	80040d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2110      	movs	r1, #16
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f003 f8d8 	bl	80040d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2108      	movs	r1, #8
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f003 f8d2 	bl	80040d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2101      	movs	r1, #1
 8000f38:	486a      	ldr	r0, [pc, #424]	; (80010e4 <main+0x2f4>)
 8000f3a:	f003 f8cd 	bl	80040d8 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2120      	movs	r1, #32
 8000f42:	486d      	ldr	r0, [pc, #436]	; (80010f8 <main+0x308>)
 8000f44:	f003 f8c8 	bl	80040d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	486a      	ldr	r0, [pc, #424]	; (80010f8 <main+0x308>)
 8000f4e:	f003 f8c3 	bl	80040d8 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000f52:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <main+0x30c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
			//reset le timer de purge
			BAU_tick = 0;
 8000f58:	4b69      	ldr	r3, [pc, #420]	; (8001100 <main+0x310>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8000f5e:	4b69      	ldr	r3, [pc, #420]	; (8001104 <main+0x314>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
		}

		//Partie Reset_Full : Si l'AU passe à l'état bas (coupé) alors qu'il était à l'état haut (non coupé), reset tout et lancer un timer de 2 minutes, au bout duquel on purge !
		if (AU_Current_Status == GPIO_PIN_SET && AU_Old_Status == GPIO_PIN_RESET){
 8000f64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d139      	bne.n	8000fe0 <main+0x1f0>
 8000f6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d135      	bne.n	8000fe0 <main+0x1f0>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000f74:	4b5a      	ldr	r3, [pc, #360]	; (80010e0 <main+0x2f0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000f7a:	4b59      	ldr	r3, [pc, #356]	; (80010e0 <main+0x2f0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000f80:	4b57      	ldr	r3, [pc, #348]	; (80010e0 <main+0x2f0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000f86:	4b56      	ldr	r3, [pc, #344]	; (80010e0 <main+0x2f0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000f8c:	4b54      	ldr	r3, [pc, #336]	; (80010e0 <main+0x2f0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	811a      	strh	r2, [r3, #8]
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f003 f89d 	bl	80040d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f003 f897 	bl	80040d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2108      	movs	r1, #8
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f003 f891 	bl	80040d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2101      	movs	r1, #1
 8000fba:	484a      	ldr	r0, [pc, #296]	; (80010e4 <main+0x2f4>)
 8000fbc:	f003 f88c 	bl	80040d8 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	484c      	ldr	r0, [pc, #304]	; (80010f8 <main+0x308>)
 8000fc6:	f003 f887 	bl	80040d8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2110      	movs	r1, #16
 8000fce:	484a      	ldr	r0, [pc, #296]	; (80010f8 <main+0x308>)
 8000fd0:	f003 f882 	bl	80040d8 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <main+0x30c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
			// tempo de 2 min, puis purge
			BAU_tick_enable = 1;
 8000fda:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <main+0x314>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
		}
		//changer les valeurs des AU status
		AU_Old_Status = AU_Current_Status;
 8000fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fe4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		//Lecture de la pression en I2C et activation OU NON du compresseur en fonction
		res2 = HAL_I2C_Master_Receive(&hi2c1, 0xf1, I2C_buf, 4, 200);
 8000fe8:	f107 0218 	add.w	r2, r7, #24
 8000fec:	23c8      	movs	r3, #200	; 0xc8
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	21f1      	movs	r1, #241	; 0xf1
 8000ff4:	4844      	ldr	r0, [pc, #272]	; (8001108 <main+0x318>)
 8000ff6:	f003 f917 	bl	8004228 <HAL_I2C_Master_Receive>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <main+0x31c>)
 8001000:	701a      	strb	r2, [r3, #0]
		if (res2 == HAL_OK){
 8001002:	4b42      	ldr	r3, [pc, #264]	; (800110c <main+0x31c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f040 80b2 	bne.w	8001170 <main+0x380>
			//Régulation Pression
			//Calcul de la pression en 10èmes de bar RELATIFS
			//voir infos_pressure_sensor plus haut pour infos sur variables
			P15bit = (int)((I2C_buf[0] << 8)|I2C_buf[1]);
 800100c:	7e3b      	ldrb	r3, [r7, #24]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	7e7a      	ldrb	r2, [r7, #25]
 8001012:	4313      	orrs	r3, r2
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			//formule d'après la datasheet du capteur : pressure_val = [(P15bit - OUTP_MIN)*SENP)] + PMIN;
			//Conversion en 10èmes de bar à la fin
			pressure_val = P15bit - OUT_Pmin; //2383
 8001020:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001024:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800102c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val*SENP; //99.99068
 8001030:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001034:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val + Pmin; // -0,00932
 8001040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800104e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001052:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val * 0.1; // -0,000932
 8001056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001058:	f7ff fb44 	bl	80006e4 <__aeabi_f2d>
 800105c:	a318      	add	r3, pc, #96	; (adr r3, 80010c0 <main+0x2d0>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff f8b1 	bl	80001c8 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fb91 	bl	8000794 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28

			//calcul de la moyenne de toutes les pressions précédentes
			//on décale tout le tableau vers la droite, en faisant donc disparaître la valeur la plus ancienne
			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8001076:	2309      	movs	r3, #9
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
 800107a:	e010      	b.n	800109e <main+0x2ae>
				pressures[i] = pressures[i-1];
 800107c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800107e:	3b01      	subs	r3, #1
 8001080:	3358      	adds	r3, #88	; 0x58
 8001082:	f107 0208 	add.w	r2, r7, #8
 8001086:	4413      	add	r3, r2
 8001088:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001092:	4413      	add	r3, r2
 8001094:	460a      	mov	r2, r1
 8001096:	701a      	strb	r2, [r3, #0]
			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8001098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800109a:	3b01      	subs	r3, #1
 800109c:	657b      	str	r3, [r7, #84]	; 0x54
 800109e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dceb      	bgt.n	800107c <main+0x28c>
			}
			//On ajoute la nouvelle valeure
			pressures[0] = (int)pressure_val;
 80010a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80010b0:	793b      	ldrb	r3, [r7, #4]
 80010b2:	733b      	strb	r3, [r7, #12]

			//puis on fait la moyenne des pressions
			for (int i = 0; i < PRESSURES_SIZE; i++){
 80010b4:	2300      	movs	r3, #0
 80010b6:	653b      	str	r3, [r7, #80]	; 0x50
 80010b8:	e036      	b.n	8001128 <main+0x338>
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	9999999a 	.word	0x9999999a
 80010c4:	3fb99999 	.word	0x3fb99999
 80010c8:	3d2bde40 	.word	0x3d2bde40
 80010cc:	454cd000 	.word	0x454cd000
 80010d0:	3d20f909 	.word	0x3d20f909
 80010d4:	c01e147b 	.word	0xc01e147b
 80010d8:	bf3d70a4 	.word	0xbf3d70a4
 80010dc:	42d00000 	.word	0x42d00000
 80010e0:	20000598 	.word	0x20000598
 80010e4:	48001400 	.word	0x48001400
 80010e8:	20000370 	.word	0x20000370
 80010ec:	200001b9 	.word	0x200001b9
 80010f0:	20000510 	.word	0x20000510
 80010f4:	200001be 	.word	0x200001be
 80010f8:	48000400 	.word	0x48000400
 80010fc:	20000195 	.word	0x20000195
 8001100:	20000198 	.word	0x20000198
 8001104:	2000019c 	.word	0x2000019c
 8001108:	20000238 	.word	0x20000238
 800110c:	200001bf 	.word	0x200001bf
				pressures_mean+=pressures[i];
 8001110:	f107 020c 	add.w	r2, r7, #12
 8001114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001116:	4413      	add	r3, r2
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800111e:	4413      	add	r3, r2
 8001120:	65fb      	str	r3, [r7, #92]	; 0x5c
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8001122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001124:	3301      	adds	r3, #1
 8001126:	653b      	str	r3, [r7, #80]	; 0x50
 8001128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800112a:	2b09      	cmp	r3, #9
 800112c:	ddf0      	ble.n	8001110 <main+0x320>
			}
			pressures_mean/=PRESSURES_SIZE;
 800112e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001130:	4aab      	ldr	r2, [pc, #684]	; (80013e0 <main+0x5f0>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	65fb      	str	r3, [r7, #92]	; 0x5c

			if (pressures_mean > (Press_order)){ // arrêter compresseur si dépassement de la pression de consigne
 800113a:	4baa      	ldr	r3, [pc, #680]	; (80013e4 <main+0x5f4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001142:	4293      	cmp	r3, r2
 8001144:	d903      	bls.n	800114e <main+0x35e>
				my_motor_value[4] = 0;
 8001146:	4ba8      	ldr	r3, [pc, #672]	; (80013e8 <main+0x5f8>)
 8001148:	2200      	movs	r2, #0
 800114a:	811a      	strh	r2, [r3, #8]
 800114c:	e00e      	b.n	800116c <main+0x37c>
			}
			else if (pressures_mean < (Press_order - 2)) { // démarrage compresseur avec hysteresis de 0.2 bar
 800114e:	4ba5      	ldr	r3, [pc, #660]	; (80013e4 <main+0x5f4>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	3b02      	subs	r3, #2
 8001154:	461a      	mov	r2, r3
 8001156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001158:	4293      	cmp	r3, r2
 800115a:	d207      	bcs.n	800116c <main+0x37c>
				if(Press_order >= 0 && COMPRESSOR_ENABLE){
 800115c:	4ba3      	ldr	r3, [pc, #652]	; (80013ec <main+0x5fc>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <main+0x37c>
					my_motor_value[4] = COMPRESSOR_SPEED;
 8001164:	4ba0      	ldr	r3, [pc, #640]	; (80013e8 <main+0x5f8>)
 8001166:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800116a:	811a      	strh	r2, [r3, #8]
				else {}
			}
			else {}

			//on remet à 0 la moyenne des pressions
			pressures_mean = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	65fb      	str	r3, [r7, #92]	; 0x5c
		}

		//Lecture Température du compresseur réservoir (sonde PT100) et activation ou désactivation du compresseur en fonction SSI il est pas déjà désactivé
		//start an ADC conversion
		HAL_ADC_Start(&hadc1);
 8001170:	489f      	ldr	r0, [pc, #636]	; (80013f0 <main+0x600>)
 8001172:	f001 fc29 	bl	80029c8 <HAL_ADC_Start>
		//processor waits for an ADC conversion to complete
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001176:	f04f 31ff 	mov.w	r1, #4294967295
 800117a:	489d      	ldr	r0, [pc, #628]	; (80013f0 <main+0x600>)
 800117c:	f001 fcda 	bl	8002b34 <HAL_ADC_PollForConversion>
		//get raw value from the ADC channel register
		raw = HAL_ADC_GetValue(&hadc1);
 8001180:	489b      	ldr	r0, [pc, #620]	; (80013f0 <main+0x600>)
 8001182:	f001 fda5 	bl	8002cd0 <HAL_ADC_GetValue>
 8001186:	4603      	mov	r3, r0
 8001188:	84fb      	strh	r3, [r7, #38]	; 0x26

		//get temperature value from raw value (100-Ohm = 0°C, 375-Ohm = 800°C)
		//first : conversion from raw value to resistance value : 2790=>112 kOhm, 90=>6 kOhm
		//then : conversion from resistance value to temperature value :  112 kOhm=>22 °c, 6 kOhm=>100°c
		compr_temp = res_to_temp_mult * (raw_to_res_mult * raw + raw_to_res_offset) + res_to_temp_offset;
 800118a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001194:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001198:	ee27 7a27 	vmul.f32	s14, s14, s15
 800119c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80011a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	edc7 7a08 	vstr	s15, [r7, #32]

		//si Température critique, arrêter le compresseur et notifier la température critique dans le retour à la Rpi
		if (compr_temp > COMPR_CRIT_TEMP) {
 80011b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80011bc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80013f4 <main+0x604>
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	dd0c      	ble.n	80011e4 <main+0x3f4>
			my_motor_value[4] = 0;
 80011ca:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <main+0x5f8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	811a      	strh	r2, [r3, #8]
			Press_order = 0;
 80011d0:	4b84      	ldr	r3, [pc, #528]	; (80013e4 <main+0x5f4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
			return_buffer[1]|=128;
 80011d6:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <main+0x608>)
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	4b85      	ldr	r3, [pc, #532]	; (80013f8 <main+0x608>)
 80011e2:	705a      	strb	r2, [r3, #1]
		}

		//Notifier a la Rpi la bonne reception du mot de commande
		return_buffer[0]|= 1;
 80011e4:	4b84      	ldr	r3, [pc, #528]	; (80013f8 <main+0x608>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <main+0x608>)
 80011f0:	701a      	strb	r2, [r3, #0]
		//Retourner les infos a la Rpi !
		HAL_UART_Transmit(&huart2, return_buffer, 1, 100);
 80011f2:	2364      	movs	r3, #100	; 0x64
 80011f4:	2201      	movs	r2, #1
 80011f6:	4980      	ldr	r1, [pc, #512]	; (80013f8 <main+0x608>)
 80011f8:	4880      	ldr	r0, [pc, #512]	; (80013fc <main+0x60c>)
 80011fa:	f006 f891 	bl	8007320 <HAL_UART_Transmit>
		uint8_t command = read_r_buffer(commands_buffer);
 80011fe:	4880      	ldr	r0, [pc, #512]	; (8001400 <main+0x610>)
 8001200:	f7ff fda4 	bl	8000d4c <read_r_buffer>
 8001204:	4603      	mov	r3, r0
 8001206:	77fb      	strb	r3, [r7, #31]
		if(command != -1){
			switch(command >> 6){
 8001208:	7ffb      	ldrb	r3, [r7, #31]
 800120a:	099b      	lsrs	r3, r3, #6
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b03      	cmp	r3, #3
 8001210:	f200 81c9 	bhi.w	80015a6 <main+0x7b6>
 8001214:	a201      	add	r2, pc, #4	; (adr r2, 800121c <main+0x42c>)
 8001216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121a:	bf00      	nop
 800121c:	0800122d 	.word	0x0800122d
 8001220:	080012c5 	.word	0x080012c5
 8001224:	08001393 	.word	0x08001393
 8001228:	0800140d 	.word	0x0800140d
			case 0:
				//Mode 1 [00000001] : Reset nucleo: arrêt de TOUT
				if (command == 1){
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d130      	bne.n	8001294 <main+0x4a4>
					// arrêt moteurs (compr, canons, turbine)
					my_motor_value[0] = 0;
 8001232:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <main+0x5f8>)
 8001234:	2200      	movs	r2, #0
 8001236:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 8001238:	4b6b      	ldr	r3, [pc, #428]	; (80013e8 <main+0x5f8>)
 800123a:	2200      	movs	r2, #0
 800123c:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <main+0x5f8>)
 8001240:	2200      	movs	r2, #0
 8001242:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <main+0x5f8>)
 8001246:	2200      	movs	r2, #0
 8001248:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <main+0x5f8>)
 800124c:	2200      	movs	r2, #0
 800124e:	811a      	strh	r2, [r3, #8]
					// arrêt EV 1, 2, 3 et Purge
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f002 ff3e 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	2110      	movs	r1, #16
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f002 ff38 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2108      	movs	r1, #8
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f002 ff32 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2101      	movs	r1, #1
 8001278:	4862      	ldr	r0, [pc, #392]	; (8001404 <main+0x614>)
 800127a:	f002 ff2d 	bl	80040d8 <HAL_GPIO_WritePin>
					// arrêt LCD et LED Enable
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2120      	movs	r1, #32
 8001282:	4861      	ldr	r0, [pc, #388]	; (8001408 <main+0x618>)
 8001284:	f002 ff28 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2110      	movs	r1, #16
 800128c:	485e      	ldr	r0, [pc, #376]	; (8001408 <main+0x618>)
 800128e:	f002 ff23 	bl	80040d8 <HAL_GPIO_WritePin>
					my_motor_value[3] = 0;
					my_motor_value[4] = 0;
					HAL_Delay(2600);
				}

				break;
 8001292:	e185      	b.n	80015a0 <main+0x7b0>
				else if (command == 2){
 8001294:	7ffb      	ldrb	r3, [r7, #31]
 8001296:	2b02      	cmp	r3, #2
 8001298:	f040 8182 	bne.w	80015a0 <main+0x7b0>
					my_motor_value[0] = 0;
 800129c:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <main+0x5f8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <main+0x5f8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 80012a8:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <main+0x5f8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 80012ae:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <main+0x5f8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 80012b4:	4b4c      	ldr	r3, [pc, #304]	; (80013e8 <main+0x5f8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	811a      	strh	r2, [r3, #8]
					HAL_Delay(2600);
 80012ba:	f640 2028 	movw	r0, #2600	; 0xa28
 80012be:	f001 f9cd 	bl	800265c <HAL_Delay>
				break;
 80012c2:	e16d      	b.n	80015a0 <main+0x7b0>
			case 1:
				//Mode 2 [01]: Canons
				//ordre des canons : left=1 - right=2 - top=3
				//écriture dans le moteur 1 (left)
				if ((command & 48) >> 4 == 0){
 80012c4:	7ffb      	ldrb	r3, [r7, #31]
 80012c6:	111b      	asrs	r3, r3, #4
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d103      	bne.n	80012d8 <main+0x4e8>
					my_motor_value[0] = 0;
 80012d0:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <main+0x5f8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	801a      	strh	r2, [r3, #0]
 80012d6:	e018      	b.n	800130a <main+0x51a>
				}
				else if ((command & 48) >> 4 == 1){
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	111b      	asrs	r3, r3, #4
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d103      	bne.n	80012ec <main+0x4fc>
					my_motor_value[0] = CANONS_SPEED_1;
 80012e4:	4b40      	ldr	r3, [pc, #256]	; (80013e8 <main+0x5f8>)
 80012e6:	2264      	movs	r2, #100	; 0x64
 80012e8:	801a      	strh	r2, [r3, #0]
 80012ea:	e00e      	b.n	800130a <main+0x51a>
				}
				else if ((command & 48) >> 4 == 2){
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	111b      	asrs	r3, r3, #4
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d104      	bne.n	8001302 <main+0x512>
					my_motor_value[0] = CANONS_SPEED_2;
 80012f8:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <main+0x5f8>)
 80012fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012fe:	801a      	strh	r2, [r3, #0]
 8001300:	e003      	b.n	800130a <main+0x51a>
				}
				else{
					my_motor_value[0] = CANONS_SPEED_3;
 8001302:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <main+0x5f8>)
 8001304:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001308:	801a      	strh	r2, [r3, #0]
				}

				//écriture dans le moteur 2 (right)
				if ((command & 12) >> 2 == 0){
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	109b      	asrs	r3, r3, #2
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <main+0x52e>
					my_motor_value[1] = 0;
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <main+0x5f8>)
 8001318:	2200      	movs	r2, #0
 800131a:	805a      	strh	r2, [r3, #2]
 800131c:	e018      	b.n	8001350 <main+0x560>
				}
				else if ((command & 12) >> 2 == 1){
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	109b      	asrs	r3, r3, #2
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d103      	bne.n	8001332 <main+0x542>
					my_motor_value[1] = CANONS_SPEED_1;
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <main+0x5f8>)
 800132c:	2264      	movs	r2, #100	; 0x64
 800132e:	805a      	strh	r2, [r3, #2]
 8001330:	e00e      	b.n	8001350 <main+0x560>
				}
				else if ((command & 12) >> 2 == 2){
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	109b      	asrs	r3, r3, #2
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d104      	bne.n	8001348 <main+0x558>
					my_motor_value[1] = CANONS_SPEED_2;
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <main+0x5f8>)
 8001340:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001344:	805a      	strh	r2, [r3, #2]
 8001346:	e003      	b.n	8001350 <main+0x560>
				}
				else{
					my_motor_value[1] = CANONS_SPEED_3;
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <main+0x5f8>)
 800134a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800134e:	805a      	strh	r2, [r3, #2]
				}

				//écriture dans le moteur 3 (top)
				if ((command & 3) == 0){
 8001350:	7ffb      	ldrb	r3, [r7, #31]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <main+0x572>
					my_motor_value[2] = 0;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <main+0x5f8>)
 800135c:	2200      	movs	r2, #0
 800135e:	809a      	strh	r2, [r3, #4]
				else{
					my_motor_value[2] = CANONS_SPEED_3;
				}


				break;
 8001360:	e121      	b.n	80015a6 <main+0x7b6>
				else if ((command & 3) == 1){
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b01      	cmp	r3, #1
 800136a:	d103      	bne.n	8001374 <main+0x584>
					my_motor_value[2] = CANONS_SPEED_1;
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <main+0x5f8>)
 800136e:	2264      	movs	r2, #100	; 0x64
 8001370:	809a      	strh	r2, [r3, #4]
				break;
 8001372:	e118      	b.n	80015a6 <main+0x7b6>
				else if ((command & 3) == 2){
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d104      	bne.n	8001388 <main+0x598>
					my_motor_value[2] = CANONS_SPEED_2;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <main+0x5f8>)
 8001380:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001384:	809a      	strh	r2, [r3, #4]
				break;
 8001386:	e10e      	b.n	80015a6 <main+0x7b6>
					my_motor_value[2] = CANONS_SPEED_3;
 8001388:	4b17      	ldr	r3, [pc, #92]	; (80013e8 <main+0x5f8>)
 800138a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800138e:	809a      	strh	r2, [r3, #4]
				break;
 8001390:	e109      	b.n	80015a6 <main+0x7b6>
			case 2:
				//Mode 3 [10]: Compresseur / INIT
				//[10000001] : arrêt Compresseur + Consigne Pression => 0 + Purge EV4
				if ((command ^ 129) <= 1){
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001398:	43db      	mvns	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d813      	bhi.n	80013c8 <main+0x5d8>
					my_motor_value[4] = 0;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <main+0x5f8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	811a      	strh	r2, [r3, #8]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, command ^ 128);
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80013ac:	43db      	mvns	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	2101      	movs	r1, #1
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <main+0x614>)
 80013b6:	f002 fe8f 	bl	80040d8 <HAL_GPIO_WritePin>
					Press_order = 0;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <main+0x5f4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
					COMPRESSOR_ENABLE = 0;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <main+0x5fc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
					//[10PPPPPP] : Val de consigne Pression, à récup SSI différente pour régulation au prochain tour de boucle
					Press_order = command ^ (2 << 6);
					COMPRESSOR_ENABLE = 1;
				}

				break;
 80013c6:	e0ee      	b.n	80015a6 <main+0x7b6>
					Press_order = command ^ (2 << 6);
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80013ce:	43db      	mvns	r3, r3
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <main+0x5f4>)
 80013d4:	701a      	strb	r2, [r3, #0]
					COMPRESSOR_ENABLE = 1;
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <main+0x5fc>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
				break;
 80013dc:	e0e3      	b.n	80015a6 <main+0x7b6>
 80013de:	bf00      	nop
 80013e0:	cccccccd 	.word	0xcccccccd
 80013e4:	20000195 	.word	0x20000195
 80013e8:	20000598 	.word	0x20000598
 80013ec:	20000194 	.word	0x20000194
 80013f0:	200001c0 	.word	0x200001c0
 80013f4:	42700000 	.word	0x42700000
 80013f8:	200001bc 	.word	0x200001bc
 80013fc:	20000510 	.word	0x20000510
 8001400:	200001a0 	.word	0x200001a0
 8001404:	48001400 	.word	0x48001400
 8001408:	48000400 	.word	0x48000400
			case 3:
				//Mode 4 [11]: electrovannes OU LED OU Turbine OU LCD
				//cas 1 : Electrovannes
				if ((command & 240) >> 4 == 12){
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b0c      	cmp	r3, #12
 8001414:	d12c      	bne.n	8001470 <main+0x680>
					//4*1 bits(ABCE) pour les EV (ordre du code : A: EV1<->PA7, B: EV2<->PA4, C: EV3<->PA3, E: EV_Purge<->PF0)
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, (command & 0x08) >> 3);
 8001416:	7ffb      	ldrb	r3, [r7, #31]
 8001418:	10db      	asrs	r3, r3, #3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	2180      	movs	r1, #128	; 0x80
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	f002 fe55 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, (command & 0x04) >> 2);
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	109b      	asrs	r3, r3, #2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	2110      	movs	r1, #16
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f002 fe49 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, (command & 0x02) >> 1);
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	105b      	asrs	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	2108      	movs	r1, #8
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f002 fe3d 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOF, GPIO_PIN_0, command & 0x01);
 800145e:	7ffb      	ldrb	r3, [r7, #31]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	2101      	movs	r1, #1
 800146a:	4851      	ldr	r0, [pc, #324]	; (80015b0 <main+0x7c0>)
 800146c:	f002 fe34 	bl	80040d8 <HAL_GPIO_WritePin>
				}

				//cas 2 : EV-Pulse [1101000Z] => [0] : rien, [1] pulse ON-OFF-ON 1*, avec intervalle t-pulse_OFF
				if ((command & 240) >> 4 == 13){
 8001470:	7ffb      	ldrb	r3, [r7, #31]
 8001472:	091b      	lsrs	r3, r3, #4
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b0d      	cmp	r3, #13
 8001478:	d154      	bne.n	8001524 <main+0x734>

					//Pulse EV 1
					if ((command & 8) >> 3 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 800147a:	7ffb      	ldrb	r3, [r7, #31]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d016      	beq.n	80014b2 <main+0x6c2>
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148a:	f002 fe0d 	bl	80040a8 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00e      	beq.n	80014b2 <main+0x6c2>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149c:	f002 fe1c 	bl	80040d8 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 80014a0:	203c      	movs	r0, #60	; 0x3c
 80014a2:	f001 f8db 	bl	800265c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ae:	f002 fe13 	bl	80040d8 <HAL_GPIO_WritePin>
					}
					//Pulse EV 2
					if ((command & 4) >> 2 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d016      	beq.n	80014ea <main+0x6fa>
 80014bc:	2110      	movs	r1, #16
 80014be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c2:	f002 fdf1 	bl	80040a8 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00e      	beq.n	80014ea <main+0x6fa>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2110      	movs	r1, #16
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f002 fe00 	bl	80040d8 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 80014d8:	203c      	movs	r0, #60	; 0x3c
 80014da:	f001 f8bf 	bl	800265c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2110      	movs	r1, #16
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f002 fdf7 	bl	80040d8 <HAL_GPIO_WritePin>
					}
					//Pulse EV 3
					if ((command & 2) >> 1 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d057      	beq.n	80015a4 <main+0x7b4>
 80014f4:	2108      	movs	r1, #8
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f002 fdd5 	bl	80040a8 <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d04f      	beq.n	80015a4 <main+0x7b4>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2108      	movs	r1, #8
 8001508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150c:	f002 fde4 	bl	80040d8 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 8001510:	203c      	movs	r0, #60	; 0x3c
 8001512:	f001 f8a3 	bl	800265c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	2108      	movs	r1, #8
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f002 fddb 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command & 2);

					//LED
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command & 1);
				}
				break;
 8001522:	e03f      	b.n	80015a4 <main+0x7b4>
				else if ((command & 240) >> 4 == 14){
 8001524:	7ffb      	ldrb	r3, [r7, #31]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b0e      	cmp	r3, #14
 800152c:	d120      	bne.n	8001570 <main+0x780>
					if ((command & 3) == 0){
 800152e:	7ffb      	ldrb	r3, [r7, #31]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	2b00      	cmp	r3, #0
 8001536:	d103      	bne.n	8001540 <main+0x750>
						my_motor_value[3] = 0;
 8001538:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <main+0x7c4>)
 800153a:	2200      	movs	r2, #0
 800153c:	80da      	strh	r2, [r3, #6]
				break;
 800153e:	e031      	b.n	80015a4 <main+0x7b4>
					else if ((command & 3) == 1){
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d103      	bne.n	8001552 <main+0x762>
						my_motor_value[3] = TURBINE_SPEED_1;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <main+0x7c4>)
 800154c:	2264      	movs	r2, #100	; 0x64
 800154e:	80da      	strh	r2, [r3, #6]
				break;
 8001550:	e028      	b.n	80015a4 <main+0x7b4>
					else if ((command & 3) == 2){
 8001552:	7ffb      	ldrb	r3, [r7, #31]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d104      	bne.n	8001566 <main+0x776>
						my_motor_value[3] = TURBINE_SPEED_2;
 800155c:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <main+0x7c4>)
 800155e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001562:	80da      	strh	r2, [r3, #6]
				break;
 8001564:	e01e      	b.n	80015a4 <main+0x7b4>
						my_motor_value[3] = TURBINE_SPEED_3;
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <main+0x7c4>)
 8001568:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800156c:	80da      	strh	r2, [r3, #6]
				break;
 800156e:	e019      	b.n	80015a4 <main+0x7b4>
				else if ((command & 240) >> 4 == 15){
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b0f      	cmp	r3, #15
 8001578:	d114      	bne.n	80015a4 <main+0x7b4>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command & 2);
 800157a:	7ffb      	ldrb	r3, [r7, #31]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	2120      	movs	r1, #32
 8001586:	480c      	ldr	r0, [pc, #48]	; (80015b8 <main+0x7c8>)
 8001588:	f002 fda6 	bl	80040d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command & 1);
 800158c:	7ffb      	ldrb	r3, [r7, #31]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	2110      	movs	r1, #16
 8001598:	4807      	ldr	r0, [pc, #28]	; (80015b8 <main+0x7c8>)
 800159a:	f002 fd9d 	bl	80040d8 <HAL_GPIO_WritePin>
				break;
 800159e:	e001      	b.n	80015a4 <main+0x7b4>
				break;
 80015a0:	bf00      	nop
 80015a2:	e000      	b.n	80015a6 <main+0x7b6>
				break;
 80015a4:	bf00      	nop
			}

		}

		HAL_Delay(1);
 80015a6:	2001      	movs	r0, #1
 80015a8:	f001 f858 	bl	800265c <HAL_Delay>
	{
 80015ac:	e492      	b.n	8000ed4 <main+0xe4>
 80015ae:	bf00      	nop
 80015b0:	48001400 	.word	0x48001400
 80015b4:	20000598 	.word	0x20000598
 80015b8:	48000400 	.word	0x48000400

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b096      	sub	sp, #88	; 0x58
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c6:	2228      	movs	r2, #40	; 0x28
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f007 f8a4 	bl	8008718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f0:	2302      	movs	r3, #2
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f8:	2310      	movs	r3, #16
 80015fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fc:	2302      	movs	r3, #2
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001600:	2300      	movs	r3, #0
 8001602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001604:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001608:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fa02 	bl	8004a18 <HAL_RCC_OscConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800161a:	f000 fbc5 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161e:	230f      	movs	r3, #15
 8001620:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001622:	2302      	movs	r3, #2
 8001624:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2100      	movs	r1, #0
 8001638:	4618      	mov	r0, r3
 800163a:	f004 fa2b 	bl	8005a94 <HAL_RCC_ClockConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001644:	f000 fbb0 	bl	8001da8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8001648:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 800164c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fc4e 	bl	8005f00 <HAL_RCCEx_PeriphCLKConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800166a:	f000 fb9d 	bl	8001da8 <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3758      	adds	r7, #88	; 0x58
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
 8001698:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <MX_ADC1_Init+0xdc>)
 800169c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016a2:	4b2c      	ldr	r3, [pc, #176]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016c2:	4b24      	ldr	r3, [pc, #144]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016e4:	2204      	movs	r2, #4
 80016e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f4:	4817      	ldr	r0, [pc, #92]	; (8001754 <MX_ADC1_Init+0xdc>)
 80016f6:	f000 ffd5 	bl	80026a4 <HAL_ADC_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 fb52 	bl	8001da8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	4811      	ldr	r0, [pc, #68]	; (8001754 <MX_ADC1_Init+0xdc>)
 8001710:	f001 fdac 	bl	800326c <HAL_ADCEx_MultiModeConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800171a:	f000 fb45 	bl	8001da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800171e:	2301      	movs	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001722:	2301      	movs	r3, #1
 8001724:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_ADC1_Init+0xdc>)
 800173c:	f001 fad6 	bl	8002cec <HAL_ADC_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001746:	f000 fb2f 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3728      	adds	r7, #40	; 0x28
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001c0 	.word	0x200001c0

08001758 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <MX_CAN_Init+0x60>)
 800175e:	4a17      	ldr	r2, [pc, #92]	; (80017bc <MX_CAN_Init+0x64>)
 8001760:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_CAN_Init+0x60>)
 8001764:	2210      	movs	r2, #16
 8001766:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MX_CAN_Init+0x60>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800176e:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_CAN_Init+0x60>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_CAN_Init+0x60>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_CAN_Init+0x60>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <MX_CAN_Init+0x60>)
 8001782:	2200      	movs	r2, #0
 8001784:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_CAN_Init+0x60>)
 8001788:	2200      	movs	r2, #0
 800178a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <MX_CAN_Init+0x60>)
 800178e:	2200      	movs	r2, #0
 8001790:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_CAN_Init+0x60>)
 8001794:	2200      	movs	r2, #0
 8001796:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <MX_CAN_Init+0x60>)
 800179a:	2200      	movs	r2, #0
 800179c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_CAN_Init+0x60>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_CAN_Init+0x60>)
 80017a6:	f001 fef1 	bl	800358c <HAL_CAN_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80017b0:	f000 fafa 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000210 	.word	0x20000210
 80017bc:	40006400 	.word	0x40006400

080017c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <MX_I2C1_Init+0x78>)
 80017c6:	4a1d      	ldr	r2, [pc, #116]	; (800183c <MX_I2C1_Init+0x7c>)
 80017c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020C;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_I2C1_Init+0x78>)
 80017cc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80017d0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_I2C1_Init+0x78>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <MX_I2C1_Init+0x78>)
 80017da:	2201      	movs	r2, #1
 80017dc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_I2C1_Init+0x78>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_I2C1_Init+0x78>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <MX_I2C1_Init+0x78>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_I2C1_Init+0x78>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_I2C1_Init+0x78>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017fc:	480e      	ldr	r0, [pc, #56]	; (8001838 <MX_I2C1_Init+0x78>)
 80017fe:	f002 fc83 	bl	8004108 <HAL_I2C_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001808:	f000 face 	bl	8001da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800180c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <MX_I2C1_Init+0x78>)
 8001812:	f003 f849 	bl	80048a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800181c:	f000 fac4 	bl	8001da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001820:	2100      	movs	r1, #0
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_I2C1_Init+0x78>)
 8001824:	f003 f88b 	bl	800493e <HAL_I2CEx_ConfigDigitalFilter>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800182e:	f000 fabb 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000238 	.word	0x20000238
 800183c:	40005400 	.word	0x40005400

08001840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b096      	sub	sp, #88	; 0x58
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001846:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]
 8001862:	615a      	str	r2, [r3, #20]
 8001864:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	222c      	movs	r2, #44	; 0x2c
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f006 ff53 	bl	8008718 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001872:	4b39      	ldr	r3, [pc, #228]	; (8001958 <MX_TIM1_Init+0x118>)
 8001874:	4a39      	ldr	r2, [pc, #228]	; (800195c <MX_TIM1_Init+0x11c>)
 8001876:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001878:	4b37      	ldr	r3, [pc, #220]	; (8001958 <MX_TIM1_Init+0x118>)
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b36      	ldr	r3, [pc, #216]	; (8001958 <MX_TIM1_Init+0x118>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001884:	4b34      	ldr	r3, [pc, #208]	; (8001958 <MX_TIM1_Init+0x118>)
 8001886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b32      	ldr	r3, [pc, #200]	; (8001958 <MX_TIM1_Init+0x118>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <MX_TIM1_Init+0x118>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <MX_TIM1_Init+0x118>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800189e:	482e      	ldr	r0, [pc, #184]	; (8001958 <MX_TIM1_Init+0x118>)
 80018a0:	f004 fd08 	bl	80062b4 <HAL_TIM_PWM_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80018aa:	f000 fa7d 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018be:	4619      	mov	r1, r3
 80018c0:	4825      	ldr	r0, [pc, #148]	; (8001958 <MX_TIM1_Init+0x118>)
 80018c2:	f005 fbdb 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018cc:	f000 fa6c 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d0:	2360      	movs	r3, #96	; 0x60
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d8:	2300      	movs	r3, #0
 80018da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018dc:	2300      	movs	r3, #0
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	4818      	ldr	r0, [pc, #96]	; (8001958 <MX_TIM1_Init+0x118>)
 80018f6:	f004 ff41 	bl	800677c <HAL_TIM_PWM_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001900:	f000 fa52 	bl	8001da8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <MX_TIM1_Init+0x118>)
 800193a:	f005 fc0d 	bl	8007158 <HAL_TIMEx_ConfigBreakDeadTime>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001944:	f000 fa30 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <MX_TIM1_Init+0x118>)
 800194a:	f000 fc79 	bl	8002240 <HAL_TIM_MspPostInit>

}
 800194e:	bf00      	nop
 8001950:	3758      	adds	r7, #88	; 0x58
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000028c 	.word	0x2000028c
 800195c:	40012c00 	.word	0x40012c00

08001960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
 8001980:	615a      	str	r2, [r3, #20]
 8001982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <MX_TIM2_Init+0xc4>)
 8001986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <MX_TIM2_Init+0xc4>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <MX_TIM2_Init+0xc4>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001998:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <MX_TIM2_Init+0xc4>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_TIM2_Init+0xc4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <MX_TIM2_Init+0xc4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019aa:	481e      	ldr	r0, [pc, #120]	; (8001a24 <MX_TIM2_Init+0xc4>)
 80019ac:	f004 fc82 	bl	80062b4 <HAL_TIM_PWM_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019b6:	f000 f9f7 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4816      	ldr	r0, [pc, #88]	; (8001a24 <MX_TIM2_Init+0xc4>)
 80019ca:	f005 fb57 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019d4:	f000 f9e8 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	2200      	movs	r2, #0
 80019ec:	4619      	mov	r1, r3
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_TIM2_Init+0xc4>)
 80019f0:	f004 fec4 	bl	800677c <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80019fa:	f000 f9d5 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019fe:	463b      	mov	r3, r7
 8001a00:	2208      	movs	r2, #8
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MX_TIM2_Init+0xc4>)
 8001a06:	f004 feb9 	bl	800677c <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a10:	f000 f9ca 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <MX_TIM2_Init+0xc4>)
 8001a16:	f000 fc13 	bl	8002240 <HAL_TIM_MspPostInit>

}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	; 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002d8 	.word	0x200002d8

08001a28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001a4e:	4a28      	ldr	r2, [pc, #160]	; (8001af0 <MX_TIM3_Init+0xc8>)
 8001a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a72:	481e      	ldr	r0, [pc, #120]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001a74:	f004 fc1e 	bl	80062b4 <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a7e:	f000 f993 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4816      	ldr	r0, [pc, #88]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001a92:	f005 faf3 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a9c:	f000 f984 	bl	8001da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa0:	2360      	movs	r3, #96	; 0x60
 8001aa2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480d      	ldr	r0, [pc, #52]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001ab8:	f004 fe60 	bl	800677c <HAL_TIM_PWM_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001ac2:	f000 f971 	bl	8001da8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	220c      	movs	r2, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001ace:	f004 fe55 	bl	800677c <HAL_TIM_PWM_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001ad8:	f000 f966 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <MX_TIM3_Init+0xc4>)
 8001ade:	f000 fbaf 	bl	8002240 <HAL_TIM_MspPostInit>

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000324 	.word	0x20000324
 8001af0:	40000400 	.word	0x40000400

08001af4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <MX_TIM6_Init+0x64>)
 8001b06:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <MX_TIM6_Init+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <MX_TIM6_Init+0x64>)
 8001b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b10:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <MX_TIM6_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <MX_TIM6_Init+0x64>)
 8001b1a:	2218      	movs	r2, #24
 8001b1c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <MX_TIM6_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <MX_TIM6_Init+0x64>)
 8001b26:	f004 fb11 	bl	800614c <HAL_TIM_Base_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b30:	f000 f93a 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_TIM6_Init+0x64>)
 8001b42:	f005 fa9b 	bl	800707c <HAL_TIMEx_MasterConfigSynchronization>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b4c:	f000 f92c 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000370 	.word	0x20000370
 8001b5c:	40001000 	.word	0x40001000

08001b60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b66:	4a15      	ldr	r2, [pc, #84]	; (8001bbc <MX_USART2_UART_Init+0x5c>)
 8001b68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b86:	220c      	movs	r2, #12
 8001b88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART2_UART_Init+0x58>)
 8001ba4:	f005 fb6e 	bl	8007284 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bae:	f000 f8fb 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000510 	.word	0x20000510
 8001bbc:	40004400 	.word	0x40004400

08001bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <MX_DMA_Init+0x78>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <MX_DMA_Init+0x78>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6153      	str	r3, [r2, #20]
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_DMA_Init+0x78>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	200b      	movs	r0, #11
 8001be4:	f001 fea9 	bl	800393a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001be8:	200b      	movs	r0, #11
 8001bea:	f001 fec2 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	200c      	movs	r0, #12
 8001bf4:	f001 fea1 	bl	800393a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bf8:	200c      	movs	r0, #12
 8001bfa:	f001 feba 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	200d      	movs	r0, #13
 8001c04:	f001 fe99 	bl	800393a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c08:	200d      	movs	r0, #13
 8001c0a:	f001 feb2 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	200f      	movs	r0, #15
 8001c14:	f001 fe91 	bl	800393a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c18:	200f      	movs	r0, #15
 8001c1a:	f001 feaa 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2100      	movs	r1, #0
 8001c22:	2010      	movs	r0, #16
 8001c24:	f001 fe89 	bl	800393a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c28:	2010      	movs	r0, #16
 8001c2a:	f001 fea2 	bl	8003972 <HAL_NVIC_EnableIRQ>

}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000

08001c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c52:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4a36      	ldr	r2, [pc, #216]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c5c:	6153      	str	r3, [r2, #20]
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4a30      	ldr	r2, [pc, #192]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	6153      	str	r3, [r2, #20]
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8c:	6153      	str	r3, [r2, #20]
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <MX_GPIO_Init+0xf4>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Output_EV_P_GPIO_Port, GPIO_Output_EV_P_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4825      	ldr	r0, [pc, #148]	; (8001d34 <MX_GPIO_Init+0xf8>)
 8001ca0:	f002 fa1a 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2198      	movs	r1, #152	; 0x98
 8001ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cac:	f002 fa14 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin, GPIO_PIN_RESET);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2138      	movs	r1, #56	; 0x38
 8001cb4:	4820      	ldr	r0, [pc, #128]	; (8001d38 <MX_GPIO_Init+0xfc>)
 8001cb6:	f002 fa0f 	bl	80040d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_Output_EV_P_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_EV_P_Pin;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Output_EV_P_GPIO_Port, &GPIO_InitStruct);
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4818      	ldr	r0, [pc, #96]	; (8001d34 <MX_GPIO_Init+0xf8>)
 8001cd2:	f002 f877 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_AU_STATUS_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_AU_STATUS_Pin;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_Input_AU_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4812      	ldr	r0, [pc, #72]	; (8001d34 <MX_GPIO_Init+0xf8>)
 8001cea:	f002 f86b 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Output_EV_3_Pin GPIO_Output_EV_2_Pin GPIO_Output_EV_1_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin;
 8001cee:	2398      	movs	r3, #152	; 0x98
 8001cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f002 f85c 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Built_in_LED_Pin GPIO_Output_LED_EN_Pin GPIO_Output_LCD_EN_Pin */
  GPIO_InitStruct.Pin = Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin;
 8001d0c:	2338      	movs	r3, #56	; 0x38
 8001d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_GPIO_Init+0xfc>)
 8001d24:	f002 f84e 	bl	8003dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48001400 	.word	0x48001400
 8001d38:	48000400 	.word	0x48000400

08001d3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d102      	bne.n	8001d56 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		dshot_write(my_motor_value);
 8001d50:	4811      	ldr	r0, [pc, #68]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001d52:	f7fe fd85 	bl	8000860 <dshot_write>
	}
	//on start la tempo si le BAU est enclenché
	if (BAU_tick_enable == 1){
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d115      	bne.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x4e>
		BAU_tick++;
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d66:	6013      	str	r3, [r2, #0]
		// on purge quand on veut purger, 1000 => 1s
		if (BAU_tick > 30000){
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d70:	4293      	cmp	r3, r2
 8001d72:	dd0a      	ble.n	8001d8a <HAL_TIM_PeriodElapsedCallback+0x4e>
			BAU_tick = 0;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2101      	movs	r1, #1
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d86:	f002 f9a7 	bl	80040d8 <HAL_GPIO_WritePin>
		}
	}
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000370 	.word	0x20000370
 8001d98:	20000598 	.word	0x20000598
 8001d9c:	2000019c 	.word	0x2000019c
 8001da0:	20000198 	.word	0x20000198
 8001da4:	48001400 	.word	0x48001400

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x8>
	...

08001db4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <HAL_MspInit+0x44>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_MspInit+0x44>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6193      	str	r3, [r2, #24]
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_MspInit+0x44>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_MspInit+0x44>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	4a08      	ldr	r2, [pc, #32]	; (8001df8 <HAL_MspInit+0x44>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	61d3      	str	r3, [r2, #28]
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_MspInit+0x44>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000

08001dfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e1c:	d124      	bne.n	8001e68 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_ADC_MspInit+0x74>)
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <HAL_ADC_MspInit+0x74>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6153      	str	r3, [r2, #20]
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_ADC_MspInit+0x74>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_ADC_MspInit+0x74>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_ADC_MspInit+0x74>)
 8001e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e40:	6153      	str	r3, [r2, #20]
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_ADC_MspInit+0x74>)
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_A_TEMP_Pin|ADC2_IN_A_PRESS_Pin;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e52:	2303      	movs	r3, #3
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e64:	f001 ffae 	bl	8003dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0314 	add.w	r3, r7, #20
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a18      	ldr	r2, [pc, #96]	; (8001ef4 <HAL_CAN_MspInit+0x80>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d129      	bne.n	8001eea <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_CAN_MspInit+0x84>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_CAN_MspInit+0x84>)
 8001e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_CAN_MspInit+0x84>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_CAN_MspInit+0x84>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_CAN_MspInit+0x84>)
 8001eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb8:	6153      	str	r3, [r2, #20]
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <HAL_CAN_MspInit+0x84>)
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RD_Pin|CAN_TD_Pin;
 8001ec6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001ed8:	2309      	movs	r3, #9
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f001 ff6d 	bl	8003dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	; 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40006400 	.word	0x40006400
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <HAL_I2C_MspInit+0x8c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d12f      	bne.n	8001f7e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_I2C_MspInit+0x90>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <HAL_I2C_MspInit+0x90>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	6153      	str	r3, [r2, #20]
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_I2C_MspInit+0x90>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f36:	23c0      	movs	r3, #192	; 0xc0
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3a:	2312      	movs	r3, #18
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f46:	2304      	movs	r3, #4
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480f      	ldr	r0, [pc, #60]	; (8001f90 <HAL_I2C_MspInit+0x94>)
 8001f52:	f001 ff37 	bl	8003dc4 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001f56:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001f5a:	f002 fd3d 	bl	80049d8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001f5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f62:	f002 fd39 	bl	80049d8 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_I2C_MspInit+0x90>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_I2C_MspInit+0x90>)
 8001f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_I2C_MspInit+0x90>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	48000400 	.word	0x48000400

08001f94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a87      	ldr	r2, [pc, #540]	; (80021c0 <HAL_TIM_PWM_MspInit+0x22c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d135      	bne.n	8002012 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa6:	4b87      	ldr	r3, [pc, #540]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	4a86      	ldr	r2, [pc, #536]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fb0:	6193      	str	r3, [r2, #24]
 8001fb2:	4b84      	ldr	r3, [pc, #528]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001fbe:	4b82      	ldr	r3, [pc, #520]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001fc0:	4a82      	ldr	r2, [pc, #520]	; (80021cc <HAL_TIM_PWM_MspInit+0x238>)
 8001fc2:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc4:	4b80      	ldr	r3, [pc, #512]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fca:	4b7f      	ldr	r3, [pc, #508]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fd0:	4b7d      	ldr	r3, [pc, #500]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fd6:	4b7c      	ldr	r3, [pc, #496]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fdc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fde:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001fe6:	4b78      	ldr	r3, [pc, #480]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001fec:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001ff4:	4874      	ldr	r0, [pc, #464]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8001ff6:	f001 fcd6 	bl	80039a6 <HAL_DMA_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8002000:	f7ff fed2 	bl	8001da8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a70      	ldr	r2, [pc, #448]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 8002008:	625a      	str	r2, [r3, #36]	; 0x24
 800200a:	4a6f      	ldr	r2, [pc, #444]	; (80021c8 <HAL_TIM_PWM_MspInit+0x234>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002010:	e0d2      	b.n	80021b8 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d15e      	bne.n	80020da <HAL_TIM_PWM_MspInit+0x146>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800201c:	4b69      	ldr	r3, [pc, #420]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	4a68      	ldr	r2, [pc, #416]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	61d3      	str	r3, [r2, #28]
 8002028:	4b66      	ldr	r3, [pc, #408]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8002034:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8002036:	4a67      	ldr	r2, [pc, #412]	; (80021d4 <HAL_TIM_PWM_MspInit+0x240>)
 8002038:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800203a:	4b65      	ldr	r3, [pc, #404]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 800203c:	2210      	movs	r2, #16
 800203e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002040:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002046:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8002048:	2280      	movs	r2, #128	; 0x80
 800204a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800204c:	4b60      	ldr	r3, [pc, #384]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 800204e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002052:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002054:	4b5e      	ldr	r3, [pc, #376]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8002056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800205a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800205c:	4b5c      	ldr	r3, [pc, #368]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8002064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002068:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800206a:	4859      	ldr	r0, [pc, #356]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 800206c:	f001 fc9b 	bl	80039a6 <HAL_DMA_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_TIM_PWM_MspInit+0xe6>
      Error_Handler();
 8002076:	f7ff fe97 	bl	8001da8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a54      	ldr	r2, [pc, #336]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
 8002080:	4a53      	ldr	r2, [pc, #332]	; (80021d0 <HAL_TIM_PWM_MspInit+0x23c>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8002086:	4b54      	ldr	r3, [pc, #336]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 8002088:	4a54      	ldr	r2, [pc, #336]	; (80021dc <HAL_TIM_PWM_MspInit+0x248>)
 800208a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800208c:	4b52      	ldr	r3, [pc, #328]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 800208e:	2210      	movs	r2, #16
 8002090:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002098:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 800209a:	2280      	movs	r2, #128	; 0x80
 800209c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800209e:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 80020a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 80020a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80020ae:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80020b4:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 80020b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80020bc:	4846      	ldr	r0, [pc, #280]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 80020be:	f001 fc72 	bl	80039a6 <HAL_DMA_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_TIM_PWM_MspInit+0x138>
      Error_Handler();
 80020c8:	f7ff fe6e 	bl	8001da8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a42      	ldr	r2, [pc, #264]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020d2:	4a41      	ldr	r2, [pc, #260]	; (80021d8 <HAL_TIM_PWM_MspInit+0x244>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80020d8:	e06e      	b.n	80021b8 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a40      	ldr	r2, [pc, #256]	; (80021e0 <HAL_TIM_PWM_MspInit+0x24c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d169      	bne.n	80021b8 <HAL_TIM_PWM_MspInit+0x224>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	4a36      	ldr	r2, [pc, #216]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	61d3      	str	r3, [r2, #28]
 80020f0:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <HAL_TIM_PWM_MspInit+0x230>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80020fc:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 80020fe:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <HAL_TIM_PWM_MspInit+0x254>)
 8002100:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002102:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002104:	2210      	movs	r2, #16
 8002106:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800210e:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002114:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800211c:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 800211e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002122:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002124:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 800212c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002130:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002132:	482c      	ldr	r0, [pc, #176]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002134:	f001 fc37 	bl	80039a6 <HAL_DMA_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_TIM_PWM_MspInit+0x1ae>
      Error_Handler();
 800213e:	f7ff fe33 	bl	8001da8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
 8002148:	4a26      	ldr	r2, [pc, #152]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_TIM_PWM_MspInit+0x250>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <HAL_TIM_PWM_MspInit+0x25c>)
 800215e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 8002162:	2210      	movs	r2, #16
 8002164:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 800216e:	2280      	movs	r2, #128	; 0x80
 8002170:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 8002174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002178:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 800217c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002180:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 8002184:	2200      	movs	r2, #0
 8002186:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 8002188:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 800218a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800218e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002190:	4816      	ldr	r0, [pc, #88]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 8002192:	f001 fc08 	bl	80039a6 <HAL_DMA_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_TIM_PWM_MspInit+0x20c>
      Error_Handler();
 800219c:	f7ff fe04 	bl	8001da8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a12      	ldr	r2, [pc, #72]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
 80021a6:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 80021b0:	621a      	str	r2, [r3, #32]
 80021b2:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <HAL_TIM_PWM_MspInit+0x258>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6253      	str	r3, [r2, #36]	; 0x24
}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40021000 	.word	0x40021000
 80021c8:	200003bc 	.word	0x200003bc
 80021cc:	4002001c 	.word	0x4002001c
 80021d0:	20000400 	.word	0x20000400
 80021d4:	40020058 	.word	0x40020058
 80021d8:	20000444 	.word	0x20000444
 80021dc:	40020008 	.word	0x40020008
 80021e0:	40000400 	.word	0x40000400
 80021e4:	20000488 	.word	0x20000488
 80021e8:	4002006c 	.word	0x4002006c
 80021ec:	200004cc 	.word	0x200004cc
 80021f0:	40020030 	.word	0x40020030

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <HAL_TIM_Base_MspInit+0x44>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d113      	bne.n	800222e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <HAL_TIM_Base_MspInit+0x48>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a0c      	ldr	r2, [pc, #48]	; (800223c <HAL_TIM_Base_MspInit+0x48>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	61d3      	str	r3, [r2, #28]
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_TIM_Base_MspInit+0x48>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2036      	movs	r0, #54	; 0x36
 8002224:	f001 fb89 	bl	800393a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002228:	2036      	movs	r0, #54	; 0x36
 800222a:	f001 fba2 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40001000 	.word	0x40001000
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	; 0x30
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_TIM_MspPostInit+0x150>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d11e      	bne.n	80022a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b4c      	ldr	r3, [pc, #304]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4a4b      	ldr	r2, [pc, #300]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 8002268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226c:	6153      	str	r3, [r2, #20]
 800226e:	4b49      	ldr	r3, [pc, #292]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_DS_M3_Pin;
 800227a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800228c:	2306      	movs	r3, #6
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH1_DS_M3_GPIO_Port, &GPIO_InitStruct);
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229a:	f001 fd93 	bl	8003dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800229e:	e072      	b.n	8002386 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d12f      	bne.n	800230a <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022aa:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4a39      	ldr	r2, [pc, #228]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	6153      	str	r3, [r2, #20]
 80022b6:	4b37      	ldr	r3, [pc, #220]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_DS_COMP_Pin;
 80022c2:	2320      	movs	r3, #32
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d2:	2301      	movs	r3, #1
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_DS_COMP_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e0:	f001 fd70 	bl	8003dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_DS_M1_Pin;
 80022e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80022f6:	230a      	movs	r3, #10
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_DS_M1_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002304:	f001 fd5e 	bl	8003dc4 <HAL_GPIO_Init>
}
 8002308:	e03d      	b.n	8002386 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a22      	ldr	r2, [pc, #136]	; (8002398 <HAL_TIM_MspPostInit+0x158>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d138      	bne.n	8002386 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 800231a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231e:	6153      	str	r3, [r2, #20]
 8002320:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	4a18      	ldr	r2, [pc, #96]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 8002332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002336:	6153      	str	r3, [r2, #20]
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_TIM_MspPostInit+0x154>)
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_DS_TURB_Pin;
 8002344:	2340      	movs	r3, #64	; 0x40
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002354:	2302      	movs	r3, #2
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_DS_TURB_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002362:	f001 fd2f 	bl	8003dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4_DS_M2_Pin;
 8002366:	2302      	movs	r3, #2
 8002368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002372:	2300      	movs	r3, #0
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002376:	2302      	movs	r3, #2
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH4_DS_M2_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 031c 	add.w	r3, r7, #28
 800237e:	4619      	mov	r1, r3
 8002380:	4806      	ldr	r0, [pc, #24]	; (800239c <HAL_TIM_MspPostInit+0x15c>)
 8002382:	f001 fd1f 	bl	8003dc4 <HAL_GPIO_Init>
}
 8002386:	bf00      	nop
 8002388:	3730      	adds	r7, #48	; 0x30
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40021000 	.word	0x40021000
 8002398:	40000400 	.word	0x40000400
 800239c:	48000400 	.word	0x48000400

080023a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_UART_MspInit+0x90>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d131      	bne.n	8002426 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_UART_MspInit+0x94>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_UART_MspInit+0x94>)
 80023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023cc:	61d3      	str	r3, [r2, #28]
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_UART_MspInit+0x94>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_UART_MspInit+0x94>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4a15      	ldr	r2, [pc, #84]	; (8002434 <HAL_UART_MspInit+0x94>)
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	6153      	str	r3, [r2, #20]
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_UART_MspInit+0x94>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80023f2:	f248 0304 	movw	r3, #32772	; 0x8004
 80023f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002400:	2303      	movs	r3, #3
 8002402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002404:	2307      	movs	r3, #7
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	4619      	mov	r1, r3
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f001 fcd7 	bl	8003dc4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2026      	movs	r0, #38	; 0x26
 800241c:	f001 fa8d 	bl	800393a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002420:	2026      	movs	r0, #38	; 0x26
 8002422:	f001 faa6 	bl	8003972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002426:	bf00      	nop
 8002428:	3728      	adds	r7, #40	; 0x28
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40004400 	.word	0x40004400
 8002434:	40021000 	.word	0x40021000

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x4>

0800243e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002484:	f000 f8ca 	bl	800261c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}

0800248c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002490:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA1_Channel1_IRQHandler+0x10>)
 8002492:	f001 fba5 	bl	8003be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000444 	.word	0x20000444

080024a0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA1_Channel2_IRQHandler+0x10>)
 80024a6:	f001 fb9b 	bl	8003be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200003bc 	.word	0x200003bc

080024b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <DMA1_Channel3_IRQHandler+0x10>)
 80024ba:	f001 fb91 	bl	8003be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200004cc 	.word	0x200004cc

080024c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA1_Channel5_IRQHandler+0x10>)
 80024ce:	f001 fb87 	bl	8003be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000400 	.word	0x20000400

080024dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <DMA1_Channel6_IRQHandler+0x10>)
 80024e2:	f001 fb7d 	bl	8003be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000488 	.word	0x20000488

080024f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <USART2_IRQHandler+0x10>)
 80024f6:	f004 ffe1 	bl	80074bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000510 	.word	0x20000510

08002504 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <TIM6_DAC1_IRQHandler+0x10>)
 800250a:	f004 f817 	bl	800653c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000370 	.word	0x20000370

08002518 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <SystemInit+0x20>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <SystemInit+0x20>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800253c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002574 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002540:	f7ff ffea 	bl	8002518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <LoopForever+0x6>)
  ldr r1, =_edata
 8002546:	490d      	ldr	r1, [pc, #52]	; (800257c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <LoopForever+0xe>)
  movs r3, #0
 800254a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800254e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800255c:	4c0a      	ldr	r4, [pc, #40]	; (8002588 <LoopForever+0x16>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256a:	f006 f8b1 	bl	80086d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800256e:	f7fe fc3f 	bl	8000df0 <main>

08002572 <LoopForever>:

LoopForever:
    b LoopForever
 8002572:	e7fe      	b.n	8002572 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002574:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800257c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002580:	08008808 	.word	0x08008808
  ldr r2, =_sbss
 8002584:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002588:	200005a8 	.word	0x200005a8

0800258c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800258c:	e7fe      	b.n	800258c <ADC1_2_IRQHandler>
	...

08002590 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_Init+0x28>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_Init+0x28>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025a0:	2003      	movs	r0, #3
 80025a2:	f001 f9bf 	bl	8003924 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025a6:	2003      	movs	r0, #3
 80025a8:	f000 f808 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ac:	f7ff fc02 	bl	8001db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40022000 	.word	0x40022000

080025bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_InitTick+0x54>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_InitTick+0x58>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 f9d7 	bl	800398e <HAL_SYSTICK_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e00e      	b.n	8002608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b0f      	cmp	r3, #15
 80025ee:	d80a      	bhi.n	8002606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025f0:	2200      	movs	r2, #0
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	f001 f99f 	bl	800393a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <HAL_InitTick+0x5c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000000 	.word	0x20000000
 8002614:	20000008 	.word	0x20000008
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000008 	.word	0x20000008
 8002640:	200005a4 	.word	0x200005a4

08002644 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;  
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	200005a4 	.word	0x200005a4

0800265c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d005      	beq.n	8002682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <HAL_Delay+0x44>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002682:	bf00      	nop
 8002684:	f7ff ffde 	bl	8002644 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d8f7      	bhi.n	8002684 <HAL_Delay+0x28>
  {
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000008 	.word	0x20000008

080026a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b09a      	sub	sp, #104	; 0x68
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e172      	b.n	80029aa <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d176      	bne.n	80027c4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d152      	bne.n	8002784 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff fb7f 	bl	8001dfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d13b      	bne.n	8002784 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fed7 	bl	80034c0 <ADC_Disable>
 8002712:	4603      	mov	r3, r0
 8002714:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d12f      	bne.n	8002784 <HAL_ADC_Init+0xe0>
 8002724:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12b      	bne.n	8002784 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002734:	f023 0302 	bic.w	r3, r3, #2
 8002738:	f043 0202 	orr.w	r2, r3, #2
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800274e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800275e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002760:	4b94      	ldr	r3, [pc, #592]	; (80029b4 <HAL_ADC_Init+0x310>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a94      	ldr	r2, [pc, #592]	; (80029b8 <HAL_ADC_Init+0x314>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9a      	lsrs	r2, r3, #18
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002776:	e002      	b.n	800277e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	3b01      	subs	r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f9      	bne.n	8002778 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a0:	d110      	bne.n	80027c4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f023 0312 	bic.w	r3, r3, #18
 80027aa:	f043 0210 	orr.w	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f043 0201 	orr.w	r2, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f040 80df 	bne.w	8002990 <HAL_ADC_Init+0x2ec>
 80027d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 80da 	bne.w	8002990 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80d2 	bne.w	8002990 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027f4:	f043 0202 	orr.w	r2, r3, #2
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fc:	4b6f      	ldr	r3, [pc, #444]	; (80029bc <HAL_ADC_Init+0x318>)
 80027fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002808:	d102      	bne.n	8002810 <HAL_ADC_Init+0x16c>
 800280a:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_ADC_Init+0x31c>)
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e002      	b.n	8002816 <HAL_ADC_Init+0x172>
 8002810:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002814:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d108      	bne.n	8002836 <HAL_ADC_Init+0x192>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Init+0x192>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_ADC_Init+0x194>
 8002836:	2300      	movs	r3, #0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d11c      	bne.n	8002876 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800283c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_ADC_Init+0x1ba>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_ADC_Init+0x1ba>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_ADC_Init+0x1bc>
 800285e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002860:	2b00      	cmp	r3, #0
 8002862:	d108      	bne.n	8002876 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	431a      	orrs	r2, r3
 8002872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002874:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7e5b      	ldrb	r3, [r3, #25]
 800287a:	035b      	lsls	r3, r3, #13
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002880:	2a01      	cmp	r2, #1
 8002882:	d002      	beq.n	800288a <HAL_ADC_Init+0x1e6>
 8002884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002888:	e000      	b.n	800288c <HAL_ADC_Init+0x1e8>
 800288a:	2200      	movs	r2, #0
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4313      	orrs	r3, r2
 800289a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800289c:	4313      	orrs	r3, r2
 800289e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d11b      	bne.n	80028e2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	7e5b      	ldrb	r3, [r3, #25]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	3b01      	subs	r3, #1
 80028b8:	045a      	lsls	r2, r3, #17
 80028ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028bc:	4313      	orrs	r3, r2
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	663b      	str	r3, [r7, #96]	; 0x60
 80028c4:	e00d      	b.n	80028e2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028ce:	f043 0220 	orr.w	r2, r3, #32
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d007      	beq.n	80028fa <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	4313      	orrs	r3, r2
 80028f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028f6:	4313      	orrs	r3, r2
 80028f8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b00      	cmp	r3, #0
 8002906:	d114      	bne.n	8002932 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002916:	f023 0302 	bic.w	r3, r3, #2
 800291a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7e1b      	ldrb	r3, [r3, #24]
 8002920:	039a      	lsls	r2, r3, #14
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4313      	orrs	r3, r2
 800292c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800292e:	4313      	orrs	r3, r2
 8002930:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_ADC_Init+0x320>)
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002942:	430b      	orrs	r3, r1
 8002944:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10c      	bne.n	8002968 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	f023 010f 	bic.w	r1, r3, #15
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	1e5a      	subs	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	631a      	str	r2, [r3, #48]	; 0x30
 8002966:	e007      	b.n	8002978 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 020f 	bic.w	r2, r2, #15
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f023 0303 	bic.w	r3, r3, #3
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
 800298e:	e00a      	b.n	80029a6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	f023 0312 	bic.w	r3, r3, #18
 8002998:	f043 0210 	orr.w	r2, r3, #16
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80029a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3768      	adds	r7, #104	; 0x68
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000000 	.word	0x20000000
 80029b8:	431bde83 	.word	0x431bde83
 80029bc:	50000300 	.word	0x50000300
 80029c0:	50000100 	.word	0x50000100
 80029c4:	fff0c007 	.word	0xfff0c007

080029c8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 809c 	bne.w	8002b1c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_Start+0x2a>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e097      	b.n	8002b22 <HAL_ADC_Start+0x15a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fcfc 	bl	80033f8 <ADC_Enable>
 8002a00:	4603      	mov	r3, r0
 8002a02:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 8083 	bne.w	8002b12 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a20:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_ADC_Start+0x164>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 031f 	and.w	r3, r3, #31
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d004      	beq.n	8002a36 <HAL_ADC_Start+0x6e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a34:	d115      	bne.n	8002a62 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d027      	beq.n	8002aa0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a60:	e01e      	b.n	8002aa0 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a76:	d004      	beq.n	8002a82 <HAL_ADC_Start+0xba>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <HAL_ADC_Start+0x168>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10e      	bne.n	8002aa0 <HAL_ADC_Start+0xd8>
 8002a82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a98:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aac:	d106      	bne.n	8002abc <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f023 0206 	bic.w	r2, r3, #6
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
 8002aba:	e002      	b.n	8002ac2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	221c      	movs	r2, #28
 8002ad0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_ADC_Start+0x164>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 031f 	and.w	r3, r3, #31
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <HAL_ADC_Start+0x138>
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <HAL_ADC_Start+0x164>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d00a      	beq.n	8002b00 <HAL_ADC_Start+0x138>
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_ADC_Start+0x164>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	2b09      	cmp	r3, #9
 8002af4:	d004      	beq.n	8002b00 <HAL_ADC_Start+0x138>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afe:	d10f      	bne.n	8002b20 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0204 	orr.w	r2, r2, #4
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e006      	b.n	8002b20 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b1a:	e001      	b.n	8002b20 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	50000300 	.word	0x50000300
 8002b30:	50000100 	.word	0x50000100

08002b34 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d102      	bne.n	8002b50 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e02e      	b.n	8002bae <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b50:	4b5e      	ldr	r3, [pc, #376]	; (8002ccc <HAL_ADC_PollForConversion+0x198>)
 8002b52:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 031f 	and.w	r3, r3, #31
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d112      	bne.n	8002b86 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d11d      	bne.n	8002baa <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e09d      	b.n	8002cc2 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0220 	orr.w	r2, r3, #32
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e08b      	b.n	8002cc2 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002baa:	230c      	movs	r3, #12
 8002bac:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_ADC_PollForConversion+0x198>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADC_PollForConversion+0x90>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc2:	d104      	bne.n	8002bce <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	e003      	b.n	8002bd6 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002bd6:	f7ff fd35 	bl	8002644 <HAL_GetTick>
 8002bda:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bdc:	e021      	b.n	8002c22 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d01d      	beq.n	8002c22 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_ADC_PollForConversion+0xc8>
 8002bec:	f7ff fd2a 	bl	8002644 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d212      	bcs.n	8002c22 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10b      	bne.n	8002c22 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f043 0204 	orr.w	r2, r3, #4
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e04f      	b.n	8002cc2 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0d6      	beq.n	8002bde <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d131      	bne.n	8002cae <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d12c      	bne.n	8002cae <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d125      	bne.n	8002cae <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d112      	bne.n	8002c96 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d112      	bne.n	8002cae <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
 8002c94:	e00b      	b.n	8002cae <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0220 	orr.w	r2, r3, #32
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	f043 0201 	orr.w	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d103      	bne.n	8002cc0 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	50000300 	.word	0x50000300

08002cd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b09b      	sub	sp, #108	; 0x6c
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x22>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e2a4      	b.n	8003258 <HAL_ADC_ConfigChannel+0x56c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 8288 	bne.w	8003236 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d81c      	bhi.n	8002d68 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	461a      	mov	r2, r3
 8002d42:	231f      	movs	r3, #31
 8002d44:	4093      	lsls	r3, r2
 8002d46:	43db      	mvns	r3, r3
 8002d48:	4019      	ands	r1, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
 8002d66:	e063      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d81e      	bhi.n	8002dae <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	3b1e      	subs	r3, #30
 8002d84:	221f      	movs	r2, #31
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	4019      	ands	r1, r3
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	3b1e      	subs	r3, #30
 8002da0:	fa00 f203 	lsl.w	r2, r0, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	635a      	str	r2, [r3, #52]	; 0x34
 8002dac:	e040      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b0e      	cmp	r3, #14
 8002db4:	d81e      	bhi.n	8002df4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	3b3c      	subs	r3, #60	; 0x3c
 8002dca:	221f      	movs	r2, #31
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	4019      	ands	r1, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	3b3c      	subs	r3, #60	; 0x3c
 8002de6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38
 8002df2:	e01d      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	3b5a      	subs	r3, #90	; 0x5a
 8002e08:	221f      	movs	r2, #31
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	4019      	ands	r1, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	3b5a      	subs	r3, #90	; 0x5a
 8002e24:	fa00 f203 	lsl.w	r2, r0, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 80e5 	bne.w	800300a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b09      	cmp	r3, #9
 8002e46:	d91c      	bls.n	8002e82 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6999      	ldr	r1, [r3, #24]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	3b1e      	subs	r3, #30
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	4019      	ands	r1, r3
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6898      	ldr	r0, [r3, #8]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	3b1e      	subs	r3, #30
 8002e74:	fa00 f203 	lsl.w	r2, r0, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	619a      	str	r2, [r3, #24]
 8002e80:	e019      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6959      	ldr	r1, [r3, #20]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	2207      	movs	r2, #7
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	4019      	ands	r1, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6898      	ldr	r0, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	08db      	lsrs	r3, r3, #3
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d84f      	bhi.n	8002f78 <HAL_ADC_ConfigChannel+0x28c>
 8002ed8:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <HAL_ADC_ConfigChannel+0x1f4>)
 8002eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ede:	bf00      	nop
 8002ee0:	08002ef1 	.word	0x08002ef1
 8002ee4:	08002f13 	.word	0x08002f13
 8002ee8:	08002f35 	.word	0x08002f35
 8002eec:	08002f57 	.word	0x08002f57
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ef6:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_ADC_ConfigChannel+0x45c>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	0691      	lsls	r1, r2, #26
 8002f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f02:	430a      	orrs	r2, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f0e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f10:	e07e      	b.n	8003010 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f18:	4b8b      	ldr	r3, [pc, #556]	; (8003148 <HAL_ADC_ConfigChannel+0x45c>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	0691      	lsls	r1, r2, #26
 8002f22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f24:	430a      	orrs	r2, r1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f30:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f32:	e06d      	b.n	8003010 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f3a:	4b83      	ldr	r3, [pc, #524]	; (8003148 <HAL_ADC_ConfigChannel+0x45c>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	0691      	lsls	r1, r2, #26
 8002f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f46:	430a      	orrs	r2, r1
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f52:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f54:	e05c      	b.n	8003010 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f5c:	4b7a      	ldr	r3, [pc, #488]	; (8003148 <HAL_ADC_ConfigChannel+0x45c>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	0691      	lsls	r1, r2, #26
 8002f66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f74:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f76:	e04b      	b.n	8003010 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	069b      	lsls	r3, r3, #26
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d107      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	069b      	lsls	r3, r3, #26
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d107      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fbe:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	069b      	lsls	r3, r3, #26
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d107      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fe2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	069b      	lsls	r3, r3, #26
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d10a      	bne.n	800300e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003006:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003008:	e001      	b.n	800300e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800300a:	bf00      	nop
 800300c:	e000      	b.n	8003010 <HAL_ADC_ConfigChannel+0x324>
      break;
 800300e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x344>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x344>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_ADC_ConfigChannel+0x346>
 8003030:	2300      	movs	r3, #0
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 810a 	bne.w	800324c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d00f      	beq.n	8003060 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800305e:	e049      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2201      	movs	r2, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b09      	cmp	r3, #9
 8003080:	d91c      	bls.n	80030bc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6999      	ldr	r1, [r3, #24]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	3b1b      	subs	r3, #27
 8003094:	2207      	movs	r2, #7
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	4019      	ands	r1, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6898      	ldr	r0, [r3, #8]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	3b1b      	subs	r3, #27
 80030ae:	fa00 f203 	lsl.w	r2, r0, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	619a      	str	r2, [r3, #24]
 80030ba:	e01b      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6959      	ldr	r1, [r3, #20]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	2207      	movs	r2, #7
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	4019      	ands	r1, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6898      	ldr	r0, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_ADC_ConfigChannel+0x460>)
 80030f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d105      	bne.n	800310c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003108:	2b00      	cmp	r3, #0
 800310a:	d015      	beq.n	8003138 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003110:	2b11      	cmp	r3, #17
 8003112:	d105      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003124:	2b12      	cmp	r3, #18
 8003126:	f040 8091 	bne.w	800324c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800312a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 808a 	bne.w	800324c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003140:	d108      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x468>
 8003142:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_ADC_ConfigChannel+0x464>)
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e008      	b.n	800315a <HAL_ADC_ConfigChannel+0x46e>
 8003148:	83fff000 	.word	0x83fff000
 800314c:	50000300 	.word	0x50000300
 8003150:	50000100 	.word	0x50000100
 8003154:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003158:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d108      	bne.n	800317a <HAL_ADC_ConfigChannel+0x48e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x48e>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_ADC_ConfigChannel+0x490>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d150      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003180:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x4b6>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x4b6>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x4b8>
 80031a2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d13c      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d11d      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x500>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b8:	d118      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_ADC_ConfigChannel+0x578>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a27      	ldr	r2, [pc, #156]	; (8003268 <HAL_ADC_ConfigChannel+0x57c>)
 80031cc:	fba2 2303 	umull	r2, r3, r2, r3
 80031d0:	0c9a      	lsrs	r2, r3, #18
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f9      	bne.n	80031de <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031ea:	e02e      	b.n	800324a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b11      	cmp	r3, #17
 80031f2:	d10b      	bne.n	800320c <HAL_ADC_ConfigChannel+0x520>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031fc:	d106      	bne.n	800320c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80031fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003208:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800320a:	e01e      	b.n	800324a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b12      	cmp	r3, #18
 8003212:	d11a      	bne.n	800324a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800321c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003220:	e013      	b.n	800324a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0220 	orr.w	r2, r3, #32
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003234:	e00a      	b.n	800324c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003248:	e000      	b.n	800324c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800324a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003254:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003258:	4618      	mov	r0, r3
 800325a:	376c      	adds	r7, #108	; 0x6c
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	20000000 	.word	0x20000000
 8003268:	431bde83 	.word	0x431bde83

0800326c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800326c:	b480      	push	{r7}
 800326e:	b099      	sub	sp, #100	; 0x64
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003284:	d102      	bne.n	800328c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003286:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	e002      	b.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800328c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003290:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0a2      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e09b      	b.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d17f      	bne.n	80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d179      	bne.n	80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80032ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d040      	beq.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ea:	035b      	lsls	r3, r3, #13
 80032ec:	430b      	orrs	r3, r1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d108      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d15c      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d107      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003336:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003338:	2b00      	cmp	r3, #0
 800333a:	d14b      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800333c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003344:	f023 030f 	bic.w	r3, r3, #15
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	6811      	ldr	r1, [r2, #0]
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	6892      	ldr	r2, [r2, #8]
 8003350:	430a      	orrs	r2, r1
 8003352:	431a      	orrs	r2, r3
 8003354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003356:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003358:	e03c      	b.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800335a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003364:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d108      	bne.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d123      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d107      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80033a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d112      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80033ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033b6:	f023 030f 	bic.w	r3, r3, #15
 80033ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033be:	e009      	b.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033d2:	e000      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80033e2:	4618      	mov	r0, r3
 80033e4:	3764      	adds	r7, #100	; 0x64
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	50000100 	.word	0x50000100
 80033f4:	50000300 	.word	0x50000300

080033f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d108      	bne.n	8003424 <ADC_Enable+0x2c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <ADC_Enable+0x2c>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <ADC_Enable+0x2e>
 8003424:	2300      	movs	r3, #0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d143      	bne.n	80034b2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	4b22      	ldr	r3, [pc, #136]	; (80034bc <ADC_Enable+0xc4>)
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f043 0210 	orr.w	r2, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e02f      	b.n	80034b4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003464:	f7ff f8ee 	bl	8002644 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800346a:	e01b      	b.n	80034a4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800346c:	f7ff f8ea 	bl	8002644 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d914      	bls.n	80034a4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d00d      	beq.n	80034a4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0210 	orr.w	r2, r3, #16
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0201 	orr.w	r2, r3, #1
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d1dc      	bne.n	800346c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	8000003f 	.word	0x8000003f

080034c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <ADC_Disable+0x2c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <ADC_Disable+0x2c>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <ADC_Disable+0x2e>
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d047      	beq.n	8003582 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030d 	and.w	r3, r3, #13
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10f      	bne.n	8003520 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0202 	orr.w	r2, r2, #2
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2203      	movs	r2, #3
 8003516:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003518:	f7ff f894 	bl	8002644 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800351e:	e029      	b.n	8003574 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0210 	orr.w	r2, r3, #16
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e023      	b.n	8003584 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800353c:	f7ff f882 	bl	8002644 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d914      	bls.n	8003574 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10d      	bne.n	8003574 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0210 	orr.w	r2, r3, #16
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d0dc      	beq.n	800353c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0ed      	b.n	800377a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe fc62 	bl	8001e74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035c0:	f7ff f840 	bl	8002644 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035c6:	e012      	b.n	80035ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035c8:	f7ff f83c 	bl	8002644 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b0a      	cmp	r3, #10
 80035d4:	d90b      	bls.n	80035ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2205      	movs	r2, #5
 80035e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0c5      	b.n	800377a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0e5      	beq.n	80035c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0202 	bic.w	r2, r2, #2
 800360a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800360c:	f7ff f81a 	bl	8002644 <HAL_GetTick>
 8003610:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003612:	e012      	b.n	800363a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003614:	f7ff f816 	bl	8002644 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b0a      	cmp	r3, #10
 8003620:	d90b      	bls.n	800363a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2205      	movs	r2, #5
 8003632:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e09f      	b.n	800377a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1e5      	bne.n	8003614 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	7e1b      	ldrb	r3, [r3, #24]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d108      	bne.n	8003662 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e007      	b.n	8003672 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	7e5b      	ldrb	r3, [r3, #25]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d108      	bne.n	800368c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	e007      	b.n	800369c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7e9b      	ldrb	r3, [r3, #26]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d108      	bne.n	80036b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0220 	orr.w	r2, r2, #32
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	e007      	b.n	80036c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0220 	bic.w	r2, r2, #32
 80036c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7edb      	ldrb	r3, [r3, #27]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d108      	bne.n	80036e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0210 	bic.w	r2, r2, #16
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	e007      	b.n	80036f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0210 	orr.w	r2, r2, #16
 80036ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7f1b      	ldrb	r3, [r3, #28]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d108      	bne.n	800370a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0208 	orr.w	r2, r2, #8
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e007      	b.n	800371a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0208 	bic.w	r2, r2, #8
 8003718:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7f5b      	ldrb	r3, [r3, #29]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d108      	bne.n	8003734 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0204 	orr.w	r2, r2, #4
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e007      	b.n	8003744 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0204 	bic.w	r2, r2, #4
 8003742:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	ea42 0103 	orr.w	r1, r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	1e5a      	subs	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037a0:	4013      	ands	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037b6:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	60d3      	str	r3, [r2, #12]
}
 80037bc:	bf00      	nop
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <__NVIC_GetPriorityGrouping+0x18>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	0a1b      	lsrs	r3, r3, #8
 80037d6:	f003 0307 	and.w	r3, r3, #7
}
 80037da:	4618      	mov	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	db0b      	blt.n	8003812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	f003 021f 	and.w	r2, r3, #31
 8003800:	4907      	ldr	r1, [pc, #28]	; (8003820 <__NVIC_EnableIRQ+0x38>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2001      	movs	r0, #1
 800380a:	fa00 f202 	lsl.w	r2, r0, r2
 800380e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000e100 	.word	0xe000e100

08003824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	db0a      	blt.n	800384e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	490c      	ldr	r1, [pc, #48]	; (8003870 <__NVIC_SetPriority+0x4c>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	440b      	add	r3, r1
 8003848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800384c:	e00a      	b.n	8003864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4908      	ldr	r1, [pc, #32]	; (8003874 <__NVIC_SetPriority+0x50>)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3b04      	subs	r3, #4
 800385c:	0112      	lsls	r2, r2, #4
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	440b      	add	r3, r1
 8003862:	761a      	strb	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf28      	it	cs
 8003896:	2304      	movcs	r3, #4
 8003898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3304      	adds	r3, #4
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d902      	bls.n	80038a8 <NVIC_EncodePriority+0x30>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3b03      	subs	r3, #3
 80038a6:	e000      	b.n	80038aa <NVIC_EncodePriority+0x32>
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	4313      	orrs	r3, r2
         );
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038f0:	d301      	bcc.n	80038f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00f      	b.n	8003916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f6:	4a0a      	ldr	r2, [pc, #40]	; (8003920 <SysTick_Config+0x40>)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fe:	210f      	movs	r1, #15
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	f7ff ff8e 	bl	8003824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <SysTick_Config+0x40>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <SysTick_Config+0x40>)
 8003910:	2207      	movs	r2, #7
 8003912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	e000e010 	.word	0xe000e010

08003924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff29 	bl	8003784 <__NVIC_SetPriorityGrouping>
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b086      	sub	sp, #24
 800393e:	af00      	add	r7, sp, #0
 8003940:	4603      	mov	r3, r0
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800394c:	f7ff ff3e 	bl	80037cc <__NVIC_GetPriorityGrouping>
 8003950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	6978      	ldr	r0, [r7, #20]
 8003958:	f7ff ff8e 	bl	8003878 <NVIC_EncodePriority>
 800395c:	4602      	mov	r2, r0
 800395e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff5d 	bl	8003824 <__NVIC_SetPriority>
}
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	4603      	mov	r3, r0
 800397a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff31 	bl	80037e8 <__NVIC_EnableIRQ>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff ffa2 	bl	80038e0 <SysTick_Config>
 800399c:	4603      	mov	r3, r0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e037      	b.n	8003a2c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80039d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9b8 	bl	8003d84 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}  
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_DMA_Start_IT+0x20>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e04a      	b.n	8003aea <HAL_DMA_Start_IT+0xb6>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d13a      	bne.n	8003adc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f94b 	bl	8003d26 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 020e 	orr.w	r2, r2, #14
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e00f      	b.n	8003aca <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 020a 	orr.w	r2, r2, #10
 8003ab8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0204 	bic.w	r2, r2, #4
 8003ac8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e005      	b.n	8003ae8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d008      	beq.n	8003b16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2204      	movs	r2, #4
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e020      	b.n	8003b58 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 020e 	bic.w	r2, r2, #14
 8003b24:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d005      	beq.n	8003b86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	e027      	b.n	8003bd6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 020e 	bic.w	r2, r2, #14
 8003b94:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
    } 
  }
  return status;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d024      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x72>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01f      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d107      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0204 	bic.w	r2, r2, #4
 8003c2e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	2104      	movs	r1, #4
 8003c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d06a      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c50:	e065      	b.n	8003d1e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2202      	movs	r2, #2
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d02c      	beq.n	8003cbc <HAL_DMA_IRQHandler+0xdc>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d027      	beq.n	8003cbc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 020a 	bic.w	r2, r2, #10
 8003c88:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d035      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003cba:	e030      	b.n	8003d1e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d028      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x13e>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d023      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 020e 	bic.w	r2, r2, #14
 8003ce4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	2101      	movs	r1, #1
 8003cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
    }
  }
}  
 8003d1c:	e7ff      	b.n	8003d1e <HAL_DMA_IRQHandler+0x13e>
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d108      	bne.n	8003d66 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d64:	e007      	b.n	8003d76 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	60da      	str	r2, [r3, #12]
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <DMA_CalcBaseAndBitshift+0x34>)
 8003d94:	4413      	add	r3, r2
 8003d96:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <DMA_CalcBaseAndBitshift+0x38>)
 8003d98:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	009a      	lsls	r2, r3, #2
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <DMA_CalcBaseAndBitshift+0x3c>)
 8003da8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	bffdfff8 	.word	0xbffdfff8
 8003dbc:	cccccccd 	.word	0xcccccccd
 8003dc0:	40020000 	.word	0x40020000

08003dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dd2:	e14e      	b.n	8004072 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2101      	movs	r1, #1
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8140 	beq.w	800406c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d005      	beq.n	8003e04 <HAL_GPIO_Init+0x40>
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d130      	bne.n	8003e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 0201 	and.w	r2, r3, #1
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d017      	beq.n	8003ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d123      	bne.n	8003ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	08da      	lsrs	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3208      	adds	r2, #8
 8003eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	08da      	lsrs	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3208      	adds	r2, #8
 8003ef0:	6939      	ldr	r1, [r7, #16]
 8003ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	2203      	movs	r2, #3
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0203 	and.w	r2, r3, #3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 809a 	beq.w	800406c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f38:	4b55      	ldr	r3, [pc, #340]	; (8004090 <HAL_GPIO_Init+0x2cc>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4a54      	ldr	r2, [pc, #336]	; (8004090 <HAL_GPIO_Init+0x2cc>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6193      	str	r3, [r2, #24]
 8003f44:	4b52      	ldr	r3, [pc, #328]	; (8004090 <HAL_GPIO_Init+0x2cc>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f50:	4a50      	ldr	r2, [pc, #320]	; (8004094 <HAL_GPIO_Init+0x2d0>)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	220f      	movs	r2, #15
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f7a:	d013      	beq.n	8003fa4 <HAL_GPIO_Init+0x1e0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a46      	ldr	r2, [pc, #280]	; (8004098 <HAL_GPIO_Init+0x2d4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00d      	beq.n	8003fa0 <HAL_GPIO_Init+0x1dc>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a45      	ldr	r2, [pc, #276]	; (800409c <HAL_GPIO_Init+0x2d8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d007      	beq.n	8003f9c <HAL_GPIO_Init+0x1d8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a44      	ldr	r2, [pc, #272]	; (80040a0 <HAL_GPIO_Init+0x2dc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <HAL_GPIO_Init+0x1d4>
 8003f94:	2303      	movs	r3, #3
 8003f96:	e006      	b.n	8003fa6 <HAL_GPIO_Init+0x1e2>
 8003f98:	2305      	movs	r3, #5
 8003f9a:	e004      	b.n	8003fa6 <HAL_GPIO_Init+0x1e2>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e002      	b.n	8003fa6 <HAL_GPIO_Init+0x1e2>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <HAL_GPIO_Init+0x1e2>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	f002 0203 	and.w	r2, r2, #3
 8003fac:	0092      	lsls	r2, r2, #2
 8003fae:	4093      	lsls	r3, r2
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fb6:	4937      	ldr	r1, [pc, #220]	; (8004094 <HAL_GPIO_Init+0x2d0>)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fc4:	4b37      	ldr	r3, [pc, #220]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fe8:	4a2e      	ldr	r2, [pc, #184]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fee:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004012:	4a24      	ldr	r2, [pc, #144]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004018:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800403c:	4a19      	ldr	r2, [pc, #100]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	43db      	mvns	r3, r3
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004066:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <HAL_GPIO_Init+0x2e0>)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	3301      	adds	r3, #1
 8004070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	f47f aea9 	bne.w	8003dd4 <HAL_GPIO_Init+0x10>
  }
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40021000 	.word	0x40021000
 8004094:	40010000 	.word	0x40010000
 8004098:	48000400 	.word	0x48000400
 800409c:	48000800 	.word	0x48000800
 80040a0:	48000c00 	.word	0x48000c00
 80040a4:	40010400 	.word	0x40010400

080040a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	887b      	ldrh	r3, [r7, #2]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	e001      	b.n	80040ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
 80040e4:	4613      	mov	r3, r2
 80040e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040f4:	e002      	b.n	80040fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e081      	b.n	800421e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fee4 	bl	8001efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004158:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004168:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d107      	bne.n	8004182 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	e006      	b.n	8004190 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800418e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d104      	bne.n	80041a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69d9      	ldr	r1, [r3, #28]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1a      	ldr	r2, [r3, #32]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	461a      	mov	r2, r3
 8004234:	460b      	mov	r3, r1
 8004236:	817b      	strh	r3, [r7, #10]
 8004238:	4613      	mov	r3, r2
 800423a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b20      	cmp	r3, #32
 8004246:	f040 80db 	bne.w	8004400 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_I2C_Master_Receive+0x30>
 8004254:	2302      	movs	r3, #2
 8004256:	e0d4      	b.n	8004402 <HAL_I2C_Master_Receive+0x1da>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004260:	f7fe f9f0 	bl	8002644 <HAL_GetTick>
 8004264:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	2319      	movs	r3, #25
 800426c:	2201      	movs	r2, #1
 800426e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f8f2 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0bf      	b.n	8004402 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2222      	movs	r2, #34	; 0x22
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2210      	movs	r2, #16
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	893a      	ldrh	r2, [r7, #8]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2bff      	cmp	r3, #255	; 0xff
 80042b2:	d90e      	bls.n	80042d2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	22ff      	movs	r2, #255	; 0xff
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	8979      	ldrh	r1, [r7, #10]
 80042c2:	4b52      	ldr	r3, [pc, #328]	; (800440c <HAL_I2C_Master_Receive+0x1e4>)
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 faba 	bl	8004844 <I2C_TransferConfig>
 80042d0:	e06d      	b.n	80043ae <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	8979      	ldrh	r1, [r7, #10]
 80042e4:	4b49      	ldr	r3, [pc, #292]	; (800440c <HAL_I2C_Master_Receive+0x1e4>)
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 faa9 	bl	8004844 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80042f2:	e05c      	b.n	80043ae <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	6a39      	ldr	r1, [r7, #32]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f941 	bl	8004580 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e07c      	b.n	8004402 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	b2d2      	uxtb	r2, r2
 8004314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d034      	beq.n	80043ae <HAL_I2C_Master_Receive+0x186>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d130      	bne.n	80043ae <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	2200      	movs	r2, #0
 8004354:	2180      	movs	r1, #128	; 0x80
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f880 	bl	800445c <I2C_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e04d      	b.n	8004402 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2bff      	cmp	r3, #255	; 0xff
 800436e:	d90e      	bls.n	800438e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	22ff      	movs	r2, #255	; 0xff
 8004374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	b2da      	uxtb	r2, r3
 800437c:	8979      	ldrh	r1, [r7, #10]
 800437e:	2300      	movs	r3, #0
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fa5c 	bl	8004844 <I2C_TransferConfig>
 800438c:	e00f      	b.n	80043ae <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29a      	uxth	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	b2da      	uxtb	r2, r3
 800439e:	8979      	ldrh	r1, [r7, #10]
 80043a0:	2300      	movs	r3, #0
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fa4b 	bl	8004844 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d19d      	bne.n	80042f4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	6a39      	ldr	r1, [r7, #32]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f89c 	bl	80044fa <I2C_WaitOnSTOPFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e01a      	b.n	8004402 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2220      	movs	r2, #32
 80043d2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_I2C_Master_Receive+0x1e8>)
 80043e0:	400b      	ands	r3, r1
 80043e2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	e000      	b.n	8004402 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004400:	2302      	movs	r3, #2
  }
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	80002400 	.word	0x80002400
 8004410:	fe00e800 	.word	0xfe00e800

08004414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d103      	bne.n	8004432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b01      	cmp	r3, #1
 800443e:	d007      	beq.n	8004450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f042 0201 	orr.w	r2, r2, #1
 800444e:	619a      	str	r2, [r3, #24]
  }
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800446c:	e031      	b.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d02d      	beq.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fe f8e5 	bl	8002644 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d122      	bne.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4013      	ands	r3, r2
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	429a      	cmp	r2, r3
 800449a:	bf0c      	ite	eq
 800449c:	2301      	moveq	r3, #1
 800449e:	2300      	movne	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	461a      	mov	r2, r3
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d113      	bne.n	80044d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00f      	b.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	429a      	cmp	r2, r3
 80044e0:	bf0c      	ite	eq
 80044e2:	2301      	moveq	r3, #1
 80044e4:	2300      	movne	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	461a      	mov	r2, r3
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d0be      	beq.n	800446e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004506:	e02f      	b.n	8004568 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f8b9 	bl	8004684 <I2C_IsErrorOccurred>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e02d      	b.n	8004578 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451c:	f7fe f892 	bl	8002644 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	429a      	cmp	r2, r3
 800452a:	d302      	bcc.n	8004532 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11a      	bne.n	8004568 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b20      	cmp	r3, #32
 800453e:	d013      	beq.n	8004568 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	f043 0220 	orr.w	r2, r3, #32
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e007      	b.n	8004578 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d1c8      	bne.n	8004508 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800458c:	e06b      	b.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f876 	bl	8004684 <I2C_IsErrorOccurred>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e069      	b.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d138      	bne.n	8004622 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d105      	bne.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e055      	b.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d107      	bne.n	80045e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2210      	movs	r2, #16
 80045de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2204      	movs	r2, #4
 80045e4:	645a      	str	r2, [r3, #68]	; 0x44
 80045e6:	e002      	b.n	80045ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2220      	movs	r2, #32
 80045f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6859      	ldr	r1, [r3, #4]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	4b1f      	ldr	r3, [pc, #124]	; (8004680 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004602:	400b      	ands	r3, r1
 8004604:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e029      	b.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fe f80f 	bl	8002644 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d116      	bne.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d00f      	beq.n	8004666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	f043 0220 	orr.w	r2, r3, #32
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e007      	b.n	8004676 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	d18c      	bne.n	800458e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	fe00e800 	.word	0xfe00e800

08004684 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d068      	beq.n	8004782 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2210      	movs	r2, #16
 80046b6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046b8:	e049      	b.n	800474e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d045      	beq.n	800474e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fd ffbf 	bl	8002644 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <I2C_IsErrorOccurred+0x54>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d13a      	bne.n	800474e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046ea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fa:	d121      	bne.n	8004740 <I2C_IsErrorOccurred+0xbc>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004702:	d01d      	beq.n	8004740 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004704:	7cfb      	ldrb	r3, [r7, #19]
 8004706:	2b20      	cmp	r3, #32
 8004708:	d01a      	beq.n	8004740 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004718:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800471a:	f7fd ff93 	bl	8002644 <HAL_GetTick>
 800471e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004720:	e00e      	b.n	8004740 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004722:	f7fd ff8f 	bl	8002644 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b19      	cmp	r3, #25
 800472e:	d907      	bls.n	8004740 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	f043 0320 	orr.w	r3, r3, #32
 8004736:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800473e:	e006      	b.n	800474e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b20      	cmp	r3, #32
 800474c:	d1e9      	bne.n	8004722 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b20      	cmp	r3, #32
 800475a:	d003      	beq.n	8004764 <I2C_IsErrorOccurred+0xe0>
 800475c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0aa      	beq.n	80046ba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2220      	movs	r2, #32
 8004772:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f043 0304 	orr.w	r3, r3, #4
 800477a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f043 0308 	orr.w	r3, r3, #8
 80047bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f043 0302 	orr.w	r3, r3, #2
 80047de:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01c      	beq.n	8004832 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff fe0b 	bl	8004414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <I2C_IsErrorOccurred+0x1bc>)
 800480a:	400b      	ands	r3, r1
 800480c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004836:	4618      	mov	r0, r3
 8004838:	3728      	adds	r7, #40	; 0x28
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	fe00e800 	.word	0xfe00e800

08004844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	4613      	mov	r3, r2
 8004854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800485c:	7a7b      	ldrb	r3, [r7, #9]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004864:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	4313      	orrs	r3, r2
 800486e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004872:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	0d5b      	lsrs	r3, r3, #21
 800487e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <I2C_TransferConfig+0x60>)
 8004884:	430b      	orrs	r3, r1
 8004886:	43db      	mvns	r3, r3
 8004888:	ea02 0103 	and.w	r1, r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	03ff63ff 	.word	0x03ff63ff

080048a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d138      	bne.n	8004930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e032      	b.n	8004932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	; 0x24
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0201 	bic.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d139      	bne.n	80049c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800495e:	2302      	movs	r3, #2
 8004960:	e033      	b.n	80049ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2224      	movs	r2, #36	; 0x24
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004990:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6193      	str	r3, [r2, #24]
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4905      	ldr	r1, [pc, #20]	; (8004a14 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40010000 	.word	0x40010000

08004a18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a28:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f001 b823 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 817d 	beq.w	8004d4e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a54:	4bbc      	ldr	r3, [pc, #752]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d00c      	beq.n	8004a7a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a60:	4bb9      	ldr	r3, [pc, #740]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d15c      	bne.n	8004b26 <HAL_RCC_OscConfig+0x10e>
 8004a6c:	4bb6      	ldr	r3, [pc, #728]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d155      	bne.n	8004b26 <HAL_RCC_OscConfig+0x10e>
 8004a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a7e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a82:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a86:	fa93 f3a3 	rbit	r3, r3
 8004a8a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a8e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a92:	fab3 f383 	clz	r3, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d102      	bne.n	8004aac <HAL_RCC_OscConfig+0x94>
 8004aa6:	4ba8      	ldr	r3, [pc, #672]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	e015      	b.n	8004ad8 <HAL_RCC_OscConfig+0xc0>
 8004aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ab0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004ab8:	fa93 f3a3 	rbit	r3, r3
 8004abc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ac4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ac8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004acc:	fa93 f3a3 	rbit	r3, r3
 8004ad0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004ad4:	4b9c      	ldr	r3, [pc, #624]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004adc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004ae0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004ae4:	fa92 f2a2 	rbit	r2, r2
 8004ae8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004aec:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004af0:	fab2 f282 	clz	r2, r2
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	f042 0220 	orr.w	r2, r2, #32
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	f002 021f 	and.w	r2, r2, #31
 8004b00:	2101      	movs	r1, #1
 8004b02:	fa01 f202 	lsl.w	r2, r1, r2
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 811f 	beq.w	8004d4c <HAL_RCC_OscConfig+0x334>
 8004b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f040 8116 	bne.w	8004d4c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f000 bfaf 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x12e>
 8004b38:	4b83      	ldr	r3, [pc, #524]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a82      	ldr	r2, [pc, #520]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e036      	b.n	8004bb4 <HAL_RCC_OscConfig+0x19c>
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCC_OscConfig+0x158>
 8004b56:	4b7c      	ldr	r3, [pc, #496]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a7b      	ldr	r2, [pc, #492]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	4b79      	ldr	r3, [pc, #484]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a78      	ldr	r2, [pc, #480]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	e021      	b.n	8004bb4 <HAL_RCC_OscConfig+0x19c>
 8004b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x184>
 8004b82:	4b71      	ldr	r3, [pc, #452]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a70      	ldr	r2, [pc, #448]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b6e      	ldr	r3, [pc, #440]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6d      	ldr	r2, [pc, #436]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCC_OscConfig+0x19c>
 8004b9c:	4b6a      	ldr	r3, [pc, #424]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a69      	ldr	r2, [pc, #420]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4b67      	ldr	r3, [pc, #412]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a66      	ldr	r2, [pc, #408]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bb4:	4b64      	ldr	r3, [pc, #400]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	f023 020f 	bic.w	r2, r3, #15
 8004bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	495f      	ldr	r1, [pc, #380]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d059      	beq.n	8004c92 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bde:	f7fd fd31 	bl	8002644 <HAL_GetTick>
 8004be2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be8:	f7fd fd2c 	bl	8002644 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b64      	cmp	r3, #100	; 0x64
 8004bf6:	d902      	bls.n	8004bfe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	f000 bf43 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>
 8004bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c02:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c06:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004c0a:	fa93 f3a3 	rbit	r3, r3
 8004c0e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004c12:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d102      	bne.n	8004c30 <HAL_RCC_OscConfig+0x218>
 8004c2a:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	e015      	b.n	8004c5c <HAL_RCC_OscConfig+0x244>
 8004c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c34:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c38:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004c3c:	fa93 f3a3 	rbit	r3, r3
 8004c40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c48:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c58:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c60:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c64:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c68:	fa92 f2a2 	rbit	r2, r2
 8004c6c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c70:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c74:	fab2 f282 	clz	r2, r2
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	f042 0220 	orr.w	r2, r2, #32
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	f002 021f 	and.w	r2, r2, #31
 8004c84:	2101      	movs	r1, #1
 8004c86:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ab      	beq.n	8004be8 <HAL_RCC_OscConfig+0x1d0>
 8004c90:	e05d      	b.n	8004d4e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c92:	f7fd fcd7 	bl	8002644 <HAL_GetTick>
 8004c96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fd fcd2 	bl	8002644 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b64      	cmp	r3, #100	; 0x64
 8004caa:	d902      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	f000 bee9 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>
 8004cb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cb6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004cbe:	fa93 f3a3 	rbit	r3, r3
 8004cc2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004cc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cca:	fab3 f383 	clz	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d102      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x2cc>
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	e015      	b.n	8004d10 <HAL_RCC_OscConfig+0x2f8>
 8004ce4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ce8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cfc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004d00:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d04:	fa93 f3a3 	rbit	r3, r3
 8004d08:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	; (8004d48 <HAL_RCC_OscConfig+0x330>)
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d14:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004d18:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004d1c:	fa92 f2a2 	rbit	r2, r2
 8004d20:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004d24:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004d28:	fab2 f282 	clz	r2, r2
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	f042 0220 	orr.w	r2, r2, #32
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	f002 021f 	and.w	r2, r2, #31
 8004d38:	2101      	movs	r1, #1
 8004d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ab      	bne.n	8004c9c <HAL_RCC_OscConfig+0x284>
 8004d44:	e003      	b.n	8004d4e <HAL_RCC_OscConfig+0x336>
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 817d 	beq.w	800505e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d64:	4ba6      	ldr	r3, [pc, #664]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d70:	4ba3      	ldr	r3, [pc, #652]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 030c 	and.w	r3, r3, #12
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d172      	bne.n	8004e62 <HAL_RCC_OscConfig+0x44a>
 8004d7c:	4ba0      	ldr	r3, [pc, #640]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d16c      	bne.n	8004e62 <HAL_RCC_OscConfig+0x44a>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	fab3 f383 	clz	r3, r3
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HAL_RCC_OscConfig+0x3a0>
 8004db2:	4b93      	ldr	r3, [pc, #588]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	e013      	b.n	8004de0 <HAL_RCC_OscConfig+0x3c8>
 8004db8:	2302      	movs	r3, #2
 8004dba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004dca:	2302      	movs	r3, #2
 8004dcc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004dd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004ddc:	4b88      	ldr	r3, [pc, #544]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	2202      	movs	r2, #2
 8004de2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004de6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004dea:	fa92 f2a2 	rbit	r2, r2
 8004dee:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004df2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004df6:	fab2 f282 	clz	r2, r2
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	f042 0220 	orr.w	r2, r2, #32
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	f002 021f 	and.w	r2, r2, #31
 8004e06:	2101      	movs	r1, #1
 8004e08:	fa01 f202 	lsl.w	r2, r1, r2
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCC_OscConfig+0x410>
 8004e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d002      	beq.n	8004e28 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f000 be2e 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b75      	ldr	r3, [pc, #468]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	21f8      	movs	r1, #248	; 0xf8
 8004e3e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004e46:	fa91 f1a1 	rbit	r1, r1
 8004e4a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004e4e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e52:	fab1 f181 	clz	r1, r1
 8004e56:	b2c9      	uxtb	r1, r1
 8004e58:	408b      	lsls	r3, r1
 8004e5a:	4969      	ldr	r1, [pc, #420]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e60:	e0fd      	b.n	800505e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8088 	beq.w	8004f84 <HAL_RCC_OscConfig+0x56c>
 8004e74:	2301      	movs	r3, #1
 8004e76:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e7e:	fa93 f3a3 	rbit	r3, r3
 8004e82:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e86:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8a:	fab3 f383 	clz	r3, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fd fbd0 	bl	8002644 <HAL_GetTick>
 8004ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea8:	e00a      	b.n	8004ec0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eaa:	f7fd fbcb 	bl	8002644 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d902      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	f000 bde2 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004eca:	fa93 f3a3 	rbit	r3, r3
 8004ece:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004ed2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed6:	fab3 f383 	clz	r3, r3
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4d8>
 8004eea:	4b45      	ldr	r3, [pc, #276]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	e013      	b.n	8004f18 <HAL_RCC_OscConfig+0x500>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004f02:	2302      	movs	r3, #2
 8004f04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004f08:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004f0c:	fa93 f3a3 	rbit	r3, r3
 8004f10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004f14:	4b3a      	ldr	r3, [pc, #232]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	2202      	movs	r2, #2
 8004f1a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004f1e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004f22:	fa92 f2a2 	rbit	r2, r2
 8004f26:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004f2a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f2e:	fab2 f282 	clz	r2, r2
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	f042 0220 	orr.w	r2, r2, #32
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	f002 021f 	and.w	r2, r2, #31
 8004f3e:	2101      	movs	r1, #1
 8004f40:	fa01 f202 	lsl.w	r2, r1, r2
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0af      	beq.n	8004eaa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4a:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	21f8      	movs	r1, #248	; 0xf8
 8004f60:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f64:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f68:	fa91 f1a1 	rbit	r1, r1
 8004f6c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004f70:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004f74:	fab1 f181 	clz	r1, r1
 8004f78:	b2c9      	uxtb	r1, r1
 8004f7a:	408b      	lsls	r3, r1
 8004f7c:	4920      	ldr	r1, [pc, #128]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]
 8004f82:	e06c      	b.n	800505e <HAL_RCC_OscConfig+0x646>
 8004f84:	2301      	movs	r3, #1
 8004f86:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f8e:	fa93 f3a3 	rbit	r3, r3
 8004f92:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f9a:	fab3 f383 	clz	r3, r3
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fa4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	461a      	mov	r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7fd fb48 	bl	8002644 <HAL_GetTick>
 8004fb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fba:	f7fd fb43 	bl	8002644 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	f000 bd5a 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fda:	fa93 f3a3 	rbit	r3, r3
 8004fde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	095b      	lsrs	r3, r3, #5
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d104      	bne.n	8005004 <HAL_RCC_OscConfig+0x5ec>
 8004ffa:	4b01      	ldr	r3, [pc, #4]	; (8005000 <HAL_RCC_OscConfig+0x5e8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	e015      	b.n	800502c <HAL_RCC_OscConfig+0x614>
 8005000:	40021000 	.word	0x40021000
 8005004:	2302      	movs	r3, #2
 8005006:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800500e:	fa93 f3a3 	rbit	r3, r3
 8005012:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005016:	2302      	movs	r3, #2
 8005018:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800501c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005020:	fa93 f3a3 	rbit	r3, r3
 8005024:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005028:	4bc8      	ldr	r3, [pc, #800]	; (800534c <HAL_RCC_OscConfig+0x934>)
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	2202      	movs	r2, #2
 800502e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005032:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005036:	fa92 f2a2 	rbit	r2, r2
 800503a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800503e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005042:	fab2 f282 	clz	r2, r2
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	f042 0220 	orr.w	r2, r2, #32
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	f002 021f 	and.w	r2, r2, #31
 8005052:	2101      	movs	r1, #1
 8005054:	fa01 f202 	lsl.w	r2, r1, r2
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1ad      	bne.n	8004fba <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005062:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8110 	beq.w	8005294 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d079      	beq.n	8005178 <HAL_RCC_OscConfig+0x760>
 8005084:	2301      	movs	r3, #1
 8005086:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	fab3 f383 	clz	r3, r3
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	4bab      	ldr	r3, [pc, #684]	; (8005350 <HAL_RCC_OscConfig+0x938>)
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	461a      	mov	r2, r3
 80050aa:	2301      	movs	r3, #1
 80050ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ae:	f7fd fac9 	bl	8002644 <HAL_GetTick>
 80050b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b8:	f7fd fac4 	bl	8002644 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d902      	bls.n	80050ce <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	f000 bcdb 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>
 80050ce:	2302      	movs	r3, #2
 80050d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050e8:	2202      	movs	r2, #2
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	fa93 f2a3 	rbit	r2, r3
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510c:	2202      	movs	r2, #2
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	fa93 f2a3 	rbit	r2, r3
 800511e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005122:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005126:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005128:	4b88      	ldr	r3, [pc, #544]	; (800534c <HAL_RCC_OscConfig+0x934>)
 800512a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800512c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005130:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005134:	2102      	movs	r1, #2
 8005136:	6019      	str	r1, [r3, #0]
 8005138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	fa93 f1a3 	rbit	r1, r3
 8005146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800514e:	6019      	str	r1, [r3, #0]
  return result;
 8005150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005154:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	fab3 f383 	clz	r3, r3
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005164:	b2db      	uxtb	r3, r3
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2101      	movs	r1, #1
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0a0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x6a0>
 8005176:	e08d      	b.n	8005294 <HAL_RCC_OscConfig+0x87c>
 8005178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800517c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005188:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	fa93 f2a3 	rbit	r2, r3
 8005192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005196:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800519a:	601a      	str	r2, [r3, #0]
  return result;
 800519c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051a4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	4b68      	ldr	r3, [pc, #416]	; (8005350 <HAL_RCC_OscConfig+0x938>)
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	461a      	mov	r2, r3
 80051b6:	2300      	movs	r3, #0
 80051b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7fd fa43 	bl	8002644 <HAL_GetTick>
 80051be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c4:	f7fd fa3e 	bl	8002644 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d902      	bls.n	80051da <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	f000 bc55 	b.w	8005a84 <HAL_RCC_OscConfig+0x106c>
 80051da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051e2:	2202      	movs	r2, #2
 80051e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	fa93 f2a3 	rbit	r2, r3
 80051f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005202:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005206:	2202      	movs	r2, #2
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	fa93 f2a3 	rbit	r2, r3
 8005218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800522a:	2202      	movs	r2, #2
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fa93 f2a3 	rbit	r2, r3
 800523c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005240:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005244:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005246:	4b41      	ldr	r3, [pc, #260]	; (800534c <HAL_RCC_OscConfig+0x934>)
 8005248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800524a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005252:	2102      	movs	r1, #2
 8005254:	6019      	str	r1, [r3, #0]
 8005256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800525a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	fa93 f1a3 	rbit	r1, r3
 8005264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005268:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800526c:	6019      	str	r1, [r3, #0]
  return result;
 800526e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005272:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	fab3 f383 	clz	r3, r3
 800527c:	b2db      	uxtb	r3, r3
 800527e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 031f 	and.w	r3, r3, #31
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f303 	lsl.w	r3, r1, r3
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d197      	bne.n	80051c4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 81a1 	beq.w	80055ec <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052b0:	4b26      	ldr	r3, [pc, #152]	; (800534c <HAL_RCC_OscConfig+0x934>)
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d116      	bne.n	80052ea <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052bc:	4b23      	ldr	r3, [pc, #140]	; (800534c <HAL_RCC_OscConfig+0x934>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	4a22      	ldr	r2, [pc, #136]	; (800534c <HAL_RCC_OscConfig+0x934>)
 80052c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c6:	61d3      	str	r3, [r2, #28]
 80052c8:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCC_OscConfig+0x934>)
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80052d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052d4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052de:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80052e2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	4b1a      	ldr	r3, [pc, #104]	; (8005354 <HAL_RCC_OscConfig+0x93c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11a      	bne.n	800532c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052f6:	4b17      	ldr	r3, [pc, #92]	; (8005354 <HAL_RCC_OscConfig+0x93c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a16      	ldr	r2, [pc, #88]	; (8005354 <HAL_RCC_OscConfig+0x93c>)
 80052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005300:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005302:	f7fd f99f 	bl	8002644 <HAL_GetTick>
 8005306:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530a:	e009      	b.n	8005320 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530c:	f7fd f99a 	bl	8002644 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b64      	cmp	r3, #100	; 0x64
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e3b1      	b.n	8005a84 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <HAL_RCC_OscConfig+0x93c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0ef      	beq.n	800530c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800532c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005330:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10d      	bne.n	8005358 <HAL_RCC_OscConfig+0x940>
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <HAL_RCC_OscConfig+0x934>)
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4a02      	ldr	r2, [pc, #8]	; (800534c <HAL_RCC_OscConfig+0x934>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6213      	str	r3, [r2, #32]
 8005348:	e03c      	b.n	80053c4 <HAL_RCC_OscConfig+0x9ac>
 800534a:	bf00      	nop
 800534c:	40021000 	.word	0x40021000
 8005350:	10908120 	.word	0x10908120
 8005354:	40007000 	.word	0x40007000
 8005358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10c      	bne.n	8005382 <HAL_RCC_OscConfig+0x96a>
 8005368:	4bc1      	ldr	r3, [pc, #772]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	4ac0      	ldr	r2, [pc, #768]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 800536e:	f023 0301 	bic.w	r3, r3, #1
 8005372:	6213      	str	r3, [r2, #32]
 8005374:	4bbe      	ldr	r3, [pc, #760]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	4abd      	ldr	r2, [pc, #756]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 800537a:	f023 0304 	bic.w	r3, r3, #4
 800537e:	6213      	str	r3, [r2, #32]
 8005380:	e020      	b.n	80053c4 <HAL_RCC_OscConfig+0x9ac>
 8005382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b05      	cmp	r3, #5
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x994>
 8005392:	4bb7      	ldr	r3, [pc, #732]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	4ab6      	ldr	r2, [pc, #728]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	6213      	str	r3, [r2, #32]
 800539e:	4bb4      	ldr	r3, [pc, #720]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	4ab3      	ldr	r2, [pc, #716]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	6213      	str	r3, [r2, #32]
 80053aa:	e00b      	b.n	80053c4 <HAL_RCC_OscConfig+0x9ac>
 80053ac:	4bb0      	ldr	r3, [pc, #704]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	4aaf      	ldr	r2, [pc, #700]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 80053b2:	f023 0301 	bic.w	r3, r3, #1
 80053b6:	6213      	str	r3, [r2, #32]
 80053b8:	4bad      	ldr	r3, [pc, #692]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4aac      	ldr	r2, [pc, #688]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 80053be:	f023 0304 	bic.w	r3, r3, #4
 80053c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8081 	beq.w	80054d8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d6:	f7fd f935 	bl	8002644 <HAL_GetTick>
 80053da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053de:	e00b      	b.n	80053f8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e0:	f7fd f930 	bl	8002644 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e345      	b.n	8005a84 <HAL_RCC_OscConfig+0x106c>
 80053f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053fc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005400:	2202      	movs	r2, #2
 8005402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005408:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	fa93 f2a3 	rbit	r2, r3
 8005412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005416:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005420:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005424:	2202      	movs	r2, #2
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800542c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	fa93 f2a3 	rbit	r2, r3
 8005436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800543e:	601a      	str	r2, [r3, #0]
  return result;
 8005440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005444:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005448:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800544a:	fab3 f383 	clz	r3, r3
 800544e:	b2db      	uxtb	r3, r3
 8005450:	095b      	lsrs	r3, r3, #5
 8005452:	b2db      	uxtb	r3, r3
 8005454:	f043 0302 	orr.w	r3, r3, #2
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d102      	bne.n	8005464 <HAL_RCC_OscConfig+0xa4c>
 800545e:	4b84      	ldr	r3, [pc, #528]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	e013      	b.n	800548c <HAL_RCC_OscConfig+0xa74>
 8005464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005468:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800546c:	2202      	movs	r2, #2
 800546e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005474:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	fa93 f2a3 	rbit	r2, r3
 800547e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005482:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	4b79      	ldr	r3, [pc, #484]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005490:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005494:	2102      	movs	r1, #2
 8005496:	6011      	str	r1, [r2, #0]
 8005498:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800549c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	fa92 f1a2 	rbit	r1, r2
 80054a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80054ae:	6011      	str	r1, [r2, #0]
  return result;
 80054b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054b4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	fab2 f282 	clz	r2, r2
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c4:	b2d2      	uxtb	r2, r2
 80054c6:	f002 021f 	and.w	r2, r2, #31
 80054ca:	2101      	movs	r1, #1
 80054cc:	fa01 f202 	lsl.w	r2, r1, r2
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d084      	beq.n	80053e0 <HAL_RCC_OscConfig+0x9c8>
 80054d6:	e07f      	b.n	80055d8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d8:	f7fd f8b4 	bl	8002644 <HAL_GetTick>
 80054dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e0:	e00b      	b.n	80054fa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e2:	f7fd f8af 	bl	8002644 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e2c4      	b.n	8005a84 <HAL_RCC_OscConfig+0x106c>
 80054fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005502:	2202      	movs	r2, #2
 8005504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	fa93 f2a3 	rbit	r2, r3
 8005514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005518:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005522:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005526:	2202      	movs	r2, #2
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	fa93 f2a3 	rbit	r2, r3
 8005538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005540:	601a      	str	r2, [r3, #0]
  return result;
 8005542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005546:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800554a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554c:	fab3 f383 	clz	r3, r3
 8005550:	b2db      	uxtb	r3, r3
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f043 0302 	orr.w	r3, r3, #2
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d102      	bne.n	8005566 <HAL_RCC_OscConfig+0xb4e>
 8005560:	4b43      	ldr	r3, [pc, #268]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	e013      	b.n	800558e <HAL_RCC_OscConfig+0xb76>
 8005566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800556a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800556e:	2202      	movs	r2, #2
 8005570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005576:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	fa93 f2a3 	rbit	r2, r3
 8005580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005584:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	4b39      	ldr	r3, [pc, #228]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005592:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005596:	2102      	movs	r1, #2
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800559e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	fa92 f1a2 	rbit	r1, r2
 80055a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80055b0:	6011      	str	r1, [r2, #0]
  return result;
 80055b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	fab2 f282 	clz	r2, r2
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	f002 021f 	and.w	r2, r2, #31
 80055cc:	2101      	movs	r1, #1
 80055ce:	fa01 f202 	lsl.w	r2, r1, r2
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d184      	bne.n	80054e2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055d8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d105      	bne.n	80055ec <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e0:	4b23      	ldr	r3, [pc, #140]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	4a22      	ldr	r2, [pc, #136]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 80055e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ea:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8242 	beq.w	8005a82 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055fe:	4b1c      	ldr	r3, [pc, #112]	; (8005670 <HAL_RCC_OscConfig+0xc58>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f003 030c 	and.w	r3, r3, #12
 8005606:	2b08      	cmp	r3, #8
 8005608:	f000 8213 	beq.w	8005a32 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	2b02      	cmp	r3, #2
 800561a:	f040 8162 	bne.w	80058e2 <HAL_RCC_OscConfig+0xeca>
 800561e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005622:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005626:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800562a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005630:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	fa93 f2a3 	rbit	r2, r3
 800563a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005642:	601a      	str	r2, [r3, #0]
  return result;
 8005644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005648:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800564c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	fab3 f383 	clz	r3, r3
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005658:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005664:	f7fc ffee 	bl	8002644 <HAL_GetTick>
 8005668:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800566c:	e00c      	b.n	8005688 <HAL_RCC_OscConfig+0xc70>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005674:	f7fc ffe6 	bl	8002644 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e1fd      	b.n	8005a84 <HAL_RCC_OscConfig+0x106c>
 8005688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005690:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005694:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800569a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	fa93 f2a3 	rbit	r2, r3
 80056a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80056ac:	601a      	str	r2, [r3, #0]
  return result;
 80056ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80056b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056b8:	fab3 f383 	clz	r3, r3
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d102      	bne.n	80056d2 <HAL_RCC_OscConfig+0xcba>
 80056cc:	4bb0      	ldr	r3, [pc, #704]	; (8005990 <HAL_RCC_OscConfig+0xf78>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	e027      	b.n	8005722 <HAL_RCC_OscConfig+0xd0a>
 80056d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80056da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	fa93 f2a3 	rbit	r2, r3
 80056ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056fc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800570a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	fa93 f2a3 	rbit	r2, r3
 8005714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005718:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	4b9c      	ldr	r3, [pc, #624]	; (8005990 <HAL_RCC_OscConfig+0xf78>)
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005726:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800572a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800572e:	6011      	str	r1, [r2, #0]
 8005730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005734:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	fa92 f1a2 	rbit	r1, r2
 800573e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005742:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005746:	6011      	str	r1, [r2, #0]
  return result;
 8005748:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800574c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	fab2 f282 	clz	r2, r2
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	f042 0220 	orr.w	r2, r2, #32
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	f002 021f 	and.w	r2, r2, #31
 8005762:	2101      	movs	r1, #1
 8005764:	fa01 f202 	lsl.w	r2, r1, r2
 8005768:	4013      	ands	r3, r2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d182      	bne.n	8005674 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800576e:	4b88      	ldr	r3, [pc, #544]	; (8005990 <HAL_RCC_OscConfig+0xf78>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800577a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	430b      	orrs	r3, r1
 8005790:	497f      	ldr	r1, [pc, #508]	; (8005990 <HAL_RCC_OscConfig+0xf78>)
 8005792:	4313      	orrs	r3, r2
 8005794:	604b      	str	r3, [r1, #4]
 8005796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800579e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	fa93 f2a3 	rbit	r2, r3
 80057b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057b6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80057ba:	601a      	str	r2, [r3, #0]
  return result;
 80057bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80057c4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c6:	fab3 f383 	clz	r3, r3
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	461a      	mov	r2, r3
 80057d8:	2301      	movs	r3, #1
 80057da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057dc:	f7fc ff32 	bl	8002644 <HAL_GetTick>
 80057e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057e4:	e009      	b.n	80057fa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e6:	f7fc ff2d 	bl	8002644 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e144      	b.n	8005a84 <HAL_RCC_OscConfig+0x106c>
 80057fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800580c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	fa93 f2a3 	rbit	r2, r3
 8005816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800581e:	601a      	str	r2, [r3, #0]
  return result;
 8005820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005824:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005828:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800582a:	fab3 f383 	clz	r3, r3
 800582e:	b2db      	uxtb	r3, r3
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b01      	cmp	r3, #1
 800583c:	d102      	bne.n	8005844 <HAL_RCC_OscConfig+0xe2c>
 800583e:	4b54      	ldr	r3, [pc, #336]	; (8005990 <HAL_RCC_OscConfig+0xf78>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	e027      	b.n	8005894 <HAL_RCC_OscConfig+0xe7c>
 8005844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005848:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800584c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005850:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005856:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	fa93 f2a3 	rbit	r2, r3
 8005860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005864:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800586e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005872:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800587c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	fa93 f2a3 	rbit	r2, r3
 8005886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	4b3f      	ldr	r3, [pc, #252]	; (8005990 <HAL_RCC_OscConfig+0xf78>)
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005898:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800589c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058a0:	6011      	str	r1, [r2, #0]
 80058a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058a6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80058aa:	6812      	ldr	r2, [r2, #0]
 80058ac:	fa92 f1a2 	rbit	r1, r2
 80058b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80058b8:	6011      	str	r1, [r2, #0]
  return result;
 80058ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058be:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	fab2 f282 	clz	r2, r2
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	f042 0220 	orr.w	r2, r2, #32
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	f002 021f 	and.w	r2, r2, #31
 80058d4:	2101      	movs	r1, #1
 80058d6:	fa01 f202 	lsl.w	r2, r1, r2
 80058da:	4013      	ands	r3, r2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d082      	beq.n	80057e6 <HAL_RCC_OscConfig+0xdce>
 80058e0:	e0cf      	b.n	8005a82 <HAL_RCC_OscConfig+0x106a>
 80058e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80058ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	fa93 f2a3 	rbit	r2, r3
 80058fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005902:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005906:	601a      	str	r2, [r3, #0]
  return result;
 8005908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800590c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005910:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005912:	fab3 f383 	clz	r3, r3
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800591c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	461a      	mov	r2, r3
 8005924:	2300      	movs	r3, #0
 8005926:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005928:	f7fc fe8c 	bl	8002644 <HAL_GetTick>
 800592c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005930:	e009      	b.n	8005946 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005932:	f7fc fe87 	bl	8002644 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e09e      	b.n	8005a84 <HAL_RCC_OscConfig+0x106c>
 8005946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800594a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800594e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005958:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	fa93 f2a3 	rbit	r2, r3
 8005962:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005966:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800596a:	601a      	str	r2, [r3, #0]
  return result;
 800596c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005970:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005974:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005976:	fab3 f383 	clz	r3, r3
 800597a:	b2db      	uxtb	r3, r3
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	b2db      	uxtb	r3, r3
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d104      	bne.n	8005994 <HAL_RCC_OscConfig+0xf7c>
 800598a:	4b01      	ldr	r3, [pc, #4]	; (8005990 <HAL_RCC_OscConfig+0xf78>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	e029      	b.n	80059e4 <HAL_RCC_OscConfig+0xfcc>
 8005990:	40021000 	.word	0x40021000
 8005994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005998:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800599c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	fa93 f2a3 	rbit	r2, r3
 80059b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059be:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80059c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059cc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	fa93 f2a3 	rbit	r2, r3
 80059d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059da:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <HAL_RCC_OscConfig+0x1078>)
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059e8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80059ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059f0:	6011      	str	r1, [r2, #0]
 80059f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059f6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	fa92 f1a2 	rbit	r1, r2
 8005a00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a04:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005a08:	6011      	str	r1, [r2, #0]
  return result;
 8005a0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005a12:	6812      	ldr	r2, [r2, #0]
 8005a14:	fab2 f282 	clz	r2, r2
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	f042 0220 	orr.w	r2, r2, #32
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	f002 021f 	and.w	r2, r2, #31
 8005a24:	2101      	movs	r1, #1
 8005a26:	fa01 f202 	lsl.w	r2, r1, r2
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d180      	bne.n	8005932 <HAL_RCC_OscConfig+0xf1a>
 8005a30:	e027      	b.n	8005a82 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e01e      	b.n	8005a84 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a46:	4b12      	ldr	r3, [pc, #72]	; (8005a90 <HAL_RCC_OscConfig+0x1078>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a52:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d10b      	bne.n	8005a7e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005a66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40021000 	.word	0x40021000

08005a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b09e      	sub	sp, #120	; 0x78
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e162      	b.n	8005d72 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aac:	4b90      	ldr	r3, [pc, #576]	; (8005cf0 <HAL_RCC_ClockConfig+0x25c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d910      	bls.n	8005adc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b8d      	ldr	r3, [pc, #564]	; (8005cf0 <HAL_RCC_ClockConfig+0x25c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 0207 	bic.w	r2, r3, #7
 8005ac2:	498b      	ldr	r1, [pc, #556]	; (8005cf0 <HAL_RCC_ClockConfig+0x25c>)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b89      	ldr	r3, [pc, #548]	; (8005cf0 <HAL_RCC_ClockConfig+0x25c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e14a      	b.n	8005d72 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae8:	4b82      	ldr	r3, [pc, #520]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	497f      	ldr	r1, [pc, #508]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 80dc 	beq.w	8005cc0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d13c      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xf6>
 8005b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b14:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b18:	fa93 f3a3 	rbit	r3, r3
 8005b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b20:	fab3 f383 	clz	r3, r3
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d102      	bne.n	8005b3a <HAL_RCC_ClockConfig+0xa6>
 8005b34:	4b6f      	ldr	r3, [pc, #444]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	e00f      	b.n	8005b5a <HAL_RCC_ClockConfig+0xc6>
 8005b3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b42:	fa93 f3a3 	rbit	r3, r3
 8005b46:	667b      	str	r3, [r7, #100]	; 0x64
 8005b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b50:	fa93 f3a3 	rbit	r3, r3
 8005b54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b56:	4b67      	ldr	r3, [pc, #412]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b62:	fa92 f2a2 	rbit	r2, r2
 8005b66:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b6a:	fab2 f282 	clz	r2, r2
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	f042 0220 	orr.w	r2, r2, #32
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	f002 021f 	and.w	r2, r2, #31
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b80:	4013      	ands	r3, r2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d17b      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e0f3      	b.n	8005d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d13c      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x178>
 8005b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9a:	fa93 f3a3 	rbit	r3, r3
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba2:	fab3 f383 	clz	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d102      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x128>
 8005bb6:	4b4f      	ldr	r3, [pc, #316]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	e00f      	b.n	8005bdc <HAL_RCC_ClockConfig+0x148>
 8005bbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bc0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc4:	fa93 f3a3 	rbit	r3, r3
 8005bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bce:	643b      	str	r3, [r7, #64]	; 0x40
 8005bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd2:	fa93 f3a3 	rbit	r3, r3
 8005bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd8:	4b46      	ldr	r3, [pc, #280]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005be0:	63ba      	str	r2, [r7, #56]	; 0x38
 8005be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be4:	fa92 f2a2 	rbit	r2, r2
 8005be8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bec:	fab2 f282 	clz	r2, r2
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	f042 0220 	orr.w	r2, r2, #32
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	f002 021f 	and.w	r2, r2, #31
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d13a      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e0b2      	b.n	8005d72 <HAL_RCC_ClockConfig+0x2de>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	fa93 f3a3 	rbit	r3, r3
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1a:	fab3 f383 	clz	r3, r3
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d102      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x1a0>
 8005c2e:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	e00d      	b.n	8005c50 <HAL_RCC_ClockConfig+0x1bc>
 8005c34:	2302      	movs	r3, #2
 8005c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3a:	fa93 f3a3 	rbit	r3, r3
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c40:	2302      	movs	r3, #2
 8005c42:	623b      	str	r3, [r7, #32]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	fa93 f3a3 	rbit	r3, r3
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	2202      	movs	r2, #2
 8005c52:	61ba      	str	r2, [r7, #24]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	fa92 f2a2 	rbit	r2, r2
 8005c5a:	617a      	str	r2, [r7, #20]
  return result;
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	fab2 f282 	clz	r2, r2
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	f042 0220 	orr.w	r2, r2, #32
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	f002 021f 	and.w	r2, r2, #31
 8005c6e:	2101      	movs	r1, #1
 8005c70:	fa01 f202 	lsl.w	r2, r1, r2
 8005c74:	4013      	ands	r3, r2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e079      	b.n	8005d72 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f023 0203 	bic.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	491a      	ldr	r1, [pc, #104]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c90:	f7fc fcd8 	bl	8002644 <HAL_GetTick>
 8005c94:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c98:	f7fc fcd4 	bl	8002644 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e061      	b.n	8005d72 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	4b11      	ldr	r3, [pc, #68]	; (8005cf4 <HAL_RCC_ClockConfig+0x260>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 020c 	and.w	r2, r3, #12
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d1eb      	bne.n	8005c98 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <HAL_RCC_ClockConfig+0x25c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d214      	bcs.n	8005cf8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cce:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <HAL_RCC_ClockConfig+0x25c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f023 0207 	bic.w	r2, r3, #7
 8005cd6:	4906      	ldr	r1, [pc, #24]	; (8005cf0 <HAL_RCC_ClockConfig+0x25c>)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cde:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <HAL_RCC_ClockConfig+0x25c>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d005      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e040      	b.n	8005d72 <HAL_RCC_ClockConfig+0x2de>
 8005cf0:	40022000 	.word	0x40022000
 8005cf4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d04:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <HAL_RCC_ClockConfig+0x2e8>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	491a      	ldr	r1, [pc, #104]	; (8005d7c <HAL_RCC_ClockConfig+0x2e8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_RCC_ClockConfig+0x2e8>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	4912      	ldr	r1, [pc, #72]	; (8005d7c <HAL_RCC_ClockConfig+0x2e8>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d36:	f000 f829 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <HAL_RCC_ClockConfig+0x2e8>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d44:	22f0      	movs	r2, #240	; 0xf0
 8005d46:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	fa92 f2a2 	rbit	r2, r2
 8005d4e:	60fa      	str	r2, [r7, #12]
  return result;
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	fab2 f282 	clz	r2, r2
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	40d3      	lsrs	r3, r2
 8005d5a:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <HAL_RCC_ClockConfig+0x2ec>)
 8005d5c:	5cd3      	ldrb	r3, [r2, r3]
 8005d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d62:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <HAL_RCC_ClockConfig+0x2f0>)
 8005d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005d66:	4b08      	ldr	r3, [pc, #32]	; (8005d88 <HAL_RCC_ClockConfig+0x2f4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7fc fc26 	bl	80025bc <HAL_InitTick>
  
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3778      	adds	r7, #120	; 0x78
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	080087c0 	.word	0x080087c0
 8005d84:	20000000 	.word	0x20000000
 8005d88:	20000004 	.word	0x20000004

08005d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b08b      	sub	sp, #44	; 0x2c
 8005d90:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005da6:	4b29      	ldr	r3, [pc, #164]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f003 030c 	and.w	r3, r3, #12
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d002      	beq.n	8005dbc <HAL_RCC_GetSysClockFreq+0x30>
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d003      	beq.n	8005dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8005dba:	e03c      	b.n	8005e36 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dbc:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dbe:	623b      	str	r3, [r7, #32]
      break;
 8005dc0:	e03c      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005dc8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005dcc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	fa92 f2a2 	rbit	r2, r2
 8005dd4:	607a      	str	r2, [r7, #4]
  return result;
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	fab2 f282 	clz	r2, r2
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	40d3      	lsrs	r3, r2
 8005de0:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005de2:	5cd3      	ldrb	r3, [r2, r3]
 8005de4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005de6:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	220f      	movs	r2, #15
 8005df0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	fa92 f2a2 	rbit	r2, r2
 8005df8:	60fa      	str	r2, [r7, #12]
  return result;
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	fab2 f282 	clz	r2, r2
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	40d3      	lsrs	r3, r2
 8005e04:	4a14      	ldr	r2, [pc, #80]	; (8005e58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e14:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	627b      	str	r3, [r7, #36]	; 0x24
 8005e24:	e004      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4a0c      	ldr	r2, [pc, #48]	; (8005e5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	623b      	str	r3, [r7, #32]
      break;
 8005e34:	e002      	b.n	8005e3c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e36:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e38:	623b      	str	r3, [r7, #32]
      break;
 8005e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	372c      	adds	r7, #44	; 0x2c
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40021000 	.word	0x40021000
 8005e50:	007a1200 	.word	0x007a1200
 8005e54:	080087d8 	.word	0x080087d8
 8005e58:	080087e8 	.word	0x080087e8
 8005e5c:	003d0900 	.word	0x003d0900

08005e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e66:	681b      	ldr	r3, [r3, #0]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	20000000 	.word	0x20000000

08005e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005e7e:	f7ff ffef 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005e82:	4601      	mov	r1, r0
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e8c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	fa92 f2a2 	rbit	r2, r2
 8005e98:	603a      	str	r2, [r7, #0]
  return result;
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	fab2 f282 	clz	r2, r2
 8005ea0:	b2d2      	uxtb	r2, r2
 8005ea2:	40d3      	lsrs	r3, r2
 8005ea4:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005ea6:	5cd3      	ldrb	r3, [r2, r3]
 8005ea8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	080087d0 	.word	0x080087d0

08005ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005ec2:	f7ff ffcd 	bl	8005e60 <HAL_RCC_GetHCLKFreq>
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005ed0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005ed4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	fa92 f2a2 	rbit	r2, r2
 8005edc:	603a      	str	r2, [r7, #0]
  return result;
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	fab2 f282 	clz	r2, r2
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	40d3      	lsrs	r3, r2
 8005ee8:	4a04      	ldr	r2, [pc, #16]	; (8005efc <HAL_RCC_GetPCLK2Freq+0x40>)
 8005eea:	5cd3      	ldrb	r3, [r2, r3]
 8005eec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	080087d0 	.word	0x080087d0

08005f00 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b092      	sub	sp, #72	; 0x48
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80cd 	beq.w	80060be <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f24:	4b86      	ldr	r3, [pc, #536]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10e      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f30:	4b83      	ldr	r3, [pc, #524]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	4a82      	ldr	r2, [pc, #520]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f3a:	61d3      	str	r3, [r2, #28]
 8005f3c:	4b80      	ldr	r3, [pc, #512]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f44:	60bb      	str	r3, [r7, #8]
 8005f46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4e:	4b7d      	ldr	r3, [pc, #500]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d118      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5a:	4b7a      	ldr	r3, [pc, #488]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a79      	ldr	r2, [pc, #484]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f66:	f7fc fb6d 	bl	8002644 <HAL_GetTick>
 8005f6a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6c:	e008      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6e:	f7fc fb69 	bl	8002644 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	2b64      	cmp	r3, #100	; 0x64
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e0db      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f80:	4b70      	ldr	r3, [pc, #448]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0f0      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f8c:	4b6c      	ldr	r3, [pc, #432]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f94:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d07d      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d076      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005faa:	4b65      	ldr	r3, [pc, #404]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	fa93 f3a3 	rbit	r3, r3
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fc4:	fab3 f383 	clz	r3, r3
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4b5e      	ldr	r3, [pc, #376]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	fa93 f3a3 	rbit	r3, r3
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fe8:	fab3 f383 	clz	r3, r3
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	461a      	mov	r2, r3
 8005ff0:	4b55      	ldr	r3, [pc, #340]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ff2:	4413      	add	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ffc:	4a50      	ldr	r2, [pc, #320]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006000:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d045      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600c:	f7fc fb1a 	bl	8002644 <HAL_GetTick>
 8006010:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006012:	e00a      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006014:	f7fc fb16 	bl	8002644 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e086      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800602a:	2302      	movs	r3, #2
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006030:	fa93 f3a3 	rbit	r3, r3
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
 8006036:	2302      	movs	r3, #2
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	fa93 f3a3 	rbit	r3, r3
 8006040:	61fb      	str	r3, [r7, #28]
  return result;
 8006042:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006044:	fab3 f383 	clz	r3, r3
 8006048:	b2db      	uxtb	r3, r3
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f043 0302 	orr.w	r3, r3, #2
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d102      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006058:	4b39      	ldr	r3, [pc, #228]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	e007      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800605e:	2302      	movs	r3, #2
 8006060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	fa93 f3a3 	rbit	r3, r3
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	4b35      	ldr	r3, [pc, #212]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	2202      	movs	r2, #2
 8006070:	613a      	str	r2, [r7, #16]
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	fa92 f2a2 	rbit	r2, r2
 8006078:	60fa      	str	r2, [r7, #12]
  return result;
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	fab2 f282 	clz	r2, r2
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	f002 021f 	and.w	r2, r2, #31
 800608c:	2101      	movs	r1, #1
 800608e:	fa01 f202 	lsl.w	r2, r1, r2
 8006092:	4013      	ands	r3, r2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0bd      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006098:	4b29      	ldr	r3, [pc, #164]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4926      	ldr	r1, [pc, #152]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d105      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b2:	4b23      	ldr	r3, [pc, #140]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060bc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ce:	f023 0203 	bic.w	r2, r3, #3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	491a      	ldr	r1, [pc, #104]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	f023 0210 	bic.w	r2, r3, #16
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4912      	ldr	r1, [pc, #72]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006106:	4b0e      	ldr	r3, [pc, #56]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	490b      	ldr	r1, [pc, #44]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006114:	4313      	orrs	r3, r2
 8006116:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	4903      	ldr	r1, [pc, #12]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006132:	4313      	orrs	r3, r2
 8006134:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3748      	adds	r7, #72	; 0x48
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40021000 	.word	0x40021000
 8006144:	40007000 	.word	0x40007000
 8006148:	10908100 	.word	0x10908100

0800614c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e049      	b.n	80061f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fc f83e 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3304      	adds	r3, #4
 8006188:	4619      	mov	r1, r3
 800618a:	4610      	mov	r0, r2
 800618c:	f000 fc32 	bl	80069f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b01      	cmp	r3, #1
 800620e:	d001      	beq.n	8006214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e040      	b.n	8006296 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_TIM_Base_Start_IT+0xa8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00e      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x58>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623e:	d009      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x58>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <HAL_TIM_Base_Start_IT+0xac>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x58>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <HAL_TIM_Base_Start_IT+0xb0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d115      	bne.n	8006280 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <HAL_TIM_Base_Start_IT+0xb4>)
 800625c:	4013      	ands	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b06      	cmp	r3, #6
 8006264:	d015      	beq.n	8006292 <HAL_TIM_Base_Start_IT+0x96>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626c:	d011      	beq.n	8006292 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0201 	orr.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800627e:	e008      	b.n	8006292 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	e000      	b.n	8006294 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006292:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40014000 	.word	0x40014000
 80062b0:	00010007 	.word	0x00010007

080062b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e049      	b.n	800635a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fb fe5a 	bl	8001f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 fb7e 	bl	80069f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <HAL_TIM_PWM_Start+0x24>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e03c      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b04      	cmp	r3, #4
 800638c:	d109      	bne.n	80063a2 <HAL_TIM_PWM_Start+0x3e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	bf14      	ite	ne
 800639a:	2301      	movne	r3, #1
 800639c:	2300      	moveq	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	e02f      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d109      	bne.n	80063bc <HAL_TIM_PWM_Start+0x58>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	bf14      	ite	ne
 80063b4:	2301      	movne	r3, #1
 80063b6:	2300      	moveq	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e022      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b0c      	cmp	r3, #12
 80063c0:	d109      	bne.n	80063d6 <HAL_TIM_PWM_Start+0x72>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	e015      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d109      	bne.n	80063f0 <HAL_TIM_PWM_Start+0x8c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	bf14      	ite	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	2300      	moveq	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e008      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e088      	b.n	800651c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <HAL_TIM_PWM_Start+0xb6>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006418:	e023      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d104      	bne.n	800642a <HAL_TIM_PWM_Start+0xc6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006428:	e01b      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b08      	cmp	r3, #8
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0xd6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006438:	e013      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0xe6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006448:	e00b      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b10      	cmp	r3, #16
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Start+0xf6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006458:	e003      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2201      	movs	r2, #1
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fde0 	bl	8007030 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a2b      	ldr	r2, [pc, #172]	; (8006524 <HAL_TIM_PWM_Start+0x1c0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <HAL_TIM_PWM_Start+0x134>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2a      	ldr	r2, [pc, #168]	; (8006528 <HAL_TIM_PWM_Start+0x1c4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d009      	beq.n	8006498 <HAL_TIM_PWM_Start+0x134>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a28      	ldr	r2, [pc, #160]	; (800652c <HAL_TIM_PWM_Start+0x1c8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_TIM_PWM_Start+0x134>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a27      	ldr	r2, [pc, #156]	; (8006530 <HAL_TIM_PWM_Start+0x1cc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d101      	bne.n	800649c <HAL_TIM_PWM_Start+0x138>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <HAL_TIM_PWM_Start+0x13a>
 800649c:	2300      	movs	r3, #0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a1b      	ldr	r2, [pc, #108]	; (8006524 <HAL_TIM_PWM_Start+0x1c0>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d00e      	beq.n	80064da <HAL_TIM_PWM_Start+0x176>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d009      	beq.n	80064da <HAL_TIM_PWM_Start+0x176>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1a      	ldr	r2, [pc, #104]	; (8006534 <HAL_TIM_PWM_Start+0x1d0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d004      	beq.n	80064da <HAL_TIM_PWM_Start+0x176>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a14      	ldr	r2, [pc, #80]	; (8006528 <HAL_TIM_PWM_Start+0x1c4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d115      	bne.n	8006506 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	4b15      	ldr	r3, [pc, #84]	; (8006538 <HAL_TIM_PWM_Start+0x1d4>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b06      	cmp	r3, #6
 80064ea:	d015      	beq.n	8006518 <HAL_TIM_PWM_Start+0x1b4>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f2:	d011      	beq.n	8006518 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006504:	e008      	b.n	8006518 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0201 	orr.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	e000      	b.n	800651a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006518:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	40012c00 	.word	0x40012c00
 8006528:	40014000 	.word	0x40014000
 800652c:	40014400 	.word	0x40014400
 8006530:	40014800 	.word	0x40014800
 8006534:	40000400 	.word	0x40000400
 8006538:	00010007 	.word	0x00010007

0800653c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b02      	cmp	r3, #2
 8006550:	d122      	bne.n	8006598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b02      	cmp	r3, #2
 800655e:	d11b      	bne.n	8006598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0202 	mvn.w	r2, #2
 8006568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa1a 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa0c 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa1d 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d122      	bne.n	80065ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0304 	and.w	r3, r3, #4
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d11b      	bne.n	80065ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0204 	mvn.w	r2, #4
 80065bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f9f0 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f9e2 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f9f3 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d122      	bne.n	8006640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b08      	cmp	r3, #8
 8006606:	d11b      	bne.n	8006640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0208 	mvn.w	r2, #8
 8006610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2204      	movs	r2, #4
 8006616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9c6 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 800662c:	e005      	b.n	800663a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9b8 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f9c9 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b10      	cmp	r3, #16
 800664c:	d122      	bne.n	8006694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b10      	cmp	r3, #16
 800665a:	d11b      	bne.n	8006694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0210 	mvn.w	r2, #16
 8006664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2208      	movs	r2, #8
 800666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f99c 	bl	80069b8 <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f98e 	bl	80069a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f99f 	bl	80069cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d10e      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d107      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0201 	mvn.w	r2, #1
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb fb3e 	bl	8001d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	d10e      	bne.n	80066ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b80      	cmp	r3, #128	; 0x80
 80066da:	d107      	bne.n	80066ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fdb8 	bl	800725c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066fa:	d10e      	bne.n	800671a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	d107      	bne.n	800671a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 fdab 	bl	8007270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b40      	cmp	r3, #64	; 0x40
 8006726:	d10e      	bne.n	8006746 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006732:	2b40      	cmp	r3, #64	; 0x40
 8006734:	d107      	bne.n	8006746 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800673e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f94d 	bl	80069e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b20      	cmp	r3, #32
 8006752:	d10e      	bne.n	8006772 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b20      	cmp	r3, #32
 8006760:	d107      	bne.n	8006772 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f06f 0220 	mvn.w	r2, #32
 800676a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fd6b 	bl	8007248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006796:	2302      	movs	r3, #2
 8006798:	e0ff      	b.n	800699a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b14      	cmp	r3, #20
 80067a6:	f200 80f0 	bhi.w	800698a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	08006805 	.word	0x08006805
 80067b4:	0800698b 	.word	0x0800698b
 80067b8:	0800698b 	.word	0x0800698b
 80067bc:	0800698b 	.word	0x0800698b
 80067c0:	08006845 	.word	0x08006845
 80067c4:	0800698b 	.word	0x0800698b
 80067c8:	0800698b 	.word	0x0800698b
 80067cc:	0800698b 	.word	0x0800698b
 80067d0:	08006887 	.word	0x08006887
 80067d4:	0800698b 	.word	0x0800698b
 80067d8:	0800698b 	.word	0x0800698b
 80067dc:	0800698b 	.word	0x0800698b
 80067e0:	080068c7 	.word	0x080068c7
 80067e4:	0800698b 	.word	0x0800698b
 80067e8:	0800698b 	.word	0x0800698b
 80067ec:	0800698b 	.word	0x0800698b
 80067f0:	08006909 	.word	0x08006909
 80067f4:	0800698b 	.word	0x0800698b
 80067f8:	0800698b 	.word	0x0800698b
 80067fc:	0800698b 	.word	0x0800698b
 8006800:	08006949 	.word	0x08006949
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	4618      	mov	r0, r3
 800680c:	f000 f96a 	bl	8006ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0208 	orr.w	r2, r2, #8
 800681e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	699a      	ldr	r2, [r3, #24]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0204 	bic.w	r2, r2, #4
 800682e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6999      	ldr	r1, [r3, #24]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	619a      	str	r2, [r3, #24]
      break;
 8006842:	e0a5      	b.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	4618      	mov	r0, r3
 800684c:	f000 f9d0 	bl	8006bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800685e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800686e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6999      	ldr	r1, [r3, #24]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	021a      	lsls	r2, r3, #8
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	430a      	orrs	r2, r1
 8006882:	619a      	str	r2, [r3, #24]
      break;
 8006884:	e084      	b.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	4618      	mov	r0, r3
 800688e:	f000 fa2f 	bl	8006cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0208 	orr.w	r2, r2, #8
 80068a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0204 	bic.w	r2, r2, #4
 80068b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69d9      	ldr	r1, [r3, #28]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	61da      	str	r2, [r3, #28]
      break;
 80068c4:	e064      	b.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fa8d 	bl	8006dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69d9      	ldr	r1, [r3, #28]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	021a      	lsls	r2, r3, #8
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	61da      	str	r2, [r3, #28]
      break;
 8006906:	e043      	b.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fad0 	bl	8006eb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0208 	orr.w	r2, r2, #8
 8006922:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0204 	bic.w	r2, r2, #4
 8006932:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006946:	e023      	b.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 fb0e 	bl	8006f70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006962:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006972:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	021a      	lsls	r2, r3, #8
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006988:	e002      	b.n	8006990 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	75fb      	strb	r3, [r7, #23]
      break;
 800698e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006998:	7dfb      	ldrb	r3, [r7, #23]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop

080069a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a32      	ldr	r2, [pc, #200]	; (8006ad0 <TIM_Base_SetConfig+0xdc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <TIM_Base_SetConfig+0x28>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a12:	d003      	beq.n	8006a1c <TIM_Base_SetConfig+0x28>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a2f      	ldr	r2, [pc, #188]	; (8006ad4 <TIM_Base_SetConfig+0xe0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d108      	bne.n	8006a2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a27      	ldr	r2, [pc, #156]	; (8006ad0 <TIM_Base_SetConfig+0xdc>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <TIM_Base_SetConfig+0x6a>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3c:	d00f      	beq.n	8006a5e <TIM_Base_SetConfig+0x6a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a24      	ldr	r2, [pc, #144]	; (8006ad4 <TIM_Base_SetConfig+0xe0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00b      	beq.n	8006a5e <TIM_Base_SetConfig+0x6a>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a23      	ldr	r2, [pc, #140]	; (8006ad8 <TIM_Base_SetConfig+0xe4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <TIM_Base_SetConfig+0x6a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a22      	ldr	r2, [pc, #136]	; (8006adc <TIM_Base_SetConfig+0xe8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d003      	beq.n	8006a5e <TIM_Base_SetConfig+0x6a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a21      	ldr	r2, [pc, #132]	; (8006ae0 <TIM_Base_SetConfig+0xec>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d108      	bne.n	8006a70 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <TIM_Base_SetConfig+0xdc>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_Base_SetConfig+0xc0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <TIM_Base_SetConfig+0xe4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_Base_SetConfig+0xc0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a0d      	ldr	r2, [pc, #52]	; (8006adc <TIM_Base_SetConfig+0xe8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_Base_SetConfig+0xc0>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a0c      	ldr	r2, [pc, #48]	; (8006ae0 <TIM_Base_SetConfig+0xec>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d103      	bne.n	8006abc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	615a      	str	r2, [r3, #20]
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40014400 	.word	0x40014400
 8006ae0:	40014800 	.word	0x40014800

08006ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0303 	bic.w	r3, r3, #3
 8006b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f023 0302 	bic.w	r3, r3, #2
 8006b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a28      	ldr	r2, [pc, #160]	; (8006be0 <TIM_OC1_SetConfig+0xfc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00b      	beq.n	8006b5c <TIM_OC1_SetConfig+0x78>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a27      	ldr	r2, [pc, #156]	; (8006be4 <TIM_OC1_SetConfig+0x100>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d007      	beq.n	8006b5c <TIM_OC1_SetConfig+0x78>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a26      	ldr	r2, [pc, #152]	; (8006be8 <TIM_OC1_SetConfig+0x104>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d003      	beq.n	8006b5c <TIM_OC1_SetConfig+0x78>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a25      	ldr	r2, [pc, #148]	; (8006bec <TIM_OC1_SetConfig+0x108>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d10c      	bne.n	8006b76 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	f023 0308 	bic.w	r3, r3, #8
 8006b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f023 0304 	bic.w	r3, r3, #4
 8006b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <TIM_OC1_SetConfig+0xfc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_OC1_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <TIM_OC1_SetConfig+0x100>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_OC1_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a17      	ldr	r2, [pc, #92]	; (8006be8 <TIM_OC1_SetConfig+0x104>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_OC1_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a16      	ldr	r2, [pc, #88]	; (8006bec <TIM_OC1_SetConfig+0x108>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d111      	bne.n	8006bba <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	621a      	str	r2, [r3, #32]
}
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40014400 	.word	0x40014400
 8006bec:	40014800 	.word	0x40014800

08006bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b087      	sub	sp, #28
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 0210 	bic.w	r2, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0320 	bic.w	r3, r3, #32
 8006c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a24      	ldr	r2, [pc, #144]	; (8006ce0 <TIM_OC2_SetConfig+0xf0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d10d      	bne.n	8006c70 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1b      	ldr	r2, [pc, #108]	; (8006ce0 <TIM_OC2_SetConfig+0xf0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d00b      	beq.n	8006c90 <TIM_OC2_SetConfig+0xa0>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ce4 <TIM_OC2_SetConfig+0xf4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <TIM_OC2_SetConfig+0xa0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a19      	ldr	r2, [pc, #100]	; (8006ce8 <TIM_OC2_SetConfig+0xf8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC2_SetConfig+0xa0>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a18      	ldr	r2, [pc, #96]	; (8006cec <TIM_OC2_SetConfig+0xfc>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d113      	bne.n	8006cb8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c96:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c9e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40012c00 	.word	0x40012c00
 8006ce4:	40014000 	.word	0x40014000
 8006ce8:	40014400 	.word	0x40014400
 8006cec:	40014800 	.word	0x40014800

08006cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0303 	bic.w	r3, r3, #3
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a23      	ldr	r2, [pc, #140]	; (8006ddc <TIM_OC3_SetConfig+0xec>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d10d      	bne.n	8006d6e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d6c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a1a      	ldr	r2, [pc, #104]	; (8006ddc <TIM_OC3_SetConfig+0xec>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00b      	beq.n	8006d8e <TIM_OC3_SetConfig+0x9e>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a19      	ldr	r2, [pc, #100]	; (8006de0 <TIM_OC3_SetConfig+0xf0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d007      	beq.n	8006d8e <TIM_OC3_SetConfig+0x9e>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a18      	ldr	r2, [pc, #96]	; (8006de4 <TIM_OC3_SetConfig+0xf4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d003      	beq.n	8006d8e <TIM_OC3_SetConfig+0x9e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a17      	ldr	r2, [pc, #92]	; (8006de8 <TIM_OC3_SetConfig+0xf8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d113      	bne.n	8006db6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	011b      	lsls	r3, r3, #4
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	621a      	str	r2, [r3, #32]
}
 8006dd0:	bf00      	nop
 8006dd2:	371c      	adds	r7, #28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40014000 	.word	0x40014000
 8006de4:	40014400 	.word	0x40014400
 8006de8:	40014800 	.word	0x40014800

08006dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	031b      	lsls	r3, r3, #12
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a16      	ldr	r2, [pc, #88]	; (8006ea4 <TIM_OC4_SetConfig+0xb8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d00b      	beq.n	8006e68 <TIM_OC4_SetConfig+0x7c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <TIM_OC4_SetConfig+0xbc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_OC4_SetConfig+0x7c>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a14      	ldr	r2, [pc, #80]	; (8006eac <TIM_OC4_SetConfig+0xc0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_OC4_SetConfig+0x7c>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <TIM_OC4_SetConfig+0xc4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d109      	bne.n	8006e7c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	019b      	lsls	r3, r3, #6
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40014400 	.word	0x40014400
 8006eb0:	40014800 	.word	0x40014800

08006eb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ef8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	041b      	lsls	r3, r3, #16
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a15      	ldr	r2, [pc, #84]	; (8006f60 <TIM_OC5_SetConfig+0xac>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d00b      	beq.n	8006f26 <TIM_OC5_SetConfig+0x72>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a14      	ldr	r2, [pc, #80]	; (8006f64 <TIM_OC5_SetConfig+0xb0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d007      	beq.n	8006f26 <TIM_OC5_SetConfig+0x72>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <TIM_OC5_SetConfig+0xb4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d003      	beq.n	8006f26 <TIM_OC5_SetConfig+0x72>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <TIM_OC5_SetConfig+0xb8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d109      	bne.n	8006f3a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	021b      	lsls	r3, r3, #8
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	621a      	str	r2, [r3, #32]
}
 8006f54:	bf00      	nop
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40014000 	.word	0x40014000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800

08006f70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	051b      	lsls	r3, r3, #20
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a16      	ldr	r2, [pc, #88]	; (8007020 <TIM_OC6_SetConfig+0xb0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00b      	beq.n	8006fe4 <TIM_OC6_SetConfig+0x74>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a15      	ldr	r2, [pc, #84]	; (8007024 <TIM_OC6_SetConfig+0xb4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d007      	beq.n	8006fe4 <TIM_OC6_SetConfig+0x74>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a14      	ldr	r2, [pc, #80]	; (8007028 <TIM_OC6_SetConfig+0xb8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_OC6_SetConfig+0x74>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a13      	ldr	r2, [pc, #76]	; (800702c <TIM_OC6_SetConfig+0xbc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d109      	bne.n	8006ff8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	029b      	lsls	r3, r3, #10
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40012c00 	.word	0x40012c00
 8007024:	40014000 	.word	0x40014000
 8007028:	40014400 	.word	0x40014400
 800702c:	40014800 	.word	0x40014800

08007030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	f003 031f 	and.w	r3, r3, #31
 8007042:	2201      	movs	r2, #1
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	43db      	mvns	r3, r3
 8007052:	401a      	ands	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1a      	ldr	r2, [r3, #32]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	fa01 f303 	lsl.w	r3, r1, r3
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	621a      	str	r2, [r3, #32]
}
 800706e:	bf00      	nop
 8007070:	371c      	adds	r7, #28
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
	...

0800707c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800708c:	2b01      	cmp	r3, #1
 800708e:	d101      	bne.n	8007094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007090:	2302      	movs	r3, #2
 8007092:	e054      	b.n	800713e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2202      	movs	r2, #2
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a24      	ldr	r2, [pc, #144]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d108      	bne.n	80070d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a17      	ldr	r2, [pc, #92]	; (800714c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00e      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fc:	d009      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a13      	ldr	r2, [pc, #76]	; (8007150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d004      	beq.n	8007112 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a11      	ldr	r2, [pc, #68]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d10c      	bne.n	800712c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4313      	orrs	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40012c00 	.word	0x40012c00
 8007150:	40000400 	.word	0x40000400
 8007154:	40014000 	.word	0x40014000

08007158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007170:	2302      	movs	r3, #2
 8007172:	e060      	b.n	8007236 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	041b      	lsls	r3, r3, #16
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a14      	ldr	r2, [pc, #80]	; (8007244 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d115      	bne.n	8007224 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	051b      	lsls	r3, r3, #20
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	40012c00 	.word	0x40012c00

08007248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e040      	b.n	8007318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fb f87a 	bl	80023a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2224      	movs	r2, #36	; 0x24
 80072b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0201 	bic.w	r2, r2, #1
 80072c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fc00 	bl	8007ac8 <UART_SetConfig>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e022      	b.n	8007318 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fd2a 	bl	8007d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689a      	ldr	r2, [r3, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fdb1 	bl	8007e78 <UART_CheckIdleState>
 8007316:	4603      	mov	r3, r0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af02      	add	r7, sp, #8
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007334:	2b20      	cmp	r3, #32
 8007336:	d178      	bne.n	800742a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_UART_Transmit+0x24>
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e071      	b.n	800742c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2221      	movs	r2, #33	; 0x21
 8007354:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007356:	f7fb f975 	bl	8002644 <HAL_GetTick>
 800735a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007374:	d108      	bne.n	8007388 <HAL_UART_Transmit+0x68>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d104      	bne.n	8007388 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800737e:	2300      	movs	r3, #0
 8007380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	e003      	b.n	8007390 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800738c:	2300      	movs	r3, #0
 800738e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007390:	e030      	b.n	80073f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2200      	movs	r2, #0
 800739a:	2180      	movs	r1, #128	; 0x80
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f000 fe13 	bl	8007fc8 <UART_WaitOnFlagUntilTimeout>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e03c      	b.n	800742c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10b      	bne.n	80073d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	881a      	ldrh	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c4:	b292      	uxth	r2, r2
 80073c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	3302      	adds	r3, #2
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	e008      	b.n	80073e2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	781a      	ldrb	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	b292      	uxth	r2, r2
 80073da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	3301      	adds	r3, #1
 80073e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	3b01      	subs	r3, #1
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1c8      	bne.n	8007392 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2200      	movs	r2, #0
 8007408:	2140      	movs	r1, #64	; 0x40
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fddc 	bl	8007fc8 <UART_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2220      	movs	r2, #32
 800741a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e005      	b.n	800742c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2220      	movs	r2, #32
 8007424:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	e000      	b.n	800742c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800742a:	2302      	movs	r3, #2
  }
}
 800742c:	4618      	mov	r0, r3
 800742e:	3720      	adds	r7, #32
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	; 0x28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	4613      	mov	r3, r2
 8007440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007448:	2b20      	cmp	r3, #32
 800744a:	d132      	bne.n	80074b2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_UART_Receive_IT+0x24>
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e02b      	b.n	80074b4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d018      	beq.n	80074a2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	613b      	str	r3, [r7, #16]
   return(result);
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	623b      	str	r3, [r7, #32]
 8007490:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007492:	69f9      	ldr	r1, [r7, #28]
 8007494:	6a3a      	ldr	r2, [r7, #32]
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	61bb      	str	r3, [r7, #24]
   return(result);
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e6      	bne.n	8007470 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	461a      	mov	r2, r3
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 fdf5 	bl	8008098 <UART_Start_Receive_IT>
 80074ae:	4603      	mov	r3, r0
 80074b0:	e000      	b.n	80074b4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80074b2:	2302      	movs	r3, #2
  }
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3728      	adds	r7, #40	; 0x28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b0ba      	sub	sp, #232	; 0xe8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80074ea:	4013      	ands	r3, r2
 80074ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d115      	bne.n	8007524 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80074f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00f      	beq.n	8007524 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007508:	f003 0320 	and.w	r3, r3, #32
 800750c:	2b00      	cmp	r3, #0
 800750e:	d009      	beq.n	8007524 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 82ab 	beq.w	8007a70 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
      }
      return;
 8007522:	e2a5      	b.n	8007a70 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 8117 	beq.w	800775c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800752e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800753a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800753e:	4b85      	ldr	r3, [pc, #532]	; (8007754 <HAL_UART_IRQHandler+0x298>)
 8007540:	4013      	ands	r3, r2
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 810a 	beq.w	800775c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d011      	beq.n	8007578 <HAL_UART_IRQHandler+0xbc>
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2201      	movs	r2, #1
 8007566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800756e:	f043 0201 	orr.w	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d011      	beq.n	80075a8 <HAL_UART_IRQHandler+0xec>
 8007584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2202      	movs	r2, #2
 8007596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800759e:	f043 0204 	orr.w	r2, r3, #4
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d011      	beq.n	80075d8 <HAL_UART_IRQHandler+0x11c>
 80075b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2204      	movs	r2, #4
 80075c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ce:	f043 0202 	orr.w	r2, r3, #2
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d017      	beq.n	8007614 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80075f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2208      	movs	r2, #8
 8007602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800760a:	f043 0208 	orr.w	r2, r3, #8
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800761c:	2b00      	cmp	r3, #0
 800761e:	d012      	beq.n	8007646 <HAL_UART_IRQHandler+0x18a>
 8007620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00c      	beq.n	8007646 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800763c:	f043 0220 	orr.w	r2, r3, #32
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8211 	beq.w	8007a74 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00d      	beq.n	800767a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800765e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007662:	f003 0320 	and.w	r3, r3, #32
 8007666:	2b00      	cmp	r3, #0
 8007668:	d007      	beq.n	800767a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800768e:	2b40      	cmp	r3, #64	; 0x40
 8007690:	d005      	beq.n	800769e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800769a:	2b00      	cmp	r3, #0
 800769c:	d04f      	beq.n	800773e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fdc0 	bl	8008224 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ae:	2b40      	cmp	r3, #64	; 0x40
 80076b0:	d141      	bne.n	8007736 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3308      	adds	r3, #8
 80076b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	3308      	adds	r3, #8
 80076da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1d9      	bne.n	80076b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007702:	2b00      	cmp	r3, #0
 8007704:	d013      	beq.n	800772e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800770a:	4a13      	ldr	r2, [pc, #76]	; (8007758 <HAL_UART_IRQHandler+0x29c>)
 800770c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007712:	4618      	mov	r0, r3
 8007714:	f7fc fa26 	bl	8003b64 <HAL_DMA_Abort_IT>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d017      	beq.n	800774e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007728:	4610      	mov	r0, r2
 800772a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800772c:	e00f      	b.n	800774e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9b4 	bl	8007a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007734:	e00b      	b.n	800774e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f9b0 	bl	8007a9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773c:	e007      	b.n	800774e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f9ac 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800774c:	e192      	b.n	8007a74 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774e:	bf00      	nop
    return;
 8007750:	e190      	b.n	8007a74 <HAL_UART_IRQHandler+0x5b8>
 8007752:	bf00      	nop
 8007754:	04000120 	.word	0x04000120
 8007758:	080082ed 	.word	0x080082ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007760:	2b01      	cmp	r3, #1
 8007762:	f040 814b 	bne.w	80079fc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776a:	f003 0310 	and.w	r3, r3, #16
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 8144 	beq.w	80079fc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007778:	f003 0310 	and.w	r3, r3, #16
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 813d 	beq.w	80079fc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2210      	movs	r2, #16
 8007788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b40      	cmp	r3, #64	; 0x40
 8007796:	f040 80b5 	bne.w	8007904 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 8164 	beq.w	8007a78 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ba:	429a      	cmp	r2, r3
 80077bc:	f080 815c 	bcs.w	8007a78 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	2b20      	cmp	r3, #32
 80077d2:	f000 8086 	beq.w	80078e2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007804:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800780c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1da      	bne.n	80077d6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007830:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007832:	f023 0301 	bic.w	r3, r3, #1
 8007836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007844:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007848:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800784c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e1      	bne.n	8007820 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3308      	adds	r3, #8
 8007862:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800786c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800786e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007880:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007882:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800788e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e3      	bne.n	800785c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078b2:	f023 0310 	bic.w	r3, r3, #16
 80078b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80078c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e4      	bne.n	80078a2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fc f908 	bl	8003af2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f8d7 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007902:	e0b9      	b.n	8007a78 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007910:	b29b      	uxth	r3, r3
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80ab 	beq.w	8007a7c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 80a6 	beq.w	8007a7c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007952:	647b      	str	r3, [r7, #68]	; 0x44
 8007954:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e4      	bne.n	8007930 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	623b      	str	r3, [r7, #32]
   return(result);
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f023 0301 	bic.w	r3, r3, #1
 800797c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800798a:	633a      	str	r2, [r7, #48]	; 0x30
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e3      	bne.n	8007966 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	e853 3f00 	ldrex	r3, [r3]
 80079be:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0310 	bic.w	r3, r3, #16
 80079c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079d4:	61fb      	str	r3, [r7, #28]
 80079d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	69b9      	ldr	r1, [r7, #24]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	617b      	str	r3, [r7, #20]
   return(result);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e4      	bne.n	80079b2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f85b 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079fa:	e03f      	b.n	8007a7c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00e      	beq.n	8007a26 <HAL_UART_IRQHandler+0x56a>
 8007a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d008      	beq.n	8007a26 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fe4c 	bl	80086bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a24:	e02d      	b.n	8007a82 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00e      	beq.n	8007a50 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d008      	beq.n	8007a50 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d01c      	beq.n	8007a80 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
    }
    return;
 8007a4e:	e017      	b.n	8007a80 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d012      	beq.n	8007a82 <HAL_UART_IRQHandler+0x5c6>
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00c      	beq.n	8007a82 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fc55 	bl	8008318 <UART_EndTransmit_IT>
    return;
 8007a6e:	e008      	b.n	8007a82 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a70:	bf00      	nop
 8007a72:	e006      	b.n	8007a82 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007a74:	bf00      	nop
 8007a76:	e004      	b.n	8007a82 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a78:	bf00      	nop
 8007a7a:	e002      	b.n	8007a82 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a7c:	bf00      	nop
 8007a7e:	e000      	b.n	8007a82 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007a80:	bf00      	nop
  }

}
 8007a82:	37e8      	adds	r7, #232	; 0xe8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b088      	sub	sp, #32
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4b8a      	ldr	r3, [pc, #552]	; (8007d1c <UART_SetConfig+0x254>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6812      	ldr	r2, [r2, #0]
 8007afa:	6979      	ldr	r1, [r7, #20]
 8007afc:	430b      	orrs	r3, r1
 8007afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a1b      	ldr	r3, [r3, #32]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a78      	ldr	r2, [pc, #480]	; (8007d20 <UART_SetConfig+0x258>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d120      	bne.n	8007b86 <UART_SetConfig+0xbe>
 8007b44:	4b77      	ldr	r3, [pc, #476]	; (8007d24 <UART_SetConfig+0x25c>)
 8007b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b48:	f003 0303 	and.w	r3, r3, #3
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d817      	bhi.n	8007b80 <UART_SetConfig+0xb8>
 8007b50:	a201      	add	r2, pc, #4	; (adr r2, 8007b58 <UART_SetConfig+0x90>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b75 	.word	0x08007b75
 8007b60:	08007b7b 	.word	0x08007b7b
 8007b64:	08007b6f 	.word	0x08007b6f
 8007b68:	2300      	movs	r3, #0
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	e01d      	b.n	8007baa <UART_SetConfig+0xe2>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e01a      	b.n	8007baa <UART_SetConfig+0xe2>
 8007b74:	2304      	movs	r3, #4
 8007b76:	77fb      	strb	r3, [r7, #31]
 8007b78:	e017      	b.n	8007baa <UART_SetConfig+0xe2>
 8007b7a:	2308      	movs	r3, #8
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e014      	b.n	8007baa <UART_SetConfig+0xe2>
 8007b80:	2310      	movs	r3, #16
 8007b82:	77fb      	strb	r3, [r7, #31]
 8007b84:	e011      	b.n	8007baa <UART_SetConfig+0xe2>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a67      	ldr	r2, [pc, #412]	; (8007d28 <UART_SetConfig+0x260>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d102      	bne.n	8007b96 <UART_SetConfig+0xce>
 8007b90:	2300      	movs	r3, #0
 8007b92:	77fb      	strb	r3, [r7, #31]
 8007b94:	e009      	b.n	8007baa <UART_SetConfig+0xe2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a64      	ldr	r2, [pc, #400]	; (8007d2c <UART_SetConfig+0x264>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d102      	bne.n	8007ba6 <UART_SetConfig+0xde>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e001      	b.n	8007baa <UART_SetConfig+0xe2>
 8007ba6:	2310      	movs	r3, #16
 8007ba8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb2:	d15a      	bne.n	8007c6a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007bb4:	7ffb      	ldrb	r3, [r7, #31]
 8007bb6:	2b08      	cmp	r3, #8
 8007bb8:	d827      	bhi.n	8007c0a <UART_SetConfig+0x142>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <UART_SetConfig+0xf8>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007be5 	.word	0x08007be5
 8007bc4:	08007bed 	.word	0x08007bed
 8007bc8:	08007bf5 	.word	0x08007bf5
 8007bcc:	08007c0b 	.word	0x08007c0b
 8007bd0:	08007bfb 	.word	0x08007bfb
 8007bd4:	08007c0b 	.word	0x08007c0b
 8007bd8:	08007c0b 	.word	0x08007c0b
 8007bdc:	08007c0b 	.word	0x08007c0b
 8007be0:	08007c03 	.word	0x08007c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007be4:	f7fe f948 	bl	8005e78 <HAL_RCC_GetPCLK1Freq>
 8007be8:	61b8      	str	r0, [r7, #24]
        break;
 8007bea:	e013      	b.n	8007c14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bec:	f7fe f966 	bl	8005ebc <HAL_RCC_GetPCLK2Freq>
 8007bf0:	61b8      	str	r0, [r7, #24]
        break;
 8007bf2:	e00f      	b.n	8007c14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bf4:	4b4e      	ldr	r3, [pc, #312]	; (8007d30 <UART_SetConfig+0x268>)
 8007bf6:	61bb      	str	r3, [r7, #24]
        break;
 8007bf8:	e00c      	b.n	8007c14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bfa:	f7fe f8c7 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8007bfe:	61b8      	str	r0, [r7, #24]
        break;
 8007c00:	e008      	b.n	8007c14 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c06:	61bb      	str	r3, [r7, #24]
        break;
 8007c08:	e004      	b.n	8007c14 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	77bb      	strb	r3, [r7, #30]
        break;
 8007c12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d074      	beq.n	8007d04 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	005a      	lsls	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b0f      	cmp	r3, #15
 8007c34:	d916      	bls.n	8007c64 <UART_SetConfig+0x19c>
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c3c:	d212      	bcs.n	8007c64 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f023 030f 	bic.w	r3, r3, #15
 8007c46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	89fb      	ldrh	r3, [r7, #14]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	89fa      	ldrh	r2, [r7, #14]
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	e04f      	b.n	8007d04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	77bb      	strb	r3, [r7, #30]
 8007c68:	e04c      	b.n	8007d04 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c6a:	7ffb      	ldrb	r3, [r7, #31]
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d828      	bhi.n	8007cc2 <UART_SetConfig+0x1fa>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <UART_SetConfig+0x1b0>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007c9d 	.word	0x08007c9d
 8007c7c:	08007ca5 	.word	0x08007ca5
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007cc3 	.word	0x08007cc3
 8007c88:	08007cb3 	.word	0x08007cb3
 8007c8c:	08007cc3 	.word	0x08007cc3
 8007c90:	08007cc3 	.word	0x08007cc3
 8007c94:	08007cc3 	.word	0x08007cc3
 8007c98:	08007cbb 	.word	0x08007cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c9c:	f7fe f8ec 	bl	8005e78 <HAL_RCC_GetPCLK1Freq>
 8007ca0:	61b8      	str	r0, [r7, #24]
        break;
 8007ca2:	e013      	b.n	8007ccc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ca4:	f7fe f90a 	bl	8005ebc <HAL_RCC_GetPCLK2Freq>
 8007ca8:	61b8      	str	r0, [r7, #24]
        break;
 8007caa:	e00f      	b.n	8007ccc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cac:	4b20      	ldr	r3, [pc, #128]	; (8007d30 <UART_SetConfig+0x268>)
 8007cae:	61bb      	str	r3, [r7, #24]
        break;
 8007cb0:	e00c      	b.n	8007ccc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb2:	f7fe f86b 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8007cb6:	61b8      	str	r0, [r7, #24]
        break;
 8007cb8:	e008      	b.n	8007ccc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cbe:	61bb      	str	r3, [r7, #24]
        break;
 8007cc0:	e004      	b.n	8007ccc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8007cca:	bf00      	nop
    }

    if (pclk != 0U)
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d018      	beq.n	8007d04 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	085a      	lsrs	r2, r3, #1
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	441a      	add	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	2b0f      	cmp	r3, #15
 8007cea:	d909      	bls.n	8007d00 <UART_SetConfig+0x238>
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf2:	d205      	bcs.n	8007d00 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60da      	str	r2, [r3, #12]
 8007cfe:	e001      	b.n	8007d04 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d10:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3720      	adds	r7, #32
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	efff69f3 	.word	0xefff69f3
 8007d20:	40013800 	.word	0x40013800
 8007d24:	40021000 	.word	0x40021000
 8007d28:	40004400 	.word	0x40004400
 8007d2c:	40004800 	.word	0x40004800
 8007d30:	007a1200 	.word	0x007a1200

08007d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	f003 0308 	and.w	r3, r3, #8
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	f003 0310 	and.w	r3, r3, #16
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01a      	beq.n	8007e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e32:	d10a      	bne.n	8007e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	605a      	str	r2, [r3, #4]
  }
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b098      	sub	sp, #96	; 0x60
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e88:	f7fa fbdc 	bl	8002644 <HAL_GetTick>
 8007e8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d12e      	bne.n	8007efa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f88c 	bl	8007fc8 <UART_WaitOnFlagUntilTimeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d021      	beq.n	8007efa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eca:	653b      	str	r3, [r7, #80]	; 0x50
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ed6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007edc:	e841 2300 	strex	r3, r2, [r1]
 8007ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d1e6      	bne.n	8007eb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e062      	b.n	8007fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d149      	bne.n	8007f9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f10:	2200      	movs	r2, #0
 8007f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f856 	bl	8007fc8 <UART_WaitOnFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d03c      	beq.n	8007f9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f40:	633b      	str	r3, [r7, #48]	; 0x30
 8007f42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e6      	bne.n	8007f22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3308      	adds	r3, #8
 8007f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f74:	61fa      	str	r2, [r7, #28]
 8007f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	69b9      	ldr	r1, [r7, #24]
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	617b      	str	r3, [r7, #20]
   return(result);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e5      	bne.n	8007f54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e011      	b.n	8007fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3758      	adds	r7, #88	; 0x58
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd8:	e049      	b.n	800806e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d045      	beq.n	800806e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe2:	f7fa fb2f 	bl	8002644 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d302      	bcc.n	8007ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e048      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d031      	beq.n	800806e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b08      	cmp	r3, #8
 8008016:	d110      	bne.n	800803a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2208      	movs	r2, #8
 800801e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f8ff 	bl	8008224 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2208      	movs	r2, #8
 800802a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e029      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008048:	d111      	bne.n	800806e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f8e5 	bl	8008224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e00f      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69da      	ldr	r2, [r3, #28]
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	4013      	ands	r3, r2
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	429a      	cmp	r2, r3
 800807c:	bf0c      	ite	eq
 800807e:	2301      	moveq	r3, #1
 8008080:	2300      	movne	r3, #0
 8008082:	b2db      	uxtb	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	429a      	cmp	r2, r3
 800808a:	d0a6      	beq.n	8007fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008098:	b480      	push	{r7}
 800809a:	b097      	sub	sp, #92	; 0x5c
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	4613      	mov	r3, r2
 80080a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	88fa      	ldrh	r2, [r7, #6]
 80080b0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	88fa      	ldrh	r2, [r7, #6]
 80080b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ca:	d10e      	bne.n	80080ea <UART_Start_Receive_IT+0x52>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d105      	bne.n	80080e0 <UART_Start_Receive_IT+0x48>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080de:	e02d      	b.n	800813c <UART_Start_Receive_IT+0xa4>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	22ff      	movs	r2, #255	; 0xff
 80080e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080e8:	e028      	b.n	800813c <UART_Start_Receive_IT+0xa4>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10d      	bne.n	800810e <UART_Start_Receive_IT+0x76>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d104      	bne.n	8008104 <UART_Start_Receive_IT+0x6c>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	22ff      	movs	r2, #255	; 0xff
 80080fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008102:	e01b      	b.n	800813c <UART_Start_Receive_IT+0xa4>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	227f      	movs	r2, #127	; 0x7f
 8008108:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800810c:	e016      	b.n	800813c <UART_Start_Receive_IT+0xa4>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008116:	d10d      	bne.n	8008134 <UART_Start_Receive_IT+0x9c>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d104      	bne.n	800812a <UART_Start_Receive_IT+0x92>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	227f      	movs	r2, #127	; 0x7f
 8008124:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008128:	e008      	b.n	800813c <UART_Start_Receive_IT+0xa4>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	223f      	movs	r2, #63	; 0x3f
 800812e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008132:	e003      	b.n	800813c <UART_Start_Receive_IT+0xa4>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2222      	movs	r2, #34	; 0x22
 8008148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	3308      	adds	r3, #8
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008156:	e853 3f00 	ldrex	r3, [r3]
 800815a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815e:	f043 0301 	orr.w	r3, r3, #1
 8008162:	657b      	str	r3, [r7, #84]	; 0x54
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3308      	adds	r3, #8
 800816a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800816c:	64ba      	str	r2, [r7, #72]	; 0x48
 800816e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800817a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e5      	bne.n	800814c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008188:	d107      	bne.n	800819a <UART_Start_Receive_IT+0x102>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d103      	bne.n	800819a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a21      	ldr	r2, [pc, #132]	; (800821c <UART_Start_Receive_IT+0x184>)
 8008196:	669a      	str	r2, [r3, #104]	; 0x68
 8008198:	e002      	b.n	80081a0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4a20      	ldr	r2, [pc, #128]	; (8008220 <UART_Start_Receive_IT+0x188>)
 800819e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d019      	beq.n	80081dc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80081bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c6:	637b      	str	r3, [r7, #52]	; 0x34
 80081c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e6      	bne.n	80081a8 <UART_Start_Receive_IT+0x110>
 80081da:	e018      	b.n	800820e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	613b      	str	r3, [r7, #16]
   return(result);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f043 0320 	orr.w	r3, r3, #32
 80081f0:	653b      	str	r3, [r7, #80]	; 0x50
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	461a      	mov	r2, r3
 80081f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081fa:	623b      	str	r3, [r7, #32]
 80081fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	69f9      	ldr	r1, [r7, #28]
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	61bb      	str	r3, [r7, #24]
   return(result);
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e6      	bne.n	80081dc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	375c      	adds	r7, #92	; 0x5c
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	08008515 	.word	0x08008515
 8008220:	0800836d 	.word	0x0800836d

08008224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b095      	sub	sp, #84	; 0x54
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008234:	e853 3f00 	ldrex	r3, [r3]
 8008238:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008240:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	461a      	mov	r2, r3
 8008248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824a:	643b      	str	r3, [r7, #64]	; 0x40
 800824c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008252:	e841 2300 	strex	r3, r2, [r1]
 8008256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1e6      	bne.n	800822c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	e853 3f00 	ldrex	r3, [r3]
 800826c:	61fb      	str	r3, [r7, #28]
   return(result);
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f023 0301 	bic.w	r3, r3, #1
 8008274:	64bb      	str	r3, [r7, #72]	; 0x48
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3308      	adds	r3, #8
 800827c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800827e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008286:	e841 2300 	strex	r3, r2, [r1]
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1e5      	bne.n	800825e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008296:	2b01      	cmp	r3, #1
 8008298:	d118      	bne.n	80082cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f023 0310 	bic.w	r3, r3, #16
 80082ae:	647b      	str	r3, [r7, #68]	; 0x44
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082b8:	61bb      	str	r3, [r7, #24]
 80082ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6979      	ldr	r1, [r7, #20]
 80082be:	69ba      	ldr	r2, [r7, #24]
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	613b      	str	r3, [r7, #16]
   return(result);
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e6      	bne.n	800829a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	669a      	str	r2, [r3, #104]	; 0x68
}
 80082e0:	bf00      	nop
 80082e2:	3754      	adds	r7, #84	; 0x54
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7ff fbc6 	bl	8007a9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	60bb      	str	r3, [r7, #8]
   return(result);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008334:	61fb      	str	r3, [r7, #28]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	61bb      	str	r3, [r7, #24]
 8008340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6979      	ldr	r1, [r7, #20]
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	613b      	str	r3, [r7, #16]
   return(result);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e6      	bne.n	8008320 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2220      	movs	r2, #32
 8008356:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff fb92 	bl	8007a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008364:	bf00      	nop
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b09c      	sub	sp, #112	; 0x70
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800837a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008384:	2b22      	cmp	r3, #34	; 0x22
 8008386:	f040 80b9 	bne.w	80084fc <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008390:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008394:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008398:	b2d9      	uxtb	r1, r3
 800839a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a4:	400a      	ands	r2, r1
 80083a6:	b2d2      	uxtb	r2, r2
 80083a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f040 809c 	bne.w	800850c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80083f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083fa:	e841 2300 	strex	r3, r2, [r1]
 80083fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1e6      	bne.n	80083d4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008418:	f023 0301 	bic.w	r3, r3, #1
 800841c:	667b      	str	r3, [r7, #100]	; 0x64
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3308      	adds	r3, #8
 8008424:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008426:	647a      	str	r2, [r7, #68]	; 0x44
 8008428:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800842c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e5      	bne.n	8008406 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d018      	beq.n	800848e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	623b      	str	r3, [r7, #32]
   return(result);
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008470:	663b      	str	r3, [r7, #96]	; 0x60
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800847a:	633b      	str	r3, [r7, #48]	; 0x30
 800847c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e6      	bne.n	800845c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008492:	2b01      	cmp	r3, #1
 8008494:	d12e      	bne.n	80084f4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f023 0310 	bic.w	r3, r3, #16
 80084b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084ba:	61fb      	str	r3, [r7, #28]
 80084bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	69b9      	ldr	r1, [r7, #24]
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	617b      	str	r3, [r7, #20]
   return(result);
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e6      	bne.n	800849c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69db      	ldr	r3, [r3, #28]
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b10      	cmp	r3, #16
 80084da:	d103      	bne.n	80084e4 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2210      	movs	r2, #16
 80084e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff fadf 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084f2:	e00b      	b.n	800850c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7f8 fc59 	bl	8000dac <HAL_UART_RxCpltCallback>
}
 80084fa:	e007      	b.n	800850c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	699a      	ldr	r2, [r3, #24]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0208 	orr.w	r2, r2, #8
 800850a:	619a      	str	r2, [r3, #24]
}
 800850c:	bf00      	nop
 800850e:	3770      	adds	r7, #112	; 0x70
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b09c      	sub	sp, #112	; 0x70
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008522:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800852c:	2b22      	cmp	r3, #34	; 0x22
 800852e:	f040 80b9 	bne.w	80086a4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008538:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008540:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008542:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008546:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800854a:	4013      	ands	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008550:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008556:	1c9a      	adds	r2, r3, #2
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008562:	b29b      	uxth	r3, r3
 8008564:	3b01      	subs	r3, #1
 8008566:	b29a      	uxth	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	f040 809c 	bne.w	80086b4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800858a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800858c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008590:	667b      	str	r3, [r7, #100]	; 0x64
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	461a      	mov	r2, r3
 8008598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800859a:	657b      	str	r3, [r7, #84]	; 0x54
 800859c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085a2:	e841 2300 	strex	r3, r2, [r1]
 80085a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1e6      	bne.n	800857c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	3308      	adds	r3, #8
 80085b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	f023 0301 	bic.w	r3, r3, #1
 80085c4:	663b      	str	r3, [r7, #96]	; 0x60
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3308      	adds	r3, #8
 80085cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085ce:	643a      	str	r2, [r7, #64]	; 0x40
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e5      	bne.n	80085ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2220      	movs	r2, #32
 80085e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d018      	beq.n	8008636 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	61fb      	str	r3, [r7, #28]
   return(result);
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008618:	65fb      	str	r3, [r7, #92]	; 0x5c
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008624:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e6      	bne.n	8008604 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800863a:	2b01      	cmp	r3, #1
 800863c:	d12e      	bne.n	800869c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	60bb      	str	r3, [r7, #8]
   return(result);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	65bb      	str	r3, [r7, #88]	; 0x58
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008666:	6979      	ldr	r1, [r7, #20]
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	e841 2300 	strex	r3, r2, [r1]
 800866e:	613b      	str	r3, [r7, #16]
   return(result);
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1e6      	bne.n	8008644 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b10      	cmp	r3, #16
 8008682:	d103      	bne.n	800868c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2210      	movs	r2, #16
 800868a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff fa0b 	bl	8007ab0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800869a:	e00b      	b.n	80086b4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7f8 fb85 	bl	8000dac <HAL_UART_RxCpltCallback>
}
 80086a2:	e007      	b.n	80086b4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	699a      	ldr	r2, [r3, #24]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f042 0208 	orr.w	r2, r2, #8
 80086b2:	619a      	str	r2, [r3, #24]
}
 80086b4:	bf00      	nop
 80086b6:	3770      	adds	r7, #112	; 0x70
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <__libc_init_array>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	4d0d      	ldr	r5, [pc, #52]	; (8008708 <__libc_init_array+0x38>)
 80086d4:	4c0d      	ldr	r4, [pc, #52]	; (800870c <__libc_init_array+0x3c>)
 80086d6:	1b64      	subs	r4, r4, r5
 80086d8:	10a4      	asrs	r4, r4, #2
 80086da:	2600      	movs	r6, #0
 80086dc:	42a6      	cmp	r6, r4
 80086de:	d109      	bne.n	80086f4 <__libc_init_array+0x24>
 80086e0:	4d0b      	ldr	r5, [pc, #44]	; (8008710 <__libc_init_array+0x40>)
 80086e2:	4c0c      	ldr	r4, [pc, #48]	; (8008714 <__libc_init_array+0x44>)
 80086e4:	f000 f860 	bl	80087a8 <_init>
 80086e8:	1b64      	subs	r4, r4, r5
 80086ea:	10a4      	asrs	r4, r4, #2
 80086ec:	2600      	movs	r6, #0
 80086ee:	42a6      	cmp	r6, r4
 80086f0:	d105      	bne.n	80086fe <__libc_init_array+0x2e>
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f8:	4798      	blx	r3
 80086fa:	3601      	adds	r6, #1
 80086fc:	e7ee      	b.n	80086dc <__libc_init_array+0xc>
 80086fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008702:	4798      	blx	r3
 8008704:	3601      	adds	r6, #1
 8008706:	e7f2      	b.n	80086ee <__libc_init_array+0x1e>
 8008708:	08008800 	.word	0x08008800
 800870c:	08008800 	.word	0x08008800
 8008710:	08008800 	.word	0x08008800
 8008714:	08008804 	.word	0x08008804

08008718 <memset>:
 8008718:	4402      	add	r2, r0
 800871a:	4603      	mov	r3, r0
 800871c:	4293      	cmp	r3, r2
 800871e:	d100      	bne.n	8008722 <memset+0xa>
 8008720:	4770      	bx	lr
 8008722:	f803 1b01 	strb.w	r1, [r3], #1
 8008726:	e7f9      	b.n	800871c <memset+0x4>

08008728 <lrintf>:
 8008728:	ee10 3a10 	vmov	r3, s0
 800872c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008730:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8008734:	281e      	cmp	r0, #30
 8008736:	b082      	sub	sp, #8
 8008738:	dc2e      	bgt.n	8008798 <lrintf+0x70>
 800873a:	1c41      	adds	r1, r0, #1
 800873c:	da02      	bge.n	8008744 <lrintf+0x1c>
 800873e:	2000      	movs	r0, #0
 8008740:	b002      	add	sp, #8
 8008742:	4770      	bx	lr
 8008744:	2816      	cmp	r0, #22
 8008746:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800874a:	dd09      	ble.n	8008760 <lrintf+0x38>
 800874c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008750:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008754:	3a96      	subs	r2, #150	; 0x96
 8008756:	4090      	lsls	r0, r2
 8008758:	2900      	cmp	r1, #0
 800875a:	d0f1      	beq.n	8008740 <lrintf+0x18>
 800875c:	4240      	negs	r0, r0
 800875e:	e7ef      	b.n	8008740 <lrintf+0x18>
 8008760:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <lrintf+0x7c>)
 8008762:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008766:	ed93 7a00 	vldr	s14, [r3]
 800876a:	ee37 0a00 	vadd.f32	s0, s14, s0
 800876e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008772:	eddd 7a01 	vldr	s15, [sp, #4]
 8008776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800877a:	ee17 3a90 	vmov	r3, s15
 800877e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008782:	d0dc      	beq.n	800873e <lrintf+0x16>
 8008784:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008788:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800878c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008790:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008794:	40d8      	lsrs	r0, r3
 8008796:	e7df      	b.n	8008758 <lrintf+0x30>
 8008798:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800879c:	ee17 0a90 	vmov	r0, s15
 80087a0:	e7ce      	b.n	8008740 <lrintf+0x18>
 80087a2:	bf00      	nop
 80087a4:	080087f8 	.word	0x080087f8

080087a8 <_init>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr

080087b4 <_fini>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr

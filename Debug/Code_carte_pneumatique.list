
Code_carte_pneumatique.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008790  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008918  08008918  00018918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008958  08008958  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008958  08008958  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008958  08008958  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000059c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000060c  2000060c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000179e5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c28  00000000  00000000  00037a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001280  00000000  00000000  0003ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d940  00000000  00000000  0003ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cbb  00000000  00000000  0005a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b16d4  00000000  00000000  000732c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124997  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056a8  00000000  00000000  001249e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008900 	.word	0x08008900

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08008900 	.word	0x08008900

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <dshot_init>:

int dshot_ready = 0;

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f83f 	bl	80008c4 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000846:	f000 f8fb 	bl	8000a40 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800084a:	f000 f91d 	bl	8000a88 <dshot_start_pwm>
  dshot_ready = 1;
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <dshot_init+0x28>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001f4 	.word	0x200001f4

08000860 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if (!dshot_ready) return;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <dshot_write+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <dshot_write+0x20>

	dshot_prepare_dmabuffer_all(motor_value);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f98d 	bl	8000b90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000876:	f000 f9bf 	bl	8000bf8 <dshot_dma_start>
	dshot_enable_dma_request();
 800087a:	f000 fa03 	bl	8000c84 <dshot_enable_dma_request>
 800087e:	e000      	b.n	8000882 <dshot_write+0x22>
  if (!dshot_ready) return;
 8000880:	bf00      	nop
}
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200001f4 	.word	0x200001f4

0800088c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d003      	beq.n	80008a4 <dshot_choose_type+0x18>
 800089c:	2b02      	cmp	r3, #2
 800089e:	d103      	bne.n	80008a8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <dshot_choose_type+0x2c>)
 80008a2:	e002      	b.n	80008aa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <dshot_choose_type+0x30>)
 80008a6:	e000      	b.n	80008aa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <dshot_choose_type+0x34>)
	}
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	00b71b00 	.word	0x00b71b00
 80008bc:	005b8d80 	.word	0x005b8d80
 80008c0:	002dc6c0 	.word	0x002dc6c0

080008c4 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	ed2d 8b02 	vpush	{d8}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <dshot_set_timer+0xc4>)
 80008d4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffd2 	bl	800088c <dshot_choose_type>
 80008e8:	ee07 0a90 	vmov	s15, r0
 80008ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008f4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800098c <dshot_set_timer+0xc8>
 80008f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000900:	f007 ffbe 	bl	8008880 <lrintf>
 8000904:	4603      	mov	r3, r0
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <dshot_set_timer+0xcc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	897a      	ldrh	r2, [r7, #10]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <dshot_set_timer+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2214      	movs	r2, #20
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <dshot_set_timer+0xcc>)
 800091e:	2214      	movs	r2, #20
 8000920:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <dshot_set_timer+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <dshot_set_timer+0xd0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2214      	movs	r2, #20
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <dshot_set_timer+0xd0>)
 8000934:	2214      	movs	r2, #20
 8000936:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <dshot_set_timer+0xd4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	897a      	ldrh	r2, [r7, #10]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <dshot_set_timer+0xd4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2214      	movs	r2, #20
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <dshot_set_timer+0xd4>)
 800094a:	2214      	movs	r2, #20
 800094c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <dshot_set_timer+0xd0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	897a      	ldrh	r2, [r7, #10]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <dshot_set_timer+0xd0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2214      	movs	r2, #20
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <dshot_set_timer+0xd0>)
 8000960:	2214      	movs	r2, #20
 8000962:	60da      	str	r2, [r3, #12]

	// motor5
	__HAL_TIM_SET_PRESCALER(MOTOR_5_TIM, dshot_prescaler);
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <dshot_set_timer+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	897a      	ldrh	r2, [r7, #10]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_5_TIM, MOTOR_BITLENGTH);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <dshot_set_timer+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2214      	movs	r2, #20
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <dshot_set_timer+0xcc>)
 8000976:	2214      	movs	r2, #20
 8000978:	60da      	str	r2, [r3, #12]
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	ecbd 8b02 	vpop	{d8}
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	016e3600 	.word	0x016e3600
 800098c:	3c23d70a 	.word	0x3c23d70a
 8000990:	20000328 	.word	0x20000328
 8000994:	20000374 	.word	0x20000374
 8000998:	200002dc 	.word	0x200002dc

0800099c <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[MOTOR_1_TIM_DMA_ID])
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d108      	bne.n	80009c6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_1_TIM_DMA);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009c2:	60da      	str	r2, [r3, #12]
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
	}

}
 80009c4:	e036      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_2_TIM_DMA_ID])
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d108      	bne.n	80009e2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_2_TIM_DMA);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	e028      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_3_TIM_DMA_ID])
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d108      	bne.n	80009fe <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_3_TIM_DMA);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009fa:	60da      	str	r2, [r3, #12]
}
 80009fc:	e01a      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_4_TIM_DMA_ID])
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d108      	bne.n	8000a1a <dshot_dma_tc_callback+0x7e>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_4_TIM_DMA);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00c      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d107      	bne.n	8000a34 <dshot_dma_tc_callback+0x98>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a32:	60da      	str	r2, [r3, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <dshot_put_tc_callback_function+0x44>)
 8000a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a58:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000328 	.word	0x20000328
 8000a7c:	0800099d 	.word	0x0800099d
 8000a80:	20000374 	.word	0x20000374
 8000a84:	200002dc 	.word	0x200002dc

08000a88 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000a90:	f005 fc54 	bl	800633c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a94:	210c      	movs	r1, #12
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <dshot_start_pwm+0x34>)
 8000a98:	f005 fc50 	bl	800633c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <dshot_start_pwm+0x38>)
 8000aa0:	f005 fc4c 	bl	800633c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <dshot_start_pwm+0x34>)
 8000aa8:	f005 fc48 	bl	800633c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_5_TIM, MOTOR_5_TIM_CHANNEL);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000ab0:	f005 fc44 	bl	800633c <HAL_TIM_PWM_Start>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000328 	.word	0x20000328
 8000abc:	20000374 	.word	0x20000374
 8000ac0:	200002dc 	.word	0x200002dc

08000ac4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000ae6:	893b      	ldrh	r3, [r7, #8]
 8000ae8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e009      	b.n	8000b04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4053      	eors	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddf2      	ble.n	8000af0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000b12:	893b      	ldrh	r3, [r7, #8]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000b20:	893b      	ldrh	r3, [r7, #8]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffc1 	bl	8000ac4 <dshot_prepare_packet>
 8000b42:	4603      	mov	r3, r0
 8000b44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e011      	b.n	8000b70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da01      	bge.n	8000b58 <dshot_prepare_dmabuffer+0x2a>
 8000b54:	220e      	movs	r2, #14
 8000b56:	e000      	b.n	8000b5a <dshot_prepare_dmabuffer+0x2c>
 8000b58:	2207      	movs	r2, #7
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	440b      	add	r3, r1
 8000b62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	ddea      	ble.n	8000b4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3340      	adds	r3, #64	; 0x40
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3344      	adds	r3, #68	; 0x44
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <dshot_prepare_dmabuffer_all+0x54>)
 8000ba0:	f7ff ffc5 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <dshot_prepare_dmabuffer_all+0x58>)
 8000bae:	f7ff ffbe 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <dshot_prepare_dmabuffer_all+0x5c>)
 8000bbc:	f7ff ffb7 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3306      	adds	r3, #6
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <dshot_prepare_dmabuffer_all+0x60>)
 8000bca:	f7ff ffb0 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor5_dmabuffer, motor_value[4]);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <dshot_prepare_dmabuffer_all+0x64>)
 8000bd8:	f7ff ffa9 	bl	8000b2e <dshot_prepare_dmabuffer>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000008c 	.word	0x2000008c
 8000be8:	200000d4 	.word	0x200000d4
 8000bec:	2000011c 	.word	0x2000011c
 8000bf0:	20000164 	.word	0x20000164
 8000bf4:	200001ac 	.word	0x200001ac

08000bf8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <dshot_dma_start+0x6c>)
 8000bfe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c00:	4919      	ldr	r1, [pc, #100]	; (8000c68 <dshot_dma_start+0x70>)
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	333c      	adds	r3, #60	; 0x3c
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	f002 fefe 	bl	8003a0c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <dshot_dma_start+0x74>)
 8000c12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c14:	4916      	ldr	r1, [pc, #88]	; (8000c70 <dshot_dma_start+0x78>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <dshot_dma_start+0x74>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2312      	movs	r3, #18
 8000c20:	f002 fef4 	bl	8003a0c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c28:	4913      	ldr	r1, [pc, #76]	; (8000c78 <dshot_dma_start+0x80>)
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3334      	adds	r3, #52	; 0x34
 8000c30:	461a      	mov	r2, r3
 8000c32:	2312      	movs	r3, #18
 8000c34:	f002 feea 	bl	8003a0c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <dshot_dma_start+0x74>)
 8000c3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c3c:	490f      	ldr	r1, [pc, #60]	; (8000c7c <dshot_dma_start+0x84>)
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <dshot_dma_start+0x74>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3334      	adds	r3, #52	; 0x34
 8000c44:	461a      	mov	r2, r3
 8000c46:	2312      	movs	r3, #18
 8000c48:	f002 fee0 	bl	8003a0c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID], (uint32_t)motor5_dmabuffer, (uint32_t)&MOTOR_5_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c50:	490b      	ldr	r1, [pc, #44]	; (8000c80 <dshot_dma_start+0x88>)
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3334      	adds	r3, #52	; 0x34
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f002 fed6 	bl	8003a0c <HAL_DMA_Start_IT>

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000328 	.word	0x20000328
 8000c68:	2000008c 	.word	0x2000008c
 8000c6c:	20000374 	.word	0x20000374
 8000c70:	200000d4 	.word	0x200000d4
 8000c74:	200002dc 	.word	0x200002dc
 8000c78:	2000011c 	.word	0x2000011c
 8000c7c:	20000164 	.word	0x20000164
 8000c80:	200001ac 	.word	0x200001ac

08000c84 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, MOTOR_1_TIM_DMA);
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c96:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, MOTOR_2_TIM_DMA);
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ca6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, MOTOR_3_TIM_DMA);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, MOTOR_4_TIM_DMA);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_5_TIM, MOTOR_5_TIM_DMA);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd6:	60da      	str	r2, [r3, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000328 	.word	0x20000328
 8000ce8:	20000374 	.word	0x20000374
 8000cec:	200002dc 	.word	0x200002dc

08000cf0 <HAL_UART_RxCpltCallback>:
//Partie D-Shot
uint16_t my_motor_value[5] = {0, 0, 0, 0, 0};

//Partie UART en interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	res1=HAL_UART_Receive_IT(&huart2, &command_buffer, 1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4906      	ldr	r1, [pc, #24]	; (8000d14 <HAL_UART_RxCpltCallback+0x24>)
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <HAL_UART_RxCpltCallback+0x28>)
 8000cfe:	f006 fb85 	bl	800740c <HAL_UART_Receive_IT>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_UART_RxCpltCallback+0x2c>)
 8000d08:	701a      	strb	r2, [r3, #0]

}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000208 	.word	0x20000208
 8000d18:	20000560 	.word	0x20000560
 8000d1c:	2000020e 	.word	0x2000020e

08000d20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b098      	sub	sp, #96	; 0x60
 8000d24:	af02      	add	r7, sp, #8

	//partie Capteur de Pression
	//modèle : 2513130810401
	float pressure_val;
	//SENP:  Pressure sensor sensitivity : 4.196 ×10-2
	float SENP = 0.04196;
 8000d26:	4bb8      	ldr	r3, [pc, #736]	; (8001008 <main+0x2e8>)
 8000d28:	647b      	str	r3, [r7, #68]	; 0x44
	//PMIN: Min Pressure output : -100 kPa
	int Pmin = -100;
 8000d2a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
	//OUTP_MIN: digital output at Pmin = 3277
	float OUT_Pmin = 3277;
 8000d30:	4bb6      	ldr	r3, [pc, #728]	; (800100c <main+0x2ec>)
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
	//P15bit = PH & PL
	float P15bit;
	//tableaux des 100 dernières valeurs de pression, toutes les valeurs initialisées à 0
	uint8_t pressures[PRESSURES_SIZE] = {0};
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	809a      	strh	r2, [r3, #4]
	//valeur pour remplir le tableau des valeurs de pressions avant de calculer la moyennes des pressions
	uint32_t pressures_mean = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	657b      	str	r3, [r7, #84]	; 0x54

	// explication de la conversion des valeurs de l'ADC en température
	// dans le fichier "Equation_Sonde_PT100, il y a 2 courbes, ces coeffs sont respectivement les pentes et les ordonnées à l'origine
	// raw = valeur numérique renvoyée par l'ADC
	// méthode de calibration sonde PT100 : mesure resistance et raw à 22°   &   mesure resistance et raw à 100° (pistolet à air chaud devant la PT100)
	float raw_to_res_mult = 0.0393;
 8000d46:	4bb2      	ldr	r3, [pc, #712]	; (8001010 <main+0x2f0>)
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
	float raw_to_res_offset = -2.47;
 8000d4a:	4bb2      	ldr	r3, [pc, #712]	; (8001014 <main+0x2f4>)
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
	float res_to_temp_mult = -0.74;
 8000d4e:	4bb2      	ldr	r3, [pc, #712]	; (8001018 <main+0x2f8>)
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
	float res_to_temp_offset = 104;
 8000d52:	4bb2      	ldr	r3, [pc, #712]	; (800101c <main+0x2fc>)
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Partie Arrêt d'urgence
	uint8_t AU_Current_Status = GPIO_PIN_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t AU_Old_Status = GPIO_PIN_RESET;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d62:	f001 fc01 	bl	8002568 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d66:	f000 fbdf 	bl	8001528 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d6a:	f000 ff1d 	bl	8001ba8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d6e:	f000 fedd 	bl	8001b2c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000d72:	f000 feab 	bl	8001acc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000d76:	f000 fda9 	bl	80018cc <MX_TIM2_Init>
	MX_TIM6_Init();
 8000d7a:	f000 fe71 	bl	8001a60 <MX_TIM6_Init>
	MX_TIM3_Init();
 8000d7e:	f000 fe09 	bl	8001994 <MX_TIM3_Init>
	MX_TIM1_Init();
 8000d82:	f000 fd13 	bl	80017ac <MX_TIM1_Init>
	MX_I2C1_Init();
 8000d86:	f000 fcd1 	bl	800172c <MX_I2C1_Init>
	MX_CAN_Init();
 8000d8a:	f000 fc9b 	bl	80016c4 <MX_CAN_Init>
	MX_ADC1_Init();
 8000d8e:	f000 fc29 	bl	80015e4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	dshot_init(DSHOT_SPEED);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fd4e 	bl	8000834 <dshot_init>
	//Initialization Des ESC des moteurs ET TOUT LE RESTE
	my_motor_value[0] = 0;
 8000d98:	4ba1      	ldr	r3, [pc, #644]	; (8001020 <main+0x300>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	801a      	strh	r2, [r3, #0]
	my_motor_value[1] = 0;
 8000d9e:	4ba0      	ldr	r3, [pc, #640]	; (8001020 <main+0x300>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	805a      	strh	r2, [r3, #2]
	my_motor_value[2] = 0;
 8000da4:	4b9e      	ldr	r3, [pc, #632]	; (8001020 <main+0x300>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	809a      	strh	r2, [r3, #4]
	my_motor_value[3] = 0;
 8000daa:	4b9d      	ldr	r3, [pc, #628]	; (8001020 <main+0x300>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	80da      	strh	r2, [r3, #6]
	my_motor_value[4] = 0;
 8000db0:	4b9b      	ldr	r3, [pc, #620]	; (8001020 <main+0x300>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f003 f977 	bl	80040b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2110      	movs	r1, #16
 8000dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dca:	f003 f971 	bl	80040b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2108      	movs	r1, #8
 8000dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd6:	f003 f96b 	bl	80040b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4891      	ldr	r0, [pc, #580]	; (8001024 <main+0x304>)
 8000de0:	f003 f966 	bl	80040b0 <HAL_GPIO_WritePin>
	//start to count (for tim6 interruption)
	HAL_TIM_Base_Start_IT(&htim6);
 8000de4:	4890      	ldr	r0, [pc, #576]	; (8001028 <main+0x308>)
 8000de6:	f005 f9f5 	bl	80061d4 <HAL_TIM_Base_Start_IT>
	//a peu près temps minimal de delay pour laisser le temps aux moteurs de s'initialiser
	HAL_Delay(2600);
 8000dea:	f640 2028 	movw	r0, #2600	; 0xa28
 8000dee:	f001 fc21 	bl	8002634 <HAL_Delay>
	//On lance l'interruption sur l'UART2, à relancer dans le callback !
	res1=HAL_UART_Receive_IT(&huart2, &command_buffer, 1);
 8000df2:	2201      	movs	r2, #1
 8000df4:	498d      	ldr	r1, [pc, #564]	; (800102c <main+0x30c>)
 8000df6:	488e      	ldr	r0, [pc, #568]	; (8001030 <main+0x310>)
 8000df8:	f006 fb08 	bl	800740c <HAL_UART_Receive_IT>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b8c      	ldr	r3, [pc, #560]	; (8001034 <main+0x314>)
 8000e02:	701a      	strb	r2, [r3, #0]

	command_hist = malloc(sizeof(Node));
 8000e04:	2008      	movs	r0, #8
 8000e06:	f007 fc79 	bl	80086fc <malloc>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b8a      	ldr	r3, [pc, #552]	; (8001038 <main+0x318>)
 8000e10:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//Partie AU : récupération du state de l'AU
		AU_Current_Status = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 8000e12:	2102      	movs	r1, #2
 8000e14:	4883      	ldr	r0, [pc, #524]	; (8001024 <main+0x304>)
 8000e16:	f003 f933 	bl	8004080 <HAL_GPIO_ReadPin>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		//res1=HAL_UART_Receive(&huart2, &command_buffer, 1, 100);

		//Partie Reset_small : Reset de tout lorsque l'AU repasse à l'état haut (non coupé) alors qu'il était à l'état bas (coupé) juste avant
		if ((AU_Current_Status == GPIO_PIN_RESET) && AU_Old_Status == GPIO_PIN_SET){
 8000e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d140      	bne.n	8000eaa <main+0x18a>
 8000e28:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d13c      	bne.n	8000eaa <main+0x18a>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000e30:	4b7b      	ldr	r3, [pc, #492]	; (8001020 <main+0x300>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000e36:	4b7a      	ldr	r3, [pc, #488]	; (8001020 <main+0x300>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000e3c:	4b78      	ldr	r3, [pc, #480]	; (8001020 <main+0x300>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000e42:	4b77      	ldr	r3, [pc, #476]	; (8001020 <main+0x300>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000e48:	4b75      	ldr	r3, [pc, #468]	; (8001020 <main+0x300>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	811a      	strh	r2, [r3, #8]
			HAL_Delay(2600);
 8000e4e:	f640 2028 	movw	r0, #2600	; 0xa28
 8000e52:	f001 fbef 	bl	8002634 <HAL_Delay>
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f003 f927 	bl	80040b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2110      	movs	r1, #16
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f003 f921 	bl	80040b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2108      	movs	r1, #8
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f003 f91b 	bl	80040b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4869      	ldr	r0, [pc, #420]	; (8001024 <main+0x304>)
 8000e80:	f003 f916 	bl	80040b0 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2120      	movs	r1, #32
 8000e88:	486c      	ldr	r0, [pc, #432]	; (800103c <main+0x31c>)
 8000e8a:	f003 f911 	bl	80040b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2110      	movs	r1, #16
 8000e92:	486a      	ldr	r0, [pc, #424]	; (800103c <main+0x31c>)
 8000e94:	f003 f90c 	bl	80040b0 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000e98:	4b69      	ldr	r3, [pc, #420]	; (8001040 <main+0x320>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			//reset le timer de purge
			BAU_tick = 0;
 8000e9e:	4b69      	ldr	r3, [pc, #420]	; (8001044 <main+0x324>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8000ea4:	4b68      	ldr	r3, [pc, #416]	; (8001048 <main+0x328>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
		}

		//Partie Reset_Full : Si l'AU passe à l'état bas (coupé) alors qu'il était à l'état haut (non coupé), reset tout et lancer un timer de 2 minutes, au bout duquel on purge !
		if (AU_Current_Status == GPIO_PIN_SET && AU_Old_Status == GPIO_PIN_RESET){
 8000eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d139      	bne.n	8000f26 <main+0x206>
 8000eb2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d135      	bne.n	8000f26 <main+0x206>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000eba:	4b59      	ldr	r3, [pc, #356]	; (8001020 <main+0x300>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000ec0:	4b57      	ldr	r3, [pc, #348]	; (8001020 <main+0x300>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000ec6:	4b56      	ldr	r3, [pc, #344]	; (8001020 <main+0x300>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000ecc:	4b54      	ldr	r3, [pc, #336]	; (8001020 <main+0x300>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000ed2:	4b53      	ldr	r3, [pc, #332]	; (8001020 <main+0x300>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	811a      	strh	r2, [r3, #8]
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f003 f8e6 	bl	80040b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f003 f8e0 	bl	80040b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2108      	movs	r1, #8
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef8:	f003 f8da 	bl	80040b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2101      	movs	r1, #1
 8000f00:	4848      	ldr	r0, [pc, #288]	; (8001024 <main+0x304>)
 8000f02:	f003 f8d5 	bl	80040b0 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	484c      	ldr	r0, [pc, #304]	; (800103c <main+0x31c>)
 8000f0c:	f003 f8d0 	bl	80040b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2110      	movs	r1, #16
 8000f14:	4849      	ldr	r0, [pc, #292]	; (800103c <main+0x31c>)
 8000f16:	f003 f8cb 	bl	80040b0 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000f1a:	4b49      	ldr	r3, [pc, #292]	; (8001040 <main+0x320>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
			// tempo de 2 min, puis purge
			BAU_tick_enable = 1;
 8000f20:	4b49      	ldr	r3, [pc, #292]	; (8001048 <main+0x328>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
		}
		//changer les valeurs des AU status
		AU_Old_Status = AU_Current_Status;
 8000f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f2a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

		//Lecture de la pression en I2C et activation OU NON du compresseur en fonction
		res2 = HAL_I2C_Master_Receive(&hi2c1, 0xf1, I2C_buf, 4, 200);
 8000f2e:	f107 0214 	add.w	r2, r7, #20
 8000f32:	23c8      	movs	r3, #200	; 0xc8
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2304      	movs	r3, #4
 8000f38:	21f1      	movs	r1, #241	; 0xf1
 8000f3a:	4844      	ldr	r0, [pc, #272]	; (800104c <main+0x32c>)
 8000f3c:	f003 f960 	bl	8004200 <HAL_I2C_Master_Receive>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <main+0x330>)
 8000f46:	701a      	strb	r2, [r3, #0]
		if (res2 == HAL_OK){
 8000f48:	4b41      	ldr	r3, [pc, #260]	; (8001050 <main+0x330>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f040 80b5 	bne.w	80010bc <main+0x39c>
			//sprintf((char*)p_buf, "I2C : %d %d %d %d\r\n", (int)I2C_buf[0], (int)I2C_buf[1], (int)I2C_buf[2], (int)I2C_buf[3]);
			//HAL_UART_Receive(&huart2, p_buf, 4, 100);

			//Calcul de la pression en 10èmes de bar RELATIFS
			//voir infos_pressure_sensor plus haut pour infos sur variables
			P15bit = (int)((I2C_buf[0] << 8)|I2C_buf[1]);
 8000f52:	7d3b      	ldrb	r3, [r7, #20]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	7d7a      	ldrb	r2, [r7, #21]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f62:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			//formule d'après la datasheet du capteur : pressure_val = [(P15bit - OUTP_MIN)*SENP)] + PMIN;
			//Conversion en 10èmes de bar à la fin
			pressure_val = P15bit - OUT_Pmin; //2383
 8000f66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f72:	edc7 7a08 	vstr	s15, [r7, #32]
			pressure_val = pressure_val*SENP; //99.99068
 8000f76:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f82:	edc7 7a08 	vstr	s15, [r7, #32]
			pressure_val = pressure_val + Pmin; // -0,00932
 8000f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f90:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f98:	edc7 7a08 	vstr	s15, [r7, #32]
			pressure_val = pressure_val * 0.1; // -0,000932
 8000f9c:	6a38      	ldr	r0, [r7, #32]
 8000f9e:	f7ff fba1 	bl	80006e4 <__aeabi_f2d>
 8000fa2:	a317      	add	r3, pc, #92	; (adr r3, 8001000 <main+0x2e0>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff f90e 	bl	80001c8 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff fbee 	bl	8000794 <__aeabi_d2f>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	623b      	str	r3, [r7, #32]
			//	pressures[pressures_full_counter] = (int)pressure_val;
			//}
			//dès qu'il est plein, on calcule la moyenne du tableau renouvelé
			//on décale tout le tableau vers la droite, en faisant donc disparaître la valeur la plus ancienne

			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fc0:	e010      	b.n	8000fe4 <main+0x2c4>
				pressures[i] = pressures[i-1];
 8000fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	3350      	adds	r3, #80	; 0x50
 8000fc8:	f107 0208 	add.w	r2, r7, #8
 8000fcc:	4413      	add	r3, r2
 8000fce:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 8000fd2:	f107 0208 	add.w	r2, r7, #8
 8000fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fd8:	4413      	add	r3, r2
 8000fda:	460a      	mov	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8000fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dceb      	bgt.n	8000fc2 <main+0x2a2>
			}
			//On ajoute la nouvelle valeure
			pressures[0] = (int)pressure_val;
 8000fea:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	723b      	strb	r3, [r7, #8]

			//puis on fait la moyenne des pressions
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ffe:	e035      	b.n	800106c <main+0x34c>
 8001000:	9999999a 	.word	0x9999999a
 8001004:	3fb99999 	.word	0x3fb99999
 8001008:	3d2bde40 	.word	0x3d2bde40
 800100c:	454cd000 	.word	0x454cd000
 8001010:	3d20f909 	.word	0x3d20f909
 8001014:	c01e147b 	.word	0xc01e147b
 8001018:	bf3d70a4 	.word	0xbf3d70a4
 800101c:	42d00000 	.word	0x42d00000
 8001020:	200005e8 	.word	0x200005e8
 8001024:	48001400 	.word	0x48001400
 8001028:	200003c0 	.word	0x200003c0
 800102c:	20000208 	.word	0x20000208
 8001030:	20000560 	.word	0x20000560
 8001034:	2000020e 	.word	0x2000020e
 8001038:	20000204 	.word	0x20000204
 800103c:	48000400 	.word	0x48000400
 8001040:	200001f9 	.word	0x200001f9
 8001044:	200001fc 	.word	0x200001fc
 8001048:	20000200 	.word	0x20000200
 800104c:	20000288 	.word	0x20000288
 8001050:	2000020f 	.word	0x2000020f
				pressures_mean+=pressures[i];
 8001054:	f107 0208 	add.w	r2, r7, #8
 8001058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001062:	4413      	add	r3, r2
 8001064:	657b      	str	r3, [r7, #84]	; 0x54
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8001066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001068:	3301      	adds	r3, #1
 800106a:	64bb      	str	r3, [r7, #72]	; 0x48
 800106c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800106e:	2b09      	cmp	r3, #9
 8001070:	ddf0      	ble.n	8001054 <main+0x334>
			}
			pressures_mean/=PRESSURES_SIZE;
 8001072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001074:	4aa3      	ldr	r2, [pc, #652]	; (8001304 <main+0x5e4>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	657b      	str	r3, [r7, #84]	; 0x54

			if (pressures_mean > (Press_order)){ // arrêter compresseur si dépassement de la pression de consigne
 800107e:	4ba2      	ldr	r3, [pc, #648]	; (8001308 <main+0x5e8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001086:	4293      	cmp	r3, r2
 8001088:	d903      	bls.n	8001092 <main+0x372>
				my_motor_value[4] = 0;
 800108a:	4ba0      	ldr	r3, [pc, #640]	; (800130c <main+0x5ec>)
 800108c:	2200      	movs	r2, #0
 800108e:	811a      	strh	r2, [r3, #8]
 8001090:	e012      	b.n	80010b8 <main+0x398>
			}
			else if (pressures_mean < (Press_order - 2)) { // démarrage compresseur avec hysteresis de 0.4 bar
 8001092:	4b9d      	ldr	r3, [pc, #628]	; (8001308 <main+0x5e8>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	3b02      	subs	r3, #2
 8001098:	461a      	mov	r2, r3
 800109a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800109c:	4293      	cmp	r3, r2
 800109e:	d20b      	bcs.n	80010b8 <main+0x398>
				if(Press_order <= 0 && COMPRESSOR_ENABLE){}
 80010a0:	4b99      	ldr	r3, [pc, #612]	; (8001308 <main+0x5e8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d103      	bne.n	80010b0 <main+0x390>
 80010a8:	4b99      	ldr	r3, [pc, #612]	; (8001310 <main+0x5f0>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d103      	bne.n	80010b8 <main+0x398>
				else {
					my_motor_value[4] = COMPRESSOR_SPEED;
 80010b0:	4b96      	ldr	r3, [pc, #600]	; (800130c <main+0x5ec>)
 80010b2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80010b6:	811a      	strh	r2, [r3, #8]
				}
			}
			else {}

			//on remet à 0 la moyenne des pressions
			pressures_mean = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	657b      	str	r3, [r7, #84]	; 0x54
		 */

		//Lecture Température du compresseur réservoir et activation ou désactivation du compresseur en fonction SSI il est pas déjà désactivé
		//#####A IMPLEMENTER : Lecture de la température en analogique sonde PT100#####
		//start an ADC conversion
		HAL_ADC_Start(&hadc1);
 80010bc:	4895      	ldr	r0, [pc, #596]	; (8001314 <main+0x5f4>)
 80010be:	f001 fc6f 	bl	80029a0 <HAL_ADC_Start>
		//processor waits for an ADC conversion to complete
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010c2:	f04f 31ff 	mov.w	r1, #4294967295
 80010c6:	4893      	ldr	r0, [pc, #588]	; (8001314 <main+0x5f4>)
 80010c8:	f001 fd20 	bl	8002b0c <HAL_ADC_PollForConversion>
		//get raw value from the ADC channel register
		raw = HAL_ADC_GetValue(&hadc1);
 80010cc:	4891      	ldr	r0, [pc, #580]	; (8001314 <main+0x5f4>)
 80010ce:	f001 fdeb 	bl	8002ca8 <HAL_ADC_GetValue>
 80010d2:	4603      	mov	r3, r0
 80010d4:	83fb      	strh	r3, [r7, #30]

		//get temperature value from raw value (100-Ohm = 0°C, 375-Ohm = 800°C)
		//first : conversion from raw value to resistance value : 2790=>112 kOhm, 90=>6 kOhm
		//then : conversion from resistance value to temperature value :  112 kOhm=>22 °c, 6 kOhm=>100°c
		compr_temp = res_to_temp_mult * (raw_to_res_mult * raw + raw_to_res_offset) + res_to_temp_offset;
 80010d6:	8bfb      	ldrh	r3, [r7, #30]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80010e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	edc7 7a06 	vstr	s15, [r7, #24]
			my_motor_value[4] = 0;
			return_buffer[1]|=128;
		}
		 */

		if(res1 == HAL_OK){
 8001104:	4b84      	ldr	r3, [pc, #528]	; (8001318 <main+0x5f8>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 81f7 	bne.w	80014fc <main+0x7dc>
			//Notifier a la Rpi la bonne reception du mot de commande
			return_buffer[0]|= 1;
 800110e:	4b83      	ldr	r3, [pc, #524]	; (800131c <main+0x5fc>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b80      	ldr	r3, [pc, #512]	; (800131c <main+0x5fc>)
 800111a:	701a      	strb	r2, [r3, #0]
			//Retourner les infos a la Rpi !
			HAL_UART_Transmit(&huart2, return_buffer, 1, 100);
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	2201      	movs	r2, #1
 8001120:	497e      	ldr	r1, [pc, #504]	; (800131c <main+0x5fc>)
 8001122:	487f      	ldr	r0, [pc, #508]	; (8001320 <main+0x600>)
 8001124:	f006 f8e8 	bl	80072f8 <HAL_UART_Transmit>
			switch(command_buffer >> 6){
 8001128:	4b7e      	ldr	r3, [pc, #504]	; (8001324 <main+0x604>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	099b      	lsrs	r3, r3, #6
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b03      	cmp	r3, #3
 8001132:	f200 81e8 	bhi.w	8001506 <main+0x7e6>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <main+0x41c>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	080011e9 	.word	0x080011e9
 8001144:	080012c9 	.word	0x080012c9
 8001148:	08001349 	.word	0x08001349
			case 0:
				//Mode 1 [00000001] : Reset nucleo: arrêt de TOUT
				if (command_buffer == 1){
 800114c:	4b75      	ldr	r3, [pc, #468]	; (8001324 <main+0x604>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d130      	bne.n	80011b6 <main+0x496>
					// arrêt moteurs (compr, canons, turbine)
					my_motor_value[0] = 0;
 8001154:	4b6d      	ldr	r3, [pc, #436]	; (800130c <main+0x5ec>)
 8001156:	2200      	movs	r2, #0
 8001158:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 800115a:	4b6c      	ldr	r3, [pc, #432]	; (800130c <main+0x5ec>)
 800115c:	2200      	movs	r2, #0
 800115e:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 8001160:	4b6a      	ldr	r3, [pc, #424]	; (800130c <main+0x5ec>)
 8001162:	2200      	movs	r2, #0
 8001164:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 8001166:	4b69      	ldr	r3, [pc, #420]	; (800130c <main+0x5ec>)
 8001168:	2200      	movs	r2, #0
 800116a:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 800116c:	4b67      	ldr	r3, [pc, #412]	; (800130c <main+0x5ec>)
 800116e:	2200      	movs	r2, #0
 8001170:	811a      	strh	r2, [r3, #8]
					// arrêt EV 1, 2, 3 et Purge
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117a:	f002 ff99 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2110      	movs	r1, #16
 8001182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001186:	f002 ff93 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2108      	movs	r1, #8
 800118e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001192:	f002 ff8d 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2101      	movs	r1, #1
 800119a:	4863      	ldr	r0, [pc, #396]	; (8001328 <main+0x608>)
 800119c:	f002 ff88 	bl	80040b0 <HAL_GPIO_WritePin>
					// arrêt LCD et LED Enable
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4861      	ldr	r0, [pc, #388]	; (800132c <main+0x60c>)
 80011a6:	f002 ff83 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2110      	movs	r1, #16
 80011ae:	485f      	ldr	r0, [pc, #380]	; (800132c <main+0x60c>)
 80011b0:	f002 ff7e 	bl	80040b0 <HAL_GPIO_WritePin>
					my_motor_value[3] = 0;
					my_motor_value[4] = 0;
					HAL_Delay(2600);
				}

				break;
 80011b4:	e1a4      	b.n	8001500 <main+0x7e0>
				else if (command_buffer == 2){
 80011b6:	4b5b      	ldr	r3, [pc, #364]	; (8001324 <main+0x604>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	f040 81a0 	bne.w	8001500 <main+0x7e0>
					my_motor_value[0] = 0;
 80011c0:	4b52      	ldr	r3, [pc, #328]	; (800130c <main+0x5ec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <main+0x5ec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <main+0x5ec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <main+0x5ec>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 80011d8:	4b4c      	ldr	r3, [pc, #304]	; (800130c <main+0x5ec>)
 80011da:	2200      	movs	r2, #0
 80011dc:	811a      	strh	r2, [r3, #8]
					HAL_Delay(2600);
 80011de:	f640 2028 	movw	r0, #2600	; 0xa28
 80011e2:	f001 fa27 	bl	8002634 <HAL_Delay>
				break;
 80011e6:	e18b      	b.n	8001500 <main+0x7e0>
			case 1:
				//Mode 2 [01]: Canons
				//ordre des canons : left=1 - right=2 - top=3
				//écriture dans le moteur 1 (left)
				if ((command_buffer & 48) >> 4 == 0){
 80011e8:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <main+0x604>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	111b      	asrs	r3, r3, #4
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <main+0x4de>
					my_motor_value[0] = 0;
 80011f6:	4b45      	ldr	r3, [pc, #276]	; (800130c <main+0x5ec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	e01a      	b.n	8001234 <main+0x514>
				}
				else if ((command_buffer & 48) >> 4 == 1){
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <main+0x604>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	111b      	asrs	r3, r3, #4
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b01      	cmp	r3, #1
 800120a:	d103      	bne.n	8001214 <main+0x4f4>
					my_motor_value[0] = CANONS_SPEED_1;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <main+0x5ec>)
 800120e:	2264      	movs	r2, #100	; 0x64
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	e00f      	b.n	8001234 <main+0x514>
				}
				else if ((command_buffer & 48) >> 4 == 2){
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <main+0x604>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	111b      	asrs	r3, r3, #4
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d104      	bne.n	800122c <main+0x50c>
					my_motor_value[0] = CANONS_SPEED_2;
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <main+0x5ec>)
 8001224:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001228:	801a      	strh	r2, [r3, #0]
 800122a:	e003      	b.n	8001234 <main+0x514>
				}
				else{
					my_motor_value[0] = CANONS_SPEED_3;
 800122c:	4b37      	ldr	r3, [pc, #220]	; (800130c <main+0x5ec>)
 800122e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001232:	801a      	strh	r2, [r3, #0]
				}

				//écriture dans le moteur 2 (right)
				if ((command_buffer & 12) >> 2 == 0){
 8001234:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <main+0x604>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	109b      	asrs	r3, r3, #2
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d103      	bne.n	800124a <main+0x52a>
					my_motor_value[1] = 0;
 8001242:	4b32      	ldr	r3, [pc, #200]	; (800130c <main+0x5ec>)
 8001244:	2200      	movs	r2, #0
 8001246:	805a      	strh	r2, [r3, #2]
 8001248:	e01a      	b.n	8001280 <main+0x560>
				}
				else if ((command_buffer & 12) >> 2 == 1){
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <main+0x604>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	109b      	asrs	r3, r3, #2
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b01      	cmp	r3, #1
 8001256:	d103      	bne.n	8001260 <main+0x540>
					my_motor_value[1] = CANONS_SPEED_1;
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <main+0x5ec>)
 800125a:	2264      	movs	r2, #100	; 0x64
 800125c:	805a      	strh	r2, [r3, #2]
 800125e:	e00f      	b.n	8001280 <main+0x560>
				}
				else if ((command_buffer & 12) >> 2 == 2){
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <main+0x604>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	109b      	asrs	r3, r3, #2
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d104      	bne.n	8001278 <main+0x558>
					my_motor_value[1] = CANONS_SPEED_2;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <main+0x5ec>)
 8001270:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001274:	805a      	strh	r2, [r3, #2]
 8001276:	e003      	b.n	8001280 <main+0x560>
				}
				else{
					my_motor_value[1] = CANONS_SPEED_3;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <main+0x5ec>)
 800127a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800127e:	805a      	strh	r2, [r3, #2]
				}

				//écriture dans le moteur 3 (top)
				if ((command_buffer & 3) == 0){
 8001280:	4b28      	ldr	r3, [pc, #160]	; (8001324 <main+0x604>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d103      	bne.n	8001294 <main+0x574>
					my_motor_value[2] = 0;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <main+0x5ec>)
 800128e:	2200      	movs	r2, #0
 8001290:	809a      	strh	r2, [r3, #4]
				else{
					my_motor_value[2] = CANONS_SPEED_3;
				}


				break;
 8001292:	e138      	b.n	8001506 <main+0x7e6>
				else if ((command_buffer & 3) == 1){
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <main+0x604>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d103      	bne.n	80012a8 <main+0x588>
					my_motor_value[2] = CANONS_SPEED_1;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <main+0x5ec>)
 80012a2:	2264      	movs	r2, #100	; 0x64
 80012a4:	809a      	strh	r2, [r3, #4]
				break;
 80012a6:	e12e      	b.n	8001506 <main+0x7e6>
				else if ((command_buffer & 3) == 2){
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <main+0x604>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d104      	bne.n	80012be <main+0x59e>
					my_motor_value[2] = CANONS_SPEED_2;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <main+0x5ec>)
 80012b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012ba:	809a      	strh	r2, [r3, #4]
				break;
 80012bc:	e123      	b.n	8001506 <main+0x7e6>
					my_motor_value[2] = CANONS_SPEED_3;
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <main+0x5ec>)
 80012c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012c4:	809a      	strh	r2, [r3, #4]
				break;
 80012c6:	e11e      	b.n	8001506 <main+0x7e6>
			case 2:
				//Mode 3 [10]: Compresseur / INIT
				//[10000001] : arrêt Compresseur + Consigne Pression => 0 + Purge EV4
				if ((command_buffer ^ 129) <= 1){
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <main+0x604>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80012d0:	43db      	mvns	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d82b      	bhi.n	8001330 <main+0x610>
					my_motor_value[4] = 0;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <main+0x5ec>)
 80012da:	2200      	movs	r2, #0
 80012dc:	811a      	strh	r2, [r3, #8]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, command_buffer ^ 128);
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <main+0x604>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80012e6:	43db      	mvns	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	2101      	movs	r1, #1
 80012ee:	480e      	ldr	r0, [pc, #56]	; (8001328 <main+0x608>)
 80012f0:	f002 fede 	bl	80040b0 <HAL_GPIO_WritePin>
					Press_order = 0;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <main+0x5e8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
					COMPRESSOR_ENABLE = 0;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <main+0x5f0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
					//[10PPPPPP] : Val de consigne Pression, à récup SSI différente pour régulation au prochain tour de boucle
					Press_order = command_buffer ^ (2 << 6);
					COMPRESSOR_ENABLE = 1;
				}

				break;
 8001300:	e101      	b.n	8001506 <main+0x7e6>
 8001302:	bf00      	nop
 8001304:	cccccccd 	.word	0xcccccccd
 8001308:	200001f9 	.word	0x200001f9
 800130c:	200005e8 	.word	0x200005e8
 8001310:	200001f8 	.word	0x200001f8
 8001314:	20000210 	.word	0x20000210
 8001318:	2000020e 	.word	0x2000020e
 800131c:	2000020c 	.word	0x2000020c
 8001320:	20000560 	.word	0x20000560
 8001324:	20000208 	.word	0x20000208
 8001328:	48001400 	.word	0x48001400
 800132c:	48000400 	.word	0x48000400
					Press_order = command_buffer ^ (2 << 6);
 8001330:	4b77      	ldr	r3, [pc, #476]	; (8001510 <main+0x7f0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8001338:	43db      	mvns	r3, r3
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b75      	ldr	r3, [pc, #468]	; (8001514 <main+0x7f4>)
 800133e:	701a      	strb	r2, [r3, #0]
					COMPRESSOR_ENABLE = 1;
 8001340:	4b75      	ldr	r3, [pc, #468]	; (8001518 <main+0x7f8>)
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
				break;
 8001346:	e0de      	b.n	8001506 <main+0x7e6>
			case 3:
				//Mode 4 [11]: electrovannes OU LED OU Turbine OU LCD
				//cas 1 : Electrovannes
				if ((command_buffer & 240) >> 4 == 12){
 8001348:	4b71      	ldr	r3, [pc, #452]	; (8001510 <main+0x7f0>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b0c      	cmp	r3, #12
 8001352:	d130      	bne.n	80013b6 <main+0x696>
					//4*1 bits(ABCE) pour les EV (ordre du code : A: EV1<->PA7, B: EV2<->PA4, C: EV3<->PA3, E: EV_Purge<->PF0)
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, (command_buffer & 0x08) >> 3);
 8001354:	4b6e      	ldr	r3, [pc, #440]	; (8001510 <main+0x7f0>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	10db      	asrs	r3, r3, #3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f002 fea1 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, (command_buffer & 0x04) >> 2);
 800136e:	4b68      	ldr	r3, [pc, #416]	; (8001510 <main+0x7f0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	109b      	asrs	r3, r3, #2
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	461a      	mov	r2, r3
 800137e:	2110      	movs	r1, #16
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f002 fe94 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, (command_buffer & 0x02) >> 1);
 8001388:	4b61      	ldr	r3, [pc, #388]	; (8001510 <main+0x7f0>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	105b      	asrs	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	2108      	movs	r1, #8
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f002 fe87 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOF, GPIO_PIN_0, command_buffer & 0x01);
 80013a2:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <main+0x7f0>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	2101      	movs	r1, #1
 80013b0:	485a      	ldr	r0, [pc, #360]	; (800151c <main+0x7fc>)
 80013b2:	f002 fe7d 	bl	80040b0 <HAL_GPIO_WritePin>
				}

				//cas 2 : EV-Pulse [1101000Z] => [0] : rien, [1] pulse ON-OFF-ON 1*, avec intervalle t-pulse_OFF
				if ((command_buffer & 240) >> 4 == 13){
 80013b6:	4b56      	ldr	r3, [pc, #344]	; (8001510 <main+0x7f0>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b0d      	cmp	r3, #13
 80013c0:	d157      	bne.n	8001472 <main+0x752>

					//Pulse EV 1
					if ((command_buffer & 8) >> 3 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 80013c2:	4b53      	ldr	r3, [pc, #332]	; (8001510 <main+0x7f0>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d016      	beq.n	80013fc <main+0x6dc>
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f002 fe54 	bl	8004080 <HAL_GPIO_ReadPin>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00e      	beq.n	80013fc <main+0x6dc>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e6:	f002 fe63 	bl	80040b0 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 80013ea:	2096      	movs	r0, #150	; 0x96
 80013ec:	f001 f922 	bl	8002634 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f002 fe5a 	bl	80040b0 <HAL_GPIO_WritePin>
					}
					//Pulse EV 2
					if ((command_buffer & 4) >> 2 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <main+0x7f0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d016      	beq.n	8001436 <main+0x716>
 8001408:	2110      	movs	r1, #16
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f002 fe37 	bl	8004080 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00e      	beq.n	8001436 <main+0x716>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2110      	movs	r1, #16
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f002 fe46 	bl	80040b0 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 8001424:	2096      	movs	r0, #150	; 0x96
 8001426:	f001 f905 	bl	8002634 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2110      	movs	r1, #16
 800142e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001432:	f002 fe3d 	bl	80040b0 <HAL_GPIO_WritePin>
					}
					//Pulse EV 3
					if ((command_buffer & 2) >> 1 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <main+0x7f0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d060      	beq.n	8001504 <main+0x7e4>
 8001442:	2108      	movs	r1, #8
 8001444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001448:	f002 fe1a 	bl	8004080 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d058      	beq.n	8001504 <main+0x7e4>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2108      	movs	r1, #8
 8001456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145a:	f002 fe29 	bl	80040b0 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 800145e:	2096      	movs	r0, #150	; 0x96
 8001460:	f001 f8e8 	bl	8002634 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2108      	movs	r1, #8
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f002 fe20 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command_buffer & 2);

					//LED
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command_buffer & 1);
				}
				break;
 8001470:	e048      	b.n	8001504 <main+0x7e4>
				else if ((command_buffer & 240) >> 4 == 14){
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <main+0x7f0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b0e      	cmp	r3, #14
 800147c:	d123      	bne.n	80014c6 <main+0x7a6>
					if ((command_buffer & 3) == 0){
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <main+0x7f0>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <main+0x772>
						my_motor_value[3] = 0;
 800148a:	4b25      	ldr	r3, [pc, #148]	; (8001520 <main+0x800>)
 800148c:	2200      	movs	r2, #0
 800148e:	80da      	strh	r2, [r3, #6]
				break;
 8001490:	e038      	b.n	8001504 <main+0x7e4>
					else if ((command_buffer & 3) == 1){
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <main+0x7f0>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d103      	bne.n	80014a6 <main+0x786>
						my_motor_value[3] = TURBINE_SPEED_1;
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <main+0x800>)
 80014a0:	2264      	movs	r2, #100	; 0x64
 80014a2:	80da      	strh	r2, [r3, #6]
				break;
 80014a4:	e02e      	b.n	8001504 <main+0x7e4>
					else if ((command_buffer & 3) == 2){
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <main+0x7f0>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d104      	bne.n	80014bc <main+0x79c>
						my_motor_value[3] = TURBINE_SPEED_2;
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <main+0x800>)
 80014b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014b8:	80da      	strh	r2, [r3, #6]
				break;
 80014ba:	e023      	b.n	8001504 <main+0x7e4>
						my_motor_value[3] = TURBINE_SPEED_3;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <main+0x800>)
 80014be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014c2:	80da      	strh	r2, [r3, #6]
				break;
 80014c4:	e01e      	b.n	8001504 <main+0x7e4>
				else if ((command_buffer & 240) >> 4 == 15){
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <main+0x7f0>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	d118      	bne.n	8001504 <main+0x7e4>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command_buffer & 2);
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <main+0x7f0>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	2120      	movs	r1, #32
 80014e0:	4810      	ldr	r0, [pc, #64]	; (8001524 <main+0x804>)
 80014e2:	f002 fde5 	bl	80040b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command_buffer & 1);
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <main+0x7f0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	2110      	movs	r1, #16
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <main+0x804>)
 80014f6:	f002 fddb 	bl	80040b0 <HAL_GPIO_WritePin>
				break;
 80014fa:	e003      	b.n	8001504 <main+0x7e4>
			}
		}
 80014fc:	bf00      	nop
 80014fe:	e002      	b.n	8001506 <main+0x7e6>
				break;
 8001500:	bf00      	nop
 8001502:	e000      	b.n	8001506 <main+0x7e6>
				break;
 8001504:	bf00      	nop

		HAL_Delay(1);
 8001506:	2001      	movs	r0, #1
 8001508:	f001 f894 	bl	8002634 <HAL_Delay>
		AU_Current_Status = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 800150c:	e481      	b.n	8000e12 <main+0xf2>
 800150e:	bf00      	nop
 8001510:	20000208 	.word	0x20000208
 8001514:	200001f9 	.word	0x200001f9
 8001518:	200001f8 	.word	0x200001f8
 800151c:	48001400 	.word	0x48001400
 8001520:	200005e8 	.word	0x200005e8
 8001524:	48000400 	.word	0x48000400

08001528 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b096      	sub	sp, #88	; 0x58
 800152c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001532:	2228      	movs	r2, #40	; 0x28
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f007 f8e8 	bl	800870c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
 8001558:	611a      	str	r2, [r3, #16]
 800155a:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	2302      	movs	r3, #2
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001560:	2301      	movs	r3, #1
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001564:	2310      	movs	r3, #16
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001568:	2302      	movs	r3, #2
 800156a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800156c:	2300      	movs	r3, #0
 800156e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001570:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001574:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fa38 	bl	80049f0 <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8001586:	f000 fbc5 	bl	8001d14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158e:	2302      	movs	r3, #2
 8001590:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 fa61 	bl	8005a6c <HAL_RCC_ClockConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80015b0:	f000 fbb0 	bl	8001d14 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80015b4:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 80015b8:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	617b      	str	r3, [r7, #20]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fc84 	bl	8005ed8 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xb2>
	{
		Error_Handler();
 80015d6:	f000 fb9d 	bl	8001d14 <Error_Handler>
	}
}
 80015da:	bf00      	nop
 80015dc:	3758      	adds	r7, #88	; 0x58
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001608:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800160c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_ADC1_Init+0xdc>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001622:	2200      	movs	r2, #0
 8001624:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001636:	2201      	movs	r2, #1
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <MX_ADC1_Init+0xdc>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001642:	2201      	movs	r2, #1
 8001644:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001650:	2204      	movs	r2, #4
 8001652:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001656:	2200      	movs	r2, #0
 8001658:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_ADC1_Init+0xdc>)
 800165c:	2200      	movs	r2, #0
 800165e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001660:	4817      	ldr	r0, [pc, #92]	; (80016c0 <MX_ADC1_Init+0xdc>)
 8001662:	f001 f80b 	bl	800267c <HAL_ADC_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0x8c>
	{
		Error_Handler();
 800166c:	f000 fb52 	bl	8001d14 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4811      	ldr	r0, [pc, #68]	; (80016c0 <MX_ADC1_Init+0xdc>)
 800167c:	f001 fde2 	bl	8003244 <HAL_ADCEx_MultiModeConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 8001686:	f000 fb45 	bl	8001d14 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 800168a:	2301      	movs	r3, #1
 800168c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800168e:	2301      	movs	r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_ADC1_Init+0xdc>)
 80016a8:	f001 fb0c 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_ADC1_Init+0xd2>
	{
		Error_Handler();
 80016b2:	f000 fb2f 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000210 	.word	0x20000210

080016c4 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_CAN_Init+0x60>)
 80016ca:	4a17      	ldr	r2, [pc, #92]	; (8001728 <MX_CAN_Init+0x64>)
 80016cc:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_CAN_Init+0x60>)
 80016d0:	2210      	movs	r2, #16
 80016d2:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MX_CAN_Init+0x60>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_CAN_Init+0x60>)
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80016e0:	4b10      	ldr	r3, [pc, #64]	; (8001724 <MX_CAN_Init+0x60>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_CAN_Init+0x60>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80016ec:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <MX_CAN_Init+0x60>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_CAN_Init+0x60>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <MX_CAN_Init+0x60>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_CAN_Init+0x60>)
 8001700:	2200      	movs	r2, #0
 8001702:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001704:	4b07      	ldr	r3, [pc, #28]	; (8001724 <MX_CAN_Init+0x60>)
 8001706:	2200      	movs	r2, #0
 8001708:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_CAN_Init+0x60>)
 800170c:	2200      	movs	r2, #0
 800170e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001710:	4804      	ldr	r0, [pc, #16]	; (8001724 <MX_CAN_Init+0x60>)
 8001712:	f001 ff27 	bl	8003564 <HAL_CAN_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_CAN_Init+0x5c>
	{
		Error_Handler();
 800171c:	f000 fafa 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000260 	.word	0x20000260
 8001728:	40006400 	.word	0x40006400

0800172c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001732:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <MX_I2C1_Init+0x7c>)
 8001734:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0000020C;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001738:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800173c:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001746:	2201      	movs	r2, #1
 8001748:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <MX_I2C1_Init+0x78>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_I2C1_Init+0x78>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001768:	480e      	ldr	r0, [pc, #56]	; (80017a4 <MX_I2C1_Init+0x78>)
 800176a:	f002 fcb9 	bl	80040e0 <HAL_I2C_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001774:	f000 face 	bl	8001d14 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <MX_I2C1_Init+0x78>)
 800177e:	f003 f87f 	bl	8004880 <HAL_I2CEx_ConfigAnalogFilter>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_I2C1_Init+0x60>
	{
		Error_Handler();
 8001788:	f000 fac4 	bl	8001d14 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800178c:	2100      	movs	r1, #0
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_I2C1_Init+0x78>)
 8001790:	f003 f8c1 	bl	8004916 <HAL_I2CEx_ConfigDigitalFilter>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_I2C1_Init+0x72>
	{
		Error_Handler();
 800179a:	f000 fabb 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000288 	.word	0x20000288
 80017a8:	40005400 	.word	0x40005400

080017ac <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b096      	sub	sp, #88	; 0x58
 80017b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80017be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]
 80017ce:	615a      	str	r2, [r3, #20]
 80017d0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	222c      	movs	r2, #44	; 0x2c
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f006 ff97 	bl	800870c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80017de:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <MX_TIM1_Init+0x118>)
 80017e0:	4a39      	ldr	r2, [pc, #228]	; (80018c8 <MX_TIM1_Init+0x11c>)
 80017e2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80017e4:	4b37      	ldr	r3, [pc, #220]	; (80018c4 <MX_TIM1_Init+0x118>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <MX_TIM1_Init+0x118>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <MX_TIM1_Init+0x118>)
 80017f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <MX_TIM1_Init+0x118>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80017fe:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <MX_TIM1_Init+0x118>)
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001804:	4b2f      	ldr	r3, [pc, #188]	; (80018c4 <MX_TIM1_Init+0x118>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800180a:	482e      	ldr	r0, [pc, #184]	; (80018c4 <MX_TIM1_Init+0x118>)
 800180c:	f004 fd3e 	bl	800628c <HAL_TIM_PWM_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 8001816:	f000 fa7d 	bl	8001d14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001826:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800182a:	4619      	mov	r1, r3
 800182c:	4825      	ldr	r0, [pc, #148]	; (80018c4 <MX_TIM1_Init+0x118>)
 800182e:	f005 fc11 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8001838:	f000 fa6c 	bl	8001d14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183c:	2360      	movs	r3, #96	; 0x60
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001848:	2300      	movs	r3, #0
 800184a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185c:	2200      	movs	r2, #0
 800185e:	4619      	mov	r1, r3
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <MX_TIM1_Init+0x118>)
 8001862:	f004 ff77 	bl	8006754 <HAL_TIM_PWM_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 800186c:	f000 fa52 	bl	8001d14 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <MX_TIM1_Init+0x118>)
 80018a6:	f005 fc43 	bl	8007130 <HAL_TIMEx_ConfigBreakDeadTime>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x108>
	{
		Error_Handler();
 80018b0:	f000 fa30 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MX_TIM1_Init+0x118>)
 80018b6:	f000 fc79 	bl	80021ac <HAL_TIM_MspPostInit>

}
 80018ba:	bf00      	nop
 80018bc:	3758      	adds	r7, #88	; 0x58
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200002dc 	.word	0x200002dc
 80018c8:	40012c00 	.word	0x40012c00

080018cc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80018de:	463b      	mov	r3, r7
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <MX_TIM2_Init+0xc4>)
 80018f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <MX_TIM2_Init+0xc4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <MX_TIM2_Init+0xc4>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <MX_TIM2_Init+0xc4>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <MX_TIM2_Init+0xc4>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <MX_TIM2_Init+0xc4>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001916:	481e      	ldr	r0, [pc, #120]	; (8001990 <MX_TIM2_Init+0xc4>)
 8001918:	f004 fcb8 	bl	800628c <HAL_TIM_PWM_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 8001922:	f000 f9f7 	bl	8001d14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	4816      	ldr	r0, [pc, #88]	; (8001990 <MX_TIM2_Init+0xc4>)
 8001936:	f005 fb8d 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8001940:	f000 f9e8 	bl	8001d14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001944:	2360      	movs	r3, #96	; 0x60
 8001946:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194c:	2300      	movs	r3, #0
 800194e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <MX_TIM2_Init+0xc4>)
 800195c:	f004 fefa 	bl	8006754 <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 8001966:	f000 f9d5 	bl	8001d14 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800196a:	463b      	mov	r3, r7
 800196c:	2208      	movs	r2, #8
 800196e:	4619      	mov	r1, r3
 8001970:	4807      	ldr	r0, [pc, #28]	; (8001990 <MX_TIM2_Init+0xc4>)
 8001972:	f004 feef 	bl	8006754 <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 800197c:	f000 f9ca 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <MX_TIM2_Init+0xc4>)
 8001982:	f000 fc13 	bl	80021ac <HAL_TIM_MspPostInit>

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000328 	.word	0x20000328

08001994 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	; 0x28
 8001998:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80019a6:	463b      	mov	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80019b8:	4b27      	ldr	r3, [pc, #156]	; (8001a58 <MX_TIM3_Init+0xc4>)
 80019ba:	4a28      	ldr	r2, [pc, #160]	; (8001a5c <MX_TIM3_Init+0xc8>)
 80019bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <MX_TIM3_Init+0xc4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <MX_TIM3_Init+0xc4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <MX_TIM3_Init+0xc4>)
 80019cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <MX_TIM3_Init+0xc4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_TIM3_Init+0xc4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019de:	481e      	ldr	r0, [pc, #120]	; (8001a58 <MX_TIM3_Init+0xc4>)
 80019e0:	f004 fc54 	bl	800628c <HAL_TIM_PWM_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM3_Init+0x5a>
	{
		Error_Handler();
 80019ea:	f000 f993 	bl	8001d14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	4816      	ldr	r0, [pc, #88]	; (8001a58 <MX_TIM3_Init+0xc4>)
 80019fe:	f005 fb29 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM3_Init+0x78>
	{
		Error_Handler();
 8001a08:	f000 f984 	bl	8001d14 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0c:	2360      	movs	r3, #96	; 0x60
 8001a0e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4619      	mov	r1, r3
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_TIM3_Init+0xc4>)
 8001a24:	f004 fe96 	bl	8006754 <HAL_TIM_PWM_ConfigChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM3_Init+0x9e>
	{
		Error_Handler();
 8001a2e:	f000 f971 	bl	8001d14 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a32:	463b      	mov	r3, r7
 8001a34:	220c      	movs	r2, #12
 8001a36:	4619      	mov	r1, r3
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_TIM3_Init+0xc4>)
 8001a3a:	f004 fe8b 	bl	8006754 <HAL_TIM_PWM_ConfigChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 8001a44:	f000 f966 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001a48:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_TIM3_Init+0xc4>)
 8001a4a:	f000 fbaf 	bl	80021ac <HAL_TIM_MspPostInit>

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000374 	.word	0x20000374
 8001a5c:	40000400 	.word	0x40000400

08001a60 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <MX_TIM6_Init+0x68>)
 8001a74:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 1000;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a7c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 24;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a86:	2218      	movs	r2, #24
 8001a88:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001a92:	f004 fb47 	bl	8006124 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 8001a9c:	f000 f93a 	bl	8001d14 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_TIM6_Init+0x64>)
 8001aae:	f005 fad1 	bl	8007054 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8001ab8:	f000 f92c 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200003c0 	.word	0x200003c0
 8001ac8:	40001000 	.word	0x40001000

08001acc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <MX_USART2_UART_Init+0x5c>)
 8001ad4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_USART2_UART_Init+0x58>)
 8001b10:	f005 fba4 	bl	800725c <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001b1a:	f000 f8fb 	bl	8001d14 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000560 	.word	0x20000560
 8001b28:	40004400 	.word	0x40004400

08001b2c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <MX_DMA_Init+0x78>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <MX_DMA_Init+0x78>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6153      	str	r3, [r2, #20]
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <MX_DMA_Init+0x78>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	200b      	movs	r0, #11
 8001b50:	f001 fedf 	bl	8003912 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b54:	200b      	movs	r0, #11
 8001b56:	f001 fef8 	bl	800394a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	200c      	movs	r0, #12
 8001b60:	f001 fed7 	bl	8003912 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b64:	200c      	movs	r0, #12
 8001b66:	f001 fef0 	bl	800394a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	200d      	movs	r0, #13
 8001b70:	f001 fecf 	bl	8003912 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b74:	200d      	movs	r0, #13
 8001b76:	f001 fee8 	bl	800394a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	200f      	movs	r0, #15
 8001b80:	f001 fec7 	bl	8003912 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b84:	200f      	movs	r0, #15
 8001b86:	f001 fee0 	bl	800394a <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2010      	movs	r0, #16
 8001b90:	f001 febf 	bl	8003912 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b94:	2010      	movs	r0, #16
 8001b96:	f001 fed8 	bl	800394a <HAL_NVIC_EnableIRQ>

}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 030c 	add.w	r3, r7, #12
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001bbe:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	4a36      	ldr	r2, [pc, #216]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc8:	6153      	str	r3, [r2, #20]
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	6153      	str	r3, [r2, #20]
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bee:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6153      	str	r3, [r2, #20]
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <MX_GPIO_Init+0xf4>)
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIO_Output_EV_P_GPIO_Port, GPIO_Output_EV_P_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4825      	ldr	r0, [pc, #148]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c0c:	f002 fa50 	bl	80040b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2198      	movs	r1, #152	; 0x98
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c18:	f002 fa4a 	bl	80040b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2138      	movs	r1, #56	; 0x38
 8001c20:	4820      	ldr	r0, [pc, #128]	; (8001ca4 <MX_GPIO_Init+0xfc>)
 8001c22:	f002 fa45 	bl	80040b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : GPIO_Output_EV_P_Pin */
	GPIO_InitStruct.Pin = GPIO_Output_EV_P_Pin;
 8001c26:	2301      	movs	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIO_Output_EV_P_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4818      	ldr	r0, [pc, #96]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c3e:	f002 f8ad 	bl	8003d9c <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_Input_AU_STATUS_Pin */
	GPIO_InitStruct.Pin = GPIO_Input_AU_STATUS_Pin;
 8001c42:	2302      	movs	r3, #2
 8001c44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Input_AU_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	4812      	ldr	r0, [pc, #72]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c56:	f002 f8a1 	bl	8003d9c <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_Output_EV_3_Pin GPIO_Output_EV_2_Pin GPIO_Output_EV_1_Pin */
	GPIO_InitStruct.Pin = GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin;
 8001c5a:	2398      	movs	r3, #152	; 0x98
 8001c5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f002 f892 	bl	8003d9c <HAL_GPIO_Init>

	/*Configure GPIO pins : Built_in_LED_Pin GPIO_Output_LED_EN_Pin GPIO_Output_LCD_EN_Pin */
	GPIO_InitStruct.Pin = Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin;
 8001c78:	2338      	movs	r3, #56	; 0x38
 8001c7a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_GPIO_Init+0xfc>)
 8001c90:	f002 f884 	bl	8003d9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	48001400 	.word	0x48001400
 8001ca4:	48000400 	.word	0x48000400

08001ca8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d102      	bne.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		dshot_write(my_motor_value);
 8001cbc:	4811      	ldr	r0, [pc, #68]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001cbe:	f7fe fdcf 	bl	8000860 <dshot_write>
	}
	//on start la tempo si le BAU est enclenché
	if (BAU_tick_enable == 1){
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d115      	bne.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		BAU_tick++;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001cd2:	6013      	str	r3, [r2, #0]
		// on purge quand on veut purger, 1000 => 1s
		if (BAU_tick > 30000){
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f247 5230 	movw	r2, #30000	; 0x7530
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	dd0a      	ble.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			BAU_tick = 0;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001cf2:	f002 f9dd 	bl	80040b0 <HAL_GPIO_WritePin>
		}
	}
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200003c0 	.word	0x200003c0
 8001d04:	200005e8 	.word	0x200005e8
 8001d08:	20000200 	.word	0x20000200
 8001d0c:	200001fc 	.word	0x200001fc
 8001d10:	48001400 	.word	0x48001400

08001d14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d1c:	e7fe      	b.n	8001d1c <Error_Handler+0x8>
	...

08001d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_MspInit+0x44>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_MspInit+0x44>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6193      	str	r3, [r2, #24]
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_MspInit+0x44>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_MspInit+0x44>)
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_MspInit+0x44>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	61d3      	str	r3, [r2, #28]
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_MspInit+0x44>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d88:	d124      	bne.n	8001dd4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_ADC_MspInit+0x74>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_ADC_MspInit+0x74>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6153      	str	r3, [r2, #20]
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_ADC_MspInit+0x74>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_ADC_MspInit+0x74>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <HAL_ADC_MspInit+0x74>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6153      	str	r3, [r2, #20]
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_ADC_MspInit+0x74>)
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_A_TEMP_Pin|ADC2_IN_A_PRESS_Pin;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd0:	f001 ffe4 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	; 0x28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_CAN_MspInit+0x80>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d129      	bne.n	8001e56 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_CAN_MspInit+0x84>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_CAN_MspInit+0x84>)
 8001e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_CAN_MspInit+0x84>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_CAN_MspInit+0x84>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_CAN_MspInit+0x84>)
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e24:	6153      	str	r3, [r2, #20]
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <HAL_CAN_MspInit+0x84>)
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RD_Pin|CAN_TD_Pin;
 8001e32:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001e44:	2309      	movs	r3, #9
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e52:	f001 ffa3 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3728      	adds	r7, #40	; 0x28
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40006400 	.word	0x40006400
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_I2C_MspInit+0x8c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12f      	bne.n	8001eea <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_I2C_MspInit+0x90>)
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_I2C_MspInit+0x90>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e94:	6153      	str	r3, [r2, #20]
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_I2C_MspInit+0x90>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea2:	23c0      	movs	r3, #192	; 0xc0
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea6:	2312      	movs	r3, #18
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480f      	ldr	r0, [pc, #60]	; (8001efc <HAL_I2C_MspInit+0x94>)
 8001ebe:	f001 ff6d 	bl	8003d9c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001ec2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001ec6:	f002 fd73 	bl	80049b0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001eca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001ece:	f002 fd6f 	bl	80049b0 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_I2C_MspInit+0x90>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_I2C_MspInit+0x90>)
 8001ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001edc:	61d3      	str	r3, [r2, #28]
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_I2C_MspInit+0x90>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	; 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000400 	.word	0x48000400

08001f00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a87      	ldr	r2, [pc, #540]	; (800212c <HAL_TIM_PWM_MspInit+0x22c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d135      	bne.n	8001f7e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f12:	4b87      	ldr	r3, [pc, #540]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	4a86      	ldr	r2, [pc, #536]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 8001f18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f1c:	6193      	str	r3, [r2, #24]
 8001f1e:	4b84      	ldr	r3, [pc, #528]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001f2a:	4b82      	ldr	r3, [pc, #520]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f2c:	4a82      	ldr	r2, [pc, #520]	; (8002138 <HAL_TIM_PWM_MspInit+0x238>)
 8001f2e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f30:	4b80      	ldr	r3, [pc, #512]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f32:	2210      	movs	r2, #16
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f36:	4b7f      	ldr	r3, [pc, #508]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f3c:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f42:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f4a:	4b7a      	ldr	r3, [pc, #488]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f50:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001f52:	4b78      	ldr	r3, [pc, #480]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f58:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001f60:	4874      	ldr	r0, [pc, #464]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f62:	f001 fd0c 	bl	800397e <HAL_DMA_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8001f6c:	f7ff fed2 	bl	8001d14 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a70      	ldr	r2, [pc, #448]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
 8001f76:	4a6f      	ldr	r2, [pc, #444]	; (8002134 <HAL_TIM_PWM_MspInit+0x234>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f7c:	e0d2      	b.n	8002124 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f86:	d15e      	bne.n	8002046 <HAL_TIM_PWM_MspInit+0x146>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f88:	4b69      	ldr	r3, [pc, #420]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	4a68      	ldr	r2, [pc, #416]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	61d3      	str	r3, [r2, #28]
 8001f94:	4b66      	ldr	r3, [pc, #408]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001fa0:	4b66      	ldr	r3, [pc, #408]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fa2:	4a67      	ldr	r2, [pc, #412]	; (8002140 <HAL_TIM_PWM_MspInit+0x240>)
 8001fa4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa6:	4b65      	ldr	r3, [pc, #404]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fa8:	2210      	movs	r2, #16
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fac:	4b63      	ldr	r3, [pc, #396]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb2:	4b62      	ldr	r3, [pc, #392]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fb8:	4b60      	ldr	r3, [pc, #384]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fc0:	4b5e      	ldr	r3, [pc, #376]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001fc8:	4b5c      	ldr	r3, [pc, #368]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001fce:	4b5b      	ldr	r3, [pc, #364]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001fd6:	4859      	ldr	r0, [pc, #356]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fd8:	f001 fcd1 	bl	800397e <HAL_DMA_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_TIM_PWM_MspInit+0xe6>
      Error_Handler();
 8001fe2:	f7ff fe97 	bl	8001d14 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a54      	ldr	r2, [pc, #336]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
 8001fec:	4a53      	ldr	r2, [pc, #332]	; (800213c <HAL_TIM_PWM_MspInit+0x23c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001ff2:	4b54      	ldr	r3, [pc, #336]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 8001ff4:	4a54      	ldr	r2, [pc, #336]	; (8002148 <HAL_TIM_PWM_MspInit+0x248>)
 8001ff6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff8:	4b52      	ldr	r3, [pc, #328]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b51      	ldr	r3, [pc, #324]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 8002006:	2280      	movs	r2, #128	; 0x80
 8002008:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800200a:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 800200c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002010:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002012:	4b4c      	ldr	r3, [pc, #304]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 8002014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002018:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800201a:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8002020:	4b48      	ldr	r3, [pc, #288]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 8002022:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002026:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002028:	4846      	ldr	r0, [pc, #280]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 800202a:	f001 fca8 	bl	800397e <HAL_DMA_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_TIM_PWM_MspInit+0x138>
      Error_Handler();
 8002034:	f7ff fe6e 	bl	8001d14 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a42      	ldr	r2, [pc, #264]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
 800203e:	4a41      	ldr	r2, [pc, #260]	; (8002144 <HAL_TIM_PWM_MspInit+0x244>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002044:	e06e      	b.n	8002124 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM3)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a40      	ldr	r2, [pc, #256]	; (800214c <HAL_TIM_PWM_MspInit+0x24c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d169      	bne.n	8002124 <HAL_TIM_PWM_MspInit+0x224>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002050:	4b37      	ldr	r3, [pc, #220]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4a36      	ldr	r2, [pc, #216]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 8002056:	f043 0302 	orr.w	r3, r3, #2
 800205a:	61d3      	str	r3, [r2, #28]
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_TIM_PWM_MspInit+0x230>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8002068:	4b39      	ldr	r3, [pc, #228]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <HAL_TIM_PWM_MspInit+0x254>)
 800206c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 8002070:	2210      	movs	r2, #16
 8002072:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800207a:	4b35      	ldr	r3, [pc, #212]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002080:	4b33      	ldr	r3, [pc, #204]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 8002082:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002086:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 800208a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800208e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002090:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002096:	4b2e      	ldr	r3, [pc, #184]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 8002098:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800209c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800209e:	482c      	ldr	r0, [pc, #176]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 80020a0:	f001 fc6d 	bl	800397e <HAL_DMA_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_TIM_PWM_MspInit+0x1ae>
      Error_Handler();
 80020aa:	f7ff fe33 	bl	8001d14 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
 80020b4:	4a26      	ldr	r2, [pc, #152]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <HAL_TIM_PWM_MspInit+0x250>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <HAL_TIM_PWM_MspInit+0x25c>)
 80020ca:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020ce:	2210      	movs	r2, #16
 80020d0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ec:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80020fc:	4816      	ldr	r0, [pc, #88]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 80020fe:	f001 fc3e 	bl	800397e <HAL_DMA_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_TIM_PWM_MspInit+0x20c>
      Error_Handler();
 8002108:	f7ff fe04 	bl	8001d14 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
 8002112:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 800211c:	621a      	str	r2, [r3, #32]
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_TIM_PWM_MspInit+0x258>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40021000 	.word	0x40021000
 8002134:	2000040c 	.word	0x2000040c
 8002138:	4002001c 	.word	0x4002001c
 800213c:	20000450 	.word	0x20000450
 8002140:	40020058 	.word	0x40020058
 8002144:	20000494 	.word	0x20000494
 8002148:	40020008 	.word	0x40020008
 800214c:	40000400 	.word	0x40000400
 8002150:	200004d8 	.word	0x200004d8
 8002154:	4002006c 	.word	0x4002006c
 8002158:	2000051c 	.word	0x2000051c
 800215c:	40020030 	.word	0x40020030

08002160 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_TIM_Base_MspInit+0x44>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d113      	bne.n	800219a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_TIM_Base_MspInit+0x48>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	4a0c      	ldr	r2, [pc, #48]	; (80021a8 <HAL_TIM_Base_MspInit+0x48>)
 8002178:	f043 0310 	orr.w	r3, r3, #16
 800217c:	61d3      	str	r3, [r2, #28]
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_TIM_Base_MspInit+0x48>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2036      	movs	r0, #54	; 0x36
 8002190:	f001 fbbf 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002194:	2036      	movs	r0, #54	; 0x36
 8002196:	f001 fbd8 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40001000 	.word	0x40001000
 80021a8:	40021000 	.word	0x40021000

080021ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08c      	sub	sp, #48	; 0x30
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_TIM_MspPostInit+0x150>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d11e      	bne.n	800220c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ce:	4b4c      	ldr	r3, [pc, #304]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 80021d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d8:	6153      	str	r3, [r2, #20]
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_DS_M3_Pin;
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021f8:	2306      	movs	r3, #6
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH1_DS_M3_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f001 fdc9 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800220a:	e072      	b.n	80022f2 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d12f      	bne.n	8002276 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a39      	ldr	r2, [pc, #228]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	6153      	str	r3, [r2, #20]
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_DS_COMP_Pin;
 800222e:	2320      	movs	r3, #32
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800223e:	2301      	movs	r3, #1
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_DS_COMP_GPIO_Port, &GPIO_InitStruct);
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	4619      	mov	r1, r3
 8002248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224c:	f001 fda6 	bl	8003d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_DS_M1_Pin;
 8002250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002262:	230a      	movs	r3, #10
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_DS_M1_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002270:	f001 fd94 	bl	8003d9c <HAL_GPIO_Init>
}
 8002274:	e03d      	b.n	80022f2 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a22      	ldr	r2, [pc, #136]	; (8002304 <HAL_TIM_MspPostInit+0x158>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d138      	bne.n	80022f2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002280:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 8002286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228a:	6153      	str	r3, [r2, #20]
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	4a18      	ldr	r2, [pc, #96]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 800229e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a2:	6153      	str	r3, [r2, #20]
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_TIM_MspPostInit+0x154>)
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_DS_TURB_Pin;
 80022b0:	2340      	movs	r3, #64	; 0x40
 80022b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022c0:	2302      	movs	r3, #2
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_DS_TURB_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	4619      	mov	r1, r3
 80022ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ce:	f001 fd65 	bl	8003d9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4_DS_M2_Pin;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022e2:	2302      	movs	r3, #2
 80022e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH4_DS_M2_GPIO_Port, &GPIO_InitStruct);
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	4806      	ldr	r0, [pc, #24]	; (8002308 <HAL_TIM_MspPostInit+0x15c>)
 80022ee:	f001 fd55 	bl	8003d9c <HAL_GPIO_Init>
}
 80022f2:	bf00      	nop
 80022f4:	3730      	adds	r7, #48	; 0x30
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40012c00 	.word	0x40012c00
 8002300:	40021000 	.word	0x40021000
 8002304:	40000400 	.word	0x40000400
 8002308:	48000400 	.word	0x48000400

0800230c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	; 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1c      	ldr	r2, [pc, #112]	; (800239c <HAL_UART_MspInit+0x90>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d131      	bne.n	8002392 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_UART_MspInit+0x94>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <HAL_UART_MspInit+0x94>)
 8002334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_UART_MspInit+0x94>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_UART_MspInit+0x94>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <HAL_UART_MspInit+0x94>)
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	6153      	str	r3, [r2, #20]
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <HAL_UART_MspInit+0x94>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800235e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002370:	2307      	movs	r3, #7
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800237e:	f001 fd0d 	bl	8003d9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002382:	2200      	movs	r2, #0
 8002384:	2100      	movs	r1, #0
 8002386:	2026      	movs	r0, #38	; 0x26
 8002388:	f001 fac3 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800238c:	2026      	movs	r0, #38	; 0x26
 800238e:	f001 fadc 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002392:	bf00      	nop
 8002394:	3728      	adds	r7, #40	; 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40004400 	.word	0x40004400
 80023a0:	40021000 	.word	0x40021000

080023a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <NMI_Handler+0x4>

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f0:	f000 f900 	bl	80025f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <DMA1_Channel1_IRQHandler+0x10>)
 80023fe:	f001 fbdb 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000494 	.word	0x20000494

0800240c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <DMA1_Channel2_IRQHandler+0x10>)
 8002412:	f001 fbd1 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000040c 	.word	0x2000040c

08002420 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <DMA1_Channel3_IRQHandler+0x10>)
 8002426:	f001 fbc7 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000051c 	.word	0x2000051c

08002434 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <DMA1_Channel5_IRQHandler+0x10>)
 800243a:	f001 fbbd 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000450 	.word	0x20000450

08002448 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <DMA1_Channel6_IRQHandler+0x10>)
 800244e:	f001 fbb3 	bl	8003bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200004d8 	.word	0x200004d8

0800245c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <USART2_IRQHandler+0x10>)
 8002462:	f005 f817 	bl	8007494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000560 	.word	0x20000560

08002470 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <TIM6_DAC1_IRQHandler+0x10>)
 8002476:	f004 f84d 	bl	8006514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200003c0 	.word	0x200003c0

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f006 f8f8 	bl	80086a8 <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	; (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20003000 	.word	0x20003000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	200005f4 	.word	0x200005f4
 80024ec:	20000610 	.word	0x20000610

080024f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <SystemInit+0x20>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <SystemInit+0x20>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800254c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002518:	f7ff ffea 	bl	80024f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <LoopForever+0x6>)
  ldr r1, =_edata
 800251e:	490d      	ldr	r1, [pc, #52]	; (8002554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <LoopForever+0xe>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002524:	e002      	b.n	800252c <LoopCopyDataInit>

08002526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252a:	3304      	adds	r3, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800252c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002530:	d3f9      	bcc.n	8002526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002534:	4c0a      	ldr	r4, [pc, #40]	; (8002560 <LoopForever+0x16>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002538:	e001      	b.n	800253e <LoopFillZerobss>

0800253a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800253c:	3204      	adds	r2, #4

0800253e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002540:	d3fb      	bcc.n	800253a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002542:	f006 f8b7 	bl	80086b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002546:	f7fe fbeb 	bl	8000d20 <main>

0800254a <LoopForever>:

LoopForever:
    b LoopForever
 800254a:	e7fe      	b.n	800254a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800254c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002554:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002558:	08008960 	.word	0x08008960
  ldr r2, =_sbss
 800255c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002560:	2000060c 	.word	0x2000060c

08002564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC1_2_IRQHandler>
	...

08002568 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_Init+0x28>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <HAL_Init+0x28>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f001 f9bf 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257e:	2003      	movs	r0, #3
 8002580:	f000 f808 	bl	8002594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002584:	f7ff fbcc 	bl	8001d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000

08002594 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x54>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x58>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 f9d7 	bl	8003966 <HAL_SYSTICK_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00e      	b.n	80025e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d80a      	bhi.n	80025de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f001 f99f 	bl	8003912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <HAL_InitTick+0x5c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000008 	.word	0x20000008
 80025f0:	20000004 	.word	0x20000004

080025f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x20>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_IncTick+0x24>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a04      	ldr	r2, [pc, #16]	; (8002618 <HAL_IncTick+0x24>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000008 	.word	0x20000008
 8002618:	200005f8 	.word	0x200005f8

0800261c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_GetTick+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	200005f8 	.word	0x200005f8

08002634 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800263c:	f7ff ffee 	bl	800261c <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264c:	d005      	beq.n	800265a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_Delay+0x44>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4413      	add	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800265a:	bf00      	nop
 800265c:	f7ff ffde 	bl	800261c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	429a      	cmp	r2, r3
 800266a:	d8f7      	bhi.n	800265c <HAL_Delay+0x28>
  {
  }
}
 800266c:	bf00      	nop
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000008 	.word	0x20000008

0800267c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b09a      	sub	sp, #104	; 0x68
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e172      	b.n	8002982 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d176      	bne.n	800279c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d152      	bne.n	800275c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fb49 	bl	8001d68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d13b      	bne.n	800275c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fed7 	bl	8003498 <ADC_Disable>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d12f      	bne.n	800275c <HAL_ADC_Init+0xe0>
 80026fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002700:	2b00      	cmp	r3, #0
 8002702:	d12b      	bne.n	800275c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800270c:	f023 0302 	bic.w	r3, r3, #2
 8002710:	f043 0202 	orr.w	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002726:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002736:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002738:	4b94      	ldr	r3, [pc, #592]	; (800298c <HAL_ADC_Init+0x310>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a94      	ldr	r2, [pc, #592]	; (8002990 <HAL_ADC_Init+0x314>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	0c9a      	lsrs	r2, r3, #18
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800274e:	e002      	b.n	8002756 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3b01      	subs	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f9      	bne.n	8002750 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002778:	d110      	bne.n	800279c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f023 0312 	bic.w	r3, r3, #18
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f040 80df 	bne.w	8002968 <HAL_ADC_Init+0x2ec>
 80027aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 80da 	bne.w	8002968 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80d2 	bne.w	8002968 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80027cc:	f043 0202 	orr.w	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d4:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <HAL_ADC_Init+0x318>)
 80027d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027e0:	d102      	bne.n	80027e8 <HAL_ADC_Init+0x16c>
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_ADC_Init+0x31c>)
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e002      	b.n	80027ee <HAL_ADC_Init+0x172>
 80027e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d108      	bne.n	800280e <HAL_ADC_Init+0x192>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x192>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_ADC_Init+0x194>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11c      	bne.n	800284e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002814:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_ADC_Init+0x1ba>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Init+0x1ba>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_ADC_Init+0x1bc>
 8002836:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800283c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7e5b      	ldrb	r3, [r3, #25]
 8002852:	035b      	lsls	r3, r3, #13
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002858:	2a01      	cmp	r2, #1
 800285a:	d002      	beq.n	8002862 <HAL_ADC_Init+0x1e6>
 800285c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002860:	e000      	b.n	8002864 <HAL_ADC_Init+0x1e8>
 8002862:	2200      	movs	r2, #0
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002874:	4313      	orrs	r3, r2
 8002876:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d11b      	bne.n	80028ba <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7e5b      	ldrb	r3, [r3, #25]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	045a      	lsls	r2, r3, #17
 8002892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002894:	4313      	orrs	r3, r2
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	663b      	str	r3, [r7, #96]	; 0x60
 800289c:	e00d      	b.n	80028ba <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d007      	beq.n	80028d2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	4313      	orrs	r3, r2
 80028cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028ce:	4313      	orrs	r3, r2
 80028d0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d114      	bne.n	800290a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ee:	f023 0302 	bic.w	r3, r3, #2
 80028f2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	7e1b      	ldrb	r3, [r3, #24]
 80028f8:	039a      	lsls	r2, r3, #14
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4313      	orrs	r3, r2
 8002904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002906:	4313      	orrs	r3, r2
 8002908:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_ADC_Init+0x320>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800291a:	430b      	orrs	r3, r1
 800291c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10c      	bne.n	8002940 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f023 010f 	bic.w	r1, r3, #15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	1e5a      	subs	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
 800293e:	e007      	b.n	8002950 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020f 	bic.w	r2, r2, #15
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
 8002966:	e00a      	b.n	800297e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f023 0312 	bic.w	r3, r3, #18
 8002970:	f043 0210 	orr.w	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800297e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002982:	4618      	mov	r0, r3
 8002984:	3768      	adds	r7, #104	; 0x68
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000000 	.word	0x20000000
 8002990:	431bde83 	.word	0x431bde83
 8002994:	50000300 	.word	0x50000300
 8002998:	50000100 	.word	0x50000100
 800299c:	fff0c007 	.word	0xfff0c007

080029a0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 809c 	bne.w	8002af4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Start+0x2a>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e097      	b.n	8002afa <HAL_ADC_Start+0x15a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fcfc 	bl	80033d0 <ADC_Enable>
 80029d8:	4603      	mov	r3, r0
 80029da:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 8083 	bne.w	8002aea <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029f8:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <HAL_ADC_Start+0x164>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <HAL_ADC_Start+0x6e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a0c:	d115      	bne.n	8002a3a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d027      	beq.n	8002a78 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a38:	e01e      	b.n	8002a78 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a4e:	d004      	beq.n	8002a5a <HAL_ADC_Start+0xba>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2c      	ldr	r2, [pc, #176]	; (8002b08 <HAL_ADC_Start+0x168>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10e      	bne.n	8002a78 <HAL_ADC_Start+0xd8>
 8002a5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a84:	d106      	bne.n	8002a94 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f023 0206 	bic.w	r2, r3, #6
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
 8002a92:	e002      	b.n	8002a9a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	221c      	movs	r2, #28
 8002aa8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <HAL_ADC_Start+0x164>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d010      	beq.n	8002ad8 <HAL_ADC_Start+0x138>
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <HAL_ADC_Start+0x164>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 031f 	and.w	r3, r3, #31
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_ADC_Start+0x138>
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_ADC_Start+0x164>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 031f 	and.w	r3, r3, #31
 8002aca:	2b09      	cmp	r3, #9
 8002acc:	d004      	beq.n	8002ad8 <HAL_ADC_Start+0x138>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad6:	d10f      	bne.n	8002af8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0204 	orr.w	r2, r2, #4
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	e006      	b.n	8002af8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002af2:	e001      	b.n	8002af8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	50000300 	.word	0x50000300
 8002b08:	50000100 	.word	0x50000100

08002b0c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d102      	bne.n	8002b28 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002b22:	2308      	movs	r3, #8
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e02e      	b.n	8002b86 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b28:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <HAL_ADC_PollForConversion+0x198>)
 8002b2a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d112      	bne.n	8002b5e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d11d      	bne.n	8002b82 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e09d      	b.n	8002c9a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e08b      	b.n	8002c9a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002b82:	230c      	movs	r3, #12
 8002b84:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_ADC_PollForConversion+0x198>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_PollForConversion+0x90>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b9a:	d104      	bne.n	8002ba6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e003      	b.n	8002bae <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ba6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002bae:	f7ff fd35 	bl	800261c <HAL_GetTick>
 8002bb2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bb4:	e021      	b.n	8002bfa <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d01d      	beq.n	8002bfa <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_ADC_PollForConversion+0xc8>
 8002bc4:	f7ff fd2a 	bl	800261c <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d212      	bcs.n	8002bfa <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10b      	bne.n	8002bfa <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0204 	orr.w	r2, r3, #4
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e04f      	b.n	8002c9a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0d6      	beq.n	8002bb6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d131      	bne.n	8002c86 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d12c      	bne.n	8002c86 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d125      	bne.n	8002c86 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d112      	bne.n	8002c6e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d112      	bne.n	8002c86 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c6c:	e00b      	b.n	8002c86 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	50000300 	.word	0x50000300

08002ca8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b09b      	sub	sp, #108	; 0x6c
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x22>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e2a4      	b.n	8003230 <HAL_ADC_ConfigChannel+0x56c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 8288 	bne.w	800320e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d81c      	bhi.n	8002d40 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4413      	add	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	461a      	mov	r2, r3
 8002d1a:	231f      	movs	r3, #31
 8002d1c:	4093      	lsls	r3, r2
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	4019      	ands	r1, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	fa00 f203 	lsl.w	r2, r0, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d3e:	e063      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b09      	cmp	r3, #9
 8002d46:	d81e      	bhi.n	8002d86 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	3b1e      	subs	r3, #30
 8002d5c:	221f      	movs	r2, #31
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	4019      	ands	r1, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	3b1e      	subs	r3, #30
 8002d78:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34
 8002d84:	e040      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b0e      	cmp	r3, #14
 8002d8c:	d81e      	bhi.n	8002dcc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	3b3c      	subs	r3, #60	; 0x3c
 8002da2:	221f      	movs	r2, #31
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	4019      	ands	r1, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	3b3c      	subs	r3, #60	; 0x3c
 8002dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dca:	e01d      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4413      	add	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	3b5a      	subs	r3, #90	; 0x5a
 8002de0:	221f      	movs	r2, #31
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	4019      	ands	r1, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6818      	ldr	r0, [r3, #0]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	3b5a      	subs	r3, #90	; 0x5a
 8002dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 80e5 	bne.w	8002fe2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b09      	cmp	r3, #9
 8002e1e:	d91c      	bls.n	8002e5a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6999      	ldr	r1, [r3, #24]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	4413      	add	r3, r2
 8002e30:	3b1e      	subs	r3, #30
 8002e32:	2207      	movs	r2, #7
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4019      	ands	r1, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6898      	ldr	r0, [r3, #8]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b1e      	subs	r3, #30
 8002e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	619a      	str	r2, [r3, #24]
 8002e58:	e019      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6959      	ldr	r1, [r3, #20]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	4019      	ands	r1, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6898      	ldr	r0, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	fa00 f203 	lsl.w	r2, r0, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695a      	ldr	r2, [r3, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	08db      	lsrs	r3, r3, #3
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d84f      	bhi.n	8002f50 <HAL_ADC_ConfigChannel+0x28c>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_ADC_ConfigChannel+0x1f4>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002eeb 	.word	0x08002eeb
 8002ec0:	08002f0d 	.word	0x08002f0d
 8002ec4:	08002f2f 	.word	0x08002f2f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ece:	4b94      	ldr	r3, [pc, #592]	; (8003120 <HAL_ADC_ConfigChannel+0x45c>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	0691      	lsls	r1, r2, #26
 8002ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002eda:	430a      	orrs	r2, r1
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ee8:	e07e      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ef0:	4b8b      	ldr	r3, [pc, #556]	; (8003120 <HAL_ADC_ConfigChannel+0x45c>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	0691      	lsls	r1, r2, #26
 8002efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002efc:	430a      	orrs	r2, r1
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f08:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f0a:	e06d      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f12:	4b83      	ldr	r3, [pc, #524]	; (8003120 <HAL_ADC_ConfigChannel+0x45c>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	0691      	lsls	r1, r2, #26
 8002f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	431a      	orrs	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f2a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f2c:	e05c      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f34:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_ADC_ConfigChannel+0x45c>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	0691      	lsls	r1, r2, #26
 8002f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f40:	430a      	orrs	r2, r1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f4c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f4e:	e04b      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	069b      	lsls	r3, r3, #26
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d107      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f72:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	069b      	lsls	r3, r3, #26
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d107      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f96:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	069b      	lsls	r3, r3, #26
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d107      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	069b      	lsls	r3, r3, #26
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d10a      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fde:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002fe0:	e001      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002fe6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d108      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x344>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x344>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_ADC_ConfigChannel+0x346>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 810a 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d00f      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2201      	movs	r2, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	400a      	ands	r2, r1
 8003032:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003036:	e049      	b.n	80030cc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2201      	movs	r2, #1
 8003046:	409a      	lsls	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b09      	cmp	r3, #9
 8003058:	d91c      	bls.n	8003094 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6999      	ldr	r1, [r3, #24]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	3b1b      	subs	r3, #27
 800306c:	2207      	movs	r2, #7
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	4019      	ands	r1, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	6898      	ldr	r0, [r3, #8]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	3b1b      	subs	r3, #27
 8003086:	fa00 f203 	lsl.w	r2, r0, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	619a      	str	r2, [r3, #24]
 8003092:	e01b      	b.n	80030cc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6959      	ldr	r1, [r3, #20]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	2207      	movs	r2, #7
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	4019      	ands	r1, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6898      	ldr	r0, [r3, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	fa00 f203 	lsl.w	r2, r0, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_ADC_ConfigChannel+0x460>)
 80030ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d105      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030e8:	2b11      	cmp	r3, #17
 80030ea:	d105      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	f040 8091 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	f040 808a 	bne.w	8003224 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003118:	d108      	bne.n	800312c <HAL_ADC_ConfigChannel+0x468>
 800311a:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_ADC_ConfigChannel+0x464>)
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e008      	b.n	8003132 <HAL_ADC_ConfigChannel+0x46e>
 8003120:	83fff000 	.word	0x83fff000
 8003124:	50000300 	.word	0x50000300
 8003128:	50000100 	.word	0x50000100
 800312c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003130:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d108      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x48e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x48e>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_ADC_ConfigChannel+0x490>
 8003152:	2300      	movs	r3, #0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d150      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003158:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d010      	beq.n	8003180 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d107      	bne.n	800317a <HAL_ADC_ConfigChannel+0x4b6>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x4b6>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_ADC_ConfigChannel+0x4b8>
 800317a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800317c:	2b00      	cmp	r3, #0
 800317e:	d13c      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b10      	cmp	r3, #16
 8003186:	d11d      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x500>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003190:	d118      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800319a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800319e:	4b27      	ldr	r3, [pc, #156]	; (800323c <HAL_ADC_ConfigChannel+0x578>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_ADC_ConfigChannel+0x57c>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	0c9a      	lsrs	r2, r3, #18
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031b4:	e002      	b.n	80031bc <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f9      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031c2:	e02e      	b.n	8003222 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b11      	cmp	r3, #17
 80031ca:	d10b      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x520>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d4:	d106      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80031d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031e2:	e01e      	b.n	8003222 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b12      	cmp	r3, #18
 80031ea:	d11a      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80031ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031f8:	e013      	b.n	8003222 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800320c:	e00a      	b.n	8003224 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003220:	e000      	b.n	8003224 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003222:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800322c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003230:	4618      	mov	r0, r3
 8003232:	376c      	adds	r7, #108	; 0x6c
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000000 	.word	0x20000000
 8003240:	431bde83 	.word	0x431bde83

08003244 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003244:	b480      	push	{r7}
 8003246:	b099      	sub	sp, #100	; 0x64
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325c:	d102      	bne.n	8003264 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800325e:	4b5a      	ldr	r3, [pc, #360]	; (80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	e002      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8003264:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003268:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0a2      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800327e:	2302      	movs	r3, #2
 8003280:	e09b      	b.n	80033ba <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d17f      	bne.n	8003398 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d179      	bne.n	8003398 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032a4:	4b49      	ldr	r3, [pc, #292]	; (80033cc <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80032a6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d040      	beq.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032c2:	035b      	lsls	r3, r3, #13
 80032c4:	430b      	orrs	r3, r1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ca:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d108      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80032ec:	2300      	movs	r3, #0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d15c      	bne.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800330e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003310:	2b00      	cmp	r3, #0
 8003312:	d14b      	bne.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800331c:	f023 030f 	bic.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	6811      	ldr	r1, [r2, #0]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	6892      	ldr	r2, [r2, #8]
 8003328:	430a      	orrs	r2, r1
 800332a:	431a      	orrs	r2, r3
 800332c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800332e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003330:	e03c      	b.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800333a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800333c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d108      	bne.n	800335e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d123      	bne.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003380:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d112      	bne.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800338e:	f023 030f 	bic.w	r3, r3, #15
 8003392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003394:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003396:	e009      	b.n	80033ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033aa:	e000      	b.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033ac:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80033ba:	4618      	mov	r0, r3
 80033bc:	3764      	adds	r7, #100	; 0x64
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	50000100 	.word	0x50000100
 80033cc:	50000300 	.word	0x50000300

080033d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <ADC_Enable+0x2c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <ADC_Enable+0x2c>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <ADC_Enable+0x2e>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d143      	bne.n	800348a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	4b22      	ldr	r3, [pc, #136]	; (8003494 <ADC_Enable+0xc4>)
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0210 	orr.w	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e02f      	b.n	800348c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800343c:	f7ff f8ee 	bl	800261c <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003442:	e01b      	b.n	800347c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003444:	f7ff f8ea 	bl	800261c <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d914      	bls.n	800347c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d00d      	beq.n	800347c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f043 0210 	orr.w	r2, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e007      	b.n	800348c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d1dc      	bne.n	8003444 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	8000003f 	.word	0x8000003f

08003498 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d108      	bne.n	80034c4 <ADC_Disable+0x2c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <ADC_Disable+0x2c>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <ADC_Disable+0x2e>
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d047      	beq.n	800355a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030d 	and.w	r3, r3, #13
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10f      	bne.n	80034f8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0202 	orr.w	r2, r2, #2
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2203      	movs	r2, #3
 80034ee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80034f0:	f7ff f894 	bl	800261c <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80034f6:	e029      	b.n	800354c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0210 	orr.w	r2, r3, #16
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e023      	b.n	800355c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003514:	f7ff f882 	bl	800261c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d914      	bls.n	800354c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d10d      	bne.n	800354c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f043 0210 	orr.w	r2, r3, #16
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e007      	b.n	800355c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d0dc      	beq.n	8003514 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0ed      	b.n	8003752 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d102      	bne.n	8003588 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe fc2c 	bl	8001de0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003598:	f7ff f840 	bl	800261c <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800359e:	e012      	b.n	80035c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035a0:	f7ff f83c 	bl	800261c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b0a      	cmp	r3, #10
 80035ac:	d90b      	bls.n	80035c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2205      	movs	r2, #5
 80035be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0c5      	b.n	8003752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0e5      	beq.n	80035a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0202 	bic.w	r2, r2, #2
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e4:	f7ff f81a 	bl	800261c <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035ea:	e012      	b.n	8003612 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035ec:	f7ff f816 	bl	800261c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b0a      	cmp	r3, #10
 80035f8:	d90b      	bls.n	8003612 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e09f      	b.n	8003752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	7e1b      	ldrb	r3, [r3, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e007      	b.n	800364a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7e5b      	ldrb	r3, [r3, #25]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e007      	b.n	8003674 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	7e9b      	ldrb	r3, [r3, #26]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d108      	bne.n	800368e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0220 	orr.w	r2, r2, #32
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e007      	b.n	800369e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0220 	bic.w	r2, r2, #32
 800369c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7edb      	ldrb	r3, [r3, #27]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d108      	bne.n	80036b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0210 	bic.w	r2, r2, #16
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e007      	b.n	80036c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0210 	orr.w	r2, r2, #16
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7f1b      	ldrb	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d108      	bne.n	80036e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0208 	orr.w	r2, r2, #8
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e007      	b.n	80036f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7f5b      	ldrb	r3, [r3, #29]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d108      	bne.n	800370c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0204 	orr.w	r2, r2, #4
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e007      	b.n	800371c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0204 	bic.w	r2, r2, #4
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	ea42 0103 	orr.w	r1, r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800378c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378e:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	60d3      	str	r3, [r2, #12]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff8e 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff29 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff3e 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff8e 	bl	8003850 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5d 	bl	80037fc <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff31 	bl	80037c0 <__NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffa2 	bl	80038b8 <SysTick_Config>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e037      	b.n	8003a04 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80039ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f9b8 	bl	8003d5c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}  
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_DMA_Start_IT+0x20>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e04a      	b.n	8003ac2 <HAL_DMA_Start_IT+0xb6>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d13a      	bne.n	8003ab4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f94b 	bl	8003cfe <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 020e 	orr.w	r2, r2, #14
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e00f      	b.n	8003aa2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 020a 	orr.w	r2, r2, #10
 8003a90:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e005      	b.n	8003ac0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
 8003abe:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d008      	beq.n	8003aee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2204      	movs	r2, #4
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e020      	b.n	8003b30 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 020e 	bic.w	r2, r2, #14
 8003afc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d005      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2204      	movs	r2, #4
 8003b56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	e027      	b.n	8003bae <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 020e 	bic.w	r2, r2, #14
 8003b6c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	2101      	movs	r1, #1
 8003b88:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
    } 
  }
  return status;
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d024      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x72>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d01f      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d107      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0204 	bic.w	r2, r2, #4
 8003c06:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c10:	2104      	movs	r1, #4
 8003c12:	fa01 f202 	lsl.w	r2, r1, r2
 8003c16:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d06a      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c28:	e065      	b.n	8003cf6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2202      	movs	r2, #2
 8003c30:	409a      	lsls	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d02c      	beq.n	8003c94 <HAL_DMA_IRQHandler+0xdc>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d027      	beq.n	8003c94 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 020a 	bic.w	r2, r2, #10
 8003c60:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	2102      	movs	r1, #2
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d035      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003c92:	e030      	b.n	8003cf6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	2208      	movs	r2, #8
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d028      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x13e>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d023      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 020e 	bic.w	r2, r2, #14
 8003cbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ccc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
    }
  }
}  
 8003cf4:	e7ff      	b.n	8003cf6 <HAL_DMA_IRQHandler+0x13e>
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d108      	bne.n	8003d3e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d3c:	e007      	b.n	8003d4e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	60da      	str	r2, [r3, #12]
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <DMA_CalcBaseAndBitshift+0x34>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <DMA_CalcBaseAndBitshift+0x38>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	009a      	lsls	r2, r3, #2
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a06      	ldr	r2, [pc, #24]	; (8003d98 <DMA_CalcBaseAndBitshift+0x3c>)
 8003d80:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	bffdfff8 	.word	0xbffdfff8
 8003d94:	cccccccd 	.word	0xcccccccd
 8003d98:	40020000 	.word	0x40020000

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003daa:	e14e      	b.n	800404a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8140 	beq.w	8004044 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 0303 	and.w	r3, r3, #3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d005      	beq.n	8003ddc <HAL_GPIO_Init+0x40>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d130      	bne.n	8003e3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4013      	ands	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e12:	2201      	movs	r2, #1
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f003 0201 	and.w	r2, r3, #1
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d017      	beq.n	8003e7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d123      	bne.n	8003ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	08da      	lsrs	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3208      	adds	r2, #8
 8003ec8:	6939      	ldr	r1, [r7, #16]
 8003eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0203 	and.w	r2, r3, #3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 809a 	beq.w	8004044 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f10:	4b55      	ldr	r3, [pc, #340]	; (8004068 <HAL_GPIO_Init+0x2cc>)
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	4a54      	ldr	r2, [pc, #336]	; (8004068 <HAL_GPIO_Init+0x2cc>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6193      	str	r3, [r2, #24]
 8003f1c:	4b52      	ldr	r3, [pc, #328]	; (8004068 <HAL_GPIO_Init+0x2cc>)
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
 8003f26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f28:	4a50      	ldr	r2, [pc, #320]	; (800406c <HAL_GPIO_Init+0x2d0>)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	3302      	adds	r3, #2
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	220f      	movs	r2, #15
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f52:	d013      	beq.n	8003f7c <HAL_GPIO_Init+0x1e0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a46      	ldr	r2, [pc, #280]	; (8004070 <HAL_GPIO_Init+0x2d4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00d      	beq.n	8003f78 <HAL_GPIO_Init+0x1dc>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a45      	ldr	r2, [pc, #276]	; (8004074 <HAL_GPIO_Init+0x2d8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d007      	beq.n	8003f74 <HAL_GPIO_Init+0x1d8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a44      	ldr	r2, [pc, #272]	; (8004078 <HAL_GPIO_Init+0x2dc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_GPIO_Init+0x1d4>
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e006      	b.n	8003f7e <HAL_GPIO_Init+0x1e2>
 8003f70:	2305      	movs	r3, #5
 8003f72:	e004      	b.n	8003f7e <HAL_GPIO_Init+0x1e2>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e002      	b.n	8003f7e <HAL_GPIO_Init+0x1e2>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_GPIO_Init+0x1e2>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	f002 0203 	and.w	r2, r2, #3
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	4093      	lsls	r3, r2
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f8e:	4937      	ldr	r1, [pc, #220]	; (800406c <HAL_GPIO_Init+0x2d0>)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	3302      	adds	r3, #2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f9c:	4b37      	ldr	r3, [pc, #220]	; (800407c <HAL_GPIO_Init+0x2e0>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fc0:	4a2e      	ldr	r2, [pc, #184]	; (800407c <HAL_GPIO_Init+0x2e0>)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_GPIO_Init+0x2e0>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fea:	4a24      	ldr	r2, [pc, #144]	; (800407c <HAL_GPIO_Init+0x2e0>)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_GPIO_Init+0x2e0>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_GPIO_Init+0x2e0>)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_GPIO_Init+0x2e0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	43db      	mvns	r3, r3
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4013      	ands	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800403e:	4a0f      	ldr	r2, [pc, #60]	; (800407c <HAL_GPIO_Init+0x2e0>)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3301      	adds	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	f47f aea9 	bne.w	8003dac <HAL_GPIO_Init+0x10>
  }
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40021000 	.word	0x40021000
 800406c:	40010000 	.word	0x40010000
 8004070:	48000400 	.word	0x48000400
 8004074:	48000800 	.word	0x48000800
 8004078:	48000c00 	.word	0x48000c00
 800407c:	40010400 	.word	0x40010400

08004080 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	887b      	ldrh	r3, [r7, #2]
 8004092:	4013      	ands	r3, r2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e001      	b.n	80040a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	807b      	strh	r3, [r7, #2]
 80040bc:	4613      	mov	r3, r2
 80040be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040c0:	787b      	ldrb	r3, [r7, #1]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040c6:	887a      	ldrh	r2, [r7, #2]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040cc:	e002      	b.n	80040d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e081      	b.n	80041f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd feae 	bl	8001e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	; 0x24
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	e006      	b.n	8004168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d104      	bne.n	800417a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004178:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800418c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800419c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69d9      	ldr	r1, [r3, #28]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1a      	ldr	r2, [r3, #32]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	461a      	mov	r2, r3
 800420c:	460b      	mov	r3, r1
 800420e:	817b      	strh	r3, [r7, #10]
 8004210:	4613      	mov	r3, r2
 8004212:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b20      	cmp	r3, #32
 800421e:	f040 80db 	bne.w	80043d8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_I2C_Master_Receive+0x30>
 800422c:	2302      	movs	r3, #2
 800422e:	e0d4      	b.n	80043da <HAL_I2C_Master_Receive+0x1da>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004238:	f7fe f9f0 	bl	800261c <HAL_GetTick>
 800423c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	2319      	movs	r3, #25
 8004244:	2201      	movs	r2, #1
 8004246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f8f2 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0bf      	b.n	80043da <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2222      	movs	r2, #34	; 0x22
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2210      	movs	r2, #16
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	893a      	ldrh	r2, [r7, #8]
 800427a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2bff      	cmp	r3, #255	; 0xff
 800428a:	d90e      	bls.n	80042aa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	22ff      	movs	r2, #255	; 0xff
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	4b52      	ldr	r3, [pc, #328]	; (80043e4 <HAL_I2C_Master_Receive+0x1e4>)
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 faba 	bl	800481c <I2C_TransferConfig>
 80042a8:	e06d      	b.n	8004386 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <HAL_I2C_Master_Receive+0x1e4>)
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 faa9 	bl	800481c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80042ca:	e05c      	b.n	8004386 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	6a39      	ldr	r1, [r7, #32]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f941 	bl	8004558 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e07c      	b.n	80043da <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004308:	b29b      	uxth	r3, r3
 800430a:	3b01      	subs	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004316:	b29b      	uxth	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d034      	beq.n	8004386 <HAL_I2C_Master_Receive+0x186>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	2b00      	cmp	r3, #0
 8004322:	d130      	bne.n	8004386 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	2200      	movs	r2, #0
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f880 	bl	8004434 <I2C_WaitOnFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e04d      	b.n	80043da <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	2bff      	cmp	r3, #255	; 0xff
 8004346:	d90e      	bls.n	8004366 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	22ff      	movs	r2, #255	; 0xff
 800434c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	b2da      	uxtb	r2, r3
 8004354:	8979      	ldrh	r1, [r7, #10]
 8004356:	2300      	movs	r3, #0
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fa5c 	bl	800481c <I2C_TransferConfig>
 8004364:	e00f      	b.n	8004386 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004374:	b2da      	uxtb	r2, r3
 8004376:	8979      	ldrh	r1, [r7, #10]
 8004378:	2300      	movs	r3, #0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fa4b 	bl	800481c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d19d      	bne.n	80042cc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	6a39      	ldr	r1, [r7, #32]
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 f89c 	bl	80044d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e01a      	b.n	80043da <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2220      	movs	r2, #32
 80043aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <HAL_I2C_Master_Receive+0x1e8>)
 80043b8:	400b      	ands	r3, r1
 80043ba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e000      	b.n	80043da <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	80002400 	.word	0x80002400
 80043e8:	fe00e800 	.word	0xfe00e800

080043ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d103      	bne.n	800440a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d007      	beq.n	8004428 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	619a      	str	r2, [r3, #24]
  }
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	4613      	mov	r3, r2
 8004442:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004444:	e031      	b.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d02d      	beq.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444e:	f7fe f8e5 	bl	800261c <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d302      	bcc.n	8004464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d122      	bne.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	79fb      	ldrb	r3, [r7, #7]
 800447e:	429a      	cmp	r2, r3
 8004480:	d113      	bne.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f043 0220 	orr.w	r2, r3, #32
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e00f      	b.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4013      	ands	r3, r2
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d0be      	beq.n	8004446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044de:	e02f      	b.n	8004540 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f8b9 	bl	800465c <I2C_IsErrorOccurred>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e02d      	b.n	8004550 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f4:	f7fe f892 	bl	800261c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d11a      	bne.n	8004540 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b20      	cmp	r3, #32
 8004516:	d013      	beq.n	8004540 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d1c8      	bne.n	80044e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004564:	e06b      	b.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68b9      	ldr	r1, [r7, #8]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f876 	bl	800465c <I2C_IsErrorOccurred>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e069      	b.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b20      	cmp	r3, #32
 8004586:	d138      	bne.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b04      	cmp	r3, #4
 8004594:	d105      	bne.n	80045a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e055      	b.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d107      	bne.n	80045c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2210      	movs	r2, #16
 80045b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2204      	movs	r2, #4
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
 80045be:	e002      	b.n	80045c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2220      	movs	r2, #32
 80045cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	4b1f      	ldr	r3, [pc, #124]	; (8004658 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80045da:	400b      	ands	r3, r1
 80045dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e029      	b.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe f80f 	bl	800261c <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d116      	bne.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b04      	cmp	r3, #4
 800461c:	d00f      	beq.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f043 0220 	orr.w	r2, r3, #32
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e007      	b.n	800464e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d18c      	bne.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	fe00e800 	.word	0xfe00e800

0800465c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	d068      	beq.n	800475a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2210      	movs	r2, #16
 800468e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004690:	e049      	b.n	8004726 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d045      	beq.n	8004726 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fd ffbf 	bl	800261c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <I2C_IsErrorOccurred+0x54>
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d13a      	bne.n	8004726 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d2:	d121      	bne.n	8004718 <I2C_IsErrorOccurred+0xbc>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046da:	d01d      	beq.n	8004718 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d01a      	beq.n	8004718 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80046f2:	f7fd ff93 	bl	800261c <HAL_GetTick>
 80046f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f8:	e00e      	b.n	8004718 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046fa:	f7fd ff8f 	bl	800261c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b19      	cmp	r3, #25
 8004706:	d907      	bls.n	8004718 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f043 0320 	orr.w	r3, r3, #32
 800470e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004716:	e006      	b.n	8004726 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f003 0320 	and.w	r3, r3, #32
 8004722:	2b20      	cmp	r3, #32
 8004724:	d1e9      	bne.n	80046fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f003 0320 	and.w	r3, r3, #32
 8004730:	2b20      	cmp	r3, #32
 8004732:	d003      	beq.n	800473c <I2C_IsErrorOccurred+0xe0>
 8004734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0aa      	beq.n	8004692 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800473c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2220      	movs	r2, #32
 800474a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	f043 0304 	orr.w	r3, r3, #4
 8004752:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	f043 0301 	orr.w	r3, r3, #1
 8004772:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800477c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f043 0308 	orr.w	r3, r3, #8
 8004794:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800479e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	f043 0302 	orr.w	r3, r3, #2
 80047b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80047c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01c      	beq.n	800480a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff fe0b 	bl	80043ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <I2C_IsErrorOccurred+0x1bc>)
 80047e2:	400b      	ands	r3, r1
 80047e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800480a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800480e:	4618      	mov	r0, r3
 8004810:	3728      	adds	r7, #40	; 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	fe00e800 	.word	0xfe00e800

0800481c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	460b      	mov	r3, r1
 8004828:	817b      	strh	r3, [r7, #10]
 800482a:	4613      	mov	r3, r2
 800482c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800482e:	897b      	ldrh	r3, [r7, #10]
 8004830:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004834:	7a7b      	ldrb	r3, [r7, #9]
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	4313      	orrs	r3, r2
 8004846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800484a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	0d5b      	lsrs	r3, r3, #21
 8004856:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <I2C_TransferConfig+0x60>)
 800485c:	430b      	orrs	r3, r1
 800485e:	43db      	mvns	r3, r3
 8004860:	ea02 0103 	and.w	r1, r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	03ff63ff 	.word	0x03ff63ff

08004880 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b20      	cmp	r3, #32
 8004894:	d138      	bne.n	8004908 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e032      	b.n	800490a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0201 	bic.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	d139      	bne.n	80049a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004936:	2302      	movs	r3, #2
 8004938:	e033      	b.n	80049a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2224      	movs	r2, #36	; 0x24
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004968:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2220      	movs	r2, #32
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6193      	str	r3, [r2, #24]
 80049c4:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4905      	ldr	r1, [pc, #20]	; (80049ec <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4313      	orrs	r3, r2
 80049da:	600b      	str	r3, [r1, #0]
}
 80049dc:	bf00      	nop
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40010000 	.word	0x40010000

080049f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f001 b823 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 817d 	beq.w	8004d26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a2c:	4bbc      	ldr	r3, [pc, #752]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d00c      	beq.n	8004a52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a38:	4bb9      	ldr	r3, [pc, #740]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d15c      	bne.n	8004afe <HAL_RCC_OscConfig+0x10e>
 8004a44:	4bb6      	ldr	r3, [pc, #728]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a50:	d155      	bne.n	8004afe <HAL_RCC_OscConfig+0x10e>
 8004a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a56:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004a5e:	fa93 f3a3 	rbit	r3, r3
 8004a62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6a:	fab3 f383 	clz	r3, r3
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	095b      	lsrs	r3, r3, #5
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d102      	bne.n	8004a84 <HAL_RCC_OscConfig+0x94>
 8004a7e:	4ba8      	ldr	r3, [pc, #672]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	e015      	b.n	8004ab0 <HAL_RCC_OscConfig+0xc0>
 8004a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a9c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004aa0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004aa4:	fa93 f3a3 	rbit	r3, r3
 8004aa8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004aac:	4b9c      	ldr	r3, [pc, #624]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ab4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004ab8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004abc:	fa92 f2a2 	rbit	r2, r2
 8004ac0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004ac4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004ac8:	fab2 f282 	clz	r2, r2
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	f042 0220 	orr.w	r2, r2, #32
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	f002 021f 	and.w	r2, r2, #31
 8004ad8:	2101      	movs	r1, #1
 8004ada:	fa01 f202 	lsl.w	r2, r1, r2
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 811f 	beq.w	8004d24 <HAL_RCC_OscConfig+0x334>
 8004ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8116 	bne.w	8004d24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f000 bfaf 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCC_OscConfig+0x12e>
 8004b10:	4b83      	ldr	r3, [pc, #524]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a82      	ldr	r2, [pc, #520]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e036      	b.n	8004b8c <HAL_RCC_OscConfig+0x19c>
 8004b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x158>
 8004b2e:	4b7c      	ldr	r3, [pc, #496]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a7b      	ldr	r2, [pc, #492]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b79      	ldr	r3, [pc, #484]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a78      	ldr	r2, [pc, #480]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e021      	b.n	8004b8c <HAL_RCC_OscConfig+0x19c>
 8004b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b58:	d10c      	bne.n	8004b74 <HAL_RCC_OscConfig+0x184>
 8004b5a:	4b71      	ldr	r3, [pc, #452]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a70      	ldr	r2, [pc, #448]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	4b6e      	ldr	r3, [pc, #440]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a6d      	ldr	r2, [pc, #436]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	e00b      	b.n	8004b8c <HAL_RCC_OscConfig+0x19c>
 8004b74:	4b6a      	ldr	r3, [pc, #424]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a69      	ldr	r2, [pc, #420]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	4b67      	ldr	r3, [pc, #412]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a66      	ldr	r2, [pc, #408]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b8c:	4b64      	ldr	r3, [pc, #400]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	f023 020f 	bic.w	r2, r3, #15
 8004b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	495f      	ldr	r1, [pc, #380]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d059      	beq.n	8004c6a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fd fd31 	bl	800261c <HAL_GetTick>
 8004bba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc0:	f7fd fd2c 	bl	800261c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b64      	cmp	r3, #100	; 0x64
 8004bce:	d902      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	f000 bf43 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>
 8004bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bda:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bde:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004be2:	fa93 f3a3 	rbit	r3, r3
 8004be6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004bea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bee:	fab3 f383 	clz	r3, r3
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d102      	bne.n	8004c08 <HAL_RCC_OscConfig+0x218>
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	e015      	b.n	8004c34 <HAL_RCC_OscConfig+0x244>
 8004c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c0c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004c28:	fa93 f3a3 	rbit	r3, r3
 8004c2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c30:	4b3b      	ldr	r3, [pc, #236]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c38:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c40:	fa92 f2a2 	rbit	r2, r2
 8004c44:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c4c:	fab2 f282 	clz	r2, r2
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	f042 0220 	orr.w	r2, r2, #32
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	f002 021f 	and.w	r2, r2, #31
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ab      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x1d0>
 8004c68:	e05d      	b.n	8004d26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fcd7 	bl	800261c <HAL_GetTick>
 8004c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c74:	f7fd fcd2 	bl	800261c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b64      	cmp	r3, #100	; 0x64
 8004c82:	d902      	bls.n	8004c8a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	f000 bee9 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>
 8004c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c8e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c96:	fa93 f3a3 	rbit	r3, r3
 8004c9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004c9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca2:	fab3 f383 	clz	r3, r3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d102      	bne.n	8004cbc <HAL_RCC_OscConfig+0x2cc>
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	e015      	b.n	8004ce8 <HAL_RCC_OscConfig+0x2f8>
 8004cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cc0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004cc8:	fa93 f3a3 	rbit	r3, r3
 8004ccc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004cd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004cdc:	fa93 f3a3 	rbit	r3, r3
 8004ce0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <HAL_RCC_OscConfig+0x330>)
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004cf0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004cf4:	fa92 f2a2 	rbit	r2, r2
 8004cf8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004cfc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004d00:	fab2 f282 	clz	r2, r2
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	f042 0220 	orr.w	r2, r2, #32
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	f002 021f 	and.w	r2, r2, #31
 8004d10:	2101      	movs	r1, #1
 8004d12:	fa01 f202 	lsl.w	r2, r1, r2
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1ab      	bne.n	8004c74 <HAL_RCC_OscConfig+0x284>
 8004d1c:	e003      	b.n	8004d26 <HAL_RCC_OscConfig+0x336>
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 817d 	beq.w	8005036 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d3c:	4ba6      	ldr	r3, [pc, #664]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00b      	beq.n	8004d60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d48:	4ba3      	ldr	r3, [pc, #652]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 030c 	and.w	r3, r3, #12
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d172      	bne.n	8004e3a <HAL_RCC_OscConfig+0x44a>
 8004d54:	4ba0      	ldr	r3, [pc, #640]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d16c      	bne.n	8004e3a <HAL_RCC_OscConfig+0x44a>
 8004d60:	2302      	movs	r3, #2
 8004d62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004d6a:	fa93 f3a3 	rbit	r3, r3
 8004d6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004d72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_RCC_OscConfig+0x3a0>
 8004d8a:	4b93      	ldr	r3, [pc, #588]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	e013      	b.n	8004db8 <HAL_RCC_OscConfig+0x3c8>
 8004d90:	2302      	movs	r3, #2
 8004d92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004da2:	2302      	movs	r3, #2
 8004da4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004dac:	fa93 f3a3 	rbit	r3, r3
 8004db0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004db4:	4b88      	ldr	r3, [pc, #544]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2202      	movs	r2, #2
 8004dba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004dbe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004dc2:	fa92 f2a2 	rbit	r2, r2
 8004dc6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004dca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004dce:	fab2 f282 	clz	r2, r2
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	f042 0220 	orr.w	r2, r2, #32
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	f002 021f 	and.w	r2, r2, #31
 8004dde:	2101      	movs	r1, #1
 8004de0:	fa01 f202 	lsl.w	r2, r1, r2
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCC_OscConfig+0x410>
 8004dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d002      	beq.n	8004e00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f000 be2e 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e00:	4b75      	ldr	r3, [pc, #468]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	21f8      	movs	r1, #248	; 0xf8
 8004e16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004e1e:	fa91 f1a1 	rbit	r1, r1
 8004e22:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004e26:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e2a:	fab1 f181 	clz	r1, r1
 8004e2e:	b2c9      	uxtb	r1, r1
 8004e30:	408b      	lsls	r3, r1
 8004e32:	4969      	ldr	r1, [pc, #420]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e38:	e0fd      	b.n	8005036 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8088 	beq.w	8004f5c <HAL_RCC_OscConfig+0x56c>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e56:	fa93 f3a3 	rbit	r3, r3
 8004e5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004e5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e62:	fab3 f383 	clz	r3, r3
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	461a      	mov	r2, r3
 8004e74:	2301      	movs	r3, #1
 8004e76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e78:	f7fd fbd0 	bl	800261c <HAL_GetTick>
 8004e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e82:	f7fd fbcb 	bl	800261c <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d902      	bls.n	8004e98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	f000 bde2 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004eaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d102      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x4d8>
 8004ec2:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	e013      	b.n	8004ef0 <HAL_RCC_OscConfig+0x500>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ece:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004eda:	2302      	movs	r3, #2
 8004edc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004ee0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004eec:	4b3a      	ldr	r3, [pc, #232]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004ef6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004efa:	fa92 f2a2 	rbit	r2, r2
 8004efe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004f02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f06:	fab2 f282 	clz	r2, r2
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	f042 0220 	orr.w	r2, r2, #32
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	f002 021f 	and.w	r2, r2, #31
 8004f16:	2101      	movs	r1, #1
 8004f18:	fa01 f202 	lsl.w	r2, r1, r2
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0af      	beq.n	8004e82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f22:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	21f8      	movs	r1, #248	; 0xf8
 8004f38:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f40:	fa91 f1a1 	rbit	r1, r1
 8004f44:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004f48:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004f4c:	fab1 f181 	clz	r1, r1
 8004f50:	b2c9      	uxtb	r1, r1
 8004f52:	408b      	lsls	r3, r1
 8004f54:	4920      	ldr	r1, [pc, #128]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
 8004f5a:	e06c      	b.n	8005036 <HAL_RCC_OscConfig+0x646>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004f66:	fa93 f3a3 	rbit	r3, r3
 8004f6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	2300      	movs	r3, #0
 8004f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7fd fb48 	bl	800261c <HAL_GetTick>
 8004f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f90:	e00a      	b.n	8004fa8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f92:	f7fd fb43 	bl	800261c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d902      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	f000 bd5a 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	095b      	lsrs	r3, r3, #5
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d104      	bne.n	8004fdc <HAL_RCC_OscConfig+0x5ec>
 8004fd2:	4b01      	ldr	r3, [pc, #4]	; (8004fd8 <HAL_RCC_OscConfig+0x5e8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	e015      	b.n	8005004 <HAL_RCC_OscConfig+0x614>
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fe6:	fa93 f3a3 	rbit	r3, r3
 8004fea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fee:	2302      	movs	r3, #2
 8004ff0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ff8:	fa93 f3a3 	rbit	r3, r3
 8004ffc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005000:	4bc8      	ldr	r3, [pc, #800]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2202      	movs	r2, #2
 8005006:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800500a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800500e:	fa92 f2a2 	rbit	r2, r2
 8005012:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005016:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800501a:	fab2 f282 	clz	r2, r2
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	f042 0220 	orr.w	r2, r2, #32
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	f002 021f 	and.w	r2, r2, #31
 800502a:	2101      	movs	r1, #1
 800502c:	fa01 f202 	lsl.w	r2, r1, r2
 8005030:	4013      	ands	r3, r2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1ad      	bne.n	8004f92 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 8110 	beq.w	800526c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800504c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d079      	beq.n	8005150 <HAL_RCC_OscConfig+0x760>
 800505c:	2301      	movs	r3, #1
 800505e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800506e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005072:	fab3 f383 	clz	r3, r3
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	4bab      	ldr	r3, [pc, #684]	; (8005328 <HAL_RCC_OscConfig+0x938>)
 800507c:	4413      	add	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	461a      	mov	r2, r3
 8005082:	2301      	movs	r3, #1
 8005084:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005086:	f7fd fac9 	bl	800261c <HAL_GetTick>
 800508a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005090:	f7fd fac4 	bl	800261c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d902      	bls.n	80050a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	f000 bcdb 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>
 80050a6:	2302      	movs	r3, #2
 80050a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050b0:	fa93 f3a3 	rbit	r3, r3
 80050b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050c0:	2202      	movs	r2, #2
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	fa93 f2a3 	rbit	r2, r3
 80050d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e4:	2202      	movs	r2, #2
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	fa93 f2a3 	rbit	r2, r3
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005100:	4b88      	ldr	r3, [pc, #544]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 8005102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005108:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800510c:	2102      	movs	r1, #2
 800510e:	6019      	str	r1, [r3, #0]
 8005110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005114:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	fa93 f1a3 	rbit	r1, r3
 800511e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005122:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005126:	6019      	str	r1, [r3, #0]
  return result;
 8005128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	fab3 f383 	clz	r3, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f003 031f 	and.w	r3, r3, #31
 8005142:	2101      	movs	r1, #1
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0a0      	beq.n	8005090 <HAL_RCC_OscConfig+0x6a0>
 800514e:	e08d      	b.n	800526c <HAL_RCC_OscConfig+0x87c>
 8005150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005154:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005158:	2201      	movs	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800515c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005160:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	fa93 f2a3 	rbit	r2, r3
 800516a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005172:	601a      	str	r2, [r3, #0]
  return result;
 8005174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005178:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800517c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800517e:	fab3 f383 	clz	r3, r3
 8005182:	b2db      	uxtb	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	4b68      	ldr	r3, [pc, #416]	; (8005328 <HAL_RCC_OscConfig+0x938>)
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	461a      	mov	r2, r3
 800518e:	2300      	movs	r3, #0
 8005190:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005192:	f7fd fa43 	bl	800261c <HAL_GetTick>
 8005196:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519c:	f7fd fa3e 	bl	800261c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d902      	bls.n	80051b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	f000 bc55 	b.w	8005a5c <HAL_RCC_OscConfig+0x106c>
 80051b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051ba:	2202      	movs	r2, #2
 80051bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	fa93 f2a3 	rbit	r2, r3
 80051cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051de:	2202      	movs	r2, #2
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	fa93 f2a3 	rbit	r2, r3
 80051f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005202:	2202      	movs	r2, #2
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	fa93 f2a3 	rbit	r2, r3
 8005214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005218:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800521c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800521e:	4b41      	ldr	r3, [pc, #260]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 8005220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800522a:	2102      	movs	r1, #2
 800522c:	6019      	str	r1, [r3, #0]
 800522e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005232:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	fa93 f1a3 	rbit	r1, r3
 800523c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005240:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005244:	6019      	str	r1, [r3, #0]
  return result;
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	fab3 f383 	clz	r3, r3
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f003 031f 	and.w	r3, r3, #31
 8005260:	2101      	movs	r1, #1
 8005262:	fa01 f303 	lsl.w	r3, r1, r3
 8005266:	4013      	ands	r3, r2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d197      	bne.n	800519c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800526c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 81a1 	beq.w	80055c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005288:	4b26      	ldr	r3, [pc, #152]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d116      	bne.n	80052c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005294:	4b23      	ldr	r3, [pc, #140]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	4a22      	ldr	r2, [pc, #136]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 800529a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529e:	61d3      	str	r3, [r2, #28]
 80052a0:	4b20      	ldr	r3, [pc, #128]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80052a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80052ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80052bc:	2301      	movs	r3, #1
 80052be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c2:	4b1a      	ldr	r3, [pc, #104]	; (800532c <HAL_RCC_OscConfig+0x93c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11a      	bne.n	8005304 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ce:	4b17      	ldr	r3, [pc, #92]	; (800532c <HAL_RCC_OscConfig+0x93c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a16      	ldr	r2, [pc, #88]	; (800532c <HAL_RCC_OscConfig+0x93c>)
 80052d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052da:	f7fd f99f 	bl	800261c <HAL_GetTick>
 80052de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e2:	e009      	b.n	80052f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052e4:	f7fd f99a 	bl	800261c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b64      	cmp	r3, #100	; 0x64
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e3b1      	b.n	8005a5c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <HAL_RCC_OscConfig+0x93c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ef      	beq.n	80052e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d10d      	bne.n	8005330 <HAL_RCC_OscConfig+0x940>
 8005314:	4b03      	ldr	r3, [pc, #12]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4a02      	ldr	r2, [pc, #8]	; (8005324 <HAL_RCC_OscConfig+0x934>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6213      	str	r3, [r2, #32]
 8005320:	e03c      	b.n	800539c <HAL_RCC_OscConfig+0x9ac>
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	10908120 	.word	0x10908120
 800532c:	40007000 	.word	0x40007000
 8005330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10c      	bne.n	800535a <HAL_RCC_OscConfig+0x96a>
 8005340:	4bc1      	ldr	r3, [pc, #772]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	4ac0      	ldr	r2, [pc, #768]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	6213      	str	r3, [r2, #32]
 800534c:	4bbe      	ldr	r3, [pc, #760]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	4abd      	ldr	r2, [pc, #756]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005352:	f023 0304 	bic.w	r3, r3, #4
 8005356:	6213      	str	r3, [r2, #32]
 8005358:	e020      	b.n	800539c <HAL_RCC_OscConfig+0x9ac>
 800535a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b05      	cmp	r3, #5
 8005368:	d10c      	bne.n	8005384 <HAL_RCC_OscConfig+0x994>
 800536a:	4bb7      	ldr	r3, [pc, #732]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	4ab6      	ldr	r2, [pc, #728]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005370:	f043 0304 	orr.w	r3, r3, #4
 8005374:	6213      	str	r3, [r2, #32]
 8005376:	4bb4      	ldr	r3, [pc, #720]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	4ab3      	ldr	r2, [pc, #716]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6213      	str	r3, [r2, #32]
 8005382:	e00b      	b.n	800539c <HAL_RCC_OscConfig+0x9ac>
 8005384:	4bb0      	ldr	r3, [pc, #704]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	4aaf      	ldr	r2, [pc, #700]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 800538a:	f023 0301 	bic.w	r3, r3, #1
 800538e:	6213      	str	r3, [r2, #32]
 8005390:	4bad      	ldr	r3, [pc, #692]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	4aac      	ldr	r2, [pc, #688]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005396:	f023 0304 	bic.w	r3, r3, #4
 800539a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800539c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8081 	beq.w	80054b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ae:	f7fd f935 	bl	800261c <HAL_GetTick>
 80053b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b6:	e00b      	b.n	80053d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fd f930 	bl	800261c <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e345      	b.n	8005a5c <HAL_RCC_OscConfig+0x106c>
 80053d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053d8:	2202      	movs	r2, #2
 80053da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	fa93 f2a3 	rbit	r2, r3
 80053ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80053fc:	2202      	movs	r2, #2
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005404:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	fa93 f2a3 	rbit	r2, r3
 800540e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005412:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005416:	601a      	str	r2, [r3, #0]
  return result;
 8005418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005420:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005422:	fab3 f383 	clz	r3, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f043 0302 	orr.w	r3, r3, #2
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d102      	bne.n	800543c <HAL_RCC_OscConfig+0xa4c>
 8005436:	4b84      	ldr	r3, [pc, #528]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	e013      	b.n	8005464 <HAL_RCC_OscConfig+0xa74>
 800543c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005440:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005444:	2202      	movs	r2, #2
 8005446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	fa93 f2a3 	rbit	r2, r3
 8005456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	4b79      	ldr	r3, [pc, #484]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005468:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800546c:	2102      	movs	r1, #2
 800546e:	6011      	str	r1, [r2, #0]
 8005470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005474:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005478:	6812      	ldr	r2, [r2, #0]
 800547a:	fa92 f1a2 	rbit	r1, r2
 800547e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005482:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005486:	6011      	str	r1, [r2, #0]
  return result;
 8005488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800548c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	fab2 f282 	clz	r2, r2
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	f002 021f 	and.w	r2, r2, #31
 80054a2:	2101      	movs	r1, #1
 80054a4:	fa01 f202 	lsl.w	r2, r1, r2
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d084      	beq.n	80053b8 <HAL_RCC_OscConfig+0x9c8>
 80054ae:	e07f      	b.n	80055b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b0:	f7fd f8b4 	bl	800261c <HAL_GetTick>
 80054b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b8:	e00b      	b.n	80054d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ba:	f7fd f8af 	bl	800261c <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e2c4      	b.n	8005a5c <HAL_RCC_OscConfig+0x106c>
 80054d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80054da:	2202      	movs	r2, #2
 80054dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	fa93 f2a3 	rbit	r2, r3
 80054ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80054fe:	2202      	movs	r2, #2
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005506:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	fa93 f2a3 	rbit	r2, r3
 8005510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005514:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005518:	601a      	str	r2, [r3, #0]
  return result;
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005522:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005524:	fab3 f383 	clz	r3, r3
 8005528:	b2db      	uxtb	r3, r3
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f043 0302 	orr.w	r3, r3, #2
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d102      	bne.n	800553e <HAL_RCC_OscConfig+0xb4e>
 8005538:	4b43      	ldr	r3, [pc, #268]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	e013      	b.n	8005566 <HAL_RCC_OscConfig+0xb76>
 800553e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005542:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005546:	2202      	movs	r2, #2
 8005548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	fa93 f2a3 	rbit	r2, r3
 8005558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	4b39      	ldr	r3, [pc, #228]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800556a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800556e:	2102      	movs	r1, #2
 8005570:	6011      	str	r1, [r2, #0]
 8005572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005576:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	fa92 f1a2 	rbit	r1, r2
 8005580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005584:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005588:	6011      	str	r1, [r2, #0]
  return result;
 800558a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800558e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	fab2 f282 	clz	r2, r2
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	f002 021f 	and.w	r2, r2, #31
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f202 	lsl.w	r2, r1, r2
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d184      	bne.n	80054ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b8:	4b23      	ldr	r3, [pc, #140]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 80055be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8242 	beq.w	8005a5a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055d6:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <HAL_RCC_OscConfig+0xc58>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b08      	cmp	r3, #8
 80055e0:	f000 8213 	beq.w	8005a0a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69db      	ldr	r3, [r3, #28]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	f040 8162 	bne.w	80058ba <HAL_RCC_OscConfig+0xeca>
 80055f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80055fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005608:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	fa93 f2a3 	rbit	r2, r3
 8005612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005616:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800561a:	601a      	str	r2, [r3, #0]
  return result;
 800561c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005620:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005624:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005626:	fab3 f383 	clz	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fc ffee 	bl	800261c <HAL_GetTick>
 8005640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005644:	e00c      	b.n	8005660 <HAL_RCC_OscConfig+0xc70>
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564c:	f7fc ffe6 	bl	800261c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e1fd      	b.n	8005a5c <HAL_RCC_OscConfig+0x106c>
 8005660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005664:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800566c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005672:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	fa93 f2a3 	rbit	r2, r3
 800567c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005680:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005684:	601a      	str	r2, [r3, #0]
  return result;
 8005686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800568e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005690:	fab3 f383 	clz	r3, r3
 8005694:	b2db      	uxtb	r3, r3
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d102      	bne.n	80056aa <HAL_RCC_OscConfig+0xcba>
 80056a4:	4bb0      	ldr	r3, [pc, #704]	; (8005968 <HAL_RCC_OscConfig+0xf78>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	e027      	b.n	80056fa <HAL_RCC_OscConfig+0xd0a>
 80056aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80056b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	fa93 f2a3 	rbit	r2, r3
 80056c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80056d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	fa93 f2a3 	rbit	r2, r3
 80056ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	4b9c      	ldr	r3, [pc, #624]	; (8005968 <HAL_RCC_OscConfig+0xf78>)
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80056fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005702:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005706:	6011      	str	r1, [r2, #0]
 8005708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800570c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	fa92 f1a2 	rbit	r1, r2
 8005716:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800571a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800571e:	6011      	str	r1, [r2, #0]
  return result;
 8005720:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005724:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005728:	6812      	ldr	r2, [r2, #0]
 800572a:	fab2 f282 	clz	r2, r2
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	f042 0220 	orr.w	r2, r2, #32
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	f002 021f 	and.w	r2, r2, #31
 800573a:	2101      	movs	r1, #1
 800573c:	fa01 f202 	lsl.w	r2, r1, r2
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d182      	bne.n	800564c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005746:	4b88      	ldr	r3, [pc, #544]	; (8005968 <HAL_RCC_OscConfig+0xf78>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800574e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800575a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800575e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	430b      	orrs	r3, r1
 8005768:	497f      	ldr	r1, [pc, #508]	; (8005968 <HAL_RCC_OscConfig+0xf78>)
 800576a:	4313      	orrs	r3, r2
 800576c:	604b      	str	r3, [r1, #4]
 800576e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005772:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005776:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800577a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005780:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	fa93 f2a3 	rbit	r2, r3
 800578a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005792:	601a      	str	r2, [r3, #0]
  return result;
 8005794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005798:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800579c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579e:	fab3 f383 	clz	r3, r3
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	461a      	mov	r2, r3
 80057b0:	2301      	movs	r3, #1
 80057b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fc ff32 	bl	800261c <HAL_GetTick>
 80057b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057bc:	e009      	b.n	80057d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057be:	f7fc ff2d 	bl	800261c <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e144      	b.n	8005a5c <HAL_RCC_OscConfig+0x106c>
 80057d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80057da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	fa93 f2a3 	rbit	r2, r3
 80057ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80057f6:	601a      	str	r2, [r3, #0]
  return result;
 80057f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005800:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d102      	bne.n	800581c <HAL_RCC_OscConfig+0xe2c>
 8005816:	4b54      	ldr	r3, [pc, #336]	; (8005968 <HAL_RCC_OscConfig+0xf78>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	e027      	b.n	800586c <HAL_RCC_OscConfig+0xe7c>
 800581c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005820:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	fa93 f2a3 	rbit	r2, r3
 8005838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005846:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800584a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005854:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	fa93 f2a3 	rbit	r2, r3
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <HAL_RCC_OscConfig+0xf78>)
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005870:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005874:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005878:	6011      	str	r1, [r2, #0]
 800587a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800587e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8005882:	6812      	ldr	r2, [r2, #0]
 8005884:	fa92 f1a2 	rbit	r1, r2
 8005888:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800588c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005890:	6011      	str	r1, [r2, #0]
  return result;
 8005892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005896:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	fab2 f282 	clz	r2, r2
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	f042 0220 	orr.w	r2, r2, #32
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	f002 021f 	and.w	r2, r2, #31
 80058ac:	2101      	movs	r1, #1
 80058ae:	fa01 f202 	lsl.w	r2, r1, r2
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d082      	beq.n	80057be <HAL_RCC_OscConfig+0xdce>
 80058b8:	e0cf      	b.n	8005a5a <HAL_RCC_OscConfig+0x106a>
 80058ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80058c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	fa93 f2a3 	rbit	r2, r3
 80058d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80058de:	601a      	str	r2, [r3, #0]
  return result;
 80058e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80058e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ea:	fab3 f383 	clz	r3, r3
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	461a      	mov	r2, r3
 80058fc:	2300      	movs	r3, #0
 80058fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fc fe8c 	bl	800261c <HAL_GetTick>
 8005904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005908:	e009      	b.n	800591e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590a:	f7fc fe87 	bl	800261c <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e09e      	b.n	8005a5c <HAL_RCC_OscConfig+0x106c>
 800591e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005922:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800592a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005930:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	fa93 f2a3 	rbit	r2, r3
 800593a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800593e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005942:	601a      	str	r2, [r3, #0]
  return result;
 8005944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005948:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800594c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800594e:	fab3 f383 	clz	r3, r3
 8005952:	b2db      	uxtb	r3, r3
 8005954:	095b      	lsrs	r3, r3, #5
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d104      	bne.n	800596c <HAL_RCC_OscConfig+0xf7c>
 8005962:	4b01      	ldr	r3, [pc, #4]	; (8005968 <HAL_RCC_OscConfig+0xf78>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	e029      	b.n	80059bc <HAL_RCC_OscConfig+0xfcc>
 8005968:	40021000 	.word	0x40021000
 800596c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005970:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800597e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	fa93 f2a3 	rbit	r2, r3
 8005988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800598c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005996:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800599a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	fa93 f2a3 	rbit	r2, r3
 80059ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	4b2b      	ldr	r3, [pc, #172]	; (8005a68 <HAL_RCC_OscConfig+0x1078>)
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80059c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059c8:	6011      	str	r1, [r2, #0]
 80059ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80059d2:	6812      	ldr	r2, [r2, #0]
 80059d4:	fa92 f1a2 	rbit	r1, r2
 80059d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80059e0:	6011      	str	r1, [r2, #0]
  return result;
 80059e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80059e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	fab2 f282 	clz	r2, r2
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	f042 0220 	orr.w	r2, r2, #32
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	f002 021f 	and.w	r2, r2, #31
 80059fc:	2101      	movs	r1, #1
 80059fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d180      	bne.n	800590a <HAL_RCC_OscConfig+0xf1a>
 8005a08:	e027      	b.n	8005a5a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e01e      	b.n	8005a5c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a1e:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <HAL_RCC_OscConfig+0x1078>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a2a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d10b      	bne.n	8005a56 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005a3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000

08005a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b09e      	sub	sp, #120	; 0x78
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e162      	b.n	8005d4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a84:	4b90      	ldr	r3, [pc, #576]	; (8005cc8 <HAL_RCC_ClockConfig+0x25c>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d910      	bls.n	8005ab4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b8d      	ldr	r3, [pc, #564]	; (8005cc8 <HAL_RCC_ClockConfig+0x25c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 0207 	bic.w	r2, r3, #7
 8005a9a:	498b      	ldr	r1, [pc, #556]	; (8005cc8 <HAL_RCC_ClockConfig+0x25c>)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b89      	ldr	r3, [pc, #548]	; (8005cc8 <HAL_RCC_ClockConfig+0x25c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e14a      	b.n	8005d4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac0:	4b82      	ldr	r3, [pc, #520]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	497f      	ldr	r1, [pc, #508]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80dc 	beq.w	8005c98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d13c      	bne.n	8005b62 <HAL_RCC_ClockConfig+0xf6>
 8005ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005af0:	fa93 f3a3 	rbit	r3, r3
 8005af4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af8:	fab3 f383 	clz	r3, r3
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d102      	bne.n	8005b12 <HAL_RCC_ClockConfig+0xa6>
 8005b0c:	4b6f      	ldr	r3, [pc, #444]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	e00f      	b.n	8005b32 <HAL_RCC_ClockConfig+0xc6>
 8005b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b1a:	fa93 f3a3 	rbit	r3, r3
 8005b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b24:	663b      	str	r3, [r7, #96]	; 0x60
 8005b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b28:	fa93 f3a3 	rbit	r3, r3
 8005b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b2e:	4b67      	ldr	r3, [pc, #412]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b36:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b3a:	fa92 f2a2 	rbit	r2, r2
 8005b3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005b40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b42:	fab2 f282 	clz	r2, r2
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	f042 0220 	orr.w	r2, r2, #32
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	f002 021f 	and.w	r2, r2, #31
 8005b52:	2101      	movs	r1, #1
 8005b54:	fa01 f202 	lsl.w	r2, r1, r2
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d17b      	bne.n	8005c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e0f3      	b.n	8005d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d13c      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x178>
 8005b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b72:	fa93 f3a3 	rbit	r3, r3
 8005b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7a:	fab3 f383 	clz	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d102      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x128>
 8005b8e:	4b4f      	ldr	r3, [pc, #316]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	e00f      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x148>
 8005b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9c:	fa93 f3a3 	rbit	r3, r3
 8005ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005baa:	fa93 f3a3 	rbit	r3, r3
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb0:	4b46      	ldr	r3, [pc, #280]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005bb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8005bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bbc:	fa92 f2a2 	rbit	r2, r2
 8005bc0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc4:	fab2 f282 	clz	r2, r2
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	f042 0220 	orr.w	r2, r2, #32
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	f002 021f 	and.w	r2, r2, #31
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d13a      	bne.n	8005c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0b2      	b.n	8005d4a <HAL_RCC_ClockConfig+0x2de>
 8005be4:	2302      	movs	r3, #2
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	fa93 f3a3 	rbit	r3, r3
 8005bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	095b      	lsrs	r3, r3, #5
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d102      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x1a0>
 8005c06:	4b31      	ldr	r3, [pc, #196]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	e00d      	b.n	8005c28 <HAL_RCC_ClockConfig+0x1bc>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	fa93 f3a3 	rbit	r3, r3
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
 8005c18:	2302      	movs	r3, #2
 8005c1a:	623b      	str	r3, [r7, #32]
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	fa93 f3a3 	rbit	r3, r3
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	2202      	movs	r2, #2
 8005c2a:	61ba      	str	r2, [r7, #24]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	fa92 f2a2 	rbit	r2, r2
 8005c32:	617a      	str	r2, [r7, #20]
  return result;
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	fab2 f282 	clz	r2, r2
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	f042 0220 	orr.w	r2, r2, #32
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	f002 021f 	and.w	r2, r2, #31
 8005c46:	2101      	movs	r1, #1
 8005c48:	fa01 f202 	lsl.w	r2, r1, r2
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e079      	b.n	8005d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c56:	4b1d      	ldr	r3, [pc, #116]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f023 0203 	bic.w	r2, r3, #3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	491a      	ldr	r1, [pc, #104]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c68:	f7fc fcd8 	bl	800261c <HAL_GetTick>
 8005c6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6e:	e00a      	b.n	8005c86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c70:	f7fc fcd4 	bl	800261c <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e061      	b.n	8005d4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c86:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <HAL_RCC_ClockConfig+0x260>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 020c 	and.w	r2, r3, #12
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d1eb      	bne.n	8005c70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_ClockConfig+0x25c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d214      	bcs.n	8005cd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca6:	4b08      	ldr	r3, [pc, #32]	; (8005cc8 <HAL_RCC_ClockConfig+0x25c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 0207 	bic.w	r2, r3, #7
 8005cae:	4906      	ldr	r1, [pc, #24]	; (8005cc8 <HAL_RCC_ClockConfig+0x25c>)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb6:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <HAL_RCC_ClockConfig+0x25c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e040      	b.n	8005d4a <HAL_RCC_ClockConfig+0x2de>
 8005cc8:	40022000 	.word	0x40022000
 8005ccc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cdc:	4b1d      	ldr	r3, [pc, #116]	; (8005d54 <HAL_RCC_ClockConfig+0x2e8>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	491a      	ldr	r1, [pc, #104]	; (8005d54 <HAL_RCC_ClockConfig+0x2e8>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cfa:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <HAL_RCC_ClockConfig+0x2e8>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4912      	ldr	r1, [pc, #72]	; (8005d54 <HAL_RCC_ClockConfig+0x2e8>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d0e:	f000 f829 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005d12:	4601      	mov	r1, r0
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <HAL_RCC_ClockConfig+0x2e8>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d1c:	22f0      	movs	r2, #240	; 0xf0
 8005d1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	fa92 f2a2 	rbit	r2, r2
 8005d26:	60fa      	str	r2, [r7, #12]
  return result;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	fab2 f282 	clz	r2, r2
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	40d3      	lsrs	r3, r2
 8005d32:	4a09      	ldr	r2, [pc, #36]	; (8005d58 <HAL_RCC_ClockConfig+0x2ec>)
 8005d34:	5cd3      	ldrb	r3, [r2, r3]
 8005d36:	fa21 f303 	lsr.w	r3, r1, r3
 8005d3a:	4a08      	ldr	r2, [pc, #32]	; (8005d5c <HAL_RCC_ClockConfig+0x2f0>)
 8005d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005d3e:	4b08      	ldr	r3, [pc, #32]	; (8005d60 <HAL_RCC_ClockConfig+0x2f4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fc fc26 	bl	8002594 <HAL_InitTick>
  
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3778      	adds	r7, #120	; 0x78
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40021000 	.word	0x40021000
 8005d58:	08008918 	.word	0x08008918
 8005d5c:	20000000 	.word	0x20000000
 8005d60:	20000004 	.word	0x20000004

08005d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b08b      	sub	sp, #44	; 0x2c
 8005d68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	2300      	movs	r3, #0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005d7e:	4b29      	ldr	r3, [pc, #164]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b04      	cmp	r3, #4
 8005d8c:	d002      	beq.n	8005d94 <HAL_RCC_GetSysClockFreq+0x30>
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d003      	beq.n	8005d9a <HAL_RCC_GetSysClockFreq+0x36>
 8005d92:	e03c      	b.n	8005e0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d94:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d96:	623b      	str	r3, [r7, #32]
      break;
 8005d98:	e03c      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005da0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005da4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	fa92 f2a2 	rbit	r2, r2
 8005dac:	607a      	str	r2, [r7, #4]
  return result;
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	fab2 f282 	clz	r2, r2
 8005db4:	b2d2      	uxtb	r2, r2
 8005db6:	40d3      	lsrs	r3, r2
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8005dba:	5cd3      	ldrb	r3, [r2, r3]
 8005dbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005dbe:	4b19      	ldr	r3, [pc, #100]	; (8005e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	220f      	movs	r2, #15
 8005dc8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	fa92 f2a2 	rbit	r2, r2
 8005dd0:	60fa      	str	r2, [r7, #12]
  return result;
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	fab2 f282 	clz	r2, r2
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	40d3      	lsrs	r3, r2
 8005ddc:	4a14      	ldr	r2, [pc, #80]	; (8005e30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005dde:	5cd3      	ldrb	r3, [r2, r3]
 8005de0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005dec:	4a0e      	ldr	r2, [pc, #56]	; (8005e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfc:	e004      	b.n	8005e08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	623b      	str	r3, [r7, #32]
      break;
 8005e0c:	e002      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e10:	623b      	str	r3, [r7, #32]
      break;
 8005e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e14:	6a3b      	ldr	r3, [r7, #32]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	372c      	adds	r7, #44	; 0x2c
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40021000 	.word	0x40021000
 8005e28:	007a1200 	.word	0x007a1200
 8005e2c:	08008930 	.word	0x08008930
 8005e30:	08008940 	.word	0x08008940
 8005e34:	003d0900 	.word	0x003d0900

08005e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e3c:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000000 	.word	0x20000000

08005e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005e56:	f7ff ffef 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e64:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e68:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	fa92 f2a2 	rbit	r2, r2
 8005e70:	603a      	str	r2, [r7, #0]
  return result;
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	fab2 f282 	clz	r2, r2
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	40d3      	lsrs	r3, r2
 8005e7c:	4a04      	ldr	r2, [pc, #16]	; (8005e90 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005e7e:	5cd3      	ldrb	r3, [r2, r3]
 8005e80:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	08008928 	.word	0x08008928

08005e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005e9a:	f7ff ffcd 	bl	8005e38 <HAL_RCC_GetHCLKFreq>
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005ea8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005eac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	fa92 f2a2 	rbit	r2, r2
 8005eb4:	603a      	str	r2, [r7, #0]
  return result;
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	fab2 f282 	clz	r2, r2
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	40d3      	lsrs	r3, r2
 8005ec0:	4a04      	ldr	r2, [pc, #16]	; (8005ed4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005ec2:	5cd3      	ldrb	r3, [r2, r3]
 8005ec4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	08008928 	.word	0x08008928

08005ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b092      	sub	sp, #72	; 0x48
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80cd 	beq.w	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efc:	4b86      	ldr	r3, [pc, #536]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d10e      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f08:	4b83      	ldr	r3, [pc, #524]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	4a82      	ldr	r2, [pc, #520]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f12:	61d3      	str	r3, [r2, #28]
 8005f14:	4b80      	ldr	r3, [pc, #512]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f26:	4b7d      	ldr	r3, [pc, #500]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d118      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f32:	4b7a      	ldr	r3, [pc, #488]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a79      	ldr	r2, [pc, #484]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f3e:	f7fc fb6d 	bl	800261c <HAL_GetTick>
 8005f42:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f44:	e008      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f46:	f7fc fb69 	bl	800261c <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b64      	cmp	r3, #100	; 0x64
 8005f52:	d901      	bls.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e0db      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f58:	4b70      	ldr	r3, [pc, #448]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f64:	4b6c      	ldr	r3, [pc, #432]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d07d      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d076      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f82:	4b65      	ldr	r3, [pc, #404]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	fa93 f3a3 	rbit	r3, r3
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f9c:	fab3 f383 	clz	r3, r3
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4b5e      	ldr	r3, [pc, #376]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	461a      	mov	r2, r3
 8005fac:	2301      	movs	r3, #1
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fb8:	fa93 f3a3 	rbit	r3, r3
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fc0:	fab3 f383 	clz	r3, r3
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4b55      	ldr	r3, [pc, #340]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fd4:	4a50      	ldr	r2, [pc, #320]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d045      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe4:	f7fc fb1a 	bl	800261c <HAL_GetTick>
 8005fe8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fea:	e00a      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fec:	f7fc fb16 	bl	800261c <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e086      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8006002:	2302      	movs	r3, #2
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006008:	fa93 f3a3 	rbit	r3, r3
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
 800600e:	2302      	movs	r3, #2
 8006010:	623b      	str	r3, [r7, #32]
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	fa93 f3a3 	rbit	r3, r3
 8006018:	61fb      	str	r3, [r7, #28]
  return result;
 800601a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800601c:	fab3 f383 	clz	r3, r3
 8006020:	b2db      	uxtb	r3, r3
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f043 0302 	orr.w	r3, r3, #2
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d102      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006030:	4b39      	ldr	r3, [pc, #228]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	e007      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006036:	2302      	movs	r3, #2
 8006038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	fa93 f3a3 	rbit	r3, r3
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	4b35      	ldr	r3, [pc, #212]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2202      	movs	r2, #2
 8006048:	613a      	str	r2, [r7, #16]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	fa92 f2a2 	rbit	r2, r2
 8006050:	60fa      	str	r2, [r7, #12]
  return result;
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	fab2 f282 	clz	r2, r2
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	f002 021f 	and.w	r2, r2, #31
 8006064:	2101      	movs	r1, #1
 8006066:	fa01 f202 	lsl.w	r2, r1, r2
 800606a:	4013      	ands	r3, r2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0bd      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006070:	4b29      	ldr	r3, [pc, #164]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	4926      	ldr	r1, [pc, #152]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800607e:	4313      	orrs	r3, r2
 8006080:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006082:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006086:	2b01      	cmp	r3, #1
 8006088:	d105      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800608a:	4b23      	ldr	r3, [pc, #140]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	4a22      	ldr	r2, [pc, #136]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006094:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d008      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060a2:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	f023 0203 	bic.w	r2, r3, #3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	491a      	ldr	r1, [pc, #104]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060b0:	4313      	orrs	r3, r2
 80060b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060c0:	4b15      	ldr	r3, [pc, #84]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c4:	f023 0210 	bic.w	r2, r3, #16
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4912      	ldr	r1, [pc, #72]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060de:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	490b      	ldr	r1, [pc, #44]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d008      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80060fc:	4b06      	ldr	r3, [pc, #24]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800610a:	4313      	orrs	r3, r2
 800610c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3748      	adds	r7, #72	; 0x48
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40021000 	.word	0x40021000
 800611c:	40007000 	.word	0x40007000
 8006120:	10908100 	.word	0x10908100

08006124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e049      	b.n	80061ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fc f808 	bl	8002160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4619      	mov	r1, r3
 8006162:	4610      	mov	r0, r2
 8006164:	f000 fc32 	bl	80069cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d001      	beq.n	80061ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e040      	b.n	800626e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a1c      	ldr	r2, [pc, #112]	; (800627c <HAL_TIM_Base_Start_IT+0xa8>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00e      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x58>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006216:	d009      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x58>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a18      	ldr	r2, [pc, #96]	; (8006280 <HAL_TIM_Base_Start_IT+0xac>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_TIM_Base_Start_IT+0x58>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a17      	ldr	r2, [pc, #92]	; (8006284 <HAL_TIM_Base_Start_IT+0xb0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d115      	bne.n	8006258 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <HAL_TIM_Base_Start_IT+0xb4>)
 8006234:	4013      	ands	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b06      	cmp	r3, #6
 800623c:	d015      	beq.n	800626a <HAL_TIM_Base_Start_IT+0x96>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006244:	d011      	beq.n	800626a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0201 	orr.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006256:	e008      	b.n	800626a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e000      	b.n	800626c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40000400 	.word	0x40000400
 8006284:	40014000 	.word	0x40014000
 8006288:	00010007 	.word	0x00010007

0800628c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e049      	b.n	8006332 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fb fe24 	bl	8001f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3304      	adds	r3, #4
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f000 fb7e 	bl	80069cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <HAL_TIM_PWM_Start+0x24>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	e03c      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b04      	cmp	r3, #4
 8006364:	d109      	bne.n	800637a <HAL_TIM_PWM_Start+0x3e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	bf14      	ite	ne
 8006372:	2301      	movne	r3, #1
 8006374:	2300      	moveq	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	e02f      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d109      	bne.n	8006394 <HAL_TIM_PWM_Start+0x58>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	e022      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b0c      	cmp	r3, #12
 8006398:	d109      	bne.n	80063ae <HAL_TIM_PWM_Start+0x72>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	bf14      	ite	ne
 80063a6:	2301      	movne	r3, #1
 80063a8:	2300      	moveq	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	e015      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d109      	bne.n	80063c8 <HAL_TIM_PWM_Start+0x8c>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	e008      	b.n	80063da <HAL_TIM_PWM_Start+0x9e>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	bf14      	ite	ne
 80063d4:	2301      	movne	r3, #1
 80063d6:	2300      	moveq	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e088      	b.n	80064f4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <HAL_TIM_PWM_Start+0xb6>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063f0:	e023      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_PWM_Start+0xc6>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006400:	e01b      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b08      	cmp	r3, #8
 8006406:	d104      	bne.n	8006412 <HAL_TIM_PWM_Start+0xd6>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006410:	e013      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b0c      	cmp	r3, #12
 8006416:	d104      	bne.n	8006422 <HAL_TIM_PWM_Start+0xe6>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006420:	e00b      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b10      	cmp	r3, #16
 8006426:	d104      	bne.n	8006432 <HAL_TIM_PWM_Start+0xf6>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006430:	e003      	b.n	800643a <HAL_TIM_PWM_Start+0xfe>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2201      	movs	r2, #1
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fde0 	bl	8007008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a2b      	ldr	r2, [pc, #172]	; (80064fc <HAL_TIM_PWM_Start+0x1c0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d00e      	beq.n	8006470 <HAL_TIM_PWM_Start+0x134>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <HAL_TIM_PWM_Start+0x1c4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d009      	beq.n	8006470 <HAL_TIM_PWM_Start+0x134>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a28      	ldr	r2, [pc, #160]	; (8006504 <HAL_TIM_PWM_Start+0x1c8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d004      	beq.n	8006470 <HAL_TIM_PWM_Start+0x134>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a27      	ldr	r2, [pc, #156]	; (8006508 <HAL_TIM_PWM_Start+0x1cc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d101      	bne.n	8006474 <HAL_TIM_PWM_Start+0x138>
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <HAL_TIM_PWM_Start+0x13a>
 8006474:	2300      	movs	r3, #0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d007      	beq.n	800648a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a1b      	ldr	r2, [pc, #108]	; (80064fc <HAL_TIM_PWM_Start+0x1c0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00e      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x176>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649c:	d009      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x176>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a1a      	ldr	r2, [pc, #104]	; (800650c <HAL_TIM_PWM_Start+0x1d0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d004      	beq.n	80064b2 <HAL_TIM_PWM_Start+0x176>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a14      	ldr	r2, [pc, #80]	; (8006500 <HAL_TIM_PWM_Start+0x1c4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d115      	bne.n	80064de <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	4b15      	ldr	r3, [pc, #84]	; (8006510 <HAL_TIM_PWM_Start+0x1d4>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d015      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x1b4>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ca:	d011      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064dc:	e008      	b.n	80064f0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0201 	orr.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e000      	b.n	80064f2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	40012c00 	.word	0x40012c00
 8006500:	40014000 	.word	0x40014000
 8006504:	40014400 	.word	0x40014400
 8006508:	40014800 	.word	0x40014800
 800650c:	40000400 	.word	0x40000400
 8006510:	00010007 	.word	0x00010007

08006514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b02      	cmp	r3, #2
 8006528:	d122      	bne.n	8006570 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b02      	cmp	r3, #2
 8006536:	d11b      	bne.n	8006570 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0202 	mvn.w	r2, #2
 8006540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa1a 	bl	8006990 <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fa0c 	bl	800697c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fa1d 	bl	80069a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0304 	and.w	r3, r3, #4
 800657a:	2b04      	cmp	r3, #4
 800657c:	d122      	bne.n	80065c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b04      	cmp	r3, #4
 800658a:	d11b      	bne.n	80065c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0204 	mvn.w	r2, #4
 8006594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2202      	movs	r2, #2
 800659a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f9f0 	bl	8006990 <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9e2 	bl	800697c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f9f3 	bl	80069a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d122      	bne.n	8006618 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d11b      	bne.n	8006618 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0208 	mvn.w	r2, #8
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2204      	movs	r2, #4
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f9c6 	bl	8006990 <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9b8 	bl	800697c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f9c9 	bl	80069a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0310 	and.w	r3, r3, #16
 8006622:	2b10      	cmp	r3, #16
 8006624:	d122      	bne.n	800666c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b10      	cmp	r3, #16
 8006632:	d11b      	bne.n	800666c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0210 	mvn.w	r2, #16
 800663c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2208      	movs	r2, #8
 8006642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f99c 	bl	8006990 <HAL_TIM_IC_CaptureCallback>
 8006658:	e005      	b.n	8006666 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f98e 	bl	800697c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f99f 	bl	80069a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b01      	cmp	r3, #1
 8006678:	d10e      	bne.n	8006698 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0201 	mvn.w	r2, #1
 8006690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fb fb08 	bl	8001ca8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a2:	2b80      	cmp	r3, #128	; 0x80
 80066a4:	d10e      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b0:	2b80      	cmp	r3, #128	; 0x80
 80066b2:	d107      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fdb8 	bl	8007234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	d10e      	bne.n	80066f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066de:	2b80      	cmp	r3, #128	; 0x80
 80066e0:	d107      	bne.n	80066f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 fdab 	bl	8007248 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d10e      	bne.n	800671e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d107      	bne.n	800671e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f94d 	bl	80069b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b20      	cmp	r3, #32
 800672a:	d10e      	bne.n	800674a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b20      	cmp	r3, #32
 8006738:	d107      	bne.n	800674a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f06f 0220 	mvn.w	r2, #32
 8006742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fd6b 	bl	8007220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800676e:	2302      	movs	r3, #2
 8006770:	e0ff      	b.n	8006972 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b14      	cmp	r3, #20
 800677e:	f200 80f0 	bhi.w	8006962 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067dd 	.word	0x080067dd
 800678c:	08006963 	.word	0x08006963
 8006790:	08006963 	.word	0x08006963
 8006794:	08006963 	.word	0x08006963
 8006798:	0800681d 	.word	0x0800681d
 800679c:	08006963 	.word	0x08006963
 80067a0:	08006963 	.word	0x08006963
 80067a4:	08006963 	.word	0x08006963
 80067a8:	0800685f 	.word	0x0800685f
 80067ac:	08006963 	.word	0x08006963
 80067b0:	08006963 	.word	0x08006963
 80067b4:	08006963 	.word	0x08006963
 80067b8:	0800689f 	.word	0x0800689f
 80067bc:	08006963 	.word	0x08006963
 80067c0:	08006963 	.word	0x08006963
 80067c4:	08006963 	.word	0x08006963
 80067c8:	080068e1 	.word	0x080068e1
 80067cc:	08006963 	.word	0x08006963
 80067d0:	08006963 	.word	0x08006963
 80067d4:	08006963 	.word	0x08006963
 80067d8:	08006921 	.word	0x08006921
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f96a 	bl	8006abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699a      	ldr	r2, [r3, #24]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0208 	orr.w	r2, r2, #8
 80067f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0204 	bic.w	r2, r2, #4
 8006806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6999      	ldr	r1, [r3, #24]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691a      	ldr	r2, [r3, #16]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	619a      	str	r2, [r3, #24]
      break;
 800681a:	e0a5      	b.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 f9d0 	bl	8006bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6999      	ldr	r1, [r3, #24]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	021a      	lsls	r2, r3, #8
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	619a      	str	r2, [r3, #24]
      break;
 800685c:	e084      	b.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68b9      	ldr	r1, [r7, #8]
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fa2f 	bl	8006cc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0208 	orr.w	r2, r2, #8
 8006878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0204 	bic.w	r2, r2, #4
 8006888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69d9      	ldr	r1, [r3, #28]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	61da      	str	r2, [r3, #28]
      break;
 800689c:	e064      	b.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fa8d 	bl	8006dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69da      	ldr	r2, [r3, #28]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69d9      	ldr	r1, [r3, #28]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	021a      	lsls	r2, r3, #8
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	61da      	str	r2, [r3, #28]
      break;
 80068de:	e043      	b.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fad0 	bl	8006e8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0204 	bic.w	r2, r2, #4
 800690a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800691e:	e023      	b.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fb0e 	bl	8006f48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	021a      	lsls	r2, r3, #8
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006960:	e002      	b.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	75fb      	strb	r3, [r7, #23]
      break;
 8006966:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop

0800697c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a32      	ldr	r2, [pc, #200]	; (8006aa8 <TIM_Base_SetConfig+0xdc>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d007      	beq.n	80069f4 <TIM_Base_SetConfig+0x28>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ea:	d003      	beq.n	80069f4 <TIM_Base_SetConfig+0x28>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a2f      	ldr	r2, [pc, #188]	; (8006aac <TIM_Base_SetConfig+0xe0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d108      	bne.n	8006a06 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a27      	ldr	r2, [pc, #156]	; (8006aa8 <TIM_Base_SetConfig+0xdc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <TIM_Base_SetConfig+0x6a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a14:	d00f      	beq.n	8006a36 <TIM_Base_SetConfig+0x6a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a24      	ldr	r2, [pc, #144]	; (8006aac <TIM_Base_SetConfig+0xe0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00b      	beq.n	8006a36 <TIM_Base_SetConfig+0x6a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a23      	ldr	r2, [pc, #140]	; (8006ab0 <TIM_Base_SetConfig+0xe4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d007      	beq.n	8006a36 <TIM_Base_SetConfig+0x6a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a22      	ldr	r2, [pc, #136]	; (8006ab4 <TIM_Base_SetConfig+0xe8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d003      	beq.n	8006a36 <TIM_Base_SetConfig+0x6a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a21      	ldr	r2, [pc, #132]	; (8006ab8 <TIM_Base_SetConfig+0xec>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d108      	bne.n	8006a48 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a0e      	ldr	r2, [pc, #56]	; (8006aa8 <TIM_Base_SetConfig+0xdc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00b      	beq.n	8006a8c <TIM_Base_SetConfig+0xc0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a0e      	ldr	r2, [pc, #56]	; (8006ab0 <TIM_Base_SetConfig+0xe4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d007      	beq.n	8006a8c <TIM_Base_SetConfig+0xc0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a0d      	ldr	r2, [pc, #52]	; (8006ab4 <TIM_Base_SetConfig+0xe8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d003      	beq.n	8006a8c <TIM_Base_SetConfig+0xc0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a0c      	ldr	r2, [pc, #48]	; (8006ab8 <TIM_Base_SetConfig+0xec>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d103      	bne.n	8006a94 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	615a      	str	r2, [r3, #20]
}
 8006a9a:	bf00      	nop
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800

08006abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f023 0201 	bic.w	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f023 0302 	bic.w	r3, r3, #2
 8006b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a28      	ldr	r2, [pc, #160]	; (8006bb8 <TIM_OC1_SetConfig+0xfc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00b      	beq.n	8006b34 <TIM_OC1_SetConfig+0x78>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a27      	ldr	r2, [pc, #156]	; (8006bbc <TIM_OC1_SetConfig+0x100>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d007      	beq.n	8006b34 <TIM_OC1_SetConfig+0x78>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <TIM_OC1_SetConfig+0x104>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_OC1_SetConfig+0x78>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a25      	ldr	r2, [pc, #148]	; (8006bc4 <TIM_OC1_SetConfig+0x108>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10c      	bne.n	8006b4e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0308 	bic.w	r3, r3, #8
 8006b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 0304 	bic.w	r3, r3, #4
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a19      	ldr	r2, [pc, #100]	; (8006bb8 <TIM_OC1_SetConfig+0xfc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_OC1_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <TIM_OC1_SetConfig+0x100>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_OC1_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a17      	ldr	r2, [pc, #92]	; (8006bc0 <TIM_OC1_SetConfig+0x104>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_OC1_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a16      	ldr	r2, [pc, #88]	; (8006bc4 <TIM_OC1_SetConfig+0x108>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d111      	bne.n	8006b92 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	621a      	str	r2, [r3, #32]
}
 8006bac:	bf00      	nop
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40012c00 	.word	0x40012c00
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40014400 	.word	0x40014400
 8006bc4:	40014800 	.word	0x40014800

08006bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a1b      	ldr	r3, [r3, #32]
 8006bd6:	f023 0210 	bic.w	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f023 0320 	bic.w	r3, r3, #32
 8006c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a24      	ldr	r2, [pc, #144]	; (8006cb8 <TIM_OC2_SetConfig+0xf0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d10d      	bne.n	8006c48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a1b      	ldr	r2, [pc, #108]	; (8006cb8 <TIM_OC2_SetConfig+0xf0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <TIM_OC2_SetConfig+0xa0>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a1a      	ldr	r2, [pc, #104]	; (8006cbc <TIM_OC2_SetConfig+0xf4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d007      	beq.n	8006c68 <TIM_OC2_SetConfig+0xa0>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <TIM_OC2_SetConfig+0xf8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d003      	beq.n	8006c68 <TIM_OC2_SetConfig+0xa0>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <TIM_OC2_SetConfig+0xfc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d113      	bne.n	8006c90 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	40012c00 	.word	0x40012c00
 8006cbc:	40014000 	.word	0x40014000
 8006cc0:	40014400 	.word	0x40014400
 8006cc4:	40014800 	.word	0x40014800

08006cc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0303 	bic.w	r3, r3, #3
 8006d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a23      	ldr	r2, [pc, #140]	; (8006db4 <TIM_OC3_SetConfig+0xec>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d10d      	bne.n	8006d46 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <TIM_OC3_SetConfig+0xec>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00b      	beq.n	8006d66 <TIM_OC3_SetConfig+0x9e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a19      	ldr	r2, [pc, #100]	; (8006db8 <TIM_OC3_SetConfig+0xf0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d007      	beq.n	8006d66 <TIM_OC3_SetConfig+0x9e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <TIM_OC3_SetConfig+0xf4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_OC3_SetConfig+0x9e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a17      	ldr	r2, [pc, #92]	; (8006dc0 <TIM_OC3_SetConfig+0xf8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d113      	bne.n	8006d8e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	011b      	lsls	r3, r3, #4
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	621a      	str	r2, [r3, #32]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40014000 	.word	0x40014000
 8006dbc:	40014400 	.word	0x40014400
 8006dc0:	40014800 	.word	0x40014800

08006dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	031b      	lsls	r3, r3, #12
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <TIM_OC4_SetConfig+0xb8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <TIM_OC4_SetConfig+0x7c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <TIM_OC4_SetConfig+0xbc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_OC4_SetConfig+0x7c>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a14      	ldr	r2, [pc, #80]	; (8006e84 <TIM_OC4_SetConfig+0xc0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_OC4_SetConfig+0x7c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a13      	ldr	r2, [pc, #76]	; (8006e88 <TIM_OC4_SetConfig+0xc4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d109      	bne.n	8006e54 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	019b      	lsls	r3, r3, #6
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800

08006e8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ed0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	041b      	lsls	r3, r3, #16
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a15      	ldr	r2, [pc, #84]	; (8006f38 <TIM_OC5_SetConfig+0xac>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00b      	beq.n	8006efe <TIM_OC5_SetConfig+0x72>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a14      	ldr	r2, [pc, #80]	; (8006f3c <TIM_OC5_SetConfig+0xb0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d007      	beq.n	8006efe <TIM_OC5_SetConfig+0x72>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <TIM_OC5_SetConfig+0xb4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_OC5_SetConfig+0x72>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a12      	ldr	r2, [pc, #72]	; (8006f44 <TIM_OC5_SetConfig+0xb8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d109      	bne.n	8006f12 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40014000 	.word	0x40014000
 8006f40:	40014400 	.word	0x40014400
 8006f44:	40014800 	.word	0x40014800

08006f48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	021b      	lsls	r3, r3, #8
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	051b      	lsls	r3, r3, #20
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <TIM_OC6_SetConfig+0xb0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d00b      	beq.n	8006fbc <TIM_OC6_SetConfig+0x74>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <TIM_OC6_SetConfig+0xb4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d007      	beq.n	8006fbc <TIM_OC6_SetConfig+0x74>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a14      	ldr	r2, [pc, #80]	; (8007000 <TIM_OC6_SetConfig+0xb8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC6_SetConfig+0x74>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a13      	ldr	r2, [pc, #76]	; (8007004 <TIM_OC6_SetConfig+0xbc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d109      	bne.n	8006fd0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	029b      	lsls	r3, r3, #10
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	621a      	str	r2, [r3, #32]
}
 8006fea:	bf00      	nop
 8006fec:	371c      	adds	r7, #28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40014000 	.word	0x40014000
 8007000:	40014400 	.word	0x40014400
 8007004:	40014800 	.word	0x40014800

08007008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 031f 	and.w	r3, r3, #31
 800701a:	2201      	movs	r2, #1
 800701c:	fa02 f303 	lsl.w	r3, r2, r3
 8007020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6a1a      	ldr	r2, [r3, #32]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	43db      	mvns	r3, r3
 800702a:	401a      	ands	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	fa01 f303 	lsl.w	r3, r1, r3
 8007040:	431a      	orrs	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	621a      	str	r2, [r3, #32]
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
	...

08007054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007068:	2302      	movs	r3, #2
 800706a:	e054      	b.n	8007116 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a24      	ldr	r2, [pc, #144]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d108      	bne.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800709c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a17      	ldr	r2, [pc, #92]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00e      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d4:	d009      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a13      	ldr	r2, [pc, #76]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d004      	beq.n	80070ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a11      	ldr	r2, [pc, #68]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d10c      	bne.n	8007104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40000400 	.word	0x40000400
 800712c:	40014000 	.word	0x40014000

08007130 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007148:	2302      	movs	r3, #2
 800714a:	e060      	b.n	800720e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	4313      	orrs	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	695b      	ldr	r3, [r3, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	041b      	lsls	r3, r3, #16
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a14      	ldr	r2, [pc, #80]	; (800721c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d115      	bne.n	80071fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	051b      	lsls	r3, r3, #20
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	40012c00 	.word	0x40012c00

08007220 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007228:	bf00      	nop
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e040      	b.n	80072f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007272:	2b00      	cmp	r3, #0
 8007274:	d106      	bne.n	8007284 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fb f844 	bl	800230c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2224      	movs	r2, #36	; 0x24
 8007288:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fc00 	bl	8007aa0 <UART_SetConfig>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e022      	b.n	80072f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fd2a 	bl	8007d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689a      	ldr	r2, [r3, #8]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0201 	orr.w	r2, r2, #1
 80072e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fdb1 	bl	8007e50 <UART_CheckIdleState>
 80072ee:	4603      	mov	r3, r0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	603b      	str	r3, [r7, #0]
 8007304:	4613      	mov	r3, r2
 8007306:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800730c:	2b20      	cmp	r3, #32
 800730e:	d178      	bne.n	8007402 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_UART_Transmit+0x24>
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e071      	b.n	8007404 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2221      	movs	r2, #33	; 0x21
 800732c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800732e:	f7fb f975 	bl	800261c <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734c:	d108      	bne.n	8007360 <HAL_UART_Transmit+0x68>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	e003      	b.n	8007368 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007368:	e030      	b.n	80073cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2200      	movs	r2, #0
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 fe13 	bl	8007fa0 <UART_WaitOnFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e03c      	b.n	8007404 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10b      	bne.n	80073a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	881a      	ldrh	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800739c:	b292      	uxth	r2, r2
 800739e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	3302      	adds	r3, #2
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e008      	b.n	80073ba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	781a      	ldrb	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	b292      	uxth	r2, r2
 80073b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	3301      	adds	r3, #1
 80073b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1c8      	bne.n	800736a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2200      	movs	r2, #0
 80073e0:	2140      	movs	r1, #64	; 0x40
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fddc 	bl	8007fa0 <UART_WaitOnFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e005      	b.n	8007404 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	e000      	b.n	8007404 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007402:	2302      	movs	r3, #2
  }
}
 8007404:	4618      	mov	r0, r3
 8007406:	3720      	adds	r7, #32
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4613      	mov	r3, r2
 8007418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007420:	2b20      	cmp	r3, #32
 8007422:	d132      	bne.n	800748a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <HAL_UART_Receive_IT+0x24>
 800742a:	88fb      	ldrh	r3, [r7, #6]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e02b      	b.n	800748c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d018      	beq.n	800747a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	613b      	str	r3, [r7, #16]
   return(result);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	623b      	str	r3, [r7, #32]
 8007468:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	69f9      	ldr	r1, [r7, #28]
 800746c:	6a3a      	ldr	r2, [r7, #32]
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	61bb      	str	r3, [r7, #24]
   return(result);
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e6      	bne.n	8007448 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	461a      	mov	r2, r3
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fdf5 	bl	8008070 <UART_Start_Receive_IT>
 8007486:	4603      	mov	r3, r0
 8007488:	e000      	b.n	800748c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800748a:	2302      	movs	r3, #2
  }
}
 800748c:	4618      	mov	r0, r3
 800748e:	3728      	adds	r7, #40	; 0x28
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b0ba      	sub	sp, #232	; 0xe8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074be:	f640 030f 	movw	r3, #2063	; 0x80f
 80074c2:	4013      	ands	r3, r2
 80074c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d115      	bne.n	80074fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80074d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00f      	beq.n	80074fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d009      	beq.n	80074fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 82ab 	beq.w	8007a48 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	4798      	blx	r3
      }
      return;
 80074fa:	e2a5      	b.n	8007a48 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8117 	beq.w	8007734 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007512:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007516:	4b85      	ldr	r3, [pc, #532]	; (800772c <HAL_UART_IRQHandler+0x298>)
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	f000 810a 	beq.w	8007734 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d011      	beq.n	8007550 <HAL_UART_IRQHandler+0xbc>
 800752c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00b      	beq.n	8007550 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2201      	movs	r2, #1
 800753e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007546:	f043 0201 	orr.w	r2, r3, #1
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d011      	beq.n	8007580 <HAL_UART_IRQHandler+0xec>
 800755c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2202      	movs	r2, #2
 800756e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007576:	f043 0204 	orr.w	r2, r3, #4
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	2b00      	cmp	r3, #0
 800758a:	d011      	beq.n	80075b0 <HAL_UART_IRQHandler+0x11c>
 800758c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2204      	movs	r2, #4
 800759e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a6:	f043 0202 	orr.w	r2, r3, #2
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d017      	beq.n	80075ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c0:	f003 0320 	and.w	r3, r3, #32
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80075c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2208      	movs	r2, #8
 80075da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e2:	f043 0208 	orr.w	r2, r3, #8
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d012      	beq.n	800761e <HAL_UART_IRQHandler+0x18a>
 80075f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00c      	beq.n	800761e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800760c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8211 	beq.w	8007a4c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800762a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00d      	beq.n	8007652 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007636:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800763a:	f003 0320 	and.w	r3, r3, #32
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007658:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007666:	2b40      	cmp	r3, #64	; 0x40
 8007668:	d005      	beq.n	8007676 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800766a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800766e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007672:	2b00      	cmp	r3, #0
 8007674:	d04f      	beq.n	8007716 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fdc0 	bl	80081fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d141      	bne.n	800770e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1d9      	bne.n	800768a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d013      	beq.n	8007706 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e2:	4a13      	ldr	r2, [pc, #76]	; (8007730 <HAL_UART_IRQHandler+0x29c>)
 80076e4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fc fa26 	bl	8003b3c <HAL_DMA_Abort_IT>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d017      	beq.n	8007726 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007704:	e00f      	b.n	8007726 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f9b4 	bl	8007a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800770c:	e00b      	b.n	8007726 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f9b0 	bl	8007a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	e007      	b.n	8007726 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f9ac 	bl	8007a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007724:	e192      	b.n	8007a4c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007726:	bf00      	nop
    return;
 8007728:	e190      	b.n	8007a4c <HAL_UART_IRQHandler+0x5b8>
 800772a:	bf00      	nop
 800772c:	04000120 	.word	0x04000120
 8007730:	080082c5 	.word	0x080082c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007738:	2b01      	cmp	r3, #1
 800773a:	f040 814b 	bne.w	80079d4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007742:	f003 0310 	and.w	r3, r3, #16
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 8144 	beq.w	80079d4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800774c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 813d 	beq.w	80079d4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2210      	movs	r2, #16
 8007760:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	f040 80b5 	bne.w	80078dc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800777e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 8164 	beq.w	8007a50 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800778e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007792:	429a      	cmp	r2, r3
 8007794:	f080 815c 	bcs.w	8007a50 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800779e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	f000 8086 	beq.w	80078ba <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077dc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1da      	bne.n	80077ae <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3308      	adds	r3, #8
 80077fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800780a:	f023 0301 	bic.w	r3, r3, #1
 800780e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800781c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007820:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007824:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800782e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e1      	bne.n	80077f8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007844:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800784a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3308      	adds	r3, #8
 8007854:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007858:	66fa      	str	r2, [r7, #108]	; 0x6c
 800785a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800785e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e3      	bne.n	8007834 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800788a:	f023 0310 	bic.w	r3, r3, #16
 800788e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800789c:	65bb      	str	r3, [r7, #88]	; 0x58
 800789e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e4      	bne.n	800787a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fc f908 	bl	8003aca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2202      	movs	r2, #2
 80078be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f8d7 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078da:	e0b9      	b.n	8007a50 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 80ab 	beq.w	8007a54 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80078fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80a6 	beq.w	8007a54 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007910:	e853 3f00 	ldrex	r3, [r3]
 8007914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800791c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800792a:	647b      	str	r3, [r7, #68]	; 0x44
 800792c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e4      	bne.n	8007908 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3308      	adds	r3, #8
 8007944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	623b      	str	r3, [r7, #32]
   return(result);
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	3308      	adds	r3, #8
 800795e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007962:	633a      	str	r2, [r7, #48]	; 0x30
 8007964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800796a:	e841 2300 	strex	r3, r2, [r1]
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1e3      	bne.n	800793e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	60fb      	str	r3, [r7, #12]
   return(result);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0310 	bic.w	r3, r3, #16
 800799e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	69b9      	ldr	r1, [r7, #24]
 80079b2:	69fa      	ldr	r2, [r7, #28]
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e4      	bne.n	800798a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f85b 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079d2:	e03f      	b.n	8007a54 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00e      	beq.n	80079fe <HAL_UART_IRQHandler+0x56a>
 80079e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d008      	beq.n	80079fe <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80079f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fe4c 	bl	8008694 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079fc:	e02d      	b.n	8007a5a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00e      	beq.n	8007a28 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d008      	beq.n	8007a28 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d01c      	beq.n	8007a58 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
    }
    return;
 8007a26:	e017      	b.n	8007a58 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d012      	beq.n	8007a5a <HAL_UART_IRQHandler+0x5c6>
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00c      	beq.n	8007a5a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fc55 	bl	80082f0 <UART_EndTransmit_IT>
    return;
 8007a46:	e008      	b.n	8007a5a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a48:	bf00      	nop
 8007a4a:	e006      	b.n	8007a5a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007a4c:	bf00      	nop
 8007a4e:	e004      	b.n	8007a5a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <HAL_UART_IRQHandler+0x5c6>
    return;
 8007a58:	bf00      	nop
  }

}
 8007a5a:	37e8      	adds	r7, #232	; 0xe8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	689a      	ldr	r2, [r3, #8]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	695b      	ldr	r3, [r3, #20]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4b8a      	ldr	r3, [pc, #552]	; (8007cf4 <UART_SetConfig+0x254>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	6979      	ldr	r1, [r7, #20]
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a78      	ldr	r2, [pc, #480]	; (8007cf8 <UART_SetConfig+0x258>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d120      	bne.n	8007b5e <UART_SetConfig+0xbe>
 8007b1c:	4b77      	ldr	r3, [pc, #476]	; (8007cfc <UART_SetConfig+0x25c>)
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d817      	bhi.n	8007b58 <UART_SetConfig+0xb8>
 8007b28:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <UART_SetConfig+0x90>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b4d 	.word	0x08007b4d
 8007b38:	08007b53 	.word	0x08007b53
 8007b3c:	08007b47 	.word	0x08007b47
 8007b40:	2300      	movs	r3, #0
 8007b42:	77fb      	strb	r3, [r7, #31]
 8007b44:	e01d      	b.n	8007b82 <UART_SetConfig+0xe2>
 8007b46:	2302      	movs	r3, #2
 8007b48:	77fb      	strb	r3, [r7, #31]
 8007b4a:	e01a      	b.n	8007b82 <UART_SetConfig+0xe2>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	77fb      	strb	r3, [r7, #31]
 8007b50:	e017      	b.n	8007b82 <UART_SetConfig+0xe2>
 8007b52:	2308      	movs	r3, #8
 8007b54:	77fb      	strb	r3, [r7, #31]
 8007b56:	e014      	b.n	8007b82 <UART_SetConfig+0xe2>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	77fb      	strb	r3, [r7, #31]
 8007b5c:	e011      	b.n	8007b82 <UART_SetConfig+0xe2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a67      	ldr	r2, [pc, #412]	; (8007d00 <UART_SetConfig+0x260>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d102      	bne.n	8007b6e <UART_SetConfig+0xce>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	e009      	b.n	8007b82 <UART_SetConfig+0xe2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a64      	ldr	r2, [pc, #400]	; (8007d04 <UART_SetConfig+0x264>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d102      	bne.n	8007b7e <UART_SetConfig+0xde>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	77fb      	strb	r3, [r7, #31]
 8007b7c:	e001      	b.n	8007b82 <UART_SetConfig+0xe2>
 8007b7e:	2310      	movs	r3, #16
 8007b80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	69db      	ldr	r3, [r3, #28]
 8007b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b8a:	d15a      	bne.n	8007c42 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007b8c:	7ffb      	ldrb	r3, [r7, #31]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d827      	bhi.n	8007be2 <UART_SetConfig+0x142>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0xf8>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bc5 	.word	0x08007bc5
 8007ba0:	08007bcd 	.word	0x08007bcd
 8007ba4:	08007be3 	.word	0x08007be3
 8007ba8:	08007bd3 	.word	0x08007bd3
 8007bac:	08007be3 	.word	0x08007be3
 8007bb0:	08007be3 	.word	0x08007be3
 8007bb4:	08007be3 	.word	0x08007be3
 8007bb8:	08007bdb 	.word	0x08007bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fe f948 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	61b8      	str	r0, [r7, #24]
        break;
 8007bc2:	e013      	b.n	8007bec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc4:	f7fe f966 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 8007bc8:	61b8      	str	r0, [r7, #24]
        break;
 8007bca:	e00f      	b.n	8007bec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bcc:	4b4e      	ldr	r3, [pc, #312]	; (8007d08 <UART_SetConfig+0x268>)
 8007bce:	61bb      	str	r3, [r7, #24]
        break;
 8007bd0:	e00c      	b.n	8007bec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd2:	f7fe f8c7 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007bd6:	61b8      	str	r0, [r7, #24]
        break;
 8007bd8:	e008      	b.n	8007bec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bde:	61bb      	str	r3, [r7, #24]
        break;
 8007be0:	e004      	b.n	8007bec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	77bb      	strb	r3, [r7, #30]
        break;
 8007bea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d074      	beq.n	8007cdc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	005a      	lsls	r2, r3, #1
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	d916      	bls.n	8007c3c <UART_SetConfig+0x19c>
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c14:	d212      	bcs.n	8007c3c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f023 030f 	bic.w	r3, r3, #15
 8007c1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	89fb      	ldrh	r3, [r7, #14]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	89fa      	ldrh	r2, [r7, #14]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	e04f      	b.n	8007cdc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	77bb      	strb	r3, [r7, #30]
 8007c40:	e04c      	b.n	8007cdc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c42:	7ffb      	ldrb	r3, [r7, #31]
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d828      	bhi.n	8007c9a <UART_SetConfig+0x1fa>
 8007c48:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <UART_SetConfig+0x1b0>)
 8007c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c75 	.word	0x08007c75
 8007c54:	08007c7d 	.word	0x08007c7d
 8007c58:	08007c85 	.word	0x08007c85
 8007c5c:	08007c9b 	.word	0x08007c9b
 8007c60:	08007c8b 	.word	0x08007c8b
 8007c64:	08007c9b 	.word	0x08007c9b
 8007c68:	08007c9b 	.word	0x08007c9b
 8007c6c:	08007c9b 	.word	0x08007c9b
 8007c70:	08007c93 	.word	0x08007c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c74:	f7fe f8ec 	bl	8005e50 <HAL_RCC_GetPCLK1Freq>
 8007c78:	61b8      	str	r0, [r7, #24]
        break;
 8007c7a:	e013      	b.n	8007ca4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c7c:	f7fe f90a 	bl	8005e94 <HAL_RCC_GetPCLK2Freq>
 8007c80:	61b8      	str	r0, [r7, #24]
        break;
 8007c82:	e00f      	b.n	8007ca4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c84:	4b20      	ldr	r3, [pc, #128]	; (8007d08 <UART_SetConfig+0x268>)
 8007c86:	61bb      	str	r3, [r7, #24]
        break;
 8007c88:	e00c      	b.n	8007ca4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8a:	f7fe f86b 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007c8e:	61b8      	str	r0, [r7, #24]
        break;
 8007c90:	e008      	b.n	8007ca4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c96:	61bb      	str	r3, [r7, #24]
        break;
 8007c98:	e004      	b.n	8007ca4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ca2:	bf00      	nop
    }

    if (pclk != 0U)
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d018      	beq.n	8007cdc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	085a      	lsrs	r2, r3, #1
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	441a      	add	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b0f      	cmp	r3, #15
 8007cc2:	d909      	bls.n	8007cd8 <UART_SetConfig+0x238>
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cca:	d205      	bcs.n	8007cd8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	e001      	b.n	8007cdc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ce8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3720      	adds	r7, #32
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	efff69f3 	.word	0xefff69f3
 8007cf8:	40013800 	.word	0x40013800
 8007cfc:	40021000 	.word	0x40021000
 8007d00:	40004400 	.word	0x40004400
 8007d04:	40004800 	.word	0x40004800
 8007d08:	007a1200 	.word	0x007a1200

08007d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da0:	f003 0310 	and.w	r3, r3, #16
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01a      	beq.n	8007e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e0a:	d10a      	bne.n	8007e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	605a      	str	r2, [r3, #4]
  }
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b098      	sub	sp, #96	; 0x60
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e60:	f7fa fbdc 	bl	800261c <HAL_GetTick>
 8007e64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d12e      	bne.n	8007ed2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f88c 	bl	8007fa0 <UART_WaitOnFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d021      	beq.n	8007ed2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eac:	647b      	str	r3, [r7, #68]	; 0x44
 8007eae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eb4:	e841 2300 	strex	r3, r2, [r1]
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e6      	bne.n	8007e8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e062      	b.n	8007f98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d149      	bne.n	8007f74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f856 	bl	8007fa0 <UART_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d03c      	beq.n	8007f74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	623b      	str	r3, [r7, #32]
   return(result);
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f18:	633b      	str	r3, [r7, #48]	; 0x30
 8007f1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e6      	bne.n	8007efa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3308      	adds	r3, #8
 8007f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f4c:	61fa      	str	r2, [r7, #28]
 8007f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	69b9      	ldr	r1, [r7, #24]
 8007f52:	69fa      	ldr	r2, [r7, #28]
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	617b      	str	r3, [r7, #20]
   return(result);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e011      	b.n	8007f98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3758      	adds	r7, #88	; 0x58
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	603b      	str	r3, [r7, #0]
 8007fac:	4613      	mov	r3, r2
 8007fae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fb0:	e049      	b.n	8008046 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb8:	d045      	beq.n	8008046 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fba:	f7fa fb2f 	bl	800261c <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d302      	bcc.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e048      	b.n	8008066 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d031      	beq.n	8008046 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69db      	ldr	r3, [r3, #28]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d110      	bne.n	8008012 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2208      	movs	r2, #8
 8007ff6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f8ff 	bl	80081fc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2208      	movs	r2, #8
 8008002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e029      	b.n	8008066 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008020:	d111      	bne.n	8008046 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800802a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f000 f8e5 	bl	80081fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2220      	movs	r2, #32
 8008036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e00f      	b.n	8008066 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69da      	ldr	r2, [r3, #28]
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	4013      	ands	r3, r2
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	429a      	cmp	r2, r3
 8008054:	bf0c      	ite	eq
 8008056:	2301      	moveq	r3, #1
 8008058:	2300      	movne	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	429a      	cmp	r2, r3
 8008062:	d0a6      	beq.n	8007fb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008070:	b480      	push	{r7}
 8008072:	b097      	sub	sp, #92	; 0x5c
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	88fa      	ldrh	r2, [r7, #6]
 8008088:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	88fa      	ldrh	r2, [r7, #6]
 8008090:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a2:	d10e      	bne.n	80080c2 <UART_Start_Receive_IT+0x52>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <UART_Start_Receive_IT+0x48>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080b6:	e02d      	b.n	8008114 <UART_Start_Receive_IT+0xa4>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	22ff      	movs	r2, #255	; 0xff
 80080bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080c0:	e028      	b.n	8008114 <UART_Start_Receive_IT+0xa4>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10d      	bne.n	80080e6 <UART_Start_Receive_IT+0x76>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d104      	bne.n	80080dc <UART_Start_Receive_IT+0x6c>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	22ff      	movs	r2, #255	; 0xff
 80080d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080da:	e01b      	b.n	8008114 <UART_Start_Receive_IT+0xa4>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	227f      	movs	r2, #127	; 0x7f
 80080e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080e4:	e016      	b.n	8008114 <UART_Start_Receive_IT+0xa4>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ee:	d10d      	bne.n	800810c <UART_Start_Receive_IT+0x9c>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <UART_Start_Receive_IT+0x92>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	227f      	movs	r2, #127	; 0x7f
 80080fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008100:	e008      	b.n	8008114 <UART_Start_Receive_IT+0xa4>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	223f      	movs	r2, #63	; 0x3f
 8008106:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800810a:	e003      	b.n	8008114 <UART_Start_Receive_IT+0xa4>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2222      	movs	r2, #34	; 0x22
 8008120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3308      	adds	r3, #8
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800812e:	e853 3f00 	ldrex	r3, [r3]
 8008132:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	657b      	str	r3, [r7, #84]	; 0x54
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008144:	64ba      	str	r2, [r7, #72]	; 0x48
 8008146:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008148:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800814a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800814c:	e841 2300 	strex	r3, r2, [r1]
 8008150:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1e5      	bne.n	8008124 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008160:	d107      	bne.n	8008172 <UART_Start_Receive_IT+0x102>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4a21      	ldr	r2, [pc, #132]	; (80081f4 <UART_Start_Receive_IT+0x184>)
 800816e:	669a      	str	r2, [r3, #104]	; 0x68
 8008170:	e002      	b.n	8008178 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <UART_Start_Receive_IT+0x188>)
 8008176:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d019      	beq.n	80081b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
 80081a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e6      	bne.n	8008180 <UART_Start_Receive_IT+0x110>
 80081b2:	e018      	b.n	80081e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	613b      	str	r3, [r7, #16]
   return(result);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f043 0320 	orr.w	r3, r3, #32
 80081c8:	653b      	str	r3, [r7, #80]	; 0x50
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081d2:	623b      	str	r3, [r7, #32]
 80081d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	69f9      	ldr	r1, [r7, #28]
 80081d8:	6a3a      	ldr	r2, [r7, #32]
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e6      	bne.n	80081b4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	375c      	adds	r7, #92	; 0x5c
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	080084ed 	.word	0x080084ed
 80081f8:	08008345 	.word	0x08008345

080081fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b095      	sub	sp, #84	; 0x54
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008222:	643b      	str	r3, [r7, #64]	; 0x40
 8008224:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e6      	bne.n	8008204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	61fb      	str	r3, [r7, #28]
   return(result);
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	64bb      	str	r3, [r7, #72]	; 0x48
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800825c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e5      	bne.n	8008236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826e:	2b01      	cmp	r3, #1
 8008270:	d118      	bne.n	80082a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	f023 0310 	bic.w	r3, r3, #16
 8008286:	647b      	str	r3, [r7, #68]	; 0x44
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008290:	61bb      	str	r3, [r7, #24]
 8008292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6979      	ldr	r1, [r7, #20]
 8008296:	69ba      	ldr	r2, [r7, #24]
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	613b      	str	r3, [r7, #16]
   return(result);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80082b8:	bf00      	nop
 80082ba:	3754      	adds	r7, #84	; 0x54
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff fbc6 	bl	8007a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082e8:	bf00      	nop
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	60bb      	str	r3, [r7, #8]
   return(result);
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	61bb      	str	r3, [r7, #24]
 8008318:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	6979      	ldr	r1, [r7, #20]
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	613b      	str	r3, [r7, #16]
   return(result);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e6      	bne.n	80082f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2220      	movs	r2, #32
 800832e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff fb92 	bl	8007a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800833c:	bf00      	nop
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b09c      	sub	sp, #112	; 0x70
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008352:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800835c:	2b22      	cmp	r3, #34	; 0x22
 800835e:	f040 80b9 	bne.w	80084d4 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008368:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800836c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008370:	b2d9      	uxtb	r1, r3
 8008372:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008376:	b2da      	uxtb	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837c:	400a      	ands	r2, r1
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008392:	b29b      	uxth	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 809c 	bne.w	80084e4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b4:	e853 3f00 	ldrex	r3, [r3]
 80083b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80083cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80083d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1e6      	bne.n	80083ac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	667b      	str	r3, [r7, #100]	; 0x64
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3308      	adds	r3, #8
 80083fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083fe:	647a      	str	r2, [r7, #68]	; 0x44
 8008400:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e5      	bne.n	80083de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d018      	beq.n	8008466 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	623b      	str	r3, [r7, #32]
   return(result);
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008448:	663b      	str	r3, [r7, #96]	; 0x60
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008452:	633b      	str	r3, [r7, #48]	; 0x30
 8008454:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e6      	bne.n	8008434 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800846a:	2b01      	cmp	r3, #1
 800846c:	d12e      	bne.n	80084cc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	60fb      	str	r3, [r7, #12]
   return(result);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f023 0310 	bic.w	r3, r3, #16
 8008488:	65fb      	str	r3, [r7, #92]	; 0x5c
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008492:	61fb      	str	r3, [r7, #28]
 8008494:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	69b9      	ldr	r1, [r7, #24]
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	617b      	str	r3, [r7, #20]
   return(result);
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e6      	bne.n	8008474 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	d103      	bne.n	80084bc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2210      	movs	r2, #16
 80084ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff fadf 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084ca:	e00b      	b.n	80084e4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7f8 fc0f 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 80084d2:	e007      	b.n	80084e4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0208 	orr.w	r2, r2, #8
 80084e2:	619a      	str	r2, [r3, #24]
}
 80084e4:	bf00      	nop
 80084e6:	3770      	adds	r7, #112	; 0x70
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b09c      	sub	sp, #112	; 0x70
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008504:	2b22      	cmp	r3, #34	; 0x22
 8008506:	f040 80b9 	bne.w	800867c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008510:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008518:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800851a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800851e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008522:	4013      	ands	r3, r2
 8008524:	b29a      	uxth	r2, r3
 8008526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008528:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852e:	1c9a      	adds	r2, r3, #2
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 809c 	bne.w	800868c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008568:	667b      	str	r3, [r7, #100]	; 0x64
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008572:	657b      	str	r3, [r7, #84]	; 0x54
 8008574:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008578:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e6      	bne.n	8008554 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	663b      	str	r3, [r7, #96]	; 0x60
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3308      	adds	r3, #8
 80085a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085a6:	643a      	str	r2, [r7, #64]	; 0x40
 80085a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e5      	bne.n	8008586 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2220      	movs	r2, #32
 80085be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d018      	beq.n	800860e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085fc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e6      	bne.n	80085dc <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008612:	2b01      	cmp	r3, #1
 8008614:	d12e      	bne.n	8008674 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	60bb      	str	r3, [r7, #8]
   return(result);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f023 0310 	bic.w	r3, r3, #16
 8008630:	65bb      	str	r3, [r7, #88]	; 0x58
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6979      	ldr	r1, [r7, #20]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	613b      	str	r3, [r7, #16]
   return(result);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e6      	bne.n	800861c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	2b10      	cmp	r3, #16
 800865a:	d103      	bne.n	8008664 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2210      	movs	r2, #16
 8008662:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff fa0b 	bl	8007a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008672:	e00b      	b.n	800868c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7f8 fb3b 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 800867a:	e007      	b.n	800868c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0208 	orr.w	r2, r2, #8
 800868a:	619a      	str	r2, [r3, #24]
}
 800868c:	bf00      	nop
 800868e:	3770      	adds	r7, #112	; 0x70
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <__errno>:
 80086a8:	4b01      	ldr	r3, [pc, #4]	; (80086b0 <__errno+0x8>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	2000000c 	.word	0x2000000c

080086b4 <__libc_init_array>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	4d0d      	ldr	r5, [pc, #52]	; (80086ec <__libc_init_array+0x38>)
 80086b8:	4c0d      	ldr	r4, [pc, #52]	; (80086f0 <__libc_init_array+0x3c>)
 80086ba:	1b64      	subs	r4, r4, r5
 80086bc:	10a4      	asrs	r4, r4, #2
 80086be:	2600      	movs	r6, #0
 80086c0:	42a6      	cmp	r6, r4
 80086c2:	d109      	bne.n	80086d8 <__libc_init_array+0x24>
 80086c4:	4d0b      	ldr	r5, [pc, #44]	; (80086f4 <__libc_init_array+0x40>)
 80086c6:	4c0c      	ldr	r4, [pc, #48]	; (80086f8 <__libc_init_array+0x44>)
 80086c8:	f000 f91a 	bl	8008900 <_init>
 80086cc:	1b64      	subs	r4, r4, r5
 80086ce:	10a4      	asrs	r4, r4, #2
 80086d0:	2600      	movs	r6, #0
 80086d2:	42a6      	cmp	r6, r4
 80086d4:	d105      	bne.n	80086e2 <__libc_init_array+0x2e>
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086dc:	4798      	blx	r3
 80086de:	3601      	adds	r6, #1
 80086e0:	e7ee      	b.n	80086c0 <__libc_init_array+0xc>
 80086e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e6:	4798      	blx	r3
 80086e8:	3601      	adds	r6, #1
 80086ea:	e7f2      	b.n	80086d2 <__libc_init_array+0x1e>
 80086ec:	08008958 	.word	0x08008958
 80086f0:	08008958 	.word	0x08008958
 80086f4:	08008958 	.word	0x08008958
 80086f8:	0800895c 	.word	0x0800895c

080086fc <malloc>:
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <malloc+0xc>)
 80086fe:	4601      	mov	r1, r0
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	f000 b82b 	b.w	800875c <_malloc_r>
 8008706:	bf00      	nop
 8008708:	2000000c 	.word	0x2000000c

0800870c <memset>:
 800870c:	4402      	add	r2, r0
 800870e:	4603      	mov	r3, r0
 8008710:	4293      	cmp	r3, r2
 8008712:	d100      	bne.n	8008716 <memset+0xa>
 8008714:	4770      	bx	lr
 8008716:	f803 1b01 	strb.w	r1, [r3], #1
 800871a:	e7f9      	b.n	8008710 <memset+0x4>

0800871c <sbrk_aligned>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4e0e      	ldr	r6, [pc, #56]	; (8008758 <sbrk_aligned+0x3c>)
 8008720:	460c      	mov	r4, r1
 8008722:	6831      	ldr	r1, [r6, #0]
 8008724:	4605      	mov	r5, r0
 8008726:	b911      	cbnz	r1, 800872e <sbrk_aligned+0x12>
 8008728:	f000 f88c 	bl	8008844 <_sbrk_r>
 800872c:	6030      	str	r0, [r6, #0]
 800872e:	4621      	mov	r1, r4
 8008730:	4628      	mov	r0, r5
 8008732:	f000 f887 	bl	8008844 <_sbrk_r>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d00a      	beq.n	8008750 <sbrk_aligned+0x34>
 800873a:	1cc4      	adds	r4, r0, #3
 800873c:	f024 0403 	bic.w	r4, r4, #3
 8008740:	42a0      	cmp	r0, r4
 8008742:	d007      	beq.n	8008754 <sbrk_aligned+0x38>
 8008744:	1a21      	subs	r1, r4, r0
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f87c 	bl	8008844 <_sbrk_r>
 800874c:	3001      	adds	r0, #1
 800874e:	d101      	bne.n	8008754 <sbrk_aligned+0x38>
 8008750:	f04f 34ff 	mov.w	r4, #4294967295
 8008754:	4620      	mov	r0, r4
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	20000600 	.word	0x20000600

0800875c <_malloc_r>:
 800875c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008760:	1ccd      	adds	r5, r1, #3
 8008762:	f025 0503 	bic.w	r5, r5, #3
 8008766:	3508      	adds	r5, #8
 8008768:	2d0c      	cmp	r5, #12
 800876a:	bf38      	it	cc
 800876c:	250c      	movcc	r5, #12
 800876e:	2d00      	cmp	r5, #0
 8008770:	4607      	mov	r7, r0
 8008772:	db01      	blt.n	8008778 <_malloc_r+0x1c>
 8008774:	42a9      	cmp	r1, r5
 8008776:	d905      	bls.n	8008784 <_malloc_r+0x28>
 8008778:	230c      	movs	r3, #12
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	2600      	movs	r6, #0
 800877e:	4630      	mov	r0, r6
 8008780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008784:	4e2e      	ldr	r6, [pc, #184]	; (8008840 <_malloc_r+0xe4>)
 8008786:	f000 f86d 	bl	8008864 <__malloc_lock>
 800878a:	6833      	ldr	r3, [r6, #0]
 800878c:	461c      	mov	r4, r3
 800878e:	bb34      	cbnz	r4, 80087de <_malloc_r+0x82>
 8008790:	4629      	mov	r1, r5
 8008792:	4638      	mov	r0, r7
 8008794:	f7ff ffc2 	bl	800871c <sbrk_aligned>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	4604      	mov	r4, r0
 800879c:	d14d      	bne.n	800883a <_malloc_r+0xde>
 800879e:	6834      	ldr	r4, [r6, #0]
 80087a0:	4626      	mov	r6, r4
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	d140      	bne.n	8008828 <_malloc_r+0xcc>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4631      	mov	r1, r6
 80087aa:	4638      	mov	r0, r7
 80087ac:	eb04 0803 	add.w	r8, r4, r3
 80087b0:	f000 f848 	bl	8008844 <_sbrk_r>
 80087b4:	4580      	cmp	r8, r0
 80087b6:	d13a      	bne.n	800882e <_malloc_r+0xd2>
 80087b8:	6821      	ldr	r1, [r4, #0]
 80087ba:	3503      	adds	r5, #3
 80087bc:	1a6d      	subs	r5, r5, r1
 80087be:	f025 0503 	bic.w	r5, r5, #3
 80087c2:	3508      	adds	r5, #8
 80087c4:	2d0c      	cmp	r5, #12
 80087c6:	bf38      	it	cc
 80087c8:	250c      	movcc	r5, #12
 80087ca:	4629      	mov	r1, r5
 80087cc:	4638      	mov	r0, r7
 80087ce:	f7ff ffa5 	bl	800871c <sbrk_aligned>
 80087d2:	3001      	adds	r0, #1
 80087d4:	d02b      	beq.n	800882e <_malloc_r+0xd2>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	442b      	add	r3, r5
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	e00e      	b.n	80087fc <_malloc_r+0xa0>
 80087de:	6822      	ldr	r2, [r4, #0]
 80087e0:	1b52      	subs	r2, r2, r5
 80087e2:	d41e      	bmi.n	8008822 <_malloc_r+0xc6>
 80087e4:	2a0b      	cmp	r2, #11
 80087e6:	d916      	bls.n	8008816 <_malloc_r+0xba>
 80087e8:	1961      	adds	r1, r4, r5
 80087ea:	42a3      	cmp	r3, r4
 80087ec:	6025      	str	r5, [r4, #0]
 80087ee:	bf18      	it	ne
 80087f0:	6059      	strne	r1, [r3, #4]
 80087f2:	6863      	ldr	r3, [r4, #4]
 80087f4:	bf08      	it	eq
 80087f6:	6031      	streq	r1, [r6, #0]
 80087f8:	5162      	str	r2, [r4, r5]
 80087fa:	604b      	str	r3, [r1, #4]
 80087fc:	4638      	mov	r0, r7
 80087fe:	f104 060b 	add.w	r6, r4, #11
 8008802:	f000 f835 	bl	8008870 <__malloc_unlock>
 8008806:	f026 0607 	bic.w	r6, r6, #7
 800880a:	1d23      	adds	r3, r4, #4
 800880c:	1af2      	subs	r2, r6, r3
 800880e:	d0b6      	beq.n	800877e <_malloc_r+0x22>
 8008810:	1b9b      	subs	r3, r3, r6
 8008812:	50a3      	str	r3, [r4, r2]
 8008814:	e7b3      	b.n	800877e <_malloc_r+0x22>
 8008816:	6862      	ldr	r2, [r4, #4]
 8008818:	42a3      	cmp	r3, r4
 800881a:	bf0c      	ite	eq
 800881c:	6032      	streq	r2, [r6, #0]
 800881e:	605a      	strne	r2, [r3, #4]
 8008820:	e7ec      	b.n	80087fc <_malloc_r+0xa0>
 8008822:	4623      	mov	r3, r4
 8008824:	6864      	ldr	r4, [r4, #4]
 8008826:	e7b2      	b.n	800878e <_malloc_r+0x32>
 8008828:	4634      	mov	r4, r6
 800882a:	6876      	ldr	r6, [r6, #4]
 800882c:	e7b9      	b.n	80087a2 <_malloc_r+0x46>
 800882e:	230c      	movs	r3, #12
 8008830:	603b      	str	r3, [r7, #0]
 8008832:	4638      	mov	r0, r7
 8008834:	f000 f81c 	bl	8008870 <__malloc_unlock>
 8008838:	e7a1      	b.n	800877e <_malloc_r+0x22>
 800883a:	6025      	str	r5, [r4, #0]
 800883c:	e7de      	b.n	80087fc <_malloc_r+0xa0>
 800883e:	bf00      	nop
 8008840:	200005fc 	.word	0x200005fc

08008844 <_sbrk_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4d06      	ldr	r5, [pc, #24]	; (8008860 <_sbrk_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4604      	mov	r4, r0
 800884c:	4608      	mov	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7f9 fe18 	bl	8002484 <_sbrk>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_sbrk_r+0x1a>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	b103      	cbz	r3, 800885e <_sbrk_r+0x1a>
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20000604 	.word	0x20000604

08008864 <__malloc_lock>:
 8008864:	4801      	ldr	r0, [pc, #4]	; (800886c <__malloc_lock+0x8>)
 8008866:	f000 b809 	b.w	800887c <__retarget_lock_acquire_recursive>
 800886a:	bf00      	nop
 800886c:	20000608 	.word	0x20000608

08008870 <__malloc_unlock>:
 8008870:	4801      	ldr	r0, [pc, #4]	; (8008878 <__malloc_unlock+0x8>)
 8008872:	f000 b804 	b.w	800887e <__retarget_lock_release_recursive>
 8008876:	bf00      	nop
 8008878:	20000608 	.word	0x20000608

0800887c <__retarget_lock_acquire_recursive>:
 800887c:	4770      	bx	lr

0800887e <__retarget_lock_release_recursive>:
 800887e:	4770      	bx	lr

08008880 <lrintf>:
 8008880:	ee10 3a10 	vmov	r3, s0
 8008884:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008888:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 800888c:	281e      	cmp	r0, #30
 800888e:	b082      	sub	sp, #8
 8008890:	dc2e      	bgt.n	80088f0 <lrintf+0x70>
 8008892:	1c41      	adds	r1, r0, #1
 8008894:	da02      	bge.n	800889c <lrintf+0x1c>
 8008896:	2000      	movs	r0, #0
 8008898:	b002      	add	sp, #8
 800889a:	4770      	bx	lr
 800889c:	2816      	cmp	r0, #22
 800889e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80088a2:	dd09      	ble.n	80088b8 <lrintf+0x38>
 80088a4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80088a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80088ac:	3a96      	subs	r2, #150	; 0x96
 80088ae:	4090      	lsls	r0, r2
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d0f1      	beq.n	8008898 <lrintf+0x18>
 80088b4:	4240      	negs	r0, r0
 80088b6:	e7ef      	b.n	8008898 <lrintf+0x18>
 80088b8:	4b10      	ldr	r3, [pc, #64]	; (80088fc <lrintf+0x7c>)
 80088ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80088be:	ed93 7a00 	vldr	s14, [r3]
 80088c2:	ee37 0a00 	vadd.f32	s0, s14, s0
 80088c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80088ca:	eddd 7a01 	vldr	s15, [sp, #4]
 80088ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088d2:	ee17 3a90 	vmov	r3, s15
 80088d6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80088da:	d0dc      	beq.n	8008896 <lrintf+0x16>
 80088dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80088e0:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80088e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80088e8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80088ec:	40d8      	lsrs	r0, r3
 80088ee:	e7df      	b.n	80088b0 <lrintf+0x30>
 80088f0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80088f4:	ee17 0a90 	vmov	r0, s15
 80088f8:	e7ce      	b.n	8008898 <lrintf+0x18>
 80088fa:	bf00      	nop
 80088fc:	08008950 	.word	0x08008950

08008900 <_init>:
 8008900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008902:	bf00      	nop
 8008904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008906:	bc08      	pop	{r3}
 8008908:	469e      	mov	lr, r3
 800890a:	4770      	bx	lr

0800890c <_fini>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr

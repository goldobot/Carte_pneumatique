
Code_carte_pneumatique.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008554  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800871c  0800871c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800871c  0800871c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800871c  0800871c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008720  08008720  00018720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000580  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000058c  2000058c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001778b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b6d  00000000  00000000  000377c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  0003a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d57d  00000000  00000000  0003c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018751  00000000  00000000  00059e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b10e4  00000000  00000000  000725de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001236c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000544c  00000000  00000000  00123714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080086c4 	.word	0x080086c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080086c4 	.word	0x080086c4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <dshot_init>:

int dshot_ready = 0;

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f83f 	bl	80008c4 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000846:	f000 f8fb 	bl	8000a40 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800084a:	f000 f91d 	bl	8000a88 <dshot_start_pwm>
  dshot_ready = 1;
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <dshot_init+0x28>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000190 	.word	0x20000190

08000860 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if (!dshot_ready) return;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <dshot_write+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <dshot_write+0x20>

	dshot_prepare_dmabuffer_all(motor_value);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f98d 	bl	8000b90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000876:	f000 f9bf 	bl	8000bf8 <dshot_dma_start>
	dshot_enable_dma_request();
 800087a:	f000 fa03 	bl	8000c84 <dshot_enable_dma_request>
 800087e:	e000      	b.n	8000882 <dshot_write+0x22>
  if (!dshot_ready) return;
 8000880:	bf00      	nop
}
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000190 	.word	0x20000190

0800088c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d003      	beq.n	80008a4 <dshot_choose_type+0x18>
 800089c:	2b02      	cmp	r3, #2
 800089e:	d103      	bne.n	80008a8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <dshot_choose_type+0x2c>)
 80008a2:	e002      	b.n	80008aa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <dshot_choose_type+0x30>)
 80008a6:	e000      	b.n	80008aa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <dshot_choose_type+0x34>)
	}
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	00b71b00 	.word	0x00b71b00
 80008bc:	005b8d80 	.word	0x005b8d80
 80008c0:	002dc6c0 	.word	0x002dc6c0

080008c4 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	ed2d 8b02 	vpush	{d8}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <dshot_set_timer+0xc4>)
 80008d4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffd2 	bl	800088c <dshot_choose_type>
 80008e8:	ee07 0a90 	vmov	s15, r0
 80008ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008f4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800098c <dshot_set_timer+0xc8>
 80008f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000900:	f007 fea0 	bl	8008644 <lrintf>
 8000904:	4603      	mov	r3, r0
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <dshot_set_timer+0xcc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	897a      	ldrh	r2, [r7, #10]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <dshot_set_timer+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2214      	movs	r2, #20
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <dshot_set_timer+0xcc>)
 800091e:	2214      	movs	r2, #20
 8000920:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <dshot_set_timer+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <dshot_set_timer+0xd0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2214      	movs	r2, #20
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <dshot_set_timer+0xd0>)
 8000934:	2214      	movs	r2, #20
 8000936:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <dshot_set_timer+0xd4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	897a      	ldrh	r2, [r7, #10]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <dshot_set_timer+0xd4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2214      	movs	r2, #20
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <dshot_set_timer+0xd4>)
 800094a:	2214      	movs	r2, #20
 800094c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <dshot_set_timer+0xd0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	897a      	ldrh	r2, [r7, #10]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <dshot_set_timer+0xd0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2214      	movs	r2, #20
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <dshot_set_timer+0xd0>)
 8000960:	2214      	movs	r2, #20
 8000962:	60da      	str	r2, [r3, #12]

	// motor5
	__HAL_TIM_SET_PRESCALER(MOTOR_5_TIM, dshot_prescaler);
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <dshot_set_timer+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	897a      	ldrh	r2, [r7, #10]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_5_TIM, MOTOR_BITLENGTH);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <dshot_set_timer+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2214      	movs	r2, #20
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <dshot_set_timer+0xcc>)
 8000976:	2214      	movs	r2, #20
 8000978:	60da      	str	r2, [r3, #12]
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	ecbd 8b02 	vpop	{d8}
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	016e3600 	.word	0x016e3600
 800098c:	3c23d70a 	.word	0x3c23d70a
 8000990:	200002bc 	.word	0x200002bc
 8000994:	20000308 	.word	0x20000308
 8000998:	20000270 	.word	0x20000270

0800099c <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[MOTOR_1_TIM_DMA_ID])
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d108      	bne.n	80009c6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_1_TIM_DMA);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009c2:	60da      	str	r2, [r3, #12]
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
	}

}
 80009c4:	e036      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_2_TIM_DMA_ID])
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d108      	bne.n	80009e2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_2_TIM_DMA);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	e028      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_3_TIM_DMA_ID])
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d108      	bne.n	80009fe <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_3_TIM_DMA);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009fa:	60da      	str	r2, [r3, #12]
}
 80009fc:	e01a      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_4_TIM_DMA_ID])
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d108      	bne.n	8000a1a <dshot_dma_tc_callback+0x7e>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_4_TIM_DMA);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00c      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d107      	bne.n	8000a34 <dshot_dma_tc_callback+0x98>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a32:	60da      	str	r2, [r3, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <dshot_put_tc_callback_function+0x44>)
 8000a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a58:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200002bc 	.word	0x200002bc
 8000a7c:	0800099d 	.word	0x0800099d
 8000a80:	20000308 	.word	0x20000308
 8000a84:	20000270 	.word	0x20000270

08000a88 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000a90:	f005 fbf6 	bl	8006280 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a94:	210c      	movs	r1, #12
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <dshot_start_pwm+0x34>)
 8000a98:	f005 fbf2 	bl	8006280 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <dshot_start_pwm+0x38>)
 8000aa0:	f005 fbee 	bl	8006280 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <dshot_start_pwm+0x34>)
 8000aa8:	f005 fbea 	bl	8006280 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_5_TIM, MOTOR_5_TIM_CHANNEL);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000ab0:	f005 fbe6 	bl	8006280 <HAL_TIM_PWM_Start>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200002bc 	.word	0x200002bc
 8000abc:	20000308 	.word	0x20000308
 8000ac0:	20000270 	.word	0x20000270

08000ac4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000ae6:	893b      	ldrh	r3, [r7, #8]
 8000ae8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e009      	b.n	8000b04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4053      	eors	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddf2      	ble.n	8000af0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000b12:	893b      	ldrh	r3, [r7, #8]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000b20:	893b      	ldrh	r3, [r7, #8]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffc1 	bl	8000ac4 <dshot_prepare_packet>
 8000b42:	4603      	mov	r3, r0
 8000b44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e011      	b.n	8000b70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da01      	bge.n	8000b58 <dshot_prepare_dmabuffer+0x2a>
 8000b54:	220e      	movs	r2, #14
 8000b56:	e000      	b.n	8000b5a <dshot_prepare_dmabuffer+0x2c>
 8000b58:	2207      	movs	r2, #7
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	440b      	add	r3, r1
 8000b62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	ddea      	ble.n	8000b4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3340      	adds	r3, #64	; 0x40
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3344      	adds	r3, #68	; 0x44
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <dshot_prepare_dmabuffer_all+0x54>)
 8000ba0:	f7ff ffc5 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <dshot_prepare_dmabuffer_all+0x58>)
 8000bae:	f7ff ffbe 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <dshot_prepare_dmabuffer_all+0x5c>)
 8000bbc:	f7ff ffb7 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3306      	adds	r3, #6
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <dshot_prepare_dmabuffer_all+0x60>)
 8000bca:	f7ff ffb0 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor5_dmabuffer, motor_value[4]);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <dshot_prepare_dmabuffer_all+0x64>)
 8000bd8:	f7ff ffa9 	bl	8000b2e <dshot_prepare_dmabuffer>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000028 	.word	0x20000028
 8000be8:	20000070 	.word	0x20000070
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	20000100 	.word	0x20000100
 8000bf4:	20000148 	.word	0x20000148

08000bf8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <dshot_dma_start+0x6c>)
 8000bfe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c00:	4919      	ldr	r1, [pc, #100]	; (8000c68 <dshot_dma_start+0x70>)
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	333c      	adds	r3, #60	; 0x3c
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	f002 fea0 	bl	8003950 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <dshot_dma_start+0x74>)
 8000c12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c14:	4916      	ldr	r1, [pc, #88]	; (8000c70 <dshot_dma_start+0x78>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <dshot_dma_start+0x74>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2312      	movs	r3, #18
 8000c20:	f002 fe96 	bl	8003950 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c28:	4913      	ldr	r1, [pc, #76]	; (8000c78 <dshot_dma_start+0x80>)
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3334      	adds	r3, #52	; 0x34
 8000c30:	461a      	mov	r2, r3
 8000c32:	2312      	movs	r3, #18
 8000c34:	f002 fe8c 	bl	8003950 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <dshot_dma_start+0x74>)
 8000c3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c3c:	490f      	ldr	r1, [pc, #60]	; (8000c7c <dshot_dma_start+0x84>)
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <dshot_dma_start+0x74>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3334      	adds	r3, #52	; 0x34
 8000c44:	461a      	mov	r2, r3
 8000c46:	2312      	movs	r3, #18
 8000c48:	f002 fe82 	bl	8003950 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID], (uint32_t)motor5_dmabuffer, (uint32_t)&MOTOR_5_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c50:	490b      	ldr	r1, [pc, #44]	; (8000c80 <dshot_dma_start+0x88>)
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3334      	adds	r3, #52	; 0x34
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f002 fe78 	bl	8003950 <HAL_DMA_Start_IT>

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200002bc 	.word	0x200002bc
 8000c68:	20000028 	.word	0x20000028
 8000c6c:	20000308 	.word	0x20000308
 8000c70:	20000070 	.word	0x20000070
 8000c74:	20000270 	.word	0x20000270
 8000c78:	200000b8 	.word	0x200000b8
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	20000148 	.word	0x20000148

08000c84 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, MOTOR_1_TIM_DMA);
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c96:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, MOTOR_2_TIM_DMA);
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ca6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, MOTOR_3_TIM_DMA);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, MOTOR_4_TIM_DMA);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_5_TIM, MOTOR_5_TIM_DMA);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd6:	60da      	str	r2, [r3, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200002bc 	.word	0x200002bc
 8000ce8:	20000308 	.word	0x20000308
 8000cec:	20000270 	.word	0x20000270

08000cf0 <HAL_UART_RxCpltCallback>:
//Partie D-Shot
uint16_t my_motor_value[5] = {0, 0, 0, 0, 0};

//Partie UART en interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	res1=HAL_UART_Receive_IT(&huart2, &command_buffer, 1);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <HAL_UART_RxCpltCallback+0x44>)
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <HAL_UART_RxCpltCallback+0x48>)
 8000cfe:	f006 fb27 	bl	8007350 <HAL_UART_Receive_IT>
 8000d02:	4603      	mov	r3, r0
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_UART_RxCpltCallback+0x4c>)
 8000d08:	701a      	strb	r2, [r3, #0]
	if(res1 == HAL_OK){
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_UART_RxCpltCallback+0x4c>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10c      	bne.n	8000d2c <HAL_UART_RxCpltCallback+0x3c>
		//Notifier a la Rpi la bonne reception du mot de commande
		return_buffer[0]|= 1;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_UART_RxCpltCallback+0x50>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_UART_RxCpltCallback+0x50>)
 8000d1e:	701a      	strb	r2, [r3, #0]
		//Retourner les infos a la Rpi !
		HAL_UART_Transmit(&huart2, return_buffer, 1, 100);
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	4906      	ldr	r1, [pc, #24]	; (8000d40 <HAL_UART_RxCpltCallback+0x50>)
 8000d26:	4804      	ldr	r0, [pc, #16]	; (8000d38 <HAL_UART_RxCpltCallback+0x48>)
 8000d28:	f006 fa88 	bl	800723c <HAL_UART_Transmit>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	2000019d 	.word	0x2000019d
 8000d38:	200004f4 	.word	0x200004f4
 8000d3c:	200001a2 	.word	0x200001a2
 8000d40:	200001a0 	.word	0x200001a0
 8000d44:	00000000 	.word	0x00000000

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b098      	sub	sp, #96	; 0x60
 8000d4c:	af02      	add	r7, sp, #8

	//partie Capteur de Pression
	//modèle : 2513130810401
	float pressure_val;
	//SENP:  Pressure sensor sensitivity : 4.196 ×10-2
	float SENP = 0.04196;
 8000d4e:	4bc2      	ldr	r3, [pc, #776]	; (8001058 <main+0x310>)
 8000d50:	647b      	str	r3, [r7, #68]	; 0x44
	//PMIN: Min Pressure output : -100 kPa
	int Pmin = -100;
 8000d52:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
	//OUTP_MIN: digital output at Pmin = 3277
	float OUT_Pmin = 3277;
 8000d58:	4bc0      	ldr	r3, [pc, #768]	; (800105c <main+0x314>)
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	//P15bit = PH & PL
	float P15bit;
	//tableaux des 100 dernières valeurs de pression, toutes les valeurs initialisées à 0
	uint8_t pressures[PRESSURES_SIZE] = {0};
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	809a      	strh	r2, [r3, #4]
	//valeur pour remplir le tableau des valeurs de pressions avant de calculer la moyennes des pressions
	uint32_t pressures_mean = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	657b      	str	r3, [r7, #84]	; 0x54

	// explication de la conversion des valeurs de l'ADC en température
	// dans le fichier "Equation_Sonde_PT100, il y a 2 courbes, ces coeffs sont respectivement les pentes et les ordonnées à l'origine
	// raw = valeur numérique renvoyée par l'ADC
	// méthode de calibration sonde PT100 : mesure resistance et raw à 22°   &   mesure resistance et raw à 100° (pistolet à air chaud devant la PT100)
	float raw_to_res_mult = 0.0393;
 8000d6e:	4bbc      	ldr	r3, [pc, #752]	; (8001060 <main+0x318>)
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
	float raw_to_res_offset = -2.47;
 8000d72:	4bbc      	ldr	r3, [pc, #752]	; (8001064 <main+0x31c>)
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
	float res_to_temp_mult = -0.74;
 8000d76:	4bbc      	ldr	r3, [pc, #752]	; (8001068 <main+0x320>)
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
	float res_to_temp_offset = 104;
 8000d7a:	4bbc      	ldr	r3, [pc, #752]	; (800106c <main+0x324>)
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Partie Arrêt d'urgence
	uint8_t AU_Current_Status = GPIO_PIN_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t AU_Old_Status = GPIO_PIN_RESET;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8a:	f001 fb8f 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8e:	f000 fba3 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d92:	f000 fee1 	bl	8001b58 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d96:	f000 fea1 	bl	8001adc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d9a:	f000 fe6f 	bl	8001a7c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d9e:	f000 fd6d 	bl	800187c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000da2:	f000 fe35 	bl	8001a10 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000da6:	f000 fdcd 	bl	8001944 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000daa:	f000 fcd7 	bl	800175c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000dae:	f000 fc95 	bl	80016dc <MX_I2C1_Init>
  MX_CAN_Init();
 8000db2:	f000 fc5f 	bl	8001674 <MX_CAN_Init>
  MX_ADC1_Init();
 8000db6:	f000 fbed 	bl	8001594 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	dshot_init(DSHOT_SPEED);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff fd3a 	bl	8000834 <dshot_init>
	//Initialization Des ESC des moteurs ET TOUT LE RESTE
	my_motor_value[0] = 0;
 8000dc0:	4bab      	ldr	r3, [pc, #684]	; (8001070 <main+0x328>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	801a      	strh	r2, [r3, #0]
	my_motor_value[1] = 0;
 8000dc6:	4baa      	ldr	r3, [pc, #680]	; (8001070 <main+0x328>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	805a      	strh	r2, [r3, #2]
	my_motor_value[2] = 0;
 8000dcc:	4ba8      	ldr	r3, [pc, #672]	; (8001070 <main+0x328>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	809a      	strh	r2, [r3, #4]
	my_motor_value[3] = 0;
 8000dd2:	4ba7      	ldr	r3, [pc, #668]	; (8001070 <main+0x328>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	80da      	strh	r2, [r3, #6]
	my_motor_value[4] = 0;
 8000dd8:	4ba5      	ldr	r3, [pc, #660]	; (8001070 <main+0x328>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2180      	movs	r1, #128	; 0x80
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f003 f905 	bl	8003ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2110      	movs	r1, #16
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f003 f8ff 	bl	8003ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2108      	movs	r1, #8
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f003 f8f9 	bl	8003ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2101      	movs	r1, #1
 8000e06:	489b      	ldr	r0, [pc, #620]	; (8001074 <main+0x32c>)
 8000e08:	f003 f8f4 	bl	8003ff4 <HAL_GPIO_WritePin>
	//start to count (for tim6 interruption)
	HAL_TIM_Base_Start_IT(&htim6);
 8000e0c:	489a      	ldr	r0, [pc, #616]	; (8001078 <main+0x330>)
 8000e0e:	f005 f983 	bl	8006118 <HAL_TIM_Base_Start_IT>
	//a peu près temps minimal de delay pour laisser le temps aux moteurs de s'initialiser
	HAL_Delay(2600);
 8000e12:	f640 2028 	movw	r0, #2600	; 0xa28
 8000e16:	f001 fbaf 	bl	8002578 <HAL_Delay>
	//On lance l'interruption sur l'UART2, à relancer dans le callback !
	HAL_UART_Receive_IT(&huart2, &command_buffer, 1);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4997      	ldr	r1, [pc, #604]	; (800107c <main+0x334>)
 8000e1e:	4898      	ldr	r0, [pc, #608]	; (8001080 <main+0x338>)
 8000e20:	f006 fa96 	bl	8007350 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Partie AU : récupération du state de l'AU
		AU_Current_Status = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 8000e24:	2102      	movs	r1, #2
 8000e26:	4893      	ldr	r0, [pc, #588]	; (8001074 <main+0x32c>)
 8000e28:	f003 f8cc 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		//res1=HAL_UART_Receive(&huart2, &command_buffer, 1, 100);

		//Partie Reset_small : Reset de tout lorsque l'AU repasse à l'état haut (non coupé) alors qu'il était à l'état bas (coupé) juste avant
		if ((AU_Current_Status == GPIO_PIN_RESET) && AU_Old_Status == GPIO_PIN_SET){
 8000e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d140      	bne.n	8000ebc <main+0x174>
 8000e3a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d13c      	bne.n	8000ebc <main+0x174>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000e42:	4b8b      	ldr	r3, [pc, #556]	; (8001070 <main+0x328>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000e48:	4b89      	ldr	r3, [pc, #548]	; (8001070 <main+0x328>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000e4e:	4b88      	ldr	r3, [pc, #544]	; (8001070 <main+0x328>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000e54:	4b86      	ldr	r3, [pc, #536]	; (8001070 <main+0x328>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000e5a:	4b85      	ldr	r3, [pc, #532]	; (8001070 <main+0x328>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	811a      	strh	r2, [r3, #8]
			HAL_Delay(2600);
 8000e60:	f640 2028 	movw	r0, #2600	; 0xa28
 8000e64:	f001 fb88 	bl	8002578 <HAL_Delay>
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e70:	f003 f8c0 	bl	8003ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2110      	movs	r1, #16
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f003 f8ba 	bl	8003ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2108      	movs	r1, #8
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f003 f8b4 	bl	8003ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2101      	movs	r1, #1
 8000e90:	4878      	ldr	r0, [pc, #480]	; (8001074 <main+0x32c>)
 8000e92:	f003 f8af 	bl	8003ff4 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	487a      	ldr	r0, [pc, #488]	; (8001084 <main+0x33c>)
 8000e9c:	f003 f8aa 	bl	8003ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4877      	ldr	r0, [pc, #476]	; (8001084 <main+0x33c>)
 8000ea6:	f003 f8a5 	bl	8003ff4 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000eaa:	4b77      	ldr	r3, [pc, #476]	; (8001088 <main+0x340>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
			//reset le timer de purge
			BAU_tick = 0;
 8000eb0:	4b76      	ldr	r3, [pc, #472]	; (800108c <main+0x344>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8000eb6:	4b76      	ldr	r3, [pc, #472]	; (8001090 <main+0x348>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
		}

		//Partie Reset_Full : Si l'AU passe à l'état bas (coupé) alors qu'il était à l'état haut (non coupé), reset tout et lancer un timer de 2 minutes, au bout duquel on purge !
		if (AU_Current_Status == GPIO_PIN_SET && AU_Old_Status == GPIO_PIN_RESET){
 8000ebc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d139      	bne.n	8000f38 <main+0x1f0>
 8000ec4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d135      	bne.n	8000f38 <main+0x1f0>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000ecc:	4b68      	ldr	r3, [pc, #416]	; (8001070 <main+0x328>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000ed2:	4b67      	ldr	r3, [pc, #412]	; (8001070 <main+0x328>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000ed8:	4b65      	ldr	r3, [pc, #404]	; (8001070 <main+0x328>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000ede:	4b64      	ldr	r3, [pc, #400]	; (8001070 <main+0x328>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000ee4:	4b62      	ldr	r3, [pc, #392]	; (8001070 <main+0x328>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	811a      	strh	r2, [r3, #8]
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f003 f87f 	bl	8003ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2110      	movs	r1, #16
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f003 f879 	bl	8003ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2108      	movs	r1, #8
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 f873 	bl	8003ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2101      	movs	r1, #1
 8000f12:	4858      	ldr	r0, [pc, #352]	; (8001074 <main+0x32c>)
 8000f14:	f003 f86e 	bl	8003ff4 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	4859      	ldr	r0, [pc, #356]	; (8001084 <main+0x33c>)
 8000f1e:	f003 f869 	bl	8003ff4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2110      	movs	r1, #16
 8000f26:	4857      	ldr	r0, [pc, #348]	; (8001084 <main+0x33c>)
 8000f28:	f003 f864 	bl	8003ff4 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000f2c:	4b56      	ldr	r3, [pc, #344]	; (8001088 <main+0x340>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
			// tempo de 2 min, puis purge
			BAU_tick_enable = 1;
 8000f32:	4b57      	ldr	r3, [pc, #348]	; (8001090 <main+0x348>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
		}
		//changer les valeurs des AU status
		AU_Old_Status = AU_Current_Status;
 8000f38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f3c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

		//Lecture de la pression en I2C et activation OU NON du compresseur en fonction
		res2 = HAL_I2C_Master_Receive(&hi2c1, 0xf1, I2C_buf, 4, 200);
 8000f40:	f107 0214 	add.w	r2, r7, #20
 8000f44:	23c8      	movs	r3, #200	; 0xc8
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2304      	movs	r3, #4
 8000f4a:	21f1      	movs	r1, #241	; 0xf1
 8000f4c:	4851      	ldr	r0, [pc, #324]	; (8001094 <main+0x34c>)
 8000f4e:	f003 f8f9 	bl	8004144 <HAL_I2C_Master_Receive>
 8000f52:	4603      	mov	r3, r0
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b50      	ldr	r3, [pc, #320]	; (8001098 <main+0x350>)
 8000f58:	701a      	strb	r2, [r3, #0]
		if (res2 == HAL_OK){
 8000f5a:	4b4f      	ldr	r3, [pc, #316]	; (8001098 <main+0x350>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 80af 	bne.w	80010c2 <main+0x37a>
			//sprintf((char*)p_buf, "I2C : %d %d %d %d\r\n", (int)I2C_buf[0], (int)I2C_buf[1], (int)I2C_buf[2], (int)I2C_buf[3]);
			//HAL_UART_Receive(&huart2, p_buf, 4, 100);

			//Calcul de la pression en 10èmes de bar RELATIFS
			//voir infos_pressure_sensor plus haut pour infos sur variables
			P15bit = (int)((I2C_buf[0] << 8)|I2C_buf[1]);
 8000f64:	7d3b      	ldrb	r3, [r7, #20]
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	7d7a      	ldrb	r2, [r7, #21]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	ee07 3a90 	vmov	s15, r3
 8000f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			//formule d'après la datasheet du capteur : pressure_val = [(P15bit - OUTP_MIN)*SENP)] + PMIN;
			//Conversion en 10èmes de bar à la fin
			pressure_val = P15bit - OUT_Pmin; //2383
 8000f78:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f7c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f84:	edc7 7a08 	vstr	s15, [r7, #32]
			pressure_val = pressure_val*SENP; //99.99068
 8000f88:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f94:	edc7 7a08 	vstr	s15, [r7, #32]
			pressure_val = pressure_val + Pmin; // -0,00932
 8000f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000faa:	edc7 7a08 	vstr	s15, [r7, #32]
			pressure_val = pressure_val * 0.1; // -0,000932
 8000fae:	6a38      	ldr	r0, [r7, #32]
 8000fb0:	f7ff fb98 	bl	80006e4 <__aeabi_f2d>
 8000fb4:	a326      	add	r3, pc, #152	; (adr r3, 8001050 <main+0x308>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	f7ff f905 	bl	80001c8 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fbe5 	bl	8000794 <__aeabi_d2f>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	623b      	str	r3, [r7, #32]
			//	pressures[pressures_full_counter] = (int)pressure_val;
			//}
			//dès qu'il est plein, on calcule la moyenne du tableau renouvelé
			//on décale tout le tableau vers la droite, en faisant donc disparaître la valeur la plus ancienne

			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8000fce:	2309      	movs	r3, #9
 8000fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fd2:	e010      	b.n	8000ff6 <main+0x2ae>
				pressures[i] = pressures[i-1];
 8000fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	3350      	adds	r3, #80	; 0x50
 8000fda:	f107 0208 	add.w	r2, r7, #8
 8000fde:	4413      	add	r3, r2
 8000fe0:	f813 1c50 	ldrb.w	r1, [r3, #-80]
 8000fe4:	f107 0208 	add.w	r2, r7, #8
 8000fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000fea:	4413      	add	r3, r2
 8000fec:	460a      	mov	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8000ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	dceb      	bgt.n	8000fd4 <main+0x28c>
			}
			//On ajoute la nouvelle valeure
			pressures[0] = (int)pressure_val;
 8000ffc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001004:	edc7 7a01 	vstr	s15, [r7, #4]
 8001008:	793b      	ldrb	r3, [r7, #4]
 800100a:	723b      	strb	r3, [r7, #8]

			//puis on fait la moyenne des pressions
			for (int i = 0; i < PRESSURES_SIZE; i++){
 800100c:	2300      	movs	r3, #0
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001010:	e00b      	b.n	800102a <main+0x2e2>
				pressures_mean+=pressures[i];
 8001012:	f107 0208 	add.w	r2, r7, #8
 8001016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001020:	4413      	add	r3, r2
 8001022:	657b      	str	r3, [r7, #84]	; 0x54
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8001024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001026:	3301      	adds	r3, #1
 8001028:	64bb      	str	r3, [r7, #72]	; 0x48
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	2b09      	cmp	r3, #9
 800102e:	ddf0      	ble.n	8001012 <main+0x2ca>
			}
			pressures_mean/=PRESSURES_SIZE;
 8001030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <main+0x354>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	657b      	str	r3, [r7, #84]	; 0x54

			if (pressures_mean > (Press_order)){ // arrêter compresseur si dépassement de la pression de consigne
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <main+0x340>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001044:	4293      	cmp	r3, r2
 8001046:	d92b      	bls.n	80010a0 <main+0x358>
				my_motor_value[4] = 0;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <main+0x328>)
 800104a:	2200      	movs	r2, #0
 800104c:	811a      	strh	r2, [r3, #8]
 800104e:	e036      	b.n	80010be <main+0x376>
 8001050:	9999999a 	.word	0x9999999a
 8001054:	3fb99999 	.word	0x3fb99999
 8001058:	3d2bde40 	.word	0x3d2bde40
 800105c:	454cd000 	.word	0x454cd000
 8001060:	3d20f909 	.word	0x3d20f909
 8001064:	c01e147b 	.word	0xc01e147b
 8001068:	bf3d70a4 	.word	0xbf3d70a4
 800106c:	42d00000 	.word	0x42d00000
 8001070:	2000057c 	.word	0x2000057c
 8001074:	48001400 	.word	0x48001400
 8001078:	20000354 	.word	0x20000354
 800107c:	2000019d 	.word	0x2000019d
 8001080:	200004f4 	.word	0x200004f4
 8001084:	48000400 	.word	0x48000400
 8001088:	20000194 	.word	0x20000194
 800108c:	20000198 	.word	0x20000198
 8001090:	2000019c 	.word	0x2000019c
 8001094:	2000021c 	.word	0x2000021c
 8001098:	200001a3 	.word	0x200001a3
 800109c:	cccccccd 	.word	0xcccccccd
			}
			else if (pressures_mean < (Press_order - 2)) { // démarrage compresseur avec hysteresis de 0.4 bar
 80010a0:	4b90      	ldr	r3, [pc, #576]	; (80012e4 <main+0x59c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3b02      	subs	r3, #2
 80010a6:	461a      	mov	r2, r3
 80010a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d207      	bcs.n	80010be <main+0x376>
				if(Press_order <= 0){}
 80010ae:	4b8d      	ldr	r3, [pc, #564]	; (80012e4 <main+0x59c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <main+0x376>
				else {
					my_motor_value[4] = COMPRESSOR_SPEED;
 80010b6:	4b8c      	ldr	r3, [pc, #560]	; (80012e8 <main+0x5a0>)
 80010b8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80010bc:	811a      	strh	r2, [r3, #8]
				}
			}
			else {}

			//on remet à 0 la moyenne des pressions
			pressures_mean = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	657b      	str	r3, [r7, #84]	; 0x54
		*/

		//Lecture Température du compresseur réservoir et activation ou désactivation du compresseur en fonction SSI il est pas déjà désactivé
		//#####A IMPLEMENTER : Lecture de la température en analogique sonde PT100#####
		//start an ADC conversion
		HAL_ADC_Start(&hadc1);
 80010c2:	488a      	ldr	r0, [pc, #552]	; (80012ec <main+0x5a4>)
 80010c4:	f001 fc0e 	bl	80028e4 <HAL_ADC_Start>
		//processor waits for an ADC conversion to complete
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	4887      	ldr	r0, [pc, #540]	; (80012ec <main+0x5a4>)
 80010ce:	f001 fcbf 	bl	8002a50 <HAL_ADC_PollForConversion>
		//get raw value from the ADC channel register
		raw = HAL_ADC_GetValue(&hadc1);
 80010d2:	4886      	ldr	r0, [pc, #536]	; (80012ec <main+0x5a4>)
 80010d4:	f001 fd8a 	bl	8002bec <HAL_ADC_GetValue>
 80010d8:	4603      	mov	r3, r0
 80010da:	83fb      	strh	r3, [r7, #30]

		//get temperature value from raw value (100-Ohm = 0°C, 375-Ohm = 800°C)
		//first : conversion from raw value to resistance value : 2790=>112 kOhm, 90=>6 kOhm
		//then : conversion from resistance value to temperature value :  112 kOhm=>22 °c, 6 kOhm=>100°c
		compr_temp = res_to_temp_mult * (raw_to_res_mult * raw + raw_to_res_offset) + res_to_temp_offset;
 80010dc:	8bfb      	ldrh	r3, [r7, #30]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80010ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80010f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001106:	edc7 7a06 	vstr	s15, [r7, #24]
			return_buffer[1]|=128;
		}
		*/


		if (res1 == HAL_OK){
 800110a:	4b79      	ldr	r3, [pc, #484]	; (80012f0 <main+0x5a8>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f040 81d0 	bne.w	80014b4 <main+0x76c>
			switch(command_buffer >> 6){
 8001114:	4b77      	ldr	r3, [pc, #476]	; (80012f4 <main+0x5ac>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	099b      	lsrs	r3, r3, #6
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b03      	cmp	r3, #3
 800111e:	f200 81ce 	bhi.w	80014be <main+0x776>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <main+0x3e0>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	08001139 	.word	0x08001139
 800112c:	080011d5 	.word	0x080011d5
 8001130:	080012b5 	.word	0x080012b5
 8001134:	08001301 	.word	0x08001301
			case 0:
				//Mode 1 [00000001] : Reset nucleo: arrêt de TOUT
				if (command_buffer == 1){
 8001138:	4b6e      	ldr	r3, [pc, #440]	; (80012f4 <main+0x5ac>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d130      	bne.n	80011a2 <main+0x45a>
					// arrêt moteurs (compr, canons, turbine)
					my_motor_value[0] = 0;
 8001140:	4b69      	ldr	r3, [pc, #420]	; (80012e8 <main+0x5a0>)
 8001142:	2200      	movs	r2, #0
 8001144:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 8001146:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <main+0x5a0>)
 8001148:	2200      	movs	r2, #0
 800114a:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 800114c:	4b66      	ldr	r3, [pc, #408]	; (80012e8 <main+0x5a0>)
 800114e:	2200      	movs	r2, #0
 8001150:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <main+0x5a0>)
 8001154:	2200      	movs	r2, #0
 8001156:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 8001158:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <main+0x5a0>)
 800115a:	2200      	movs	r2, #0
 800115c:	811a      	strh	r2, [r3, #8]
					// arrêt EV 1, 2, 3 et Purge
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f002 ff45 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2110      	movs	r1, #16
 800116e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001172:	f002 ff3f 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2108      	movs	r1, #8
 800117a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117e:	f002 ff39 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	2101      	movs	r1, #1
 8001186:	485c      	ldr	r0, [pc, #368]	; (80012f8 <main+0x5b0>)
 8001188:	f002 ff34 	bl	8003ff4 <HAL_GPIO_WritePin>
					// arrêt LCD et LED Enable
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2120      	movs	r1, #32
 8001190:	485a      	ldr	r0, [pc, #360]	; (80012fc <main+0x5b4>)
 8001192:	f002 ff2f 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2110      	movs	r1, #16
 800119a:	4858      	ldr	r0, [pc, #352]	; (80012fc <main+0x5b4>)
 800119c:	f002 ff2a 	bl	8003ff4 <HAL_GPIO_WritePin>
					my_motor_value[3] = 0;
					my_motor_value[4] = 0;
					HAL_Delay(2600);
				}

				break;
 80011a0:	e18a      	b.n	80014b8 <main+0x770>
				else if (command_buffer == 2){
 80011a2:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <main+0x5ac>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	f040 8186 	bne.w	80014b8 <main+0x770>
					my_motor_value[0] = 0;
 80011ac:	4b4e      	ldr	r3, [pc, #312]	; (80012e8 <main+0x5a0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 80011b2:	4b4d      	ldr	r3, [pc, #308]	; (80012e8 <main+0x5a0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 80011b8:	4b4b      	ldr	r3, [pc, #300]	; (80012e8 <main+0x5a0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 80011be:	4b4a      	ldr	r3, [pc, #296]	; (80012e8 <main+0x5a0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 80011c4:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <main+0x5a0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	811a      	strh	r2, [r3, #8]
					HAL_Delay(2600);
 80011ca:	f640 2028 	movw	r0, #2600	; 0xa28
 80011ce:	f001 f9d3 	bl	8002578 <HAL_Delay>
				break;
 80011d2:	e171      	b.n	80014b8 <main+0x770>
			case 1:
				//Mode 2 [01]: Canons
				//ordre des canons : left=1 - right=2 - top=3
				//écriture dans le moteur 1 (left)
				if ((command_buffer & 48) >> 4 == 0){
 80011d4:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <main+0x5ac>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	111b      	asrs	r3, r3, #4
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <main+0x4a2>
					my_motor_value[0] = 0;
 80011e2:	4b41      	ldr	r3, [pc, #260]	; (80012e8 <main+0x5a0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	801a      	strh	r2, [r3, #0]
 80011e8:	e01a      	b.n	8001220 <main+0x4d8>
				}
				else if ((command_buffer & 48) >> 4 == 1){
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <main+0x5ac>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	111b      	asrs	r3, r3, #4
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d103      	bne.n	8001200 <main+0x4b8>
					my_motor_value[0] = CANONS_SPEED_1;
 80011f8:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <main+0x5a0>)
 80011fa:	2264      	movs	r2, #100	; 0x64
 80011fc:	801a      	strh	r2, [r3, #0]
 80011fe:	e00f      	b.n	8001220 <main+0x4d8>
				}
				else if ((command_buffer & 48) >> 4 == 2){
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <main+0x5ac>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	111b      	asrs	r3, r3, #4
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d104      	bne.n	8001218 <main+0x4d0>
					my_motor_value[0] = CANONS_SPEED_2;
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <main+0x5a0>)
 8001210:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001214:	801a      	strh	r2, [r3, #0]
 8001216:	e003      	b.n	8001220 <main+0x4d8>
				}
				else{
					my_motor_value[0] = CANONS_SPEED_3;
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <main+0x5a0>)
 800121a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800121e:	801a      	strh	r2, [r3, #0]
				}

				//écriture dans le moteur 2 (right)
				if ((command_buffer & 12) >> 2 == 0){
 8001220:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <main+0x5ac>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	109b      	asrs	r3, r3, #2
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <main+0x4ee>
					my_motor_value[1] = 0;
 800122e:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <main+0x5a0>)
 8001230:	2200      	movs	r2, #0
 8001232:	805a      	strh	r2, [r3, #2]
 8001234:	e01a      	b.n	800126c <main+0x524>
				}
				else if ((command_buffer & 12) >> 2 == 1){
 8001236:	4b2f      	ldr	r3, [pc, #188]	; (80012f4 <main+0x5ac>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	109b      	asrs	r3, r3, #2
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d103      	bne.n	800124c <main+0x504>
					my_motor_value[1] = CANONS_SPEED_1;
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <main+0x5a0>)
 8001246:	2264      	movs	r2, #100	; 0x64
 8001248:	805a      	strh	r2, [r3, #2]
 800124a:	e00f      	b.n	800126c <main+0x524>
				}
				else if ((command_buffer & 12) >> 2 == 2){
 800124c:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <main+0x5ac>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	109b      	asrs	r3, r3, #2
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d104      	bne.n	8001264 <main+0x51c>
					my_motor_value[1] = CANONS_SPEED_2;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <main+0x5a0>)
 800125c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001260:	805a      	strh	r2, [r3, #2]
 8001262:	e003      	b.n	800126c <main+0x524>
				}
				else{
					my_motor_value[1] = CANONS_SPEED_3;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <main+0x5a0>)
 8001266:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800126a:	805a      	strh	r2, [r3, #2]
				}

				//écriture dans le moteur 3 (top)
				if ((command_buffer & 3) == 0){
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <main+0x5ac>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d103      	bne.n	8001280 <main+0x538>
					my_motor_value[2] = 0;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <main+0x5a0>)
 800127a:	2200      	movs	r2, #0
 800127c:	809a      	strh	r2, [r3, #4]
				}
				else{
					my_motor_value[2] = CANONS_SPEED_3;
				}

				break;
 800127e:	e11e      	b.n	80014be <main+0x776>
				else if ((command_buffer & 3) == 1){
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <main+0x5ac>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d103      	bne.n	8001294 <main+0x54c>
					my_motor_value[2] = CANONS_SPEED_1;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <main+0x5a0>)
 800128e:	2264      	movs	r2, #100	; 0x64
 8001290:	809a      	strh	r2, [r3, #4]
				break;
 8001292:	e114      	b.n	80014be <main+0x776>
				else if ((command_buffer & 3) == 2){
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <main+0x5ac>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d104      	bne.n	80012aa <main+0x562>
					my_motor_value[2] = CANONS_SPEED_2;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <main+0x5a0>)
 80012a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012a6:	809a      	strh	r2, [r3, #4]
				break;
 80012a8:	e109      	b.n	80014be <main+0x776>
					my_motor_value[2] = CANONS_SPEED_3;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <main+0x5a0>)
 80012ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012b0:	809a      	strh	r2, [r3, #4]
				break;
 80012b2:	e104      	b.n	80014be <main+0x776>
			case 2:
				//Mode 3 [10]: Compresseur / INIT
				//[10000000] : arrêt Compresseur + Consigne Pression => 0 + Purge EV4
				if ((command_buffer ^ 128) == 0){
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <main+0x5ac>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b80      	cmp	r3, #128	; 0x80
 80012ba:	d10a      	bne.n	80012d2 <main+0x58a>
					my_motor_value[4] = 0;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <main+0x5a0>)
 80012be:	2200      	movs	r2, #0
 80012c0:	811a      	strh	r2, [r3, #8]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	2101      	movs	r1, #1
 80012c6:	480c      	ldr	r0, [pc, #48]	; (80012f8 <main+0x5b0>)
 80012c8:	f002 fe94 	bl	8003ff4 <HAL_GPIO_WritePin>
					Press_order = 0;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <main+0x59c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
				}
				//[10PPPPPP] : Val de consigne Pression, à récup SSI différente pour régulation au prochain tour de boucle
				Press_order = command_buffer ^ (2 << 6);
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <main+0x5ac>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80012da:	43db      	mvns	r3, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <main+0x59c>)
 80012e0:	701a      	strb	r2, [r3, #0]

				break;
 80012e2:	e0ec      	b.n	80014be <main+0x776>
 80012e4:	20000194 	.word	0x20000194
 80012e8:	2000057c 	.word	0x2000057c
 80012ec:	200001a4 	.word	0x200001a4
 80012f0:	200001a2 	.word	0x200001a2
 80012f4:	2000019d 	.word	0x2000019d
 80012f8:	48001400 	.word	0x48001400
 80012fc:	48000400 	.word	0x48000400
			case 3:
				//Mode 4 [11]: electrovannes OU LED OU Turbine OU LCD
				//cas 1 : Electrovannes
				if ((command_buffer & 240) >> 4 == 12){
 8001300:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <main+0x780>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b0c      	cmp	r3, #12
 800130a:	d130      	bne.n	800136e <main+0x626>
					//4*1 bits(ABCE) pour les EV (ordre du code : A: EV1<->PA7, B: EV2<->PA4, C: EV3<->PA3, E: EV_Purge<->PF0)
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, (command_buffer & 0x08) >> 3);
 800130c:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <main+0x780>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	10db      	asrs	r3, r3, #3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	461a      	mov	r2, r3
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f002 fe67 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, (command_buffer & 0x04) >> 2);
 8001326:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <main+0x780>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	109b      	asrs	r3, r3, #2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	2110      	movs	r1, #16
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f002 fe5a 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, (command_buffer & 0x02) >> 1);
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <main+0x780>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	105b      	asrs	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	2108      	movs	r1, #8
 8001352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001356:	f002 fe4d 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOF, GPIO_PIN_0, command_buffer & 0x01);
 800135a:	4b5b      	ldr	r3, [pc, #364]	; (80014c8 <main+0x780>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	2101      	movs	r1, #1
 8001368:	4858      	ldr	r0, [pc, #352]	; (80014cc <main+0x784>)
 800136a:	f002 fe43 	bl	8003ff4 <HAL_GPIO_WritePin>
				}

				//cas 2 : EV-Pulse [1101000Z] => [0] : rien, [1] pulse ON-OFF-ON 1*, avec intervalle t-pulse_OFF
				if ((command_buffer & 240) >> 4 == 13){
 800136e:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <main+0x780>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b0d      	cmp	r3, #13
 8001378:	d157      	bne.n	800142a <main+0x6e2>

					//Pulse EV 1
					if ((command_buffer & 8) >> 3 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 800137a:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <main+0x780>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d016      	beq.n	80013b4 <main+0x66c>
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f002 fe1a 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00e      	beq.n	80013b4 <main+0x66c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f002 fe29 	bl	8003ff4 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 80013a2:	2096      	movs	r0, #150	; 0x96
 80013a4:	f001 f8e8 	bl	8002578 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2180      	movs	r1, #128	; 0x80
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f002 fe20 	bl	8003ff4 <HAL_GPIO_WritePin>
					}
					//Pulse EV 2
					if ((command_buffer & 4) >> 2 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <main+0x780>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d016      	beq.n	80013ee <main+0x6a6>
 80013c0:	2110      	movs	r1, #16
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f002 fdfd 	bl	8003fc4 <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00e      	beq.n	80013ee <main+0x6a6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2110      	movs	r1, #16
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f002 fe0c 	bl	8003ff4 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 80013dc:	2096      	movs	r0, #150	; 0x96
 80013de:	f001 f8cb 	bl	8002578 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2110      	movs	r1, #16
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f002 fe03 	bl	8003ff4 <HAL_GPIO_WritePin>
					}
					//Pulse EV 3
					if ((command_buffer & 2) >> 1 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 80013ee:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <main+0x780>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d060      	beq.n	80014bc <main+0x774>
 80013fa:	2108      	movs	r1, #8
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f002 fde0 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d058      	beq.n	80014bc <main+0x774>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2108      	movs	r1, #8
 800140e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001412:	f002 fdef 	bl	8003ff4 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 8001416:	2096      	movs	r0, #150	; 0x96
 8001418:	f001 f8ae 	bl	8002578 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800141c:	2201      	movs	r2, #1
 800141e:	2108      	movs	r1, #8
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f002 fde6 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command_buffer & 2);

					//LED
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command_buffer & 1);
				}
				break;
 8001428:	e048      	b.n	80014bc <main+0x774>
				else if ((command_buffer & 240) >> 4 == 14){
 800142a:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <main+0x780>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	091b      	lsrs	r3, r3, #4
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b0e      	cmp	r3, #14
 8001434:	d123      	bne.n	800147e <main+0x736>
					if ((command_buffer & 3) == 0){
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <main+0x780>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <main+0x702>
						my_motor_value[3] = 0;
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <main+0x788>)
 8001444:	2200      	movs	r2, #0
 8001446:	80da      	strh	r2, [r3, #6]
				break;
 8001448:	e038      	b.n	80014bc <main+0x774>
					else if ((command_buffer & 3) == 1){
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <main+0x780>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d103      	bne.n	800145e <main+0x716>
						my_motor_value[3] = TURBINE_SPEED_1;
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <main+0x788>)
 8001458:	2264      	movs	r2, #100	; 0x64
 800145a:	80da      	strh	r2, [r3, #6]
				break;
 800145c:	e02e      	b.n	80014bc <main+0x774>
					else if ((command_buffer & 3) == 2){
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <main+0x780>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d104      	bne.n	8001474 <main+0x72c>
						my_motor_value[3] = TURBINE_SPEED_2;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <main+0x788>)
 800146c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001470:	80da      	strh	r2, [r3, #6]
				break;
 8001472:	e023      	b.n	80014bc <main+0x774>
						my_motor_value[3] = TURBINE_SPEED_3;
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <main+0x788>)
 8001476:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800147a:	80da      	strh	r2, [r3, #6]
				break;
 800147c:	e01e      	b.n	80014bc <main+0x774>
				else if ((command_buffer & 240) >> 4 == 15){
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <main+0x780>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b0f      	cmp	r3, #15
 8001488:	d118      	bne.n	80014bc <main+0x774>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command_buffer & 2);
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <main+0x780>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	2120      	movs	r1, #32
 8001498:	480e      	ldr	r0, [pc, #56]	; (80014d4 <main+0x78c>)
 800149a:	f002 fdab 	bl	8003ff4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command_buffer & 1);
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <main+0x780>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	2110      	movs	r1, #16
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <main+0x78c>)
 80014ae:	f002 fda1 	bl	8003ff4 <HAL_GPIO_WritePin>
				break;
 80014b2:	e003      	b.n	80014bc <main+0x774>
			}
		}
 80014b4:	bf00      	nop
 80014b6:	e002      	b.n	80014be <main+0x776>
				break;
 80014b8:	bf00      	nop
 80014ba:	e000      	b.n	80014be <main+0x776>
				break;
 80014bc:	bf00      	nop

		HAL_Delay(1);
 80014be:	2001      	movs	r0, #1
 80014c0:	f001 f85a 	bl	8002578 <HAL_Delay>
		AU_Current_Status = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 80014c4:	e4ae      	b.n	8000e24 <main+0xdc>
 80014c6:	bf00      	nop
 80014c8:	2000019d 	.word	0x2000019d
 80014cc:	48001400 	.word	0x48001400
 80014d0:	2000057c 	.word	0x2000057c
 80014d4:	48000400 	.word	0x48000400

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b096      	sub	sp, #88	; 0x58
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 f8a4 	bl	8008634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800150c:	2302      	movs	r3, #2
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001510:	2301      	movs	r3, #1
 8001512:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001514:	2310      	movs	r3, #16
 8001516:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001518:	2302      	movs	r3, #2
 800151a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800151c:	2300      	movs	r3, #0
 800151e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001520:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001524:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fa02 	bl	8004934 <HAL_RCC_OscConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001536:	f000 fbc5 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153e:	2302      	movs	r3, #2
 8001540:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f004 fa2b 	bl	80059b0 <HAL_RCC_ClockConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001560:	f000 fbb0 	bl	8001cc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 8001564:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8001568:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800156a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800156e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	4618      	mov	r0, r3
 800157c:	f004 fc4e 	bl	8005e1c <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001586:	f000 fb9d 	bl	8001cc4 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3758      	adds	r7, #88	; 0x58
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015b6:	4b2e      	ldr	r3, [pc, #184]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015ca:	4b29      	ldr	r3, [pc, #164]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_ADC1_Init+0xdc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <MX_ADC1_Init+0xdc>)
 8001600:	2204      	movs	r2, #4
 8001602:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_ADC1_Init+0xdc>)
 8001606:	2200      	movs	r2, #0
 8001608:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_ADC1_Init+0xdc>)
 800160c:	2200      	movs	r2, #0
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001610:	4817      	ldr	r0, [pc, #92]	; (8001670 <MX_ADC1_Init+0xdc>)
 8001612:	f000 ffd5 	bl	80025c0 <HAL_ADC_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800161c:	f000 fb52 	bl	8001cc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4811      	ldr	r0, [pc, #68]	; (8001670 <MX_ADC1_Init+0xdc>)
 800162c:	f001 fdac 	bl	8003188 <HAL_ADCEx_MultiModeConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001636:	f000 fb45 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800163a:	2301      	movs	r3, #1
 800163c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800163e:	2301      	movs	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <MX_ADC1_Init+0xdc>)
 8001658:	f001 fad6 	bl	8002c08 <HAL_ADC_ConfigChannel>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001662:	f000 fb2f 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001a4 	.word	0x200001a4

08001674 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <MX_CAN_Init+0x60>)
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <MX_CAN_Init+0x64>)
 800167c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_CAN_Init+0x60>)
 8001680:	2210      	movs	r2, #16
 8001682:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <MX_CAN_Init+0x60>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_CAN_Init+0x60>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001690:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <MX_CAN_Init+0x60>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_CAN_Init+0x60>)
 8001698:	2200      	movs	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <MX_CAN_Init+0x60>)
 800169e:	2200      	movs	r2, #0
 80016a0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <MX_CAN_Init+0x60>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <MX_CAN_Init+0x60>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <MX_CAN_Init+0x60>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <MX_CAN_Init+0x60>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_CAN_Init+0x60>)
 80016bc:	2200      	movs	r2, #0
 80016be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <MX_CAN_Init+0x60>)
 80016c2:	f001 fef1 	bl	80034a8 <HAL_CAN_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80016cc:	f000 fafa 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200001f4 	.word	0x200001f4
 80016d8:	40006400 	.word	0x40006400

080016dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <MX_I2C1_Init+0x78>)
 80016e2:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <MX_I2C1_Init+0x7c>)
 80016e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020C;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_I2C1_Init+0x78>)
 80016e8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80016ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_I2C1_Init+0x78>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_I2C1_Init+0x78>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_I2C1_Init+0x78>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_I2C1_Init+0x78>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_I2C1_Init+0x78>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_I2C1_Init+0x78>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <MX_I2C1_Init+0x78>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001718:	480e      	ldr	r0, [pc, #56]	; (8001754 <MX_I2C1_Init+0x78>)
 800171a:	f002 fc83 	bl	8004024 <HAL_I2C_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001724:	f000 face 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <MX_I2C1_Init+0x78>)
 800172e:	f003 f849 	bl	80047c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 8001738:	f000 fac4 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800173c:	2100      	movs	r1, #0
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_I2C1_Init+0x78>)
 8001740:	f003 f88b 	bl	800485a <HAL_I2CEx_ConfigDigitalFilter>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800174a:	f000 fabb 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000021c 	.word	0x2000021c
 8001758:	40005400 	.word	0x40005400

0800175c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b096      	sub	sp, #88	; 0x58
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001762:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]
 800177e:	615a      	str	r2, [r3, #20]
 8001780:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	222c      	movs	r2, #44	; 0x2c
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f006 ff53 	bl	8008634 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <MX_TIM1_Init+0x118>)
 8001790:	4a39      	ldr	r2, [pc, #228]	; (8001878 <MX_TIM1_Init+0x11c>)
 8001792:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001794:	4b37      	ldr	r3, [pc, #220]	; (8001874 <MX_TIM1_Init+0x118>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <MX_TIM1_Init+0x118>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017a0:	4b34      	ldr	r3, [pc, #208]	; (8001874 <MX_TIM1_Init+0x118>)
 80017a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <MX_TIM1_Init+0x118>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017ae:	4b31      	ldr	r3, [pc, #196]	; (8001874 <MX_TIM1_Init+0x118>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <MX_TIM1_Init+0x118>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ba:	482e      	ldr	r0, [pc, #184]	; (8001874 <MX_TIM1_Init+0x118>)
 80017bc:	f004 fd08 	bl	80061d0 <HAL_TIM_PWM_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80017c6:	f000 fa7d 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017da:	4619      	mov	r1, r3
 80017dc:	4825      	ldr	r0, [pc, #148]	; (8001874 <MX_TIM1_Init+0x118>)
 80017de:	f005 fbdb 	bl	8006f98 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80017e8:	f000 fa6c 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ec:	2360      	movs	r3, #96	; 0x60
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800180c:	2200      	movs	r2, #0
 800180e:	4619      	mov	r1, r3
 8001810:	4818      	ldr	r0, [pc, #96]	; (8001874 <MX_TIM1_Init+0x118>)
 8001812:	f004 ff41 	bl	8006698 <HAL_TIM_PWM_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800181c:	f000 fa52 	bl	8001cc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001838:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	4619      	mov	r1, r3
 8001854:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_TIM1_Init+0x118>)
 8001856:	f005 fc0d 	bl	8007074 <HAL_TIMEx_ConfigBreakDeadTime>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001860:	f000 fa30 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <MX_TIM1_Init+0x118>)
 8001866:	f000 fc79 	bl	800215c <HAL_TIM_MspPostInit>

}
 800186a:	bf00      	nop
 800186c:	3758      	adds	r7, #88	; 0x58
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000270 	.word	0x20000270
 8001878:	40012c00 	.word	0x40012c00

0800187c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	463b      	mov	r3, r7
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <MX_TIM2_Init+0xc4>)
 80018a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <MX_TIM2_Init+0xc4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <MX_TIM2_Init+0xc4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <MX_TIM2_Init+0xc4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_TIM2_Init+0xc4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <MX_TIM2_Init+0xc4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018c6:	481e      	ldr	r0, [pc, #120]	; (8001940 <MX_TIM2_Init+0xc4>)
 80018c8:	f004 fc82 	bl	80061d0 <HAL_TIM_PWM_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018d2:	f000 f9f7 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4816      	ldr	r0, [pc, #88]	; (8001940 <MX_TIM2_Init+0xc4>)
 80018e6:	f005 fb57 	bl	8006f98 <HAL_TIMEx_MasterConfigSynchronization>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80018f0:	f000 f9e8 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f4:	2360      	movs	r3, #96	; 0x60
 80018f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001904:	463b      	mov	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	4619      	mov	r1, r3
 800190a:	480d      	ldr	r0, [pc, #52]	; (8001940 <MX_TIM2_Init+0xc4>)
 800190c:	f004 fec4 	bl	8006698 <HAL_TIM_PWM_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001916:	f000 f9d5 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	2208      	movs	r2, #8
 800191e:	4619      	mov	r1, r3
 8001920:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM2_Init+0xc4>)
 8001922:	f004 feb9 	bl	8006698 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800192c:	f000 f9ca 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM2_Init+0xc4>)
 8001932:	f000 fc13 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200002bc 	.word	0x200002bc

08001944 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001956:	463b      	mov	r3, r7
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	615a      	str	r2, [r3, #20]
 8001966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <MX_TIM3_Init+0xc4>)
 800196a:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <MX_TIM3_Init+0xc8>)
 800196c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <MX_TIM3_Init+0xc4>)
 8001970:	2200      	movs	r2, #0
 8001972:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <MX_TIM3_Init+0xc4>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <MX_TIM3_Init+0xc4>)
 800197c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001980:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_TIM3_Init+0xc4>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_TIM3_Init+0xc4>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800198e:	481e      	ldr	r0, [pc, #120]	; (8001a08 <MX_TIM3_Init+0xc4>)
 8001990:	f004 fc1e 	bl	80061d0 <HAL_TIM_PWM_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800199a:	f000 f993 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4816      	ldr	r0, [pc, #88]	; (8001a08 <MX_TIM3_Init+0xc4>)
 80019ae:	f005 faf3 	bl	8006f98 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80019b8:	f000 f984 	bl	8001cc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019bc:	2360      	movs	r3, #96	; 0x60
 80019be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019cc:	463b      	mov	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <MX_TIM3_Init+0xc4>)
 80019d4:	f004 fe60 	bl	8006698 <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80019de:	f000 f971 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	220c      	movs	r2, #12
 80019e6:	4619      	mov	r1, r3
 80019e8:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM3_Init+0xc4>)
 80019ea:	f004 fe55 	bl	8006698 <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80019f4:	f000 f966 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM3_Init+0xc4>)
 80019fa:	f000 fbaf 	bl	800215c <HAL_TIM_MspPostInit>

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000308 	.word	0x20000308
 8001a0c:	40000400 	.word	0x40000400

08001a10 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_TIM6_Init+0x64>)
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <MX_TIM6_Init+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_TIM6_Init+0x64>)
 8001a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_TIM6_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_TIM6_Init+0x64>)
 8001a36:	2218      	movs	r2, #24
 8001a38:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_TIM6_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM6_Init+0x64>)
 8001a42:	f004 fb11 	bl	8006068 <HAL_TIM_Base_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001a4c:	f000 f93a 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM6_Init+0x64>)
 8001a5e:	f005 fa9b 	bl	8006f98 <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001a68:	f000 f92c 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000354 	.word	0x20000354
 8001a78:	40001000 	.word	0x40001000

08001a7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001a82:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <MX_USART2_UART_Init+0x5c>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART2_UART_Init+0x58>)
 8001ac0:	f005 fb6e 	bl	80071a0 <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001aca:	f000 f8fb 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200004f4 	.word	0x200004f4
 8001ad8:	40004400 	.word	0x40004400

08001adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_DMA_Init+0x78>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <MX_DMA_Init+0x78>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6153      	str	r3, [r2, #20]
 8001aee:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <MX_DMA_Init+0x78>)
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	200b      	movs	r0, #11
 8001b00:	f001 fea9 	bl	8003856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b04:	200b      	movs	r0, #11
 8001b06:	f001 fec2 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	200c      	movs	r0, #12
 8001b10:	f001 fea1 	bl	8003856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001b14:	200c      	movs	r0, #12
 8001b16:	f001 feba 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	200d      	movs	r0, #13
 8001b20:	f001 fe99 	bl	8003856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001b24:	200d      	movs	r0, #13
 8001b26:	f001 feb2 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f001 fe91 	bl	8003856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001b34:	200f      	movs	r0, #15
 8001b36:	f001 feaa 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	2010      	movs	r0, #16
 8001b40:	f001 fe89 	bl	8003856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001b44:	2010      	movs	r0, #16
 8001b46:	f001 fea2 	bl	800388e <HAL_NVIC_EnableIRQ>

}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000

08001b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	4a36      	ldr	r2, [pc, #216]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b78:	6153      	str	r3, [r2, #20]
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	4a30      	ldr	r2, [pc, #192]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	6153      	str	r3, [r2, #20]
 8001b92:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	4a2a      	ldr	r2, [pc, #168]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6153      	str	r3, [r2, #20]
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <MX_GPIO_Init+0xf4>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Output_EV_P_GPIO_Port, GPIO_Output_EV_P_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4825      	ldr	r0, [pc, #148]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001bbc:	f002 fa1a 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2198      	movs	r1, #152	; 0x98
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc8:	f002 fa14 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2138      	movs	r1, #56	; 0x38
 8001bd0:	4820      	ldr	r0, [pc, #128]	; (8001c54 <MX_GPIO_Init+0xfc>)
 8001bd2:	f002 fa0f 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_Output_EV_P_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_EV_P_Pin;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Output_EV_P_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	4818      	ldr	r0, [pc, #96]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001bee:	f002 f877 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_AU_STATUS_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_AU_STATUS_Pin;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_Input_AU_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	4812      	ldr	r0, [pc, #72]	; (8001c50 <MX_GPIO_Init+0xf8>)
 8001c06:	f002 f86b 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Output_EV_3_Pin GPIO_Output_EV_2_Pin GPIO_Output_EV_1_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin;
 8001c0a:	2398      	movs	r3, #152	; 0x98
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c24:	f002 f85c 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Built_in_LED_Pin GPIO_Output_LED_EN_Pin GPIO_Output_LCD_EN_Pin */
  GPIO_InitStruct.Pin = Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin;
 8001c28:	2338      	movs	r3, #56	; 0x38
 8001c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_GPIO_Init+0xfc>)
 8001c40:	f002 f84e 	bl	8003ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c44:	bf00      	nop
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	48001400 	.word	0x48001400
 8001c54:	48000400 	.word	0x48000400

08001c58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d102      	bne.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		dshot_write(my_motor_value);
 8001c6c:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c6e:	f7fe fdf7 	bl	8000860 <dshot_write>
	}
	//on start la tempo si le BAU est enclenché
	if (BAU_tick_enable == 1){
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d115      	bne.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		BAU_tick++;
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c82:	6013      	str	r3, [r2, #0]
		// on purge quand on veut purger, 1000 => 1s
		if (BAU_tick > 30000){
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f247 5230 	movw	r2, #30000	; 0x7530
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	dd0a      	ble.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			BAU_tick = 0;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001ca2:	f002 f9a7 	bl	8003ff4 <HAL_GPIO_WritePin>
		}
	}
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000354 	.word	0x20000354
 8001cb4:	2000057c 	.word	0x2000057c
 8001cb8:	2000019c 	.word	0x2000019c
 8001cbc:	20000198 	.word	0x20000198
 8001cc0:	48001400 	.word	0x48001400

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>
	...

08001cd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_MspInit+0x44>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_MspInit+0x44>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6193      	str	r3, [r2, #24]
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_MspInit+0x44>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_MspInit+0x44>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <HAL_MspInit+0x44>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	61d3      	str	r3, [r2, #28]
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_MspInit+0x44>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000

08001d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d38:	d124      	bne.n	8001d84 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_ADC_MspInit+0x74>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <HAL_ADC_MspInit+0x74>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6153      	str	r3, [r2, #20]
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_ADC_MspInit+0x74>)
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_ADC_MspInit+0x74>)
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <HAL_ADC_MspInit+0x74>)
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	6153      	str	r3, [r2, #20]
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_ADC_MspInit+0x74>)
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_A_TEMP_Pin|ADC2_IN_A_PRESS_Pin;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d80:	f001 ffae 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000

08001d90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a18      	ldr	r2, [pc, #96]	; (8001e10 <HAL_CAN_MspInit+0x80>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d129      	bne.n	8001e06 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001db2:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_CAN_MspInit+0x84>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a17      	ldr	r2, [pc, #92]	; (8001e14 <HAL_CAN_MspInit+0x84>)
 8001db8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_CAN_MspInit+0x84>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_CAN_MspInit+0x84>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_CAN_MspInit+0x84>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	6153      	str	r3, [r2, #20]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <HAL_CAN_MspInit+0x84>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RD_Pin|CAN_TD_Pin;
 8001de2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001df4:	2309      	movs	r3, #9
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e02:	f001 ff6d 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40006400 	.word	0x40006400
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_I2C_MspInit+0x8c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d12f      	bne.n	8001e9a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_I2C_MspInit+0x90>)
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <HAL_I2C_MspInit+0x90>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e44:	6153      	str	r3, [r2, #20]
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_I2C_MspInit+0x90>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e52:	23c0      	movs	r3, #192	; 0xc0
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e56:	2312      	movs	r3, #18
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e62:	2304      	movs	r3, #4
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480f      	ldr	r0, [pc, #60]	; (8001eac <HAL_I2C_MspInit+0x94>)
 8001e6e:	f001 ff37 	bl	8003ce0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001e72:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001e76:	f002 fd3d 	bl	80048f4 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001e7a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e7e:	f002 fd39 	bl	80048f4 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_I2C_MspInit+0x90>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <HAL_I2C_MspInit+0x90>)
 8001e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_I2C_MspInit+0x90>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40005400 	.word	0x40005400
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	48000400 	.word	0x48000400

08001eb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a87      	ldr	r2, [pc, #540]	; (80020dc <HAL_TIM_PWM_MspInit+0x22c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d135      	bne.n	8001f2e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec2:	4b87      	ldr	r3, [pc, #540]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	4a86      	ldr	r2, [pc, #536]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 8001ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ecc:	6193      	str	r3, [r2, #24]
 8001ece:	4b84      	ldr	r3, [pc, #528]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001eda:	4b82      	ldr	r3, [pc, #520]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001edc:	4a82      	ldr	r2, [pc, #520]	; (80020e8 <HAL_TIM_PWM_MspInit+0x238>)
 8001ede:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001ee2:	2210      	movs	r2, #16
 8001ee4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001eec:	4b7d      	ldr	r3, [pc, #500]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ef2:	4b7c      	ldr	r3, [pc, #496]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001efa:	4b7a      	ldr	r3, [pc, #488]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f00:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001f02:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f08:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f0e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001f10:	4874      	ldr	r0, [pc, #464]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001f12:	f001 fcd6 	bl	80038c2 <HAL_DMA_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8001f1c:	f7ff fed2 	bl	8001cc4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a70      	ldr	r2, [pc, #448]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24
 8001f26:	4a6f      	ldr	r2, [pc, #444]	; (80020e4 <HAL_TIM_PWM_MspInit+0x234>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f2c:	e0d2      	b.n	80020d4 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d15e      	bne.n	8001ff6 <HAL_TIM_PWM_MspInit+0x146>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f38:	4b69      	ldr	r3, [pc, #420]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	4a68      	ldr	r2, [pc, #416]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	61d3      	str	r3, [r2, #28]
 8001f44:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001f50:	4b66      	ldr	r3, [pc, #408]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f52:	4a67      	ldr	r2, [pc, #412]	; (80020f0 <HAL_TIM_PWM_MspInit+0x240>)
 8001f54:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f56:	4b65      	ldr	r3, [pc, #404]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f58:	2210      	movs	r2, #16
 8001f5a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5c:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f62:	4b62      	ldr	r3, [pc, #392]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f68:	4b60      	ldr	r3, [pc, #384]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f70:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f76:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001f78:	4b5c      	ldr	r3, [pc, #368]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f7e:	4b5b      	ldr	r3, [pc, #364]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001f86:	4859      	ldr	r0, [pc, #356]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f88:	f001 fc9b 	bl	80038c2 <HAL_DMA_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_TIM_PWM_MspInit+0xe6>
      Error_Handler();
 8001f92:	f7ff fe97 	bl	8001cc4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a54      	ldr	r2, [pc, #336]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f9c:	4a53      	ldr	r2, [pc, #332]	; (80020ec <HAL_TIM_PWM_MspInit+0x23c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001fa2:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fa4:	4a54      	ldr	r2, [pc, #336]	; (80020f8 <HAL_TIM_PWM_MspInit+0x248>)
 8001fa6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa8:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001faa:	2210      	movs	r2, #16
 8001fac:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001fb4:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fba:	4b4e      	ldr	r3, [pc, #312]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001fca:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001fd0:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001fd8:	4846      	ldr	r0, [pc, #280]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fda:	f001 fc72 	bl	80038c2 <HAL_DMA_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_TIM_PWM_MspInit+0x138>
      Error_Handler();
 8001fe4:	f7ff fe6e 	bl	8001cc4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a42      	ldr	r2, [pc, #264]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fee:	4a41      	ldr	r2, [pc, #260]	; (80020f4 <HAL_TIM_PWM_MspInit+0x244>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001ff4:	e06e      	b.n	80020d4 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM3)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a40      	ldr	r2, [pc, #256]	; (80020fc <HAL_TIM_PWM_MspInit+0x24c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d169      	bne.n	80020d4 <HAL_TIM_PWM_MspInit+0x224>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002000:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a36      	ldr	r2, [pc, #216]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	61d3      	str	r3, [r2, #28]
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_TIM_PWM_MspInit+0x230>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 800201a:	4a3a      	ldr	r2, [pc, #232]	; (8002104 <HAL_TIM_PWM_MspInit+0x254>)
 800201c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800201e:	4b38      	ldr	r3, [pc, #224]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002020:	2210      	movs	r2, #16
 8002022:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800202a:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 800202c:	2280      	movs	r2, #128	; 0x80
 800202e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002036:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 800203a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800203e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800204c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800204e:	482c      	ldr	r0, [pc, #176]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002050:	f001 fc37 	bl	80038c2 <HAL_DMA_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_TIM_PWM_MspInit+0x1ae>
      Error_Handler();
 800205a:	f7ff fe33 	bl	8001cc4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 800206e:	639a      	str	r2, [r3, #56]	; 0x38
 8002070:	4a23      	ldr	r2, [pc, #140]	; (8002100 <HAL_TIM_PWM_MspInit+0x250>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 8002078:	4a24      	ldr	r2, [pc, #144]	; (800210c <HAL_TIM_PWM_MspInit+0x25c>)
 800207a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 800207e:	2210      	movs	r2, #16
 8002080:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002088:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 8002090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002094:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002096:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 8002098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800209c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 80020ac:	4816      	ldr	r0, [pc, #88]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 80020ae:	f001 fc08 	bl	80038c2 <HAL_DMA_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_TIM_PWM_MspInit+0x20c>
      Error_Handler();
 80020b8:	f7ff fe04 	bl	8001cc4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 80020cc:	621a      	str	r2, [r3, #32]
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_TIM_PWM_MspInit+0x258>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6253      	str	r3, [r2, #36]	; 0x24
}
 80020d4:	bf00      	nop
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40021000 	.word	0x40021000
 80020e4:	200003a0 	.word	0x200003a0
 80020e8:	4002001c 	.word	0x4002001c
 80020ec:	200003e4 	.word	0x200003e4
 80020f0:	40020058 	.word	0x40020058
 80020f4:	20000428 	.word	0x20000428
 80020f8:	40020008 	.word	0x40020008
 80020fc:	40000400 	.word	0x40000400
 8002100:	2000046c 	.word	0x2000046c
 8002104:	4002006c 	.word	0x4002006c
 8002108:	200004b0 	.word	0x200004b0
 800210c:	40020030 	.word	0x40020030

08002110 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_TIM_Base_MspInit+0x44>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d113      	bne.n	800214a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 8002128:	f043 0310 	orr.w	r3, r3, #16
 800212c:	61d3      	str	r3, [r2, #28]
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	2036      	movs	r0, #54	; 0x36
 8002140:	f001 fb89 	bl	8003856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002144:	2036      	movs	r0, #54	; 0x36
 8002146:	f001 fba2 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40001000 	.word	0x40001000
 8002158:	40021000 	.word	0x40021000

0800215c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08c      	sub	sp, #48	; 0x30
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a4c      	ldr	r2, [pc, #304]	; (80022ac <HAL_TIM_MspPostInit+0x150>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d11e      	bne.n	80021bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	4a4b      	ldr	r2, [pc, #300]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	6153      	str	r3, [r2, #20]
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	61bb      	str	r3, [r7, #24]
 8002194:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_DS_M3_Pin;
 8002196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021a8:	2306      	movs	r3, #6
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH1_DS_M3_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b6:	f001 fd93 	bl	8003ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021ba:	e072      	b.n	80022a2 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d12f      	bne.n	8002226 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c6:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	4a39      	ldr	r2, [pc, #228]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	6153      	str	r3, [r2, #20]
 80021d2:	4b37      	ldr	r3, [pc, #220]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_DS_COMP_Pin;
 80021de:	2320      	movs	r3, #32
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021ee:	2301      	movs	r3, #1
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_DS_COMP_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fc:	f001 fd70 	bl	8003ce0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_DS_M1_Pin;
 8002200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002212:	230a      	movs	r3, #10
 8002214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_DS_M1_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f001 fd5e 	bl	8003ce0 <HAL_GPIO_Init>
}
 8002224:	e03d      	b.n	80022a2 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a22      	ldr	r2, [pc, #136]	; (80022b4 <HAL_TIM_MspPostInit+0x158>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d138      	bne.n	80022a2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 8002236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223a:	6153      	str	r3, [r2, #20]
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	4a18      	ldr	r2, [pc, #96]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 800224e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002252:	6153      	str	r3, [r2, #20]
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <HAL_TIM_MspPostInit+0x154>)
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_DS_TURB_Pin;
 8002260:	2340      	movs	r3, #64	; 0x40
 8002262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002270:	2302      	movs	r3, #2
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_DS_TURB_GPIO_Port, &GPIO_InitStruct);
 8002274:	f107 031c 	add.w	r3, r7, #28
 8002278:	4619      	mov	r1, r3
 800227a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227e:	f001 fd2f 	bl	8003ce0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4_DS_M2_Pin;
 8002282:	2302      	movs	r3, #2
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002292:	2302      	movs	r3, #2
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH4_DS_M2_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	4806      	ldr	r0, [pc, #24]	; (80022b8 <HAL_TIM_MspPostInit+0x15c>)
 800229e:	f001 fd1f 	bl	8003ce0 <HAL_GPIO_Init>
}
 80022a2:	bf00      	nop
 80022a4:	3730      	adds	r7, #48	; 0x30
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40000400 	.word	0x40000400
 80022b8:	48000400 	.word	0x48000400

080022bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_UART_MspInit+0x90>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d131      	bne.n	8002342 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <HAL_UART_MspInit+0x94>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_UART_MspInit+0x94>)
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_UART_MspInit+0x94>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_UART_MspInit+0x94>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <HAL_UART_MspInit+0x94>)
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002300:	6153      	str	r3, [r2, #20]
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_UART_MspInit+0x94>)
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800230e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002320:	2307      	movs	r3, #7
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800232e:	f001 fcd7 	bl	8003ce0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2026      	movs	r0, #38	; 0x26
 8002338:	f001 fa8d 	bl	8003856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800233c:	2026      	movs	r0, #38	; 0x26
 800233e:	f001 faa6 	bl	800388e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002342:	bf00      	nop
 8002344:	3728      	adds	r7, #40	; 0x28
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40004400 	.word	0x40004400
 8002350:	40021000 	.word	0x40021000

08002354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <NMI_Handler+0x4>

0800235a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235e:	e7fe      	b.n	800235e <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <MemManage_Handler+0x4>

08002366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <UsageFault_Handler+0x4>

08002372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a0:	f000 f8ca 	bl	8002538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <DMA1_Channel1_IRQHandler+0x10>)
 80023ae:	f001 fba5 	bl	8003afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000428 	.word	0x20000428

080023bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <DMA1_Channel2_IRQHandler+0x10>)
 80023c2:	f001 fb9b 	bl	8003afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200003a0 	.word	0x200003a0

080023d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <DMA1_Channel3_IRQHandler+0x10>)
 80023d6:	f001 fb91 	bl	8003afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200004b0 	.word	0x200004b0

080023e4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <DMA1_Channel5_IRQHandler+0x10>)
 80023ea:	f001 fb87 	bl	8003afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200003e4 	.word	0x200003e4

080023f8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <DMA1_Channel6_IRQHandler+0x10>)
 80023fe:	f001 fb7d 	bl	8003afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000046c 	.word	0x2000046c

0800240c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <USART2_IRQHandler+0x10>)
 8002412:	f004 ffe1 	bl	80073d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200004f4 	.word	0x200004f4

08002420 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <TIM6_DAC1_IRQHandler+0x10>)
 8002426:	f004 f817 	bl	8006458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000354 	.word	0x20000354

08002434 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <SystemInit+0x20>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <SystemInit+0x20>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002490 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800245c:	f7ff ffea 	bl	8002434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <LoopForever+0x6>)
  ldr r1, =_edata
 8002462:	490d      	ldr	r1, [pc, #52]	; (8002498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002464:	4a0d      	ldr	r2, [pc, #52]	; (800249c <LoopForever+0xe>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002478:	4c0a      	ldr	r4, [pc, #40]	; (80024a4 <LoopForever+0x16>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002486:	f006 f8b1 	bl	80085ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800248a:	f7fe fc5d 	bl	8000d48 <main>

0800248e <LoopForever>:

LoopForever:
    b LoopForever
 800248e:	e7fe      	b.n	800248e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002490:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800249c:	08008724 	.word	0x08008724
  ldr r2, =_sbss
 80024a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80024a4:	2000058c 	.word	0x2000058c

080024a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_2_IRQHandler>
	...

080024ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_Init+0x28>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_Init+0x28>)
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f001 f9bf 	bl	8003840 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	2003      	movs	r0, #3
 80024c4:	f000 f808 	bl	80024d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff fc02 	bl	8001cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x54>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_InitTick+0x58>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f001 f9d7 	bl	80038aa <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00e      	b.n	8002524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d80a      	bhi.n	8002522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f001 f99f 	bl	8003856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <HAL_InitTick+0x5c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000000 	.word	0x20000000
 8002530:	20000008 	.word	0x20000008
 8002534:	20000004 	.word	0x20000004

08002538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x20>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_IncTick+0x24>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <HAL_IncTick+0x24>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000008 	.word	0x20000008
 800255c:	20000588 	.word	0x20000588

08002560 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return uwTick;  
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_GetTick+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000588 	.word	0x20000588

08002578 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002580:	f7ff ffee 	bl	8002560 <HAL_GetTick>
 8002584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d005      	beq.n	800259e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_Delay+0x44>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800259e:	bf00      	nop
 80025a0:	f7ff ffde 	bl	8002560 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d8f7      	bhi.n	80025a0 <HAL_Delay+0x28>
  {
  }
}
 80025b0:	bf00      	nop
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000008 	.word	0x20000008

080025c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b09a      	sub	sp, #104	; 0x68
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e172      	b.n	80028c6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d176      	bne.n	80026e0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d152      	bne.n	80026a0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff fb7f 	bl	8001d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d13b      	bne.n	80026a0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fed7 	bl	80033dc <ADC_Disable>
 800262e:	4603      	mov	r3, r0
 8002630:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d12f      	bne.n	80026a0 <HAL_ADC_Init+0xe0>
 8002640:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002644:	2b00      	cmp	r3, #0
 8002646:	d12b      	bne.n	80026a0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002650:	f023 0302 	bic.w	r3, r3, #2
 8002654:	f043 0202 	orr.w	r2, r3, #2
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800266a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800267a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800267c:	4b94      	ldr	r3, [pc, #592]	; (80028d0 <HAL_ADC_Init+0x310>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a94      	ldr	r2, [pc, #592]	; (80028d4 <HAL_ADC_Init+0x314>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0c9a      	lsrs	r2, r3, #18
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002692:	e002      	b.n	800269a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	3b01      	subs	r3, #1
 8002698:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f9      	bne.n	8002694 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d110      	bne.n	80026e0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f023 0312 	bic.w	r3, r3, #18
 80026c6:	f043 0210 	orr.w	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 80df 	bne.w	80028ac <HAL_ADC_Init+0x2ec>
 80026ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 80da 	bne.w	80028ac <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80d2 	bne.w	80028ac <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002710:	f043 0202 	orr.w	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002718:	4b6f      	ldr	r3, [pc, #444]	; (80028d8 <HAL_ADC_Init+0x318>)
 800271a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002724:	d102      	bne.n	800272c <HAL_ADC_Init+0x16c>
 8002726:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <HAL_ADC_Init+0x31c>)
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	e002      	b.n	8002732 <HAL_ADC_Init+0x172>
 800272c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002730:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d108      	bne.n	8002752 <HAL_ADC_Init+0x192>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x192>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_ADC_Init+0x194>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d11c      	bne.n	8002792 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002758:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <HAL_ADC_Init+0x1ba>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_ADC_Init+0x1ba>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_ADC_Init+0x1bc>
 800277a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800277c:	2b00      	cmp	r3, #0
 800277e:	d108      	bne.n	8002792 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	431a      	orrs	r2, r3
 800278e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002790:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	7e5b      	ldrb	r3, [r3, #25]
 8002796:	035b      	lsls	r3, r3, #13
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800279c:	2a01      	cmp	r2, #1
 800279e:	d002      	beq.n	80027a6 <HAL_ADC_Init+0x1e6>
 80027a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027a4:	e000      	b.n	80027a8 <HAL_ADC_Init+0x1e8>
 80027a6:	2200      	movs	r2, #0
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027b8:	4313      	orrs	r3, r2
 80027ba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d11b      	bne.n	80027fe <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	7e5b      	ldrb	r3, [r3, #25]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	3b01      	subs	r3, #1
 80027d4:	045a      	lsls	r2, r3, #17
 80027d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d8:	4313      	orrs	r3, r2
 80027da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027de:	663b      	str	r3, [r7, #96]	; 0x60
 80027e0:	e00d      	b.n	80027fe <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f043 0201 	orr.w	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	2b01      	cmp	r3, #1
 8002804:	d007      	beq.n	8002816 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	4313      	orrs	r3, r2
 8002810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002812:	4313      	orrs	r3, r2
 8002814:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b00      	cmp	r3, #0
 8002822:	d114      	bne.n	800284e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002832:	f023 0302 	bic.w	r3, r3, #2
 8002836:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7e1b      	ldrb	r3, [r3, #24]
 800283c:	039a      	lsls	r2, r3, #14
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4313      	orrs	r3, r2
 8002848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800284a:	4313      	orrs	r3, r2
 800284c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_ADC_Init+0x320>)
 8002856:	4013      	ands	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800285e:	430b      	orrs	r3, r1
 8002860:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d10c      	bne.n	8002884 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f023 010f 	bic.w	r1, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
 8002882:	e007      	b.n	8002894 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 020f 	bic.w	r2, r2, #15
 8002892:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
 80028aa:	e00a      	b.n	80028c2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f023 0312 	bic.w	r3, r3, #18
 80028b4:	f043 0210 	orr.w	r2, r3, #16
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80028bc:	2301      	movs	r3, #1
 80028be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80028c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3768      	adds	r7, #104	; 0x68
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000000 	.word	0x20000000
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	50000300 	.word	0x50000300
 80028dc:	50000100 	.word	0x50000100
 80028e0:	fff0c007 	.word	0xfff0c007

080028e4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 809c 	bne.w	8002a38 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_Start+0x2a>
 800290a:	2302      	movs	r3, #2
 800290c:	e097      	b.n	8002a3e <HAL_ADC_Start+0x15a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fcfc 	bl	8003314 <ADC_Enable>
 800291c:	4603      	mov	r3, r0
 800291e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 8083 	bne.w	8002a2e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800293c:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <HAL_ADC_Start+0x164>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <HAL_ADC_Start+0x6e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002950:	d115      	bne.n	800297e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d027      	beq.n	80029bc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002974:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800297c:	e01e      	b.n	80029bc <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002992:	d004      	beq.n	800299e <HAL_ADC_Start+0xba>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2c      	ldr	r2, [pc, #176]	; (8002a4c <HAL_ADC_Start+0x168>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10e      	bne.n	80029bc <HAL_ADC_Start+0xd8>
 800299e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d106      	bne.n	80029d8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f023 0206 	bic.w	r2, r3, #6
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
 80029d6:	e002      	b.n	80029de <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	221c      	movs	r2, #28
 80029ec:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029ee:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_ADC_Start+0x164>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <HAL_ADC_Start+0x138>
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_ADC_Start+0x164>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2b05      	cmp	r3, #5
 8002a04:	d00a      	beq.n	8002a1c <HAL_ADC_Start+0x138>
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_ADC_Start+0x164>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2b09      	cmp	r3, #9
 8002a10:	d004      	beq.n	8002a1c <HAL_ADC_Start+0x138>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a1a:	d10f      	bne.n	8002a3c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0204 	orr.w	r2, r2, #4
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	e006      	b.n	8002a3c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002a36:	e001      	b.n	8002a3c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	50000300 	.word	0x50000300
 8002a4c:	50000100 	.word	0x50000100

08002a50 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d102      	bne.n	8002a6c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002a66:	2308      	movs	r3, #8
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e02e      	b.n	8002aca <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a6c:	4b5e      	ldr	r3, [pc, #376]	; (8002be8 <HAL_ADC_PollForConversion+0x198>)
 8002a6e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d112      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d11d      	bne.n	8002ac6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e09d      	b.n	8002bde <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08b      	b.n	8002bde <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002aca:	4b47      	ldr	r3, [pc, #284]	; (8002be8 <HAL_ADC_PollForConversion+0x198>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_ADC_PollForConversion+0x90>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ade:	d104      	bne.n	8002aea <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	e003      	b.n	8002af2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002aea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002af2:	f7ff fd35 	bl	8002560 <HAL_GetTick>
 8002af6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002af8:	e021      	b.n	8002b3e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d01d      	beq.n	8002b3e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <HAL_ADC_PollForConversion+0xc8>
 8002b08:	f7ff fd2a 	bl	8002560 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d212      	bcs.n	8002b3e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f043 0204 	orr.w	r2, r3, #4
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e04f      	b.n	8002bde <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0d6      	beq.n	8002afa <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d131      	bne.n	8002bca <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d12c      	bne.n	8002bca <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d125      	bne.n	8002bca <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d112      	bne.n	8002bb2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d112      	bne.n	8002bca <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb0:	e00b      	b.n	8002bca <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f043 0201 	orr.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	50000300 	.word	0x50000300

08002bec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b09b      	sub	sp, #108	; 0x6c
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x22>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e2a4      	b.n	8003174 <HAL_ADC_ConfigChannel+0x56c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 8288 	bne.w	8003152 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d81c      	bhi.n	8002c84 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	231f      	movs	r3, #31
 8002c60:	4093      	lsls	r3, r2
 8002c62:	43db      	mvns	r3, r3
 8002c64:	4019      	ands	r1, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
 8002c82:	e063      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d81e      	bhi.n	8002cca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	3b1e      	subs	r3, #30
 8002ca0:	221f      	movs	r2, #31
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	4019      	ands	r1, r3
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	3b1e      	subs	r3, #30
 8002cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc8:	e040      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b0e      	cmp	r3, #14
 8002cd0:	d81e      	bhi.n	8002d10 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	3b3c      	subs	r3, #60	; 0x3c
 8002ce6:	221f      	movs	r2, #31
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	4019      	ands	r1, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	3b3c      	subs	r3, #60	; 0x3c
 8002d02:	fa00 f203 	lsl.w	r2, r0, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d0e:	e01d      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	3b5a      	subs	r3, #90	; 0x5a
 8002d24:	221f      	movs	r2, #31
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	4019      	ands	r1, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	4413      	add	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	3b5a      	subs	r3, #90	; 0x5a
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 80e5 	bne.w	8002f26 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b09      	cmp	r3, #9
 8002d62:	d91c      	bls.n	8002d9e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6999      	ldr	r1, [r3, #24]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	3b1e      	subs	r3, #30
 8002d76:	2207      	movs	r2, #7
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	4019      	ands	r1, r3
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6898      	ldr	r0, [r3, #8]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b1e      	subs	r3, #30
 8002d90:	fa00 f203 	lsl.w	r2, r0, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	619a      	str	r2, [r3, #24]
 8002d9c:	e019      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6959      	ldr	r1, [r3, #20]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	2207      	movs	r2, #7
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4019      	ands	r1, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6898      	ldr	r0, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	08db      	lsrs	r3, r3, #3
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d84f      	bhi.n	8002e94 <HAL_ADC_ConfigChannel+0x28c>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <HAL_ADC_ConfigChannel+0x1f4>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e2f 	.word	0x08002e2f
 8002e04:	08002e51 	.word	0x08002e51
 8002e08:	08002e73 	.word	0x08002e73
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e12:	4b94      	ldr	r3, [pc, #592]	; (8003064 <HAL_ADC_ConfigChannel+0x45c>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	0691      	lsls	r1, r2, #26
 8002e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e2a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e2c:	e07e      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e34:	4b8b      	ldr	r3, [pc, #556]	; (8003064 <HAL_ADC_ConfigChannel+0x45c>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	0691      	lsls	r1, r2, #26
 8002e3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e40:	430a      	orrs	r2, r1
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e4c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e4e:	e06d      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e56:	4b83      	ldr	r3, [pc, #524]	; (8003064 <HAL_ADC_ConfigChannel+0x45c>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	0691      	lsls	r1, r2, #26
 8002e60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e62:	430a      	orrs	r2, r1
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e6e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e70:	e05c      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e78:	4b7a      	ldr	r3, [pc, #488]	; (8003064 <HAL_ADC_ConfigChannel+0x45c>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	0691      	lsls	r1, r2, #26
 8002e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e84:	430a      	orrs	r2, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e90:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002e92:	e04b      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	069b      	lsls	r3, r3, #26
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d107      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eb6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	069b      	lsls	r3, r3, #26
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d107      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002eda:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	069b      	lsls	r3, r3, #26
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d107      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002efe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	069b      	lsls	r3, r3, #26
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d10a      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f22:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002f24:	e001      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002f26:	bf00      	nop
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002f2a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d108      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x344>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x344>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x346>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 810a 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d00f      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	400a      	ands	r2, r1
 8002f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002f7a:	e049      	b.n	8003010 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b09      	cmp	r3, #9
 8002f9c:	d91c      	bls.n	8002fd8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6999      	ldr	r1, [r3, #24]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	3b1b      	subs	r3, #27
 8002fb0:	2207      	movs	r2, #7
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	4019      	ands	r1, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6898      	ldr	r0, [r3, #8]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3b1b      	subs	r3, #27
 8002fca:	fa00 f203 	lsl.w	r2, r0, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
 8002fd6:	e01b      	b.n	8003010 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6959      	ldr	r1, [r3, #20]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	2207      	movs	r2, #7
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	4019      	ands	r1, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	6898      	ldr	r0, [r3, #8]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	fa00 f203 	lsl.w	r2, r0, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_ADC_ConfigChannel+0x460>)
 8003012:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b10      	cmp	r3, #16
 800301a:	d105      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800301c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800302c:	2b11      	cmp	r3, #17
 800302e:	d105      	bne.n	800303c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003040:	2b12      	cmp	r3, #18
 8003042:	f040 8091 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800304e:	2b00      	cmp	r3, #0
 8003050:	f040 808a 	bne.w	8003168 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305c:	d108      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x468>
 800305e:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_ADC_ConfigChannel+0x464>)
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e008      	b.n	8003076 <HAL_ADC_ConfigChannel+0x46e>
 8003064:	83fff000 	.word	0x83fff000
 8003068:	50000300 	.word	0x50000300
 800306c:	50000100 	.word	0x50000100
 8003070:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003074:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d108      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x48e>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x48e>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_ADC_ConfigChannel+0x490>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d150      	bne.n	800313e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800309c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_ADC_ConfigChannel+0x4b6>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <HAL_ADC_ConfigChannel+0x4b6>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x4b8>
 80030be:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d13c      	bne.n	800313e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d11d      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x500>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d4:	d118      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80030d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <HAL_ADC_ConfigChannel+0x578>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_ADC_ConfigChannel+0x57c>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	0c9a      	lsrs	r2, r3, #18
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030f8:	e002      	b.n	8003100 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f9      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003106:	e02e      	b.n	8003166 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b11      	cmp	r3, #17
 800310e:	d10b      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x520>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003118:	d106      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800311a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003124:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003126:	e01e      	b.n	8003166 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b12      	cmp	r3, #18
 800312e:	d11a      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003130:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800313c:	e013      	b.n	8003166 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003150:	e00a      	b.n	8003168 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003164:	e000      	b.n	8003168 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003166:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003170:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003174:	4618      	mov	r0, r3
 8003176:	376c      	adds	r7, #108	; 0x6c
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20000000 	.word	0x20000000
 8003184:	431bde83 	.word	0x431bde83

08003188 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003188:	b480      	push	{r7}
 800318a:	b099      	sub	sp, #100	; 0x64
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a0:	d102      	bne.n	80031a8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80031a2:	4b5a      	ldr	r3, [pc, #360]	; (800330c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80031a4:	60bb      	str	r3, [r7, #8]
 80031a6:	e002      	b.n	80031ae <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80031a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031ac:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0a2      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e09b      	b.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d17f      	bne.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d179      	bne.n	80032dc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e8:	4b49      	ldr	r3, [pc, #292]	; (8003310 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80031ea:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d040      	beq.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80031f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	6859      	ldr	r1, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003206:	035b      	lsls	r3, r3, #13
 8003208:	430b      	orrs	r3, r1
 800320a:	431a      	orrs	r2, r3
 800320c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800320e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d108      	bne.n	8003230 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d15c      	bne.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d107      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003252:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003254:	2b00      	cmp	r3, #0
 8003256:	d14b      	bne.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003260:	f023 030f 	bic.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	6811      	ldr	r1, [r2, #0]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	6892      	ldr	r2, [r2, #8]
 800326c:	430a      	orrs	r2, r1
 800326e:	431a      	orrs	r2, r3
 8003270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003272:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003274:	e03c      	b.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003280:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d108      	bne.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d123      	bne.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0303 	and.w	r3, r3, #3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d107      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80032c4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d112      	bne.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80032ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032d2:	f023 030f 	bic.w	r3, r3, #15
 80032d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032d8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032da:	e009      	b.n	80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80032ee:	e000      	b.n	80032f2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80032fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80032fe:	4618      	mov	r0, r3
 8003300:	3764      	adds	r7, #100	; 0x64
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	50000100 	.word	0x50000100
 8003310:	50000300 	.word	0x50000300

08003314 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d108      	bne.n	8003340 <ADC_Enable+0x2c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <ADC_Enable+0x2c>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <ADC_Enable+0x2e>
 8003340:	2300      	movs	r3, #0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d143      	bne.n	80033ce <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	4b22      	ldr	r3, [pc, #136]	; (80033d8 <ADC_Enable+0xc4>)
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f043 0210 	orr.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e02f      	b.n	80033d0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003380:	f7ff f8ee 	bl	8002560 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003386:	e01b      	b.n	80033c0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003388:	f7ff f8ea 	bl	8002560 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d914      	bls.n	80033c0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d00d      	beq.n	80033c0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f043 0210 	orr.w	r2, r3, #16
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f043 0201 	orr.w	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e007      	b.n	80033d0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d1dc      	bne.n	8003388 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	8000003f 	.word	0x8000003f

080033dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d108      	bne.n	8003408 <ADC_Disable+0x2c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <ADC_Disable+0x2c>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <ADC_Disable+0x2e>
 8003408:	2300      	movs	r3, #0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d047      	beq.n	800349e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030d 	and.w	r3, r3, #13
 8003418:	2b01      	cmp	r3, #1
 800341a:	d10f      	bne.n	800343c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0202 	orr.w	r2, r2, #2
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2203      	movs	r2, #3
 8003432:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003434:	f7ff f894 	bl	8002560 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800343a:	e029      	b.n	8003490 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e023      	b.n	80034a0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003458:	f7ff f882 	bl	8002560 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d914      	bls.n	8003490 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10d      	bne.n	8003490 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f043 0210 	orr.w	r2, r3, #16
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e007      	b.n	80034a0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d0dc      	beq.n	8003458 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0ed      	b.n	8003696 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d102      	bne.n	80034cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fe fc62 	bl	8001d90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034dc:	f7ff f840 	bl	8002560 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034e2:	e012      	b.n	800350a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034e4:	f7ff f83c 	bl	8002560 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b0a      	cmp	r3, #10
 80034f0:	d90b      	bls.n	800350a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2205      	movs	r2, #5
 8003502:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0c5      	b.n	8003696 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0e5      	beq.n	80034e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0202 	bic.w	r2, r2, #2
 8003526:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003528:	f7ff f81a 	bl	8002560 <HAL_GetTick>
 800352c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800352e:	e012      	b.n	8003556 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003530:	f7ff f816 	bl	8002560 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b0a      	cmp	r3, #10
 800353c:	d90b      	bls.n	8003556 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2205      	movs	r2, #5
 800354e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e09f      	b.n	8003696 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e5      	bne.n	8003530 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7e1b      	ldrb	r3, [r3, #24]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d108      	bne.n	800357e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	e007      	b.n	800358e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7e5b      	ldrb	r3, [r3, #25]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d108      	bne.n	80035a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e007      	b.n	80035b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7e9b      	ldrb	r3, [r3, #26]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d108      	bne.n	80035d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0220 	orr.w	r2, r2, #32
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e007      	b.n	80035e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0220 	bic.w	r2, r2, #32
 80035e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7edb      	ldrb	r3, [r3, #27]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d108      	bne.n	80035fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0210 	bic.w	r2, r2, #16
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e007      	b.n	800360c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0210 	orr.w	r2, r2, #16
 800360a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7f1b      	ldrb	r3, [r3, #28]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d108      	bne.n	8003626 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0208 	orr.w	r2, r2, #8
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e007      	b.n	8003636 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0208 	bic.w	r2, r2, #8
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7f5b      	ldrb	r3, [r3, #29]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d108      	bne.n	8003650 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0204 	orr.w	r2, r2, #4
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e007      	b.n	8003660 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	ea42 0103 	orr.w	r1, r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <__NVIC_SetPriorityGrouping+0x44>)
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036bc:	4013      	ands	r3, r2
 80036be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036d2:	4a04      	ldr	r2, [pc, #16]	; (80036e4 <__NVIC_SetPriorityGrouping+0x44>)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	60d3      	str	r3, [r2, #12]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <__NVIC_GetPriorityGrouping+0x18>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f003 0307 	and.w	r3, r3, #7
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	2b00      	cmp	r3, #0
 8003714:	db0b      	blt.n	800372e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	f003 021f 	and.w	r2, r3, #31
 800371c:	4907      	ldr	r1, [pc, #28]	; (800373c <__NVIC_EnableIRQ+0x38>)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2001      	movs	r0, #1
 8003726:	fa00 f202 	lsl.w	r2, r0, r2
 800372a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000e100 	.word	0xe000e100

08003740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	6039      	str	r1, [r7, #0]
 800374a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003750:	2b00      	cmp	r3, #0
 8003752:	db0a      	blt.n	800376a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	b2da      	uxtb	r2, r3
 8003758:	490c      	ldr	r1, [pc, #48]	; (800378c <__NVIC_SetPriority+0x4c>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	0112      	lsls	r2, r2, #4
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	440b      	add	r3, r1
 8003764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003768:	e00a      	b.n	8003780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	4908      	ldr	r1, [pc, #32]	; (8003790 <__NVIC_SetPriority+0x50>)
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	3b04      	subs	r3, #4
 8003778:	0112      	lsls	r2, r2, #4
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	440b      	add	r3, r1
 800377e:	761a      	strb	r2, [r3, #24]
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000e100 	.word	0xe000e100
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f1c3 0307 	rsb	r3, r3, #7
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	bf28      	it	cs
 80037b2:	2304      	movcs	r3, #4
 80037b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d902      	bls.n	80037c4 <NVIC_EncodePriority+0x30>
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3b03      	subs	r3, #3
 80037c2:	e000      	b.n	80037c6 <NVIC_EncodePriority+0x32>
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	f04f 32ff 	mov.w	r2, #4294967295
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43da      	mvns	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	401a      	ands	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037dc:	f04f 31ff 	mov.w	r1, #4294967295
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	fa01 f303 	lsl.w	r3, r1, r3
 80037e6:	43d9      	mvns	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ec:	4313      	orrs	r3, r2
         );
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3724      	adds	r7, #36	; 0x24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380c:	d301      	bcc.n	8003812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800380e:	2301      	movs	r3, #1
 8003810:	e00f      	b.n	8003832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <SysTick_Config+0x40>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800381a:	210f      	movs	r1, #15
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	f7ff ff8e 	bl	8003740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <SysTick_Config+0x40>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <SysTick_Config+0x40>)
 800382c:	2207      	movs	r2, #7
 800382e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	e000e010 	.word	0xe000e010

08003840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff29 	bl	80036a0 <__NVIC_SetPriorityGrouping>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b086      	sub	sp, #24
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003868:	f7ff ff3e 	bl	80036e8 <__NVIC_GetPriorityGrouping>
 800386c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f7ff ff8e 	bl	8003794 <NVIC_EncodePriority>
 8003878:	4602      	mov	r2, r0
 800387a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff5d 	bl	8003740 <__NVIC_SetPriority>
}
 8003886:	bf00      	nop
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	4603      	mov	r3, r0
 8003896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff31 	bl	8003704 <__NVIC_EnableIRQ>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ffa2 	bl	80037fc <SysTick_Config>
 80038b8:	4603      	mov	r3, r0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e037      	b.n	8003948 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80038f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9b8 	bl	8003ca0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}  
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_DMA_Start_IT+0x20>
 800396c:	2302      	movs	r3, #2
 800396e:	e04a      	b.n	8003a06 <HAL_DMA_Start_IT+0xb6>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800397e:	2b01      	cmp	r3, #1
 8003980:	d13a      	bne.n	80039f8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f94b 	bl	8003c42 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 020e 	orr.w	r2, r2, #14
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e00f      	b.n	80039e6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 020a 	orr.w	r2, r2, #10
 80039d4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0204 	bic.w	r2, r2, #4
 80039e4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e005      	b.n	8003a04 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
 8003a02:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d008      	beq.n	8003a32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2204      	movs	r2, #4
 8003a24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e020      	b.n	8003a74 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 020e 	bic.w	r2, r2, #14
 8003a40:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d005      	beq.n	8003aa2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
 8003aa0:	e027      	b.n	8003af2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 020e 	bic.w	r2, r2, #14
 8003ab0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	4798      	blx	r3
    } 
  }
  return status;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	2204      	movs	r2, #4
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d024      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x72>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01f      	beq.n	8003b6e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0204 	bic.w	r2, r2, #4
 8003b4a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	2104      	movs	r1, #4
 8003b56:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d06a      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b6c:	e065      	b.n	8003c3a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	2202      	movs	r2, #2
 8003b74:	409a      	lsls	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d02c      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xdc>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d027      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 020a 	bic.w	r2, r2, #10
 8003ba4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d035      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003bd6:	e030      	b.n	8003c3a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	2208      	movs	r2, #8
 8003bde:	409a      	lsls	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d028      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x13e>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d023      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 020e 	bic.w	r2, r2, #14
 8003c00:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c10:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
    }
  }
}  
 8003c38:	e7ff      	b.n	8003c3a <HAL_DMA_IRQHandler+0x13e>
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	2101      	movs	r1, #1
 8003c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d108      	bne.n	8003c82 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c80:	e007      	b.n	8003c92 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	60da      	str	r2, [r3, #12]
}
 8003c92:	bf00      	nop
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <DMA_CalcBaseAndBitshift+0x34>)
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a09      	ldr	r2, [pc, #36]	; (8003cd8 <DMA_CalcBaseAndBitshift+0x38>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	091b      	lsrs	r3, r3, #4
 8003cba:	009a      	lsls	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <DMA_CalcBaseAndBitshift+0x3c>)
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	bffdfff8 	.word	0xbffdfff8
 8003cd8:	cccccccd 	.word	0xcccccccd
 8003cdc:	40020000 	.word	0x40020000

08003ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cee:	e14e      	b.n	8003f8e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8140 	beq.w	8003f88 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d005      	beq.n	8003d20 <HAL_GPIO_Init+0x40>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d130      	bne.n	8003d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d56:	2201      	movs	r2, #1
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 0201 	and.w	r2, r3, #1
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d017      	beq.n	8003dbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	2203      	movs	r2, #3
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d123      	bne.n	8003e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	08da      	lsrs	r2, r3, #3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3208      	adds	r2, #8
 8003dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	220f      	movs	r2, #15
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	08da      	lsrs	r2, r3, #3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3208      	adds	r2, #8
 8003e0c:	6939      	ldr	r1, [r7, #16]
 8003e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0203 	and.w	r2, r3, #3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 809a 	beq.w	8003f88 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e54:	4b55      	ldr	r3, [pc, #340]	; (8003fac <HAL_GPIO_Init+0x2cc>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4a54      	ldr	r2, [pc, #336]	; (8003fac <HAL_GPIO_Init+0x2cc>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6193      	str	r3, [r2, #24]
 8003e60:	4b52      	ldr	r3, [pc, #328]	; (8003fac <HAL_GPIO_Init+0x2cc>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e6c:	4a50      	ldr	r2, [pc, #320]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	089b      	lsrs	r3, r3, #2
 8003e72:	3302      	adds	r3, #2
 8003e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	220f      	movs	r2, #15
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e96:	d013      	beq.n	8003ec0 <HAL_GPIO_Init+0x1e0>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a46      	ldr	r2, [pc, #280]	; (8003fb4 <HAL_GPIO_Init+0x2d4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00d      	beq.n	8003ebc <HAL_GPIO_Init+0x1dc>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a45      	ldr	r2, [pc, #276]	; (8003fb8 <HAL_GPIO_Init+0x2d8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d007      	beq.n	8003eb8 <HAL_GPIO_Init+0x1d8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a44      	ldr	r2, [pc, #272]	; (8003fbc <HAL_GPIO_Init+0x2dc>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d101      	bne.n	8003eb4 <HAL_GPIO_Init+0x1d4>
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e006      	b.n	8003ec2 <HAL_GPIO_Init+0x1e2>
 8003eb4:	2305      	movs	r3, #5
 8003eb6:	e004      	b.n	8003ec2 <HAL_GPIO_Init+0x1e2>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e002      	b.n	8003ec2 <HAL_GPIO_Init+0x1e2>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_GPIO_Init+0x1e2>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	f002 0203 	and.w	r2, r2, #3
 8003ec8:	0092      	lsls	r2, r2, #2
 8003eca:	4093      	lsls	r3, r2
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ed2:	4937      	ldr	r1, [pc, #220]	; (8003fb0 <HAL_GPIO_Init+0x2d0>)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	089b      	lsrs	r3, r3, #2
 8003ed8:	3302      	adds	r3, #2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee0:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_GPIO_Init+0x2e0>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4013      	ands	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f04:	4a2e      	ldr	r2, [pc, #184]	; (8003fc0 <HAL_GPIO_Init+0x2e0>)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f0a:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <HAL_GPIO_Init+0x2e0>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f2e:	4a24      	ldr	r2, [pc, #144]	; (8003fc0 <HAL_GPIO_Init+0x2e0>)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <HAL_GPIO_Init+0x2e0>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_GPIO_Init+0x2e0>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5e:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <HAL_GPIO_Init+0x2e0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f82:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <HAL_GPIO_Init+0x2e0>)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f47f aea9 	bne.w	8003cf0 <HAL_GPIO_Init+0x10>
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	48000400 	.word	0x48000400
 8003fb8:	48000800 	.word	0x48000800
 8003fbc:	48000c00 	.word	0x48000c00
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	e001      	b.n	8003fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004010:	e002      	b.n	8004018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004012:	887a      	ldrh	r2, [r7, #2]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e081      	b.n	800413a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd fee4 	bl	8001e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	; 0x24
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004074:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004084:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	e006      	b.n	80040ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d104      	bne.n	80040be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69d9      	ldr	r1, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1a      	ldr	r2, [r3, #32]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2220      	movs	r2, #32
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	461a      	mov	r2, r3
 8004150:	460b      	mov	r3, r1
 8004152:	817b      	strh	r3, [r7, #10]
 8004154:	4613      	mov	r3, r2
 8004156:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b20      	cmp	r3, #32
 8004162:	f040 80db 	bne.w	800431c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_I2C_Master_Receive+0x30>
 8004170:	2302      	movs	r3, #2
 8004172:	e0d4      	b.n	800431e <HAL_I2C_Master_Receive+0x1da>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800417c:	f7fe f9f0 	bl	8002560 <HAL_GetTick>
 8004180:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2319      	movs	r3, #25
 8004188:	2201      	movs	r2, #1
 800418a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f8f2 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0bf      	b.n	800431e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2222      	movs	r2, #34	; 0x22
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2210      	movs	r2, #16
 80041aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	893a      	ldrh	r2, [r7, #8]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2bff      	cmp	r3, #255	; 0xff
 80041ce:	d90e      	bls.n	80041ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	8979      	ldrh	r1, [r7, #10]
 80041de:	4b52      	ldr	r3, [pc, #328]	; (8004328 <HAL_I2C_Master_Receive+0x1e4>)
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 faba 	bl	8004760 <I2C_TransferConfig>
 80041ec:	e06d      	b.n	80042ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	8979      	ldrh	r1, [r7, #10]
 8004200:	4b49      	ldr	r3, [pc, #292]	; (8004328 <HAL_I2C_Master_Receive+0x1e4>)
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 faa9 	bl	8004760 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800420e:	e05c      	b.n	80042ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	6a39      	ldr	r1, [r7, #32]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f000 f941 	bl	800449c <I2C_WaitOnRXNEFlagUntilTimeout>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e07c      	b.n	800431e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d034      	beq.n	80042ca <HAL_I2C_Master_Receive+0x186>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d130      	bne.n	80042ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2200      	movs	r2, #0
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f880 	bl	8004378 <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e04d      	b.n	800431e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	2bff      	cmp	r3, #255	; 0xff
 800428a:	d90e      	bls.n	80042aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	22ff      	movs	r2, #255	; 0xff
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	2300      	movs	r3, #0
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fa5c 	bl	8004760 <I2C_TransferConfig>
 80042a8:	e00f      	b.n	80042ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	2300      	movs	r3, #0
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fa4b 	bl	8004760 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d19d      	bne.n	8004210 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	6a39      	ldr	r1, [r7, #32]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f89c 	bl	8004416 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e01a      	b.n	800431e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2220      	movs	r2, #32
 80042ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_I2C_Master_Receive+0x1e8>)
 80042fc:	400b      	ands	r3, r1
 80042fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004318:	2300      	movs	r3, #0
 800431a:	e000      	b.n	800431e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800431c:	2302      	movs	r3, #2
  }
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	80002400 	.word	0x80002400
 800432c:	fe00e800 	.word	0xfe00e800

08004330 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d103      	bne.n	800434e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2200      	movs	r2, #0
 800434c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d007      	beq.n	800436c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	619a      	str	r2, [r3, #24]
  }
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004388:	e031      	b.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d02d      	beq.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fe f8e5 	bl	8002560 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d122      	bne.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d113      	bne.n	80043ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e00f      	b.n	800440e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	bf0c      	ite	eq
 80043fe:	2301      	moveq	r3, #1
 8004400:	2300      	movne	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	429a      	cmp	r2, r3
 800440a:	d0be      	beq.n	800438a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004422:	e02f      	b.n	8004484 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f8b9 	bl	80045a0 <I2C_IsErrorOccurred>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e02d      	b.n	8004494 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004438:	f7fe f892 	bl	8002560 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	429a      	cmp	r2, r3
 8004446:	d302      	bcc.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11a      	bne.n	8004484 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b20      	cmp	r3, #32
 800445a:	d013      	beq.n	8004484 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004460:	f043 0220 	orr.w	r2, r3, #32
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e007      	b.n	8004494 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b20      	cmp	r3, #32
 8004490:	d1c8      	bne.n	8004424 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a8:	e06b      	b.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f876 	bl	80045a0 <I2C_IsErrorOccurred>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e069      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d138      	bne.n	800453e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d105      	bne.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e055      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d107      	bne.n	8004504 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2210      	movs	r2, #16
 80044fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2204      	movs	r2, #4
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
 8004502:	e002      	b.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2220      	movs	r2, #32
 8004510:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6859      	ldr	r1, [r3, #4]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4b1f      	ldr	r3, [pc, #124]	; (800459c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800451e:	400b      	ands	r3, r1
 8004520:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e029      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453e:	f7fe f80f 	bl	8002560 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d302      	bcc.n	8004554 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d116      	bne.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b04      	cmp	r3, #4
 8004560:	d00f      	beq.n	8004582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e007      	b.n	8004592 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b04      	cmp	r3, #4
 800458e:	d18c      	bne.n	80044aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	fe00e800 	.word	0xfe00e800

080045a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d068      	beq.n	800469e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2210      	movs	r2, #16
 80045d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045d4:	e049      	b.n	800466a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d045      	beq.n	800466a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fd ffbf 	bl	8002560 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <I2C_IsErrorOccurred+0x54>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d13a      	bne.n	800466a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004606:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	d121      	bne.n	800465c <I2C_IsErrorOccurred+0xbc>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800461e:	d01d      	beq.n	800465c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	2b20      	cmp	r3, #32
 8004624:	d01a      	beq.n	800465c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004634:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004636:	f7fd ff93 	bl	8002560 <HAL_GetTick>
 800463a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800463c:	e00e      	b.n	800465c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800463e:	f7fd ff8f 	bl	8002560 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b19      	cmp	r3, #25
 800464a:	d907      	bls.n	800465c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f043 0320 	orr.w	r3, r3, #32
 8004652:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800465a:	e006      	b.n	800466a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d1e9      	bne.n	800463e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b20      	cmp	r3, #32
 8004676:	d003      	beq.n	8004680 <I2C_IsErrorOccurred+0xe0>
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0aa      	beq.n	80045d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2220      	movs	r2, #32
 800468e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800470c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01c      	beq.n	800474e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff fe0b 	bl	8004330 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <I2C_IsErrorOccurred+0x1bc>)
 8004726:	400b      	ands	r3, r1
 8004728:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800474e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004752:	4618      	mov	r0, r3
 8004754:	3728      	adds	r7, #40	; 0x28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	fe00e800 	.word	0xfe00e800

08004760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	817b      	strh	r3, [r7, #10]
 800476e:	4613      	mov	r3, r2
 8004770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004778:	7a7b      	ldrb	r3, [r7, #9]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004780:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	4313      	orrs	r3, r2
 800478a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800478e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	0d5b      	lsrs	r3, r3, #21
 800479a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800479e:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <I2C_TransferConfig+0x60>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	43db      	mvns	r3, r3
 80047a4:	ea02 0103 	and.w	r1, r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	03ff63ff 	.word	0x03ff63ff

080047c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d138      	bne.n	800484c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e032      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	; 0x24
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800485a:	b480      	push	{r7}
 800485c:	b085      	sub	sp, #20
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b20      	cmp	r3, #32
 800486e:	d139      	bne.n	80048e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800487a:	2302      	movs	r3, #2
 800487c:	e033      	b.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2224      	movs	r2, #36	; 0x24
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e000      	b.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
  }
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6193      	str	r3, [r2, #24]
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4905      	ldr	r1, [pc, #20]	; (8004930 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4313      	orrs	r3, r2
 800491e:	600b      	str	r3, [r1, #0]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40021000 	.word	0x40021000
 8004930:	40010000 	.word	0x40010000

08004934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800493a:	af00      	add	r7, sp, #0
 800493c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004944:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004946:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	f001 b823 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 817d 	beq.w	8004c6a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004970:	4bbc      	ldr	r3, [pc, #752]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b04      	cmp	r3, #4
 800497a:	d00c      	beq.n	8004996 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800497c:	4bb9      	ldr	r3, [pc, #740]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d15c      	bne.n	8004a42 <HAL_RCC_OscConfig+0x10e>
 8004988:	4bb6      	ldr	r3, [pc, #728]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004994:	d155      	bne.n	8004a42 <HAL_RCC_OscConfig+0x10e>
 8004996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800499a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ae:	fab3 f383 	clz	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d102      	bne.n	80049c8 <HAL_RCC_OscConfig+0x94>
 80049c2:	4ba8      	ldr	r3, [pc, #672]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	e015      	b.n	80049f4 <HAL_RCC_OscConfig+0xc0>
 80049c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80049dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80049e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80049f0:	4b9c      	ldr	r3, [pc, #624]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80049fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004a00:	fa92 f2a2 	rbit	r2, r2
 8004a04:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004a08:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004a0c:	fab2 f282 	clz	r2, r2
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	f042 0220 	orr.w	r2, r2, #32
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	f002 021f 	and.w	r2, r2, #31
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 811f 	beq.w	8004c68 <HAL_RCC_OscConfig+0x334>
 8004a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f040 8116 	bne.w	8004c68 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f000 bfaf 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12e>
 8004a54:	4b83      	ldr	r3, [pc, #524]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a82      	ldr	r2, [pc, #520]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e036      	b.n	8004ad0 <HAL_RCC_OscConfig+0x19c>
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCC_OscConfig+0x158>
 8004a72:	4b7c      	ldr	r3, [pc, #496]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a7b      	ldr	r2, [pc, #492]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	4b79      	ldr	r3, [pc, #484]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a78      	ldr	r2, [pc, #480]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a88:	6013      	str	r3, [r2, #0]
 8004a8a:	e021      	b.n	8004ad0 <HAL_RCC_OscConfig+0x19c>
 8004a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x184>
 8004a9e:	4b71      	ldr	r3, [pc, #452]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a70      	ldr	r2, [pc, #448]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b6e      	ldr	r3, [pc, #440]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6d      	ldr	r2, [pc, #436]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e00b      	b.n	8004ad0 <HAL_RCC_OscConfig+0x19c>
 8004ab8:	4b6a      	ldr	r3, [pc, #424]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a69      	ldr	r2, [pc, #420]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b67      	ldr	r3, [pc, #412]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a66      	ldr	r2, [pc, #408]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ace:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ad0:	4b64      	ldr	r3, [pc, #400]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	f023 020f 	bic.w	r2, r3, #15
 8004ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004adc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	495f      	ldr	r1, [pc, #380]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d059      	beq.n	8004bae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afa:	f7fd fd31 	bl	8002560 <HAL_GetTick>
 8004afe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fd fd2c 	bl	8002560 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b64      	cmp	r3, #100	; 0x64
 8004b12:	d902      	bls.n	8004b1a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	f000 bf43 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>
 8004b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b1e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004b2e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	fab3 f383 	clz	r3, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d102      	bne.n	8004b4c <HAL_RCC_OscConfig+0x218>
 8004b46:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	e015      	b.n	8004b78 <HAL_RCC_OscConfig+0x244>
 8004b4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b50:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004b58:	fa93 f3a3 	rbit	r3, r3
 8004b5c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004b68:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004b6c:	fa93 f3a3 	rbit	r3, r3
 8004b70:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004b74:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b7c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004b80:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004b84:	fa92 f2a2 	rbit	r2, r2
 8004b88:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004b8c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004b90:	fab2 f282 	clz	r2, r2
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	f042 0220 	orr.w	r2, r2, #32
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	f002 021f 	and.w	r2, r2, #31
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0ab      	beq.n	8004b04 <HAL_RCC_OscConfig+0x1d0>
 8004bac:	e05d      	b.n	8004c6a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fd fcd7 	bl	8002560 <HAL_GetTick>
 8004bb2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fd fcd2 	bl	8002560 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b64      	cmp	r3, #100	; 0x64
 8004bc6:	d902      	bls.n	8004bce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	f000 bee9 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>
 8004bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bd2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004bda:	fa93 f3a3 	rbit	r3, r3
 8004bde:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004be2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be6:	fab3 f383 	clz	r3, r3
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d102      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2cc>
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	e015      	b.n	8004c2c <HAL_RCC_OscConfig+0x2f8>
 8004c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c04:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004c0c:	fa93 f3a3 	rbit	r3, r3
 8004c10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004c14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c18:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004c1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004c28:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_RCC_OscConfig+0x330>)
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c30:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004c34:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004c38:	fa92 f2a2 	rbit	r2, r2
 8004c3c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004c40:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004c44:	fab2 f282 	clz	r2, r2
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	f042 0220 	orr.w	r2, r2, #32
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	f002 021f 	and.w	r2, r2, #31
 8004c54:	2101      	movs	r1, #1
 8004c56:	fa01 f202 	lsl.w	r2, r1, r2
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1ab      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x284>
 8004c60:	e003      	b.n	8004c6a <HAL_RCC_OscConfig+0x336>
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 817d 	beq.w	8004f7a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c80:	4ba6      	ldr	r3, [pc, #664]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 030c 	and.w	r3, r3, #12
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c8c:	4ba3      	ldr	r3, [pc, #652]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d172      	bne.n	8004d7e <HAL_RCC_OscConfig+0x44a>
 8004c98:	4ba0      	ldr	r3, [pc, #640]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d16c      	bne.n	8004d7e <HAL_RCC_OscConfig+0x44a>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004cb6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d102      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x3a0>
 8004cce:	4b93      	ldr	r3, [pc, #588]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	e013      	b.n	8004cfc <HAL_RCC_OscConfig+0x3c8>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004cec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004cf0:	fa93 f3a3 	rbit	r3, r3
 8004cf4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004cf8:	4b88      	ldr	r3, [pc, #544]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004d02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004d06:	fa92 f2a2 	rbit	r2, r2
 8004d0a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004d0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004d12:	fab2 f282 	clz	r2, r2
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	f042 0220 	orr.w	r2, r2, #32
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	f002 021f 	and.w	r2, r2, #31
 8004d22:	2101      	movs	r1, #1
 8004d24:	fa01 f202 	lsl.w	r2, r1, r2
 8004d28:	4013      	ands	r3, r2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCC_OscConfig+0x410>
 8004d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d002      	beq.n	8004d44 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f000 be2e 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d44:	4b75      	ldr	r3, [pc, #468]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	21f8      	movs	r1, #248	; 0xf8
 8004d5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004d62:	fa91 f1a1 	rbit	r1, r1
 8004d66:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004d6a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004d6e:	fab1 f181 	clz	r1, r1
 8004d72:	b2c9      	uxtb	r1, r1
 8004d74:	408b      	lsls	r3, r1
 8004d76:	4969      	ldr	r1, [pc, #420]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7c:	e0fd      	b.n	8004f7a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8088 	beq.w	8004ea0 <HAL_RCC_OscConfig+0x56c>
 8004d90:	2301      	movs	r3, #1
 8004d92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004da2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004da6:	fab3 f383 	clz	r3, r3
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	461a      	mov	r2, r3
 8004db8:	2301      	movs	r3, #1
 8004dba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dbc:	f7fd fbd0 	bl	8002560 <HAL_GetTick>
 8004dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7fd fbcb 	bl	8002560 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d902      	bls.n	8004ddc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	f000 bde2 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004dee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df2:	fab3 f383 	clz	r3, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d102      	bne.n	8004e0c <HAL_RCC_OscConfig+0x4d8>
 8004e06:	4b45      	ldr	r3, [pc, #276]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	e013      	b.n	8004e34 <HAL_RCC_OscConfig+0x500>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004e1e:	2302      	movs	r3, #2
 8004e20:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004e24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e28:	fa93 f3a3 	rbit	r3, r3
 8004e2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004e30:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2202      	movs	r2, #2
 8004e36:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004e3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004e3e:	fa92 f2a2 	rbit	r2, r2
 8004e42:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004e46:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004e4a:	fab2 f282 	clz	r2, r2
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	f042 0220 	orr.w	r2, r2, #32
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	f002 021f 	and.w	r2, r2, #31
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d0af      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e66:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	21f8      	movs	r1, #248	; 0xf8
 8004e7c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e80:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e84:	fa91 f1a1 	rbit	r1, r1
 8004e88:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004e8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004e90:	fab1 f181 	clz	r1, r1
 8004e94:	b2c9      	uxtb	r1, r1
 8004e96:	408b      	lsls	r3, r1
 8004e98:	4920      	ldr	r1, [pc, #128]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]
 8004e9e:	e06c      	b.n	8004f7a <HAL_RCC_OscConfig+0x646>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004eb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ec0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fd fb48 	bl	8002560 <HAL_GetTick>
 8004ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed4:	e00a      	b.n	8004eec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed6:	f7fd fb43 	bl	8002560 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d902      	bls.n	8004eec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	f000 bd5a 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>
 8004eec:	2302      	movs	r3, #2
 8004eee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ef6:	fa93 f3a3 	rbit	r3, r3
 8004efa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f02:	fab3 f383 	clz	r3, r3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	095b      	lsrs	r3, r3, #5
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d104      	bne.n	8004f20 <HAL_RCC_OscConfig+0x5ec>
 8004f16:	4b01      	ldr	r3, [pc, #4]	; (8004f1c <HAL_RCC_OscConfig+0x5e8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	e015      	b.n	8004f48 <HAL_RCC_OscConfig+0x614>
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	2302      	movs	r3, #2
 8004f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f2a:	fa93 f3a3 	rbit	r3, r3
 8004f2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004f32:	2302      	movs	r3, #2
 8004f34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f3c:	fa93 f3a3 	rbit	r3, r3
 8004f40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004f44:	4bc8      	ldr	r3, [pc, #800]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2202      	movs	r2, #2
 8004f4a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004f4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004f52:	fa92 f2a2 	rbit	r2, r2
 8004f56:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004f5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004f5e:	fab2 f282 	clz	r2, r2
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	f042 0220 	orr.w	r2, r2, #32
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	f002 021f 	and.w	r2, r2, #31
 8004f6e:	2101      	movs	r1, #1
 8004f70:	fa01 f202 	lsl.w	r2, r1, r2
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1ad      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8110 	beq.w	80051b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d079      	beq.n	8005094 <HAL_RCC_OscConfig+0x760>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004faa:	fa93 f3a3 	rbit	r3, r3
 8004fae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4bab      	ldr	r3, [pc, #684]	; (800526c <HAL_RCC_OscConfig+0x938>)
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fca:	f7fd fac9 	bl	8002560 <HAL_GetTick>
 8004fce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fd4:	f7fd fac4 	bl	8002560 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d902      	bls.n	8004fea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	f000 bcdb 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>
 8004fea:	2302      	movs	r3, #2
 8004fec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ff4:	fa93 f3a3 	rbit	r3, r3
 8004ff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005000:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005004:	2202      	movs	r2, #2
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800500c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	fa93 f2a3 	rbit	r2, r3
 8005016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005028:	2202      	movs	r2, #2
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	fa93 f2a3 	rbit	r2, r3
 800503a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005042:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005044:	4b88      	ldr	r3, [pc, #544]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 8005046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005050:	2102      	movs	r1, #2
 8005052:	6019      	str	r1, [r3, #0]
 8005054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005058:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	fa93 f1a3 	rbit	r1, r3
 8005062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005066:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800506a:	6019      	str	r1, [r3, #0]
  return result;
 800506c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005070:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2101      	movs	r1, #1
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	4013      	ands	r3, r2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0a0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x6a0>
 8005092:	e08d      	b.n	80051b0 <HAL_RCC_OscConfig+0x87c>
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	fa93 f2a3 	rbit	r2, r3
 80050ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050b6:	601a      	str	r2, [r3, #0]
  return result;
 80050b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b68      	ldr	r3, [pc, #416]	; (800526c <HAL_RCC_OscConfig+0x938>)
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	461a      	mov	r2, r3
 80050d2:	2300      	movs	r3, #0
 80050d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d6:	f7fd fa43 	bl	8002560 <HAL_GetTick>
 80050da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e0:	f7fd fa3e 	bl	8002560 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d902      	bls.n	80050f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	f000 bc55 	b.w	80059a0 <HAL_RCC_OscConfig+0x106c>
 80050f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050fe:	2202      	movs	r2, #2
 8005100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005106:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	fa93 f2a3 	rbit	r2, r3
 8005110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005114:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005122:	2202      	movs	r2, #2
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800512a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	fa93 f2a3 	rbit	r2, r3
 8005134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005138:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005146:	2202      	movs	r2, #2
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800514e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	fa93 f2a3 	rbit	r2, r3
 8005158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005160:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005162:	4b41      	ldr	r3, [pc, #260]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 8005164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800516e:	2102      	movs	r1, #2
 8005170:	6019      	str	r1, [r3, #0]
 8005172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005176:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	fa93 f1a3 	rbit	r1, r3
 8005180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005184:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005188:	6019      	str	r1, [r3, #0]
  return result;
 800518a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800518e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	fab3 f383 	clz	r3, r3
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2101      	movs	r1, #1
 80051a6:	fa01 f303 	lsl.w	r3, r1, r3
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d197      	bne.n	80050e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 81a1 	beq.w	8005508 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051cc:	4b26      	ldr	r3, [pc, #152]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d116      	bne.n	8005206 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d8:	4b23      	ldr	r3, [pc, #140]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	4a22      	ldr	r2, [pc, #136]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 80051de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e2:	61d3      	str	r3, [r2, #28]
 80051e4:	4b20      	ldr	r3, [pc, #128]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80051ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80051fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005206:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <HAL_RCC_OscConfig+0x93c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d11a      	bne.n	8005248 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005212:	4b17      	ldr	r3, [pc, #92]	; (8005270 <HAL_RCC_OscConfig+0x93c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <HAL_RCC_OscConfig+0x93c>)
 8005218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800521c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800521e:	f7fd f99f 	bl	8002560 <HAL_GetTick>
 8005222:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005226:	e009      	b.n	800523c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005228:	f7fd f99a 	bl	8002560 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b64      	cmp	r3, #100	; 0x64
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e3b1      	b.n	80059a0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <HAL_RCC_OscConfig+0x93c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0ef      	beq.n	8005228 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d10d      	bne.n	8005274 <HAL_RCC_OscConfig+0x940>
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	4a02      	ldr	r2, [pc, #8]	; (8005268 <HAL_RCC_OscConfig+0x934>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	6213      	str	r3, [r2, #32]
 8005264:	e03c      	b.n	80052e0 <HAL_RCC_OscConfig+0x9ac>
 8005266:	bf00      	nop
 8005268:	40021000 	.word	0x40021000
 800526c:	10908120 	.word	0x10908120
 8005270:	40007000 	.word	0x40007000
 8005274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10c      	bne.n	800529e <HAL_RCC_OscConfig+0x96a>
 8005284:	4bc1      	ldr	r3, [pc, #772]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	4ac0      	ldr	r2, [pc, #768]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 800528a:	f023 0301 	bic.w	r3, r3, #1
 800528e:	6213      	str	r3, [r2, #32]
 8005290:	4bbe      	ldr	r3, [pc, #760]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	4abd      	ldr	r2, [pc, #756]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 8005296:	f023 0304 	bic.w	r3, r3, #4
 800529a:	6213      	str	r3, [r2, #32]
 800529c:	e020      	b.n	80052e0 <HAL_RCC_OscConfig+0x9ac>
 800529e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCC_OscConfig+0x994>
 80052ae:	4bb7      	ldr	r3, [pc, #732]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4ab6      	ldr	r2, [pc, #728]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80052b4:	f043 0304 	orr.w	r3, r3, #4
 80052b8:	6213      	str	r3, [r2, #32]
 80052ba:	4bb4      	ldr	r3, [pc, #720]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4ab3      	ldr	r2, [pc, #716]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	6213      	str	r3, [r2, #32]
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0x9ac>
 80052c8:	4bb0      	ldr	r3, [pc, #704]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	4aaf      	ldr	r2, [pc, #700]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	6213      	str	r3, [r2, #32]
 80052d4:	4bad      	ldr	r3, [pc, #692]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4aac      	ldr	r2, [pc, #688]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80052da:	f023 0304 	bic.w	r3, r3, #4
 80052de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8081 	beq.w	80053f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f2:	f7fd f935 	bl	8002560 <HAL_GetTick>
 80052f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fa:	e00b      	b.n	8005314 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fd f930 	bl	8002560 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f241 3288 	movw	r2, #5000	; 0x1388
 800530c:	4293      	cmp	r3, r2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e345      	b.n	80059a0 <HAL_RCC_OscConfig+0x106c>
 8005314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005318:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800531c:	2202      	movs	r2, #2
 800531e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005324:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	fa93 f2a3 	rbit	r2, r3
 800532e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005332:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005340:	2202      	movs	r2, #2
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005348:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	fa93 f2a3 	rbit	r2, r3
 8005352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005356:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800535a:	601a      	str	r2, [r3, #0]
  return result;
 800535c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005360:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005364:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005366:	fab3 f383 	clz	r3, r3
 800536a:	b2db      	uxtb	r3, r3
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f043 0302 	orr.w	r3, r3, #2
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d102      	bne.n	8005380 <HAL_RCC_OscConfig+0xa4c>
 800537a:	4b84      	ldr	r3, [pc, #528]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	e013      	b.n	80053a8 <HAL_RCC_OscConfig+0xa74>
 8005380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005384:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005388:	2202      	movs	r2, #2
 800538a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005390:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	fa93 f2a3 	rbit	r2, r3
 800539a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800539e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	4b79      	ldr	r3, [pc, #484]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80053b0:	2102      	movs	r1, #2
 80053b2:	6011      	str	r1, [r2, #0]
 80053b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	fa92 f1a2 	rbit	r1, r2
 80053c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053ca:	6011      	str	r1, [r2, #0]
  return result;
 80053cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	fab2 f282 	clz	r2, r2
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	f002 021f 	and.w	r2, r2, #31
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d084      	beq.n	80052fc <HAL_RCC_OscConfig+0x9c8>
 80053f2:	e07f      	b.n	80054f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f4:	f7fd f8b4 	bl	8002560 <HAL_GetTick>
 80053f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fc:	e00b      	b.n	8005416 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fd f8af 	bl	8002560 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	; 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e2c4      	b.n	80059a0 <HAL_RCC_OscConfig+0x106c>
 8005416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800541e:	2202      	movs	r2, #2
 8005420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005426:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fa93 f2a3 	rbit	r2, r3
 8005430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005434:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800543e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005442:	2202      	movs	r2, #2
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	fa93 f2a3 	rbit	r2, r3
 8005454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005458:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800545c:	601a      	str	r2, [r3, #0]
  return result;
 800545e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005462:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005466:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005468:	fab3 f383 	clz	r3, r3
 800546c:	b2db      	uxtb	r3, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f043 0302 	orr.w	r3, r3, #2
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d102      	bne.n	8005482 <HAL_RCC_OscConfig+0xb4e>
 800547c:	4b43      	ldr	r3, [pc, #268]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	e013      	b.n	80054aa <HAL_RCC_OscConfig+0xb76>
 8005482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005486:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800548a:	2202      	movs	r2, #2
 800548c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005492:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	fa93 f2a3 	rbit	r2, r3
 800549c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	4b39      	ldr	r3, [pc, #228]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80054b2:	2102      	movs	r1, #2
 80054b4:	6011      	str	r1, [r2, #0]
 80054b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	fa92 f1a2 	rbit	r1, r2
 80054c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054cc:	6011      	str	r1, [r2, #0]
  return result;
 80054ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	fab2 f282 	clz	r2, r2
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	f002 021f 	and.w	r2, r2, #31
 80054e8:	2101      	movs	r1, #1
 80054ea:	fa01 f202 	lsl.w	r2, r1, r2
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d184      	bne.n	80053fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80054f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d105      	bne.n	8005508 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	4a22      	ldr	r2, [pc, #136]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 8005502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005506:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800550c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8242 	beq.w	800599e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800551a:	4b1c      	ldr	r3, [pc, #112]	; (800558c <HAL_RCC_OscConfig+0xc58>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 030c 	and.w	r3, r3, #12
 8005522:	2b08      	cmp	r3, #8
 8005524:	f000 8213 	beq.w	800594e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	2b02      	cmp	r3, #2
 8005536:	f040 8162 	bne.w	80057fe <HAL_RCC_OscConfig+0xeca>
 800553a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005542:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	fa93 f2a3 	rbit	r2, r3
 8005556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800555e:	601a      	str	r2, [r3, #0]
  return result;
 8005560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005564:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005568:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800556a:	fab3 f383 	clz	r3, r3
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005574:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	461a      	mov	r2, r3
 800557c:	2300      	movs	r3, #0
 800557e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005580:	f7fc ffee 	bl	8002560 <HAL_GetTick>
 8005584:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005588:	e00c      	b.n	80055a4 <HAL_RCC_OscConfig+0xc70>
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005590:	f7fc ffe6 	bl	8002560 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1fd      	b.n	80059a0 <HAL_RCC_OscConfig+0x106c>
 80055a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80055ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	fa93 f2a3 	rbit	r2, r3
 80055c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055c8:	601a      	str	r2, [r3, #0]
  return result;
 80055ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80055d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055d4:	fab3 f383 	clz	r3, r3
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d102      	bne.n	80055ee <HAL_RCC_OscConfig+0xcba>
 80055e8:	4bb0      	ldr	r3, [pc, #704]	; (80058ac <HAL_RCC_OscConfig+0xf78>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	e027      	b.n	800563e <HAL_RCC_OscConfig+0xd0a>
 80055ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80055f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005600:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	fa93 f2a3 	rbit	r2, r3
 800560a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800560e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005618:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800561c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005626:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	fa93 f2a3 	rbit	r2, r3
 8005630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005634:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	4b9c      	ldr	r3, [pc, #624]	; (80058ac <HAL_RCC_OscConfig+0xf78>)
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005642:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005646:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800564a:	6011      	str	r1, [r2, #0]
 800564c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005650:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	fa92 f1a2 	rbit	r1, r2
 800565a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800565e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005662:	6011      	str	r1, [r2, #0]
  return result;
 8005664:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005668:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800566c:	6812      	ldr	r2, [r2, #0]
 800566e:	fab2 f282 	clz	r2, r2
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	f042 0220 	orr.w	r2, r2, #32
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	f002 021f 	and.w	r2, r2, #31
 800567e:	2101      	movs	r1, #1
 8005680:	fa01 f202 	lsl.w	r2, r1, r2
 8005684:	4013      	ands	r3, r2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d182      	bne.n	8005590 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800568a:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCC_OscConfig+0xf78>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005696:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800569e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	430b      	orrs	r3, r1
 80056ac:	497f      	ldr	r1, [pc, #508]	; (80058ac <HAL_RCC_OscConfig+0xf78>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	604b      	str	r3, [r1, #4]
 80056b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80056ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	fa93 f2a3 	rbit	r2, r3
 80056ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056d6:	601a      	str	r2, [r3, #0]
  return result;
 80056d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80056e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056e2:	fab3 f383 	clz	r3, r3
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80056ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	461a      	mov	r2, r3
 80056f4:	2301      	movs	r3, #1
 80056f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f8:	f7fc ff32 	bl	8002560 <HAL_GetTick>
 80056fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005700:	e009      	b.n	8005716 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005702:	f7fc ff2d 	bl	8002560 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e144      	b.n	80059a0 <HAL_RCC_OscConfig+0x106c>
 8005716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800571e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005728:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	fa93 f2a3 	rbit	r2, r3
 8005732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005736:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800573a:	601a      	str	r2, [r3, #0]
  return result;
 800573c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005740:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005744:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	b2db      	uxtb	r3, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	d102      	bne.n	8005760 <HAL_RCC_OscConfig+0xe2c>
 800575a:	4b54      	ldr	r3, [pc, #336]	; (80058ac <HAL_RCC_OscConfig+0xf78>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	e027      	b.n	80057b0 <HAL_RCC_OscConfig+0xe7c>
 8005760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005764:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800576c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005772:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	fa93 f2a3 	rbit	r2, r3
 800577c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005780:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800578e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005798:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	fa93 f2a3 	rbit	r2, r3
 80057a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <HAL_RCC_OscConfig+0xf78>)
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057b4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80057b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80057bc:	6011      	str	r1, [r2, #0]
 80057be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057c2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	fa92 f1a2 	rbit	r1, r2
 80057cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057d4:	6011      	str	r1, [r2, #0]
  return result;
 80057d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80057da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	fab2 f282 	clz	r2, r2
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	f042 0220 	orr.w	r2, r2, #32
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	f002 021f 	and.w	r2, r2, #31
 80057f0:	2101      	movs	r1, #1
 80057f2:	fa01 f202 	lsl.w	r2, r1, r2
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d082      	beq.n	8005702 <HAL_RCC_OscConfig+0xdce>
 80057fc:	e0cf      	b.n	800599e <HAL_RCC_OscConfig+0x106a>
 80057fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005802:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005806:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800580a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800580c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005810:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	fa93 f2a3 	rbit	r2, r3
 800581a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005822:	601a      	str	r2, [r3, #0]
  return result;
 8005824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005828:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800582c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582e:	fab3 f383 	clz	r3, r3
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005838:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fc fe8c 	bl	8002560 <HAL_GetTick>
 8005848:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584c:	e009      	b.n	8005862 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800584e:	f7fc fe87 	bl	8002560 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e09e      	b.n	80059a0 <HAL_RCC_OscConfig+0x106c>
 8005862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005866:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800586a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800586e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005874:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	fa93 f2a3 	rbit	r2, r3
 800587e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005882:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005886:	601a      	str	r2, [r3, #0]
  return result;
 8005888:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005890:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005892:	fab3 f383 	clz	r3, r3
 8005896:	b2db      	uxtb	r3, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d104      	bne.n	80058b0 <HAL_RCC_OscConfig+0xf7c>
 80058a6:	4b01      	ldr	r3, [pc, #4]	; (80058ac <HAL_RCC_OscConfig+0xf78>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	e029      	b.n	8005900 <HAL_RCC_OscConfig+0xfcc>
 80058ac:	40021000 	.word	0x40021000
 80058b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80058b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	fa93 f2a3 	rbit	r2, r3
 80058cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	fa93 f2a3 	rbit	r2, r3
 80058f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	4b2b      	ldr	r3, [pc, #172]	; (80059ac <HAL_RCC_OscConfig+0x1078>)
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005904:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800590c:	6011      	str	r1, [r2, #0]
 800590e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005912:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	fa92 f1a2 	rbit	r1, r2
 800591c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005920:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005924:	6011      	str	r1, [r2, #0]
  return result;
 8005926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800592a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	fab2 f282 	clz	r2, r2
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	f042 0220 	orr.w	r2, r2, #32
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	f002 021f 	and.w	r2, r2, #31
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f202 	lsl.w	r2, r1, r2
 8005946:	4013      	ands	r3, r2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d180      	bne.n	800584e <HAL_RCC_OscConfig+0xf1a>
 800594c:	e027      	b.n	800599e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800594e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e01e      	b.n	80059a0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005962:	4b12      	ldr	r3, [pc, #72]	; (80059ac <HAL_RCC_OscConfig+0x1078>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800596a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800596e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	429a      	cmp	r2, r3
 8005980:	d10b      	bne.n	800599a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005982:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800598a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800598e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005996:	429a      	cmp	r2, r3
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40021000 	.word	0x40021000

080059b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b09e      	sub	sp, #120	; 0x78
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e162      	b.n	8005c8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c8:	4b90      	ldr	r3, [pc, #576]	; (8005c0c <HAL_RCC_ClockConfig+0x25c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d910      	bls.n	80059f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b8d      	ldr	r3, [pc, #564]	; (8005c0c <HAL_RCC_ClockConfig+0x25c>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 0207 	bic.w	r2, r3, #7
 80059de:	498b      	ldr	r1, [pc, #556]	; (8005c0c <HAL_RCC_ClockConfig+0x25c>)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b89      	ldr	r3, [pc, #548]	; (8005c0c <HAL_RCC_ClockConfig+0x25c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e14a      	b.n	8005c8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a04:	4b82      	ldr	r3, [pc, #520]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	497f      	ldr	r1, [pc, #508]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 80dc 	beq.w	8005bdc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d13c      	bne.n	8005aa6 <HAL_RCC_ClockConfig+0xf6>
 8005a2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a34:	fa93 f3a3 	rbit	r3, r3
 8005a38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3c:	fab3 f383 	clz	r3, r3
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d102      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xa6>
 8005a50:	4b6f      	ldr	r3, [pc, #444]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	e00f      	b.n	8005a76 <HAL_RCC_ClockConfig+0xc6>
 8005a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a5e:	fa93 f3a3 	rbit	r3, r3
 8005a62:	667b      	str	r3, [r7, #100]	; 0x64
 8005a64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a68:	663b      	str	r3, [r7, #96]	; 0x60
 8005a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a6c:	fa93 f3a3 	rbit	r3, r3
 8005a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a72:	4b67      	ldr	r3, [pc, #412]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7e:	fa92 f2a2 	rbit	r2, r2
 8005a82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005a84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a86:	fab2 f282 	clz	r2, r2
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	f042 0220 	orr.w	r2, r2, #32
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	f002 021f 	and.w	r2, r2, #31
 8005a96:	2101      	movs	r1, #1
 8005a98:	fa01 f202 	lsl.w	r2, r1, r2
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d17b      	bne.n	8005b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e0f3      	b.n	8005c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d13c      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x178>
 8005aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ab2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab6:	fa93 f3a3 	rbit	r3, r3
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005abe:	fab3 f383 	clz	r3, r3
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f043 0301 	orr.w	r3, r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d102      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x128>
 8005ad2:	4b4f      	ldr	r3, [pc, #316]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	e00f      	b.n	8005af8 <HAL_RCC_ClockConfig+0x148>
 8005ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae0:	fa93 f3a3 	rbit	r3, r3
 8005ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aea:	643b      	str	r3, [r7, #64]	; 0x40
 8005aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aee:	fa93 f3a3 	rbit	r3, r3
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af4:	4b46      	ldr	r3, [pc, #280]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005afc:	63ba      	str	r2, [r7, #56]	; 0x38
 8005afe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b00:	fa92 f2a2 	rbit	r2, r2
 8005b04:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b08:	fab2 f282 	clz	r2, r2
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	f042 0220 	orr.w	r2, r2, #32
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	f002 021f 	and.w	r2, r2, #31
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b1e:	4013      	ands	r3, r2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d13a      	bne.n	8005b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e0b2      	b.n	8005c8e <HAL_RCC_ClockConfig+0x2de>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	fa93 f3a3 	rbit	r3, r3
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b36:	fab3 f383 	clz	r3, r3
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d102      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1a0>
 8005b4a:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	e00d      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1bc>
 8005b50:	2302      	movs	r3, #2
 8005b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	fa93 f3a3 	rbit	r3, r3
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	623b      	str	r3, [r7, #32]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	fa93 f3a3 	rbit	r3, r3
 8005b66:	61fb      	str	r3, [r7, #28]
 8005b68:	4b29      	ldr	r3, [pc, #164]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	61ba      	str	r2, [r7, #24]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	fa92 f2a2 	rbit	r2, r2
 8005b76:	617a      	str	r2, [r7, #20]
  return result;
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	fab2 f282 	clz	r2, r2
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	f042 0220 	orr.w	r2, r2, #32
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	f002 021f 	and.w	r2, r2, #31
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e079      	b.n	8005c8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b9a:	4b1d      	ldr	r3, [pc, #116]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f023 0203 	bic.w	r2, r3, #3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	491a      	ldr	r1, [pc, #104]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bac:	f7fc fcd8 	bl	8002560 <HAL_GetTick>
 8005bb0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb2:	e00a      	b.n	8005bca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb4:	f7fc fcd4 	bl	8002560 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e061      	b.n	8005c8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bca:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <HAL_RCC_ClockConfig+0x260>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 020c 	and.w	r2, r3, #12
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d1eb      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <HAL_RCC_ClockConfig+0x25c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d214      	bcs.n	8005c14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <HAL_RCC_ClockConfig+0x25c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 0207 	bic.w	r2, r3, #7
 8005bf2:	4906      	ldr	r1, [pc, #24]	; (8005c0c <HAL_RCC_ClockConfig+0x25c>)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <HAL_RCC_ClockConfig+0x25c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e040      	b.n	8005c8e <HAL_RCC_ClockConfig+0x2de>
 8005c0c:	40022000 	.word	0x40022000
 8005c10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d008      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c20:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <HAL_RCC_ClockConfig+0x2e8>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	491a      	ldr	r1, [pc, #104]	; (8005c98 <HAL_RCC_ClockConfig+0x2e8>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c3e:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <HAL_RCC_ClockConfig+0x2e8>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4912      	ldr	r1, [pc, #72]	; (8005c98 <HAL_RCC_ClockConfig+0x2e8>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005c52:	f000 f829 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8005c56:	4601      	mov	r1, r0
 8005c58:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <HAL_RCC_ClockConfig+0x2e8>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c60:	22f0      	movs	r2, #240	; 0xf0
 8005c62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	fa92 f2a2 	rbit	r2, r2
 8005c6a:	60fa      	str	r2, [r7, #12]
  return result;
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	fab2 f282 	clz	r2, r2
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	40d3      	lsrs	r3, r2
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <HAL_RCC_ClockConfig+0x2ec>)
 8005c78:	5cd3      	ldrb	r3, [r2, r3]
 8005c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8005c7e:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <HAL_RCC_ClockConfig+0x2f0>)
 8005c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005c82:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <HAL_RCC_ClockConfig+0x2f4>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fc fc26 	bl	80024d8 <HAL_InitTick>
  
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3778      	adds	r7, #120	; 0x78
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	080086dc 	.word	0x080086dc
 8005ca0:	20000000 	.word	0x20000000
 8005ca4:	20000004 	.word	0x20000004

08005ca8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b08b      	sub	sp, #44	; 0x2c
 8005cac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cba:	2300      	movs	r3, #0
 8005cbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d002      	beq.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x30>
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d003      	beq.n	8005cde <HAL_RCC_GetSysClockFreq+0x36>
 8005cd6:	e03c      	b.n	8005d52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cd8:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005cda:	623b      	str	r3, [r7, #32]
      break;
 8005cdc:	e03c      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ce4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ce8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	fa92 f2a2 	rbit	r2, r2
 8005cf0:	607a      	str	r2, [r7, #4]
  return result;
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	fab2 f282 	clz	r2, r2
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	40d3      	lsrs	r3, r2
 8005cfc:	4a1c      	ldr	r2, [pc, #112]	; (8005d70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005cfe:	5cd3      	ldrb	r3, [r2, r3]
 8005d00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005d02:	4b19      	ldr	r3, [pc, #100]	; (8005d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	220f      	movs	r2, #15
 8005d0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	fa92 f2a2 	rbit	r2, r2
 8005d14:	60fa      	str	r2, [r7, #12]
  return result;
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	fab2 f282 	clz	r2, r2
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	40d3      	lsrs	r3, r2
 8005d20:	4a14      	ldr	r2, [pc, #80]	; (8005d74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005d22:	5cd3      	ldrb	r3, [r2, r3]
 8005d24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005d30:	4a0e      	ldr	r2, [pc, #56]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d40:	e004      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	4a0c      	ldr	r2, [pc, #48]	; (8005d78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	623b      	str	r3, [r7, #32]
      break;
 8005d50:	e002      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005d54:	623b      	str	r3, [r7, #32]
      break;
 8005d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d58:	6a3b      	ldr	r3, [r7, #32]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	372c      	adds	r7, #44	; 0x2c
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40021000 	.word	0x40021000
 8005d6c:	007a1200 	.word	0x007a1200
 8005d70:	080086f4 	.word	0x080086f4
 8005d74:	08008704 	.word	0x08008704
 8005d78:	003d0900 	.word	0x003d0900

08005d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d82:	681b      	ldr	r3, [r3, #0]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000000 	.word	0x20000000

08005d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005d9a:	f7ff ffef 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005d9e:	4601      	mov	r1, r0
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005da8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005dac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	fa92 f2a2 	rbit	r2, r2
 8005db4:	603a      	str	r2, [r7, #0]
  return result;
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	fab2 f282 	clz	r2, r2
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	40d3      	lsrs	r3, r2
 8005dc0:	4a04      	ldr	r2, [pc, #16]	; (8005dd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005dc2:	5cd3      	ldrb	r3, [r2, r3]
 8005dc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	080086ec 	.word	0x080086ec

08005dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005dde:	f7ff ffcd 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005de2:	4601      	mov	r1, r0
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005dec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005df0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	fa92 f2a2 	rbit	r2, r2
 8005df8:	603a      	str	r2, [r7, #0]
  return result;
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	fab2 f282 	clz	r2, r2
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	40d3      	lsrs	r3, r2
 8005e04:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000
 8005e18:	080086ec 	.word	0x080086ec

08005e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b092      	sub	sp, #72	; 0x48
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 80cd 	beq.w	8005fda <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e40:	4b86      	ldr	r3, [pc, #536]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10e      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e4c:	4b83      	ldr	r3, [pc, #524]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	4a82      	ldr	r2, [pc, #520]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e56:	61d3      	str	r3, [r2, #28]
 8005e58:	4b80      	ldr	r3, [pc, #512]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6a:	4b7d      	ldr	r3, [pc, #500]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d118      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e76:	4b7a      	ldr	r3, [pc, #488]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a79      	ldr	r2, [pc, #484]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e82:	f7fc fb6d 	bl	8002560 <HAL_GetTick>
 8005e86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e88:	e008      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e8a:	f7fc fb69 	bl	8002560 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b64      	cmp	r3, #100	; 0x64
 8005e96:	d901      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e0db      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9c:	4b70      	ldr	r3, [pc, #448]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ea8:	4b6c      	ldr	r3, [pc, #432]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d07d      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d076      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ec6:	4b65      	ldr	r3, [pc, #404]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ed4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	fa93 f3a3 	rbit	r3, r3
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ee0:	fab3 f383 	clz	r3, r3
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4b5e      	ldr	r3, [pc, #376]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	461a      	mov	r2, r3
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efc:	fa93 f3a3 	rbit	r3, r3
 8005f00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f04:	fab3 f383 	clz	r3, r3
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	4b55      	ldr	r3, [pc, #340]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	461a      	mov	r2, r3
 8005f14:	2300      	movs	r3, #0
 8005f16:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f18:	4a50      	ldr	r2, [pc, #320]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d045      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f28:	f7fc fb1a 	bl	8002560 <HAL_GetTick>
 8005f2c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2e:	e00a      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f30:	f7fc fb16 	bl	8002560 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e086      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005f46:	2302      	movs	r3, #2
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4c:	fa93 f3a3 	rbit	r3, r3
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
 8005f52:	2302      	movs	r3, #2
 8005f54:	623b      	str	r3, [r7, #32]
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	fa93 f3a3 	rbit	r3, r3
 8005f5c:	61fb      	str	r3, [r7, #28]
  return result;
 8005f5e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f60:	fab3 f383 	clz	r3, r3
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d102      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005f74:	4b39      	ldr	r3, [pc, #228]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	e007      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	fa93 f3a3 	rbit	r3, r3
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	4b35      	ldr	r3, [pc, #212]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	613a      	str	r2, [r7, #16]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	fa92 f2a2 	rbit	r2, r2
 8005f94:	60fa      	str	r2, [r7, #12]
  return result;
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	fab2 f282 	clz	r2, r2
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	f002 021f 	and.w	r2, r2, #31
 8005fa8:	2101      	movs	r1, #1
 8005faa:	fa01 f202 	lsl.w	r2, r1, r2
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0bd      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005fb4:	4b29      	ldr	r3, [pc, #164]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4926      	ldr	r1, [pc, #152]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d105      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fce:	4b23      	ldr	r3, [pc, #140]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	4a22      	ldr	r2, [pc, #136]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	f023 0203 	bic.w	r2, r3, #3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	491a      	ldr	r1, [pc, #104]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	f023 0210 	bic.w	r2, r3, #16
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4912      	ldr	r1, [pc, #72]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006012:	4313      	orrs	r3, r2
 8006014:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	490b      	ldr	r1, [pc, #44]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006030:	4313      	orrs	r3, r2
 8006032:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	695b      	ldr	r3, [r3, #20]
 800604c:	4903      	ldr	r1, [pc, #12]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800604e:	4313      	orrs	r3, r2
 8006050:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3748      	adds	r7, #72	; 0x48
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40021000 	.word	0x40021000
 8006060:	40007000 	.word	0x40007000
 8006064:	10908100 	.word	0x10908100

08006068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e049      	b.n	800610e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fc f83e 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f000 fc32 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d001      	beq.n	8006130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e040      	b.n	80061b2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1c      	ldr	r2, [pc, #112]	; (80061c0 <HAL_TIM_Base_Start_IT+0xa8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00e      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x58>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615a:	d009      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x58>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_TIM_Base_Start_IT+0xac>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d004      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x58>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a17      	ldr	r2, [pc, #92]	; (80061c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d115      	bne.n	800619c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	4b15      	ldr	r3, [pc, #84]	; (80061cc <HAL_TIM_Base_Start_IT+0xb4>)
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b06      	cmp	r3, #6
 8006180:	d015      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x96>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006188:	d011      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0201 	orr.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619a:	e008      	b.n	80061ae <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	e000      	b.n	80061b0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40012c00 	.word	0x40012c00
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40014000 	.word	0x40014000
 80061cc:	00010007 	.word	0x00010007

080061d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e049      	b.n	8006276 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fb fe5a 	bl	8001eb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 fb7e 	bl	8006910 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <HAL_TIM_PWM_Start+0x24>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e03c      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d109      	bne.n	80062be <HAL_TIM_PWM_Start+0x3e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	bf14      	ite	ne
 80062b6:	2301      	movne	r3, #1
 80062b8:	2300      	moveq	r3, #0
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	e02f      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d109      	bne.n	80062d8 <HAL_TIM_PWM_Start+0x58>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	bf14      	ite	ne
 80062d0:	2301      	movne	r3, #1
 80062d2:	2300      	moveq	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e022      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b0c      	cmp	r3, #12
 80062dc:	d109      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x72>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	bf14      	ite	ne
 80062ea:	2301      	movne	r3, #1
 80062ec:	2300      	moveq	r3, #0
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	e015      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d109      	bne.n	800630c <HAL_TIM_PWM_Start+0x8c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	bf14      	ite	ne
 8006304:	2301      	movne	r3, #1
 8006306:	2300      	moveq	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	e008      	b.n	800631e <HAL_TIM_PWM_Start+0x9e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	bf14      	ite	ne
 8006318:	2301      	movne	r3, #1
 800631a:	2300      	moveq	r3, #0
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e088      	b.n	8006438 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_TIM_PWM_Start+0xb6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006334:	e023      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b04      	cmp	r3, #4
 800633a:	d104      	bne.n	8006346 <HAL_TIM_PWM_Start+0xc6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006344:	e01b      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d104      	bne.n	8006356 <HAL_TIM_PWM_Start+0xd6>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006354:	e013      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d104      	bne.n	8006366 <HAL_TIM_PWM_Start+0xe6>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006364:	e00b      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b10      	cmp	r3, #16
 800636a:	d104      	bne.n	8006376 <HAL_TIM_PWM_Start+0xf6>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006374:	e003      	b.n	800637e <HAL_TIM_PWM_Start+0xfe>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2201      	movs	r2, #1
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fde0 	bl	8006f4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a2b      	ldr	r2, [pc, #172]	; (8006440 <HAL_TIM_PWM_Start+0x1c0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00e      	beq.n	80063b4 <HAL_TIM_PWM_Start+0x134>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a2a      	ldr	r2, [pc, #168]	; (8006444 <HAL_TIM_PWM_Start+0x1c4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_TIM_PWM_Start+0x134>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a28      	ldr	r2, [pc, #160]	; (8006448 <HAL_TIM_PWM_Start+0x1c8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_TIM_PWM_Start+0x134>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a27      	ldr	r2, [pc, #156]	; (800644c <HAL_TIM_PWM_Start+0x1cc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d101      	bne.n	80063b8 <HAL_TIM_PWM_Start+0x138>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e000      	b.n	80063ba <HAL_TIM_PWM_Start+0x13a>
 80063b8:	2300      	movs	r3, #0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1b      	ldr	r2, [pc, #108]	; (8006440 <HAL_TIM_PWM_Start+0x1c0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00e      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x176>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e0:	d009      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x176>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1a      	ldr	r2, [pc, #104]	; (8006450 <HAL_TIM_PWM_Start+0x1d0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d004      	beq.n	80063f6 <HAL_TIM_PWM_Start+0x176>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a14      	ldr	r2, [pc, #80]	; (8006444 <HAL_TIM_PWM_Start+0x1c4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d115      	bne.n	8006422 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	4b15      	ldr	r3, [pc, #84]	; (8006454 <HAL_TIM_PWM_Start+0x1d4>)
 80063fe:	4013      	ands	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b06      	cmp	r3, #6
 8006406:	d015      	beq.n	8006434 <HAL_TIM_PWM_Start+0x1b4>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640e:	d011      	beq.n	8006434 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006420:	e008      	b.n	8006434 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f042 0201 	orr.w	r2, r2, #1
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e000      	b.n	8006436 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006434:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40014000 	.word	0x40014000
 8006448:	40014400 	.word	0x40014400
 800644c:	40014800 	.word	0x40014800
 8006450:	40000400 	.word	0x40000400
 8006454:	00010007 	.word	0x00010007

08006458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b02      	cmp	r3, #2
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b02      	cmp	r3, #2
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0202 	mvn.w	r2, #2
 8006484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa1a 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa0c 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fa1d 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d122      	bne.n	8006508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d11b      	bne.n	8006508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0204 	mvn.w	r2, #4
 80064d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9f0 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 80064f4:	e005      	b.n	8006502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f9e2 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 f9f3 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b08      	cmp	r3, #8
 8006514:	d122      	bne.n	800655c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b08      	cmp	r3, #8
 8006522:	d11b      	bne.n	800655c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0208 	mvn.w	r2, #8
 800652c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2204      	movs	r2, #4
 8006532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9c6 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 8006548:	e005      	b.n	8006556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f9b8 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f9c9 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0310 	and.w	r3, r3, #16
 8006566:	2b10      	cmp	r3, #16
 8006568:	d122      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0310 	and.w	r3, r3, #16
 8006574:	2b10      	cmp	r3, #16
 8006576:	d11b      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0210 	mvn.w	r2, #16
 8006580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2208      	movs	r2, #8
 8006586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f99c 	bl	80068d4 <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f98e 	bl	80068c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f99f 	bl	80068e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d10e      	bne.n	80065dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0201 	mvn.w	r2, #1
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fb fb3e 	bl	8001c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b80      	cmp	r3, #128	; 0x80
 80065e8:	d10e      	bne.n	8006608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f4:	2b80      	cmp	r3, #128	; 0x80
 80065f6:	d107      	bne.n	8006608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fdb8 	bl	8007178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006616:	d10e      	bne.n	8006636 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d107      	bne.n	8006636 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800662e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fdab 	bl	800718c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d10e      	bne.n	8006662 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d107      	bne.n	8006662 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800665a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f94d 	bl	80068fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b20      	cmp	r3, #32
 800666e:	d10e      	bne.n	800668e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b20      	cmp	r3, #32
 800667c:	d107      	bne.n	800668e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f06f 0220 	mvn.w	r2, #32
 8006686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fd6b 	bl	8007164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
	...

08006698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d101      	bne.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e0ff      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b14      	cmp	r3, #20
 80066c2:	f200 80f0 	bhi.w	80068a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066c6:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	08006721 	.word	0x08006721
 80066d0:	080068a7 	.word	0x080068a7
 80066d4:	080068a7 	.word	0x080068a7
 80066d8:	080068a7 	.word	0x080068a7
 80066dc:	08006761 	.word	0x08006761
 80066e0:	080068a7 	.word	0x080068a7
 80066e4:	080068a7 	.word	0x080068a7
 80066e8:	080068a7 	.word	0x080068a7
 80066ec:	080067a3 	.word	0x080067a3
 80066f0:	080068a7 	.word	0x080068a7
 80066f4:	080068a7 	.word	0x080068a7
 80066f8:	080068a7 	.word	0x080068a7
 80066fc:	080067e3 	.word	0x080067e3
 8006700:	080068a7 	.word	0x080068a7
 8006704:	080068a7 	.word	0x080068a7
 8006708:	080068a7 	.word	0x080068a7
 800670c:	08006825 	.word	0x08006825
 8006710:	080068a7 	.word	0x080068a7
 8006714:	080068a7 	.word	0x080068a7
 8006718:	080068a7 	.word	0x080068a7
 800671c:	08006865 	.word	0x08006865
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	4618      	mov	r0, r3
 8006728:	f000 f96a 	bl	8006a00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0208 	orr.w	r2, r2, #8
 800673a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0204 	bic.w	r2, r2, #4
 800674a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6999      	ldr	r1, [r3, #24]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	619a      	str	r2, [r3, #24]
      break;
 800675e:	e0a5      	b.n	80068ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f9d0 	bl	8006b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699a      	ldr	r2, [r3, #24]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800677a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6999      	ldr	r1, [r3, #24]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	021a      	lsls	r2, r3, #8
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	619a      	str	r2, [r3, #24]
      break;
 80067a0:	e084      	b.n	80068ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fa2f 	bl	8006c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69da      	ldr	r2, [r3, #28]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f042 0208 	orr.w	r2, r2, #8
 80067bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69da      	ldr	r2, [r3, #28]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0204 	bic.w	r2, r2, #4
 80067cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69d9      	ldr	r1, [r3, #28]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	61da      	str	r2, [r3, #28]
      break;
 80067e0:	e064      	b.n	80068ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fa8d 	bl	8006d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69da      	ldr	r2, [r3, #28]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69d9      	ldr	r1, [r3, #28]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	021a      	lsls	r2, r3, #8
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	61da      	str	r2, [r3, #28]
      break;
 8006822:	e043      	b.n	80068ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fad0 	bl	8006dd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0208 	orr.w	r2, r2, #8
 800683e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0204 	bic.w	r2, r2, #4
 800684e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006862:	e023      	b.n	80068ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fb0e 	bl	8006e8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068a4:	e002      	b.n	80068ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	75fb      	strb	r3, [r7, #23]
      break;
 80068aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3718      	adds	r7, #24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop

080068c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a32      	ldr	r2, [pc, #200]	; (80069ec <TIM_Base_SetConfig+0xdc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d007      	beq.n	8006938 <TIM_Base_SetConfig+0x28>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692e:	d003      	beq.n	8006938 <TIM_Base_SetConfig+0x28>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a2f      	ldr	r2, [pc, #188]	; (80069f0 <TIM_Base_SetConfig+0xe0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d108      	bne.n	800694a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	4313      	orrs	r3, r2
 8006948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a27      	ldr	r2, [pc, #156]	; (80069ec <TIM_Base_SetConfig+0xdc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <TIM_Base_SetConfig+0x6a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d00f      	beq.n	800697a <TIM_Base_SetConfig+0x6a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <TIM_Base_SetConfig+0xe0>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_Base_SetConfig+0x6a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <TIM_Base_SetConfig+0xe4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <TIM_Base_SetConfig+0x6a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <TIM_Base_SetConfig+0xe8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_Base_SetConfig+0x6a>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a21      	ldr	r2, [pc, #132]	; (80069fc <TIM_Base_SetConfig+0xec>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d108      	bne.n	800698c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a0e      	ldr	r2, [pc, #56]	; (80069ec <TIM_Base_SetConfig+0xdc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00b      	beq.n	80069d0 <TIM_Base_SetConfig+0xc0>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a0e      	ldr	r2, [pc, #56]	; (80069f4 <TIM_Base_SetConfig+0xe4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d007      	beq.n	80069d0 <TIM_Base_SetConfig+0xc0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a0d      	ldr	r2, [pc, #52]	; (80069f8 <TIM_Base_SetConfig+0xe8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_Base_SetConfig+0xc0>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a0c      	ldr	r2, [pc, #48]	; (80069fc <TIM_Base_SetConfig+0xec>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d103      	bne.n	80069d8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	615a      	str	r2, [r3, #20]
}
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	40000400 	.word	0x40000400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800

08006a00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f023 0201 	bic.w	r2, r3, #1
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f023 0302 	bic.w	r3, r3, #2
 8006a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a28      	ldr	r2, [pc, #160]	; (8006afc <TIM_OC1_SetConfig+0xfc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00b      	beq.n	8006a78 <TIM_OC1_SetConfig+0x78>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <TIM_OC1_SetConfig+0x100>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d007      	beq.n	8006a78 <TIM_OC1_SetConfig+0x78>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a26      	ldr	r2, [pc, #152]	; (8006b04 <TIM_OC1_SetConfig+0x104>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC1_SetConfig+0x78>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a25      	ldr	r2, [pc, #148]	; (8006b08 <TIM_OC1_SetConfig+0x108>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10c      	bne.n	8006a92 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0308 	bic.w	r3, r3, #8
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <TIM_OC1_SetConfig+0xfc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00b      	beq.n	8006ab2 <TIM_OC1_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <TIM_OC1_SetConfig+0x100>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d007      	beq.n	8006ab2 <TIM_OC1_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <TIM_OC1_SetConfig+0x104>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d003      	beq.n	8006ab2 <TIM_OC1_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a16      	ldr	r2, [pc, #88]	; (8006b08 <TIM_OC1_SetConfig+0x108>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d111      	bne.n	8006ad6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	621a      	str	r2, [r3, #32]
}
 8006af0:	bf00      	nop
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40014400 	.word	0x40014400
 8006b08:	40014800 	.word	0x40014800

08006b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0210 	bic.w	r2, r3, #16
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 0320 	bic.w	r3, r3, #32
 8006b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a24      	ldr	r2, [pc, #144]	; (8006bfc <TIM_OC2_SetConfig+0xf0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10d      	bne.n	8006b8c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <TIM_OC2_SetConfig+0xf0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00b      	beq.n	8006bac <TIM_OC2_SetConfig+0xa0>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <TIM_OC2_SetConfig+0xf4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_OC2_SetConfig+0xa0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <TIM_OC2_SetConfig+0xf8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_OC2_SetConfig+0xa0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <TIM_OC2_SetConfig+0xfc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d113      	bne.n	8006bd4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bb2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40014400 	.word	0x40014400
 8006c08:	40014800 	.word	0x40014800

08006c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a23      	ldr	r2, [pc, #140]	; (8006cf8 <TIM_OC3_SetConfig+0xec>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d10d      	bne.n	8006c8a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a1a      	ldr	r2, [pc, #104]	; (8006cf8 <TIM_OC3_SetConfig+0xec>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00b      	beq.n	8006caa <TIM_OC3_SetConfig+0x9e>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a19      	ldr	r2, [pc, #100]	; (8006cfc <TIM_OC3_SetConfig+0xf0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d007      	beq.n	8006caa <TIM_OC3_SetConfig+0x9e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <TIM_OC3_SetConfig+0xf4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d003      	beq.n	8006caa <TIM_OC3_SetConfig+0x9e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a17      	ldr	r2, [pc, #92]	; (8006d04 <TIM_OC3_SetConfig+0xf8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d113      	bne.n	8006cd2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	621a      	str	r2, [r3, #32]
}
 8006cec:	bf00      	nop
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	40012c00 	.word	0x40012c00
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	40014400 	.word	0x40014400
 8006d04:	40014800 	.word	0x40014800

08006d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	031b      	lsls	r3, r3, #12
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <TIM_OC4_SetConfig+0xb8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00b      	beq.n	8006d84 <TIM_OC4_SetConfig+0x7c>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <TIM_OC4_SetConfig+0xbc>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d007      	beq.n	8006d84 <TIM_OC4_SetConfig+0x7c>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <TIM_OC4_SetConfig+0xc0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC4_SetConfig+0x7c>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a13      	ldr	r2, [pc, #76]	; (8006dcc <TIM_OC4_SetConfig+0xc4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d109      	bne.n	8006d98 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	019b      	lsls	r3, r3, #6
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	621a      	str	r2, [r3, #32]
}
 8006db2:	bf00      	nop
 8006db4:	371c      	adds	r7, #28
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40014400 	.word	0x40014400
 8006dcc:	40014800 	.word	0x40014800

08006dd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	041b      	lsls	r3, r3, #16
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a15      	ldr	r2, [pc, #84]	; (8006e7c <TIM_OC5_SetConfig+0xac>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00b      	beq.n	8006e42 <TIM_OC5_SetConfig+0x72>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a14      	ldr	r2, [pc, #80]	; (8006e80 <TIM_OC5_SetConfig+0xb0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d007      	beq.n	8006e42 <TIM_OC5_SetConfig+0x72>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <TIM_OC5_SetConfig+0xb4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d003      	beq.n	8006e42 <TIM_OC5_SetConfig+0x72>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a12      	ldr	r2, [pc, #72]	; (8006e88 <TIM_OC5_SetConfig+0xb8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d109      	bne.n	8006e56 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	621a      	str	r2, [r3, #32]
}
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800

08006e8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	051b      	lsls	r3, r3, #20
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a16      	ldr	r2, [pc, #88]	; (8006f3c <TIM_OC6_SetConfig+0xb0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00b      	beq.n	8006f00 <TIM_OC6_SetConfig+0x74>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a15      	ldr	r2, [pc, #84]	; (8006f40 <TIM_OC6_SetConfig+0xb4>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_OC6_SetConfig+0x74>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a14      	ldr	r2, [pc, #80]	; (8006f44 <TIM_OC6_SetConfig+0xb8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_OC6_SetConfig+0x74>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a13      	ldr	r2, [pc, #76]	; (8006f48 <TIM_OC6_SetConfig+0xbc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d109      	bne.n	8006f14 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	029b      	lsls	r3, r3, #10
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400
 8006f48:	40014800 	.word	0x40014800

08006f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	2201      	movs	r2, #1
 8006f60:	fa02 f303 	lsl.w	r3, r2, r3
 8006f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a1a      	ldr	r2, [r3, #32]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	401a      	ands	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a1a      	ldr	r2, [r3, #32]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f003 031f 	and.w	r3, r3, #31
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	fa01 f303 	lsl.w	r3, r1, r3
 8006f84:	431a      	orrs	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	621a      	str	r2, [r3, #32]
}
 8006f8a:	bf00      	nop
 8006f8c:	371c      	adds	r7, #28
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
	...

08006f98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e054      	b.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a24      	ldr	r2, [pc, #144]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d108      	bne.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fe0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a17      	ldr	r2, [pc, #92]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00e      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007018:	d009      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a13      	ldr	r2, [pc, #76]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a11      	ldr	r2, [pc, #68]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d10c      	bne.n	8007048 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4313      	orrs	r3, r2
 800703e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40000400 	.word	0x40000400
 8007070:	40014000 	.word	0x40014000

08007074 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800708c:	2302      	movs	r3, #2
 800708e:	e060      	b.n	8007152 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a14      	ldr	r2, [pc, #80]	; (8007160 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d115      	bne.n	8007140 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	051b      	lsls	r3, r3, #20
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40012c00 	.word	0x40012c00

08007164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e040      	b.n	8007234 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fb f87a 	bl	80022bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2224      	movs	r2, #36	; 0x24
 80071cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0201 	bic.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fc00 	bl	80079e4 <UART_SetConfig>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e022      	b.n	8007234 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fd2a 	bl	8007c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800720a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800721a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fdb1 	bl	8007d94 <UART_CheckIdleState>
 8007232:	4603      	mov	r3, r0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af02      	add	r7, sp, #8
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	4613      	mov	r3, r2
 800724a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007250:	2b20      	cmp	r3, #32
 8007252:	d178      	bne.n	8007346 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_UART_Transmit+0x24>
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e071      	b.n	8007348 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2221      	movs	r2, #33	; 0x21
 8007270:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007272:	f7fb f975 	bl	8002560 <HAL_GetTick>
 8007276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007290:	d108      	bne.n	80072a4 <HAL_UART_Transmit+0x68>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	61bb      	str	r3, [r7, #24]
 80072a2:	e003      	b.n	80072ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072ac:	e030      	b.n	8007310 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2200      	movs	r2, #0
 80072b6:	2180      	movs	r1, #128	; 0x80
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 fe13 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2220      	movs	r2, #32
 80072c8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e03c      	b.n	8007348 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	881a      	ldrh	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072e0:	b292      	uxth	r2, r2
 80072e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	3302      	adds	r3, #2
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	e008      	b.n	80072fe <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	b292      	uxth	r2, r2
 80072f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	3301      	adds	r3, #1
 80072fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1c8      	bne.n	80072ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2200      	movs	r2, #0
 8007324:	2140      	movs	r1, #64	; 0x40
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fddc 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e005      	b.n	8007348 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e000      	b.n	8007348 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007346:	2302      	movs	r3, #2
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3720      	adds	r7, #32
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	; 0x28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007364:	2b20      	cmp	r3, #32
 8007366:	d132      	bne.n	80073ce <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <HAL_UART_Receive_IT+0x24>
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e02b      	b.n	80073d0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d018      	beq.n	80073be <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	613b      	str	r3, [r7, #16]
   return(result);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	623b      	str	r3, [r7, #32]
 80073ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	69f9      	ldr	r1, [r7, #28]
 80073b0:	6a3a      	ldr	r2, [r7, #32]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	461a      	mov	r2, r3
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fdf5 	bl	8007fb4 <UART_Start_Receive_IT>
 80073ca:	4603      	mov	r3, r0
 80073cc:	e000      	b.n	80073d0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80073ce:	2302      	movs	r3, #2
  }
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3728      	adds	r7, #40	; 0x28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b0ba      	sub	sp, #232	; 0xe8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007402:	f640 030f 	movw	r3, #2063	; 0x80f
 8007406:	4013      	ands	r3, r2
 8007408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800740c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007410:	2b00      	cmp	r3, #0
 8007412:	d115      	bne.n	8007440 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00f      	beq.n	8007440 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 82ab 	beq.w	800798c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
      }
      return;
 800743e:	e2a5      	b.n	800798c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8117 	beq.w	8007678 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800744a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007456:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800745a:	4b85      	ldr	r3, [pc, #532]	; (8007670 <HAL_UART_IRQHandler+0x298>)
 800745c:	4013      	ands	r3, r2
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 810a 	beq.w	8007678 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d011      	beq.n	8007494 <HAL_UART_IRQHandler+0xbc>
 8007470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2201      	movs	r2, #1
 8007482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800748a:	f043 0201 	orr.w	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d011      	beq.n	80074c4 <HAL_UART_IRQHandler+0xec>
 80074a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2202      	movs	r2, #2
 80074b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ba:	f043 0204 	orr.w	r2, r3, #4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c8:	f003 0304 	and.w	r3, r3, #4
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d011      	beq.n	80074f4 <HAL_UART_IRQHandler+0x11c>
 80074d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2204      	movs	r2, #4
 80074e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ea:	f043 0202 	orr.w	r2, r3, #2
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d017      	beq.n	8007530 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007504:	f003 0320 	and.w	r3, r3, #32
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800750c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007510:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00b      	beq.n	8007530 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2208      	movs	r2, #8
 800751e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007526:	f043 0208 	orr.w	r2, r3, #8
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007538:	2b00      	cmp	r3, #0
 800753a:	d012      	beq.n	8007562 <HAL_UART_IRQHandler+0x18a>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00c      	beq.n	8007562 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007558:	f043 0220 	orr.w	r2, r3, #32
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 8211 	beq.w	8007990 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00d      	beq.n	8007596 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800757a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800759c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d005      	beq.n	80075ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d04f      	beq.n	800765a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fdc0 	bl	8008140 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ca:	2b40      	cmp	r3, #64	; 0x40
 80075cc:	d141      	bne.n	8007652 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3308      	adds	r3, #8
 80075d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3308      	adds	r3, #8
 80075f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1d9      	bne.n	80075ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800761e:	2b00      	cmp	r3, #0
 8007620:	d013      	beq.n	800764a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007626:	4a13      	ldr	r2, [pc, #76]	; (8007674 <HAL_UART_IRQHandler+0x29c>)
 8007628:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800762e:	4618      	mov	r0, r3
 8007630:	f7fc fa26 	bl	8003a80 <HAL_DMA_Abort_IT>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d017      	beq.n	800766a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007644:	4610      	mov	r0, r2
 8007646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007648:	e00f      	b.n	800766a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f9b4 	bl	80079b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	e00b      	b.n	800766a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f9b0 	bl	80079b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007658:	e007      	b.n	800766a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f9ac 	bl	80079b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007668:	e192      	b.n	8007990 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766a:	bf00      	nop
    return;
 800766c:	e190      	b.n	8007990 <HAL_UART_IRQHandler+0x5b8>
 800766e:	bf00      	nop
 8007670:	04000120 	.word	0x04000120
 8007674:	08008209 	.word	0x08008209

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767c:	2b01      	cmp	r3, #1
 800767e:	f040 814b 	bne.w	8007918 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 8144 	beq.w	8007918 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007694:	f003 0310 	and.w	r3, r3, #16
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 813d 	beq.w	8007918 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2210      	movs	r2, #16
 80076a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	f040 80b5 	bne.w	8007820 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f000 8164 	beq.w	8007994 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076d6:	429a      	cmp	r2, r3
 80076d8:	f080 815c 	bcs.w	8007994 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	f000 8086 	beq.w	80077fe <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076fe:	e853 3f00 	ldrex	r3, [r3]
 8007702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800770a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800770e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800771c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007720:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007728:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800772c:	e841 2300 	strex	r3, r2, [r1]
 8007730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1da      	bne.n	80076f2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007746:	e853 3f00 	ldrex	r3, [r3]
 800774a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800774c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3308      	adds	r3, #8
 800775c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007760:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007764:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007768:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e1      	bne.n	800773c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800778a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800778e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3308      	adds	r3, #8
 8007798:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800779c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800779e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e3      	bne.n	8007778 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c6:	e853 3f00 	ldrex	r3, [r3]
 80077ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ce:	f023 0310 	bic.w	r3, r3, #16
 80077d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80077e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077e8:	e841 2300 	strex	r3, r2, [r1]
 80077ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e4      	bne.n	80077be <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fc f908 	bl	8003a0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007810:	b29b      	uxth	r3, r3
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	b29b      	uxth	r3, r3
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f8d7 	bl	80079cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800781e:	e0b9      	b.n	8007994 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800782c:	b29b      	uxth	r3, r3
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80ab 	beq.w	8007998 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80a6 	beq.w	8007998 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800785a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007860:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800786e:	647b      	str	r3, [r7, #68]	; 0x44
 8007870:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800787c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e4      	bne.n	800784c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	623b      	str	r3, [r7, #32]
   return(result);
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f023 0301 	bic.w	r3, r3, #1
 8007898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078a6:	633a      	str	r2, [r7, #48]	; 0x30
 80078a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e3      	bne.n	8007882 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	e853 3f00 	ldrex	r3, [r3]
 80078da:	60fb      	str	r3, [r7, #12]
   return(result);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 0310 	bic.w	r3, r3, #16
 80078e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078f0:	61fb      	str	r3, [r7, #28]
 80078f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	69b9      	ldr	r1, [r7, #24]
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	617b      	str	r3, [r7, #20]
   return(result);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e4      	bne.n	80078ce <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800790a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f85b 	bl	80079cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007916:	e03f      	b.n	8007998 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00e      	beq.n	8007942 <HAL_UART_IRQHandler+0x56a>
 8007924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fe4c 	bl	80085d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007940:	e02d      	b.n	800799e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00e      	beq.n	800796c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800794e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d008      	beq.n	800796c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d01c      	beq.n	800799c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	4798      	blx	r3
    }
    return;
 800796a:	e017      	b.n	800799c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	d012      	beq.n	800799e <HAL_UART_IRQHandler+0x5c6>
 8007978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00c      	beq.n	800799e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc55 	bl	8008234 <UART_EndTransmit_IT>
    return;
 800798a:	e008      	b.n	800799e <HAL_UART_IRQHandler+0x5c6>
      return;
 800798c:	bf00      	nop
 800798e:	e006      	b.n	800799e <HAL_UART_IRQHandler+0x5c6>
    return;
 8007990:	bf00      	nop
 8007992:	e004      	b.n	800799e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007994:	bf00      	nop
 8007996:	e002      	b.n	800799e <HAL_UART_IRQHandler+0x5c6>
      return;
 8007998:	bf00      	nop
 800799a:	e000      	b.n	800799e <HAL_UART_IRQHandler+0x5c6>
    return;
 800799c:	bf00      	nop
  }

}
 800799e:	37e8      	adds	r7, #232	; 0xe8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	4b8a      	ldr	r3, [pc, #552]	; (8007c38 <UART_SetConfig+0x254>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	6979      	ldr	r1, [r7, #20]
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a78      	ldr	r2, [pc, #480]	; (8007c3c <UART_SetConfig+0x258>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d120      	bne.n	8007aa2 <UART_SetConfig+0xbe>
 8007a60:	4b77      	ldr	r3, [pc, #476]	; (8007c40 <UART_SetConfig+0x25c>)
 8007a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a64:	f003 0303 	and.w	r3, r3, #3
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d817      	bhi.n	8007a9c <UART_SetConfig+0xb8>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <UART_SetConfig+0x90>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007a85 	.word	0x08007a85
 8007a78:	08007a91 	.word	0x08007a91
 8007a7c:	08007a97 	.word	0x08007a97
 8007a80:	08007a8b 	.word	0x08007a8b
 8007a84:	2300      	movs	r3, #0
 8007a86:	77fb      	strb	r3, [r7, #31]
 8007a88:	e01d      	b.n	8007ac6 <UART_SetConfig+0xe2>
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	77fb      	strb	r3, [r7, #31]
 8007a8e:	e01a      	b.n	8007ac6 <UART_SetConfig+0xe2>
 8007a90:	2304      	movs	r3, #4
 8007a92:	77fb      	strb	r3, [r7, #31]
 8007a94:	e017      	b.n	8007ac6 <UART_SetConfig+0xe2>
 8007a96:	2308      	movs	r3, #8
 8007a98:	77fb      	strb	r3, [r7, #31]
 8007a9a:	e014      	b.n	8007ac6 <UART_SetConfig+0xe2>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	77fb      	strb	r3, [r7, #31]
 8007aa0:	e011      	b.n	8007ac6 <UART_SetConfig+0xe2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a67      	ldr	r2, [pc, #412]	; (8007c44 <UART_SetConfig+0x260>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d102      	bne.n	8007ab2 <UART_SetConfig+0xce>
 8007aac:	2300      	movs	r3, #0
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	e009      	b.n	8007ac6 <UART_SetConfig+0xe2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a64      	ldr	r2, [pc, #400]	; (8007c48 <UART_SetConfig+0x264>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d102      	bne.n	8007ac2 <UART_SetConfig+0xde>
 8007abc:	2300      	movs	r3, #0
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e001      	b.n	8007ac6 <UART_SetConfig+0xe2>
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ace:	d15a      	bne.n	8007b86 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007ad0:	7ffb      	ldrb	r3, [r7, #31]
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d827      	bhi.n	8007b26 <UART_SetConfig+0x142>
 8007ad6:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <UART_SetConfig+0xf8>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007b01 	.word	0x08007b01
 8007ae0:	08007b09 	.word	0x08007b09
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b27 	.word	0x08007b27
 8007aec:	08007b17 	.word	0x08007b17
 8007af0:	08007b27 	.word	0x08007b27
 8007af4:	08007b27 	.word	0x08007b27
 8007af8:	08007b27 	.word	0x08007b27
 8007afc:	08007b1f 	.word	0x08007b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b00:	f7fe f948 	bl	8005d94 <HAL_RCC_GetPCLK1Freq>
 8007b04:	61b8      	str	r0, [r7, #24]
        break;
 8007b06:	e013      	b.n	8007b30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b08:	f7fe f966 	bl	8005dd8 <HAL_RCC_GetPCLK2Freq>
 8007b0c:	61b8      	str	r0, [r7, #24]
        break;
 8007b0e:	e00f      	b.n	8007b30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b10:	4b4e      	ldr	r3, [pc, #312]	; (8007c4c <UART_SetConfig+0x268>)
 8007b12:	61bb      	str	r3, [r7, #24]
        break;
 8007b14:	e00c      	b.n	8007b30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b16:	f7fe f8c7 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8007b1a:	61b8      	str	r0, [r7, #24]
        break;
 8007b1c:	e008      	b.n	8007b30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b22:	61bb      	str	r3, [r7, #24]
        break;
 8007b24:	e004      	b.n	8007b30 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	77bb      	strb	r3, [r7, #30]
        break;
 8007b2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d074      	beq.n	8007c20 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	005a      	lsls	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	441a      	add	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b0f      	cmp	r3, #15
 8007b50:	d916      	bls.n	8007b80 <UART_SetConfig+0x19c>
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b58:	d212      	bcs.n	8007b80 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	f023 030f 	bic.w	r3, r3, #15
 8007b62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	085b      	lsrs	r3, r3, #1
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	89fb      	ldrh	r3, [r7, #14]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	89fa      	ldrh	r2, [r7, #14]
 8007b7c:	60da      	str	r2, [r3, #12]
 8007b7e:	e04f      	b.n	8007c20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	77bb      	strb	r3, [r7, #30]
 8007b84:	e04c      	b.n	8007c20 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b86:	7ffb      	ldrb	r3, [r7, #31]
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d828      	bhi.n	8007bde <UART_SetConfig+0x1fa>
 8007b8c:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <UART_SetConfig+0x1b0>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007bb9 	.word	0x08007bb9
 8007b98:	08007bc1 	.word	0x08007bc1
 8007b9c:	08007bc9 	.word	0x08007bc9
 8007ba0:	08007bdf 	.word	0x08007bdf
 8007ba4:	08007bcf 	.word	0x08007bcf
 8007ba8:	08007bdf 	.word	0x08007bdf
 8007bac:	08007bdf 	.word	0x08007bdf
 8007bb0:	08007bdf 	.word	0x08007bdf
 8007bb4:	08007bd7 	.word	0x08007bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb8:	f7fe f8ec 	bl	8005d94 <HAL_RCC_GetPCLK1Freq>
 8007bbc:	61b8      	str	r0, [r7, #24]
        break;
 8007bbe:	e013      	b.n	8007be8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc0:	f7fe f90a 	bl	8005dd8 <HAL_RCC_GetPCLK2Freq>
 8007bc4:	61b8      	str	r0, [r7, #24]
        break;
 8007bc6:	e00f      	b.n	8007be8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bc8:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <UART_SetConfig+0x268>)
 8007bca:	61bb      	str	r3, [r7, #24]
        break;
 8007bcc:	e00c      	b.n	8007be8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bce:	f7fe f86b 	bl	8005ca8 <HAL_RCC_GetSysClockFreq>
 8007bd2:	61b8      	str	r0, [r7, #24]
        break;
 8007bd4:	e008      	b.n	8007be8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bda:	61bb      	str	r3, [r7, #24]
        break;
 8007bdc:	e004      	b.n	8007be8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	77bb      	strb	r3, [r7, #30]
        break;
 8007be6:	bf00      	nop
    }

    if (pclk != 0U)
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d018      	beq.n	8007c20 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	085a      	lsrs	r2, r3, #1
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	441a      	add	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b0f      	cmp	r3, #15
 8007c06:	d909      	bls.n	8007c1c <UART_SetConfig+0x238>
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0e:	d205      	bcs.n	8007c1c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60da      	str	r2, [r3, #12]
 8007c1a:	e001      	b.n	8007c20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3720      	adds	r7, #32
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	efff69f3 	.word	0xefff69f3
 8007c3c:	40013800 	.word	0x40013800
 8007c40:	40021000 	.word	0x40021000
 8007c44:	40004400 	.word	0x40004400
 8007c48:	40004800 	.word	0x40004800
 8007c4c:	007a1200 	.word	0x007a1200

08007c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d00a      	beq.n	8007c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00a      	beq.n	8007ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	f003 0310 	and.w	r3, r3, #16
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00a      	beq.n	8007d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01a      	beq.n	8007d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d4e:	d10a      	bne.n	8007d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00a      	beq.n	8007d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	605a      	str	r2, [r3, #4]
  }
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b098      	sub	sp, #96	; 0x60
 8007d98:	af02      	add	r7, sp, #8
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007da4:	f7fa fbdc 	bl	8002560 <HAL_GetTick>
 8007da8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0308 	and.w	r3, r3, #8
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d12e      	bne.n	8007e16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f88c 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d021      	beq.n	8007e16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007de6:	653b      	str	r3, [r7, #80]	; 0x50
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df0:	647b      	str	r3, [r7, #68]	; 0x44
 8007df2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e6      	bne.n	8007dd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e062      	b.n	8007edc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d149      	bne.n	8007eb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f856 	bl	8007ee4 <UART_WaitOnFlagUntilTimeout>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d03c      	beq.n	8007eb8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e6      	bne.n	8007e3e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f023 0301 	bic.w	r3, r3, #1
 8007e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e90:	61fa      	str	r2, [r7, #28]
 8007e92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	69b9      	ldr	r1, [r7, #24]
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e5      	bne.n	8007e70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e011      	b.n	8007edc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3758      	adds	r7, #88	; 0x58
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef4:	e049      	b.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d045      	beq.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007efe:	f7fa fb2f 	bl	8002560 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d302      	bcc.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e048      	b.n	8007faa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d031      	beq.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	f003 0308 	and.w	r3, r3, #8
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d110      	bne.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2208      	movs	r2, #8
 8007f3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f8ff 	bl	8008140 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2208      	movs	r2, #8
 8007f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e029      	b.n	8007faa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69db      	ldr	r3, [r3, #28]
 8007f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f64:	d111      	bne.n	8007f8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 f8e5 	bl	8008140 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e00f      	b.n	8007faa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69da      	ldr	r2, [r3, #28]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4013      	ands	r3, r2
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	bf0c      	ite	eq
 8007f9a:	2301      	moveq	r3, #1
 8007f9c:	2300      	movne	r3, #0
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d0a6      	beq.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b097      	sub	sp, #92	; 0x5c
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68ba      	ldr	r2, [r7, #8]
 8007fc6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	88fa      	ldrh	r2, [r7, #6]
 8007fcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	88fa      	ldrh	r2, [r7, #6]
 8007fd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	d10e      	bne.n	8008006 <UART_Start_Receive_IT+0x52>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d105      	bne.n	8007ffc <UART_Start_Receive_IT+0x48>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007ff6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007ffa:	e02d      	b.n	8008058 <UART_Start_Receive_IT+0xa4>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	22ff      	movs	r2, #255	; 0xff
 8008000:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008004:	e028      	b.n	8008058 <UART_Start_Receive_IT+0xa4>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10d      	bne.n	800802a <UART_Start_Receive_IT+0x76>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <UART_Start_Receive_IT+0x6c>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	22ff      	movs	r2, #255	; 0xff
 800801a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800801e:	e01b      	b.n	8008058 <UART_Start_Receive_IT+0xa4>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	227f      	movs	r2, #127	; 0x7f
 8008024:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008028:	e016      	b.n	8008058 <UART_Start_Receive_IT+0xa4>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008032:	d10d      	bne.n	8008050 <UART_Start_Receive_IT+0x9c>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <UART_Start_Receive_IT+0x92>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	227f      	movs	r2, #127	; 0x7f
 8008040:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008044:	e008      	b.n	8008058 <UART_Start_Receive_IT+0xa4>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	223f      	movs	r2, #63	; 0x3f
 800804a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800804e:	e003      	b.n	8008058 <UART_Start_Receive_IT+0xa4>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2222      	movs	r2, #34	; 0x22
 8008064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3308      	adds	r3, #8
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	f043 0301 	orr.w	r3, r3, #1
 800807e:	657b      	str	r3, [r7, #84]	; 0x54
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3308      	adds	r3, #8
 8008086:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008088:	64ba      	str	r2, [r7, #72]	; 0x48
 800808a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800808e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008090:	e841 2300 	strex	r3, r2, [r1]
 8008094:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1e5      	bne.n	8008068 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a4:	d107      	bne.n	80080b6 <UART_Start_Receive_IT+0x102>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	4a21      	ldr	r2, [pc, #132]	; (8008138 <UART_Start_Receive_IT+0x184>)
 80080b2:	669a      	str	r2, [r3, #104]	; 0x68
 80080b4:	e002      	b.n	80080bc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4a20      	ldr	r2, [pc, #128]	; (800813c <UART_Start_Receive_IT+0x188>)
 80080ba:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d019      	beq.n	80080f8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80080d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e2:	637b      	str	r3, [r7, #52]	; 0x34
 80080e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e6      	bne.n	80080c4 <UART_Start_Receive_IT+0x110>
 80080f6:	e018      	b.n	800812a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	613b      	str	r3, [r7, #16]
   return(result);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f043 0320 	orr.w	r3, r3, #32
 800810c:	653b      	str	r3, [r7, #80]	; 0x50
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008116:	623b      	str	r3, [r7, #32]
 8008118:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	69f9      	ldr	r1, [r7, #28]
 800811c:	6a3a      	ldr	r2, [r7, #32]
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	61bb      	str	r3, [r7, #24]
   return(result);
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e6      	bne.n	80080f8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	375c      	adds	r7, #92	; 0x5c
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	08008431 	.word	0x08008431
 800813c:	08008289 	.word	0x08008289

08008140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008140:	b480      	push	{r7}
 8008142:	b095      	sub	sp, #84	; 0x54
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800815c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008166:	643b      	str	r3, [r7, #64]	; 0x40
 8008168:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800816c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e6      	bne.n	8008148 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3308      	adds	r3, #8
 8008180:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	61fb      	str	r3, [r7, #28]
   return(result);
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	f023 0301 	bic.w	r3, r3, #1
 8008190:	64bb      	str	r3, [r7, #72]	; 0x48
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3308      	adds	r3, #8
 8008198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800819a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800819c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a2:	e841 2300 	strex	r3, r2, [r1]
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1e5      	bne.n	800817a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d118      	bne.n	80081e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	e853 3f00 	ldrex	r3, [r3]
 80081c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f023 0310 	bic.w	r3, r3, #16
 80081ca:	647b      	str	r3, [r7, #68]	; 0x44
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d4:	61bb      	str	r3, [r7, #24]
 80081d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	6979      	ldr	r1, [r7, #20]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	613b      	str	r3, [r7, #16]
   return(result);
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e6      	bne.n	80081b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2220      	movs	r2, #32
 80081ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80081fc:	bf00      	nop
 80081fe:	3754      	adds	r7, #84	; 0x54
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7ff fbc6 	bl	80079b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	60bb      	str	r3, [r7, #8]
   return(result);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6979      	ldr	r1, [r7, #20]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	613b      	str	r3, [r7, #16]
   return(result);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e6      	bne.n	800823c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff fb92 	bl	80079a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008280:	bf00      	nop
 8008282:	3720      	adds	r7, #32
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b09c      	sub	sp, #112	; 0x70
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008296:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a0:	2b22      	cmp	r3, #34	; 0x22
 80082a2:	f040 80b9 	bne.w	8008418 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80082ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80082b4:	b2d9      	uxtb	r1, r3
 80082b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c0:	400a      	ands	r2, r1
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f040 809c 	bne.w	8008428 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008304:	66bb      	str	r3, [r7, #104]	; 0x68
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	461a      	mov	r2, r3
 800830c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800830e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008310:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800831c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e6      	bne.n	80082f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	667b      	str	r3, [r7, #100]	; 0x64
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008342:	647a      	str	r2, [r7, #68]	; 0x44
 8008344:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008346:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800834a:	e841 2300 	strex	r3, r2, [r1]
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e5      	bne.n	8008322 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d018      	beq.n	80083aa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	e853 3f00 	ldrex	r3, [r3]
 8008384:	623b      	str	r3, [r7, #32]
   return(result);
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800838c:	663b      	str	r3, [r7, #96]	; 0x60
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008396:	633b      	str	r3, [r7, #48]	; 0x30
 8008398:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	e841 2300 	strex	r3, r2, [r1]
 80083a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1e6      	bne.n	8008378 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d12e      	bne.n	8008410 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	e853 3f00 	ldrex	r3, [r3]
 80083c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f023 0310 	bic.w	r3, r3, #16
 80083cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083da:	69b9      	ldr	r1, [r7, #24]
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	e841 2300 	strex	r3, r2, [r1]
 80083e2:	617b      	str	r3, [r7, #20]
   return(result);
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e6      	bne.n	80083b8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	f003 0310 	and.w	r3, r3, #16
 80083f4:	2b10      	cmp	r3, #16
 80083f6:	d103      	bne.n	8008400 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2210      	movs	r2, #16
 80083fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7ff fadf 	bl	80079cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800840e:	e00b      	b.n	8008428 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7f8 fc6d 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 8008416:	e007      	b.n	8008428 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0208 	orr.w	r2, r2, #8
 8008426:	619a      	str	r2, [r3, #24]
}
 8008428:	bf00      	nop
 800842a:	3770      	adds	r7, #112	; 0x70
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b09c      	sub	sp, #112	; 0x70
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800843e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008448:	2b22      	cmp	r3, #34	; 0x22
 800844a:	f040 80b9 	bne.w	80085c0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008454:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800845c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800845e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008462:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008466:	4013      	ands	r3, r2
 8008468:	b29a      	uxth	r2, r3
 800846a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800846c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008472:	1c9a      	adds	r2, r3, #2
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	f040 809c 	bne.w	80085d0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ac:	667b      	str	r3, [r7, #100]	; 0x64
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084b6:	657b      	str	r3, [r7, #84]	; 0x54
 80084b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e6      	bne.n	8008498 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	f023 0301 	bic.w	r3, r3, #1
 80084e0:	663b      	str	r3, [r7, #96]	; 0x60
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084ea:	643a      	str	r2, [r7, #64]	; 0x40
 80084ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d018      	beq.n	8008552 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	61fb      	str	r3, [r7, #28]
   return(result);
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008540:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008546:	e841 2300 	strex	r3, r2, [r1]
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1e6      	bne.n	8008520 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008556:	2b01      	cmp	r3, #1
 8008558:	d12e      	bne.n	80085b8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	60bb      	str	r3, [r7, #8]
   return(result);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f023 0310 	bic.w	r3, r3, #16
 8008574:	65bb      	str	r3, [r7, #88]	; 0x58
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800857e:	61bb      	str	r3, [r7, #24]
 8008580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6979      	ldr	r1, [r7, #20]
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	613b      	str	r3, [r7, #16]
   return(result);
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b10      	cmp	r3, #16
 800859e:	d103      	bne.n	80085a8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2210      	movs	r2, #16
 80085a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7ff fa0b 	bl	80079cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085b6:	e00b      	b.n	80085d0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f7f8 fb99 	bl	8000cf0 <HAL_UART_RxCpltCallback>
}
 80085be:	e007      	b.n	80085d0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0208 	orr.w	r2, r2, #8
 80085ce:	619a      	str	r2, [r3, #24]
}
 80085d0:	bf00      	nop
 80085d2:	3770      	adds	r7, #112	; 0x70
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <__libc_init_array>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	4d0d      	ldr	r5, [pc, #52]	; (8008624 <__libc_init_array+0x38>)
 80085f0:	4c0d      	ldr	r4, [pc, #52]	; (8008628 <__libc_init_array+0x3c>)
 80085f2:	1b64      	subs	r4, r4, r5
 80085f4:	10a4      	asrs	r4, r4, #2
 80085f6:	2600      	movs	r6, #0
 80085f8:	42a6      	cmp	r6, r4
 80085fa:	d109      	bne.n	8008610 <__libc_init_array+0x24>
 80085fc:	4d0b      	ldr	r5, [pc, #44]	; (800862c <__libc_init_array+0x40>)
 80085fe:	4c0c      	ldr	r4, [pc, #48]	; (8008630 <__libc_init_array+0x44>)
 8008600:	f000 f860 	bl	80086c4 <_init>
 8008604:	1b64      	subs	r4, r4, r5
 8008606:	10a4      	asrs	r4, r4, #2
 8008608:	2600      	movs	r6, #0
 800860a:	42a6      	cmp	r6, r4
 800860c:	d105      	bne.n	800861a <__libc_init_array+0x2e>
 800860e:	bd70      	pop	{r4, r5, r6, pc}
 8008610:	f855 3b04 	ldr.w	r3, [r5], #4
 8008614:	4798      	blx	r3
 8008616:	3601      	adds	r6, #1
 8008618:	e7ee      	b.n	80085f8 <__libc_init_array+0xc>
 800861a:	f855 3b04 	ldr.w	r3, [r5], #4
 800861e:	4798      	blx	r3
 8008620:	3601      	adds	r6, #1
 8008622:	e7f2      	b.n	800860a <__libc_init_array+0x1e>
 8008624:	0800871c 	.word	0x0800871c
 8008628:	0800871c 	.word	0x0800871c
 800862c:	0800871c 	.word	0x0800871c
 8008630:	08008720 	.word	0x08008720

08008634 <memset>:
 8008634:	4402      	add	r2, r0
 8008636:	4603      	mov	r3, r0
 8008638:	4293      	cmp	r3, r2
 800863a:	d100      	bne.n	800863e <memset+0xa>
 800863c:	4770      	bx	lr
 800863e:	f803 1b01 	strb.w	r1, [r3], #1
 8008642:	e7f9      	b.n	8008638 <memset+0x4>

08008644 <lrintf>:
 8008644:	ee10 3a10 	vmov	r3, s0
 8008648:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800864c:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8008650:	281e      	cmp	r0, #30
 8008652:	b082      	sub	sp, #8
 8008654:	dc2e      	bgt.n	80086b4 <lrintf+0x70>
 8008656:	1c41      	adds	r1, r0, #1
 8008658:	da02      	bge.n	8008660 <lrintf+0x1c>
 800865a:	2000      	movs	r0, #0
 800865c:	b002      	add	sp, #8
 800865e:	4770      	bx	lr
 8008660:	2816      	cmp	r0, #22
 8008662:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8008666:	dd09      	ble.n	800867c <lrintf+0x38>
 8008668:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800866c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008670:	3a96      	subs	r2, #150	; 0x96
 8008672:	4090      	lsls	r0, r2
 8008674:	2900      	cmp	r1, #0
 8008676:	d0f1      	beq.n	800865c <lrintf+0x18>
 8008678:	4240      	negs	r0, r0
 800867a:	e7ef      	b.n	800865c <lrintf+0x18>
 800867c:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <lrintf+0x7c>)
 800867e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8008682:	ed93 7a00 	vldr	s14, [r3]
 8008686:	ee37 0a00 	vadd.f32	s0, s14, s0
 800868a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800868e:	eddd 7a01 	vldr	s15, [sp, #4]
 8008692:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008696:	ee17 3a90 	vmov	r3, s15
 800869a:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800869e:	d0dc      	beq.n	800865a <lrintf+0x16>
 80086a0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80086a4:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80086a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80086ac:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80086b0:	40d8      	lsrs	r0, r3
 80086b2:	e7df      	b.n	8008674 <lrintf+0x30>
 80086b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80086b8:	ee17 0a90 	vmov	r0, s15
 80086bc:	e7ce      	b.n	800865c <lrintf+0x18>
 80086be:	bf00      	nop
 80086c0:	08008714 	.word	0x08008714

080086c4 <_init>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	bf00      	nop
 80086c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ca:	bc08      	pop	{r3}
 80086cc:	469e      	mov	lr, r3
 80086ce:	4770      	bx	lr

080086d0 <_fini>:
 80086d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d2:	bf00      	nop
 80086d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086d6:	bc08      	pop	{r3}
 80086d8:	469e      	mov	lr, r3
 80086da:	4770      	bx	lr

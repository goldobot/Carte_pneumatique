
Code_carte_pneumatique.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008880  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a48  08008a48  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008a48  08008a48  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a48  08008a48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a4c  08008a4c  00018a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000059c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000060c  2000060c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a5a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c28  00000000  00000000  00037afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a0  00000000  00000000  0003a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001288  00000000  00000000  0003bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d940  00000000  00000000  0003cd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cda  00000000  00000000  0005a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b16f2  00000000  00000000  0007336a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00124a5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005704  00000000  00000000  00124aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089f0 	.word	0x080089f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080089f0 	.word	0x080089f0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <dshot_init>:

int dshot_ready = 0;

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f83f 	bl	80008c4 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000846:	f000 f8fb 	bl	8000a40 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800084a:	f000 f91d 	bl	8000a88 <dshot_start_pwm>
  dshot_ready = 1;
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <dshot_init+0x28>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001f4 	.word	0x200001f4

08000860 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if (!dshot_ready) return;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <dshot_write+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <dshot_write+0x20>

	dshot_prepare_dmabuffer_all(motor_value);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f98d 	bl	8000b90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000876:	f000 f9bf 	bl	8000bf8 <dshot_dma_start>
	dshot_enable_dma_request();
 800087a:	f000 fa03 	bl	8000c84 <dshot_enable_dma_request>
 800087e:	e000      	b.n	8000882 <dshot_write+0x22>
  if (!dshot_ready) return;
 8000880:	bf00      	nop
}
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200001f4 	.word	0x200001f4

0800088c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d003      	beq.n	80008a4 <dshot_choose_type+0x18>
 800089c:	2b02      	cmp	r3, #2
 800089e:	d103      	bne.n	80008a8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <dshot_choose_type+0x2c>)
 80008a2:	e002      	b.n	80008aa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <dshot_choose_type+0x30>)
 80008a6:	e000      	b.n	80008aa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <dshot_choose_type+0x34>)
	}
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	00b71b00 	.word	0x00b71b00
 80008bc:	005b8d80 	.word	0x005b8d80
 80008c0:	002dc6c0 	.word	0x002dc6c0

080008c4 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	ed2d 8b02 	vpush	{d8}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <dshot_set_timer+0xc4>)
 80008d4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffd2 	bl	800088c <dshot_choose_type>
 80008e8:	ee07 0a90 	vmov	s15, r0
 80008ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008f4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800098c <dshot_set_timer+0xc8>
 80008f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000900:	f008 f836 	bl	8008970 <lrintf>
 8000904:	4603      	mov	r3, r0
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <dshot_set_timer+0xcc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	897a      	ldrh	r2, [r7, #10]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <dshot_set_timer+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2214      	movs	r2, #20
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <dshot_set_timer+0xcc>)
 800091e:	2214      	movs	r2, #20
 8000920:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <dshot_set_timer+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <dshot_set_timer+0xd0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2214      	movs	r2, #20
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <dshot_set_timer+0xd0>)
 8000934:	2214      	movs	r2, #20
 8000936:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <dshot_set_timer+0xd4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	897a      	ldrh	r2, [r7, #10]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <dshot_set_timer+0xd4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2214      	movs	r2, #20
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <dshot_set_timer+0xd4>)
 800094a:	2214      	movs	r2, #20
 800094c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <dshot_set_timer+0xd0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	897a      	ldrh	r2, [r7, #10]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <dshot_set_timer+0xd0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2214      	movs	r2, #20
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <dshot_set_timer+0xd0>)
 8000960:	2214      	movs	r2, #20
 8000962:	60da      	str	r2, [r3, #12]

	// motor5
	__HAL_TIM_SET_PRESCALER(MOTOR_5_TIM, dshot_prescaler);
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <dshot_set_timer+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	897a      	ldrh	r2, [r7, #10]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_5_TIM, MOTOR_BITLENGTH);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <dshot_set_timer+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2214      	movs	r2, #20
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <dshot_set_timer+0xcc>)
 8000976:	2214      	movs	r2, #20
 8000978:	60da      	str	r2, [r3, #12]
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	ecbd 8b02 	vpop	{d8}
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	016e3600 	.word	0x016e3600
 800098c:	3c23d70a 	.word	0x3c23d70a
 8000990:	20000328 	.word	0x20000328
 8000994:	20000374 	.word	0x20000374
 8000998:	200002dc 	.word	0x200002dc

0800099c <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[MOTOR_1_TIM_DMA_ID])
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d108      	bne.n	80009c6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_1_TIM_DMA);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009c2:	60da      	str	r2, [r3, #12]
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
	}

}
 80009c4:	e036      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_2_TIM_DMA_ID])
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d108      	bne.n	80009e2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_2_TIM_DMA);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	e028      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_3_TIM_DMA_ID])
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d108      	bne.n	80009fe <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_3_TIM_DMA);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009fa:	60da      	str	r2, [r3, #12]
}
 80009fc:	e01a      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_4_TIM_DMA_ID])
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d108      	bne.n	8000a1a <dshot_dma_tc_callback+0x7e>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_4_TIM_DMA);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00c      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d107      	bne.n	8000a34 <dshot_dma_tc_callback+0x98>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a32:	60da      	str	r2, [r3, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <dshot_put_tc_callback_function+0x44>)
 8000a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a58:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000328 	.word	0x20000328
 8000a7c:	0800099d 	.word	0x0800099d
 8000a80:	20000374 	.word	0x20000374
 8000a84:	200002dc 	.word	0x200002dc

08000a88 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000a90:	f005 fc78 	bl	8006384 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a94:	210c      	movs	r1, #12
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <dshot_start_pwm+0x34>)
 8000a98:	f005 fc74 	bl	8006384 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <dshot_start_pwm+0x38>)
 8000aa0:	f005 fc70 	bl	8006384 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <dshot_start_pwm+0x34>)
 8000aa8:	f005 fc6c 	bl	8006384 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_5_TIM, MOTOR_5_TIM_CHANNEL);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000ab0:	f005 fc68 	bl	8006384 <HAL_TIM_PWM_Start>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000328 	.word	0x20000328
 8000abc:	20000374 	.word	0x20000374
 8000ac0:	200002dc 	.word	0x200002dc

08000ac4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000ae6:	893b      	ldrh	r3, [r7, #8]
 8000ae8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e009      	b.n	8000b04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4053      	eors	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddf2      	ble.n	8000af0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000b12:	893b      	ldrh	r3, [r7, #8]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000b20:	893b      	ldrh	r3, [r7, #8]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffc1 	bl	8000ac4 <dshot_prepare_packet>
 8000b42:	4603      	mov	r3, r0
 8000b44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e011      	b.n	8000b70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da01      	bge.n	8000b58 <dshot_prepare_dmabuffer+0x2a>
 8000b54:	220e      	movs	r2, #14
 8000b56:	e000      	b.n	8000b5a <dshot_prepare_dmabuffer+0x2c>
 8000b58:	2207      	movs	r2, #7
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	440b      	add	r3, r1
 8000b62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	ddea      	ble.n	8000b4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3340      	adds	r3, #64	; 0x40
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3344      	adds	r3, #68	; 0x44
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <dshot_prepare_dmabuffer_all+0x54>)
 8000ba0:	f7ff ffc5 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <dshot_prepare_dmabuffer_all+0x58>)
 8000bae:	f7ff ffbe 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <dshot_prepare_dmabuffer_all+0x5c>)
 8000bbc:	f7ff ffb7 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3306      	adds	r3, #6
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <dshot_prepare_dmabuffer_all+0x60>)
 8000bca:	f7ff ffb0 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor5_dmabuffer, motor_value[4]);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <dshot_prepare_dmabuffer_all+0x64>)
 8000bd8:	f7ff ffa9 	bl	8000b2e <dshot_prepare_dmabuffer>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000008c 	.word	0x2000008c
 8000be8:	200000d4 	.word	0x200000d4
 8000bec:	2000011c 	.word	0x2000011c
 8000bf0:	20000164 	.word	0x20000164
 8000bf4:	200001ac 	.word	0x200001ac

08000bf8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <dshot_dma_start+0x6c>)
 8000bfe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c00:	4919      	ldr	r1, [pc, #100]	; (8000c68 <dshot_dma_start+0x70>)
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	333c      	adds	r3, #60	; 0x3c
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	f002 ff22 	bl	8003a54 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <dshot_dma_start+0x74>)
 8000c12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c14:	4916      	ldr	r1, [pc, #88]	; (8000c70 <dshot_dma_start+0x78>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <dshot_dma_start+0x74>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2312      	movs	r3, #18
 8000c20:	f002 ff18 	bl	8003a54 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c28:	4913      	ldr	r1, [pc, #76]	; (8000c78 <dshot_dma_start+0x80>)
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3334      	adds	r3, #52	; 0x34
 8000c30:	461a      	mov	r2, r3
 8000c32:	2312      	movs	r3, #18
 8000c34:	f002 ff0e 	bl	8003a54 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <dshot_dma_start+0x74>)
 8000c3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c3c:	490f      	ldr	r1, [pc, #60]	; (8000c7c <dshot_dma_start+0x84>)
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <dshot_dma_start+0x74>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3334      	adds	r3, #52	; 0x34
 8000c44:	461a      	mov	r2, r3
 8000c46:	2312      	movs	r3, #18
 8000c48:	f002 ff04 	bl	8003a54 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID], (uint32_t)motor5_dmabuffer, (uint32_t)&MOTOR_5_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c50:	490b      	ldr	r1, [pc, #44]	; (8000c80 <dshot_dma_start+0x88>)
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3334      	adds	r3, #52	; 0x34
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f002 fefa 	bl	8003a54 <HAL_DMA_Start_IT>

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000328 	.word	0x20000328
 8000c68:	2000008c 	.word	0x2000008c
 8000c6c:	20000374 	.word	0x20000374
 8000c70:	200000d4 	.word	0x200000d4
 8000c74:	200002dc 	.word	0x200002dc
 8000c78:	2000011c 	.word	0x2000011c
 8000c7c:	20000164 	.word	0x20000164
 8000c80:	200001ac 	.word	0x200001ac

08000c84 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, MOTOR_1_TIM_DMA);
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c96:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, MOTOR_2_TIM_DMA);
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ca6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, MOTOR_3_TIM_DMA);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, MOTOR_4_TIM_DMA);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_5_TIM, MOTOR_5_TIM_DMA);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd6:	60da      	str	r2, [r3, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000328 	.word	0x20000328
 8000ce8:	20000374 	.word	0x20000374
 8000cec:	200002dc 	.word	0x200002dc

08000cf0 <insert>:
typedef struct Node {
	uint8_t command;
	struct Node* next;
} Node;

void insert(Node ** head, uint8_t value){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	Node* newNode = malloc(sizeof(Node));
 8000cfc:	2008      	movs	r0, #8
 8000cfe:	f007 fd21 	bl	8008744 <malloc>
 8000d02:	4603      	mov	r3, r0
 8000d04:	60bb      	str	r3, [r7, #8]
	newNode->command=value;
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	701a      	strb	r2, [r3, #0]
	newNode->next=NULL;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]

	if(*head == NULL){
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d103      	bne.n	8000d22 <insert+0x32>
		*head = newNode;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	601a      	str	r2, [r3, #0]
		while (current->next != NULL){
			current = current->next;
		}
		current->next = newNode;
	}
}
 8000d20:	e00d      	b.n	8000d3e <insert+0x4e>
		Node * current = *head;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	60fb      	str	r3, [r7, #12]
		while (current->next != NULL){
 8000d28:	e002      	b.n	8000d30 <insert+0x40>
			current = current->next;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	60fb      	str	r3, [r7, #12]
		while (current->next != NULL){
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d1f8      	bne.n	8000d2a <insert+0x3a>
		current->next = newNode;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	605a      	str	r2, [r3, #4]
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <dequeue>:
uint8_t dequeue(Node ** head){
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
	if (*head == NULL){
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <dequeue+0x14>
		return -1;
 8000d56:	23ff      	movs	r3, #255	; 0xff
 8000d58:	e00f      	b.n	8000d7a <dequeue+0x34>
	}
	uint8_t ret_val = (*head)->command;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	73fb      	strb	r3, [r7, #15]
	Node * previous_head =*head;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	60bb      	str	r3, [r7, #8]
	*head=(*head)->next;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
	free(previous_head);
 8000d72:	68b8      	ldr	r0, [r7, #8]
 8000d74:	f007 fcee 	bl	8008754 <free>
	return ret_val;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_UART_RxCpltCallback>:
//Partie D-Shot
uint16_t my_motor_value[5] = {0, 0, 0, 0, 0};

//Partie UART en interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	insert(&command_hist, command_buffer);
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_UART_RxCpltCallback+0x30>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	4809      	ldr	r0, [pc, #36]	; (8000db8 <HAL_UART_RxCpltCallback+0x34>)
 8000d94:	f7ff ffac 	bl	8000cf0 <insert>
	res1=HAL_UART_Receive_IT(&huart2, &command_buffer, 1);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4906      	ldr	r1, [pc, #24]	; (8000db4 <HAL_UART_RxCpltCallback+0x30>)
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <HAL_UART_RxCpltCallback+0x38>)
 8000d9e:	f006 fb59 	bl	8007454 <HAL_UART_Receive_IT>
 8000da2:	4603      	mov	r3, r0
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_UART_RxCpltCallback+0x3c>)
 8000da8:	701a      	strb	r2, [r3, #0]
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000208 	.word	0x20000208
 8000db8:	20000204 	.word	0x20000204
 8000dbc:	20000560 	.word	0x20000560
 8000dc0:	2000020e 	.word	0x2000020e
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09a      	sub	sp, #104	; 0x68
 8000dcc:	af02      	add	r7, sp, #8

	//partie Capteur de Pression
	//modèle : 2513130810401
	float pressure_val;
	//SENP:  Pressure sensor sensitivity : 4.196 ×10-2
	float SENP = 0.04196;
 8000dce:	4bb6      	ldr	r3, [pc, #728]	; (80010a8 <main+0x2e0>)
 8000dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
	//PMIN: Min Pressure output : -100 kPa
	int Pmin = -100;
 8000dd2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000dd6:	64bb      	str	r3, [r7, #72]	; 0x48
	//OUTP_MIN: digital output at Pmin = 3277
	float OUT_Pmin = 3277;
 8000dd8:	4bb4      	ldr	r3, [pc, #720]	; (80010ac <main+0x2e4>)
 8000dda:	647b      	str	r3, [r7, #68]	; 0x44
	//P15bit = PH & PL
	float P15bit;
	//tableaux des 100 dernières valeurs de pression, toutes les valeurs initialisées à 0
	uint8_t pressures[PRESSURES_SIZE] = {0};
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	809a      	strh	r2, [r3, #4]
	//valeur pour remplir le tableau des valeurs de pressions avant de calculer la moyennes des pressions
	uint32_t pressures_mean = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	65fb      	str	r3, [r7, #92]	; 0x5c

	// explication de la conversion des valeurs de l'ADC en température
	// dans le fichier "Equation_Sonde_PT100, il y a 2 courbes, ces coeffs sont respectivement les pentes et les ordonnées à l'origine
	// raw = valeur numérique renvoyée par l'ADC
	// méthode de calibration sonde PT100 : mesure resistance et raw à 22°   &   mesure resistance et raw à 100° (pistolet à air chaud devant la PT100)
	float raw_to_res_mult = 0.0393;
 8000dee:	4bb0      	ldr	r3, [pc, #704]	; (80010b0 <main+0x2e8>)
 8000df0:	643b      	str	r3, [r7, #64]	; 0x40
	float raw_to_res_offset = -2.47;
 8000df2:	4bb0      	ldr	r3, [pc, #704]	; (80010b4 <main+0x2ec>)
 8000df4:	63fb      	str	r3, [r7, #60]	; 0x3c
	float res_to_temp_mult = -0.74;
 8000df6:	4bb0      	ldr	r3, [pc, #704]	; (80010b8 <main+0x2f0>)
 8000df8:	63bb      	str	r3, [r7, #56]	; 0x38
	float res_to_temp_offset = 104;
 8000dfa:	4bb0      	ldr	r3, [pc, #704]	; (80010bc <main+0x2f4>)
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34

	//Partie Arrêt d'urgence
	uint8_t AU_Current_Status = GPIO_PIN_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t AU_Old_Status = GPIO_PIN_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f001 fbd1 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0e:	f000 fbaf 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e12:	f000 feed 	bl	8001bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e16:	f000 fead 	bl	8001b74 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000e1a:	f000 fe7b 	bl	8001b14 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e1e:	f000 fd79 	bl	8001914 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e22:	f000 fe41 	bl	8001aa8 <MX_TIM6_Init>
  MX_TIM3_Init();
 8000e26:	f000 fdd9 	bl	80019dc <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e2a:	f000 fce3 	bl	80017f4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000e2e:	f000 fca1 	bl	8001774 <MX_I2C1_Init>
  MX_CAN_Init();
 8000e32:	f000 fc6b 	bl	800170c <MX_CAN_Init>
  MX_ADC1_Init();
 8000e36:	f000 fbf9 	bl	800162c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	dshot_init(DSHOT_SPEED);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fcfa 	bl	8000834 <dshot_init>
	//Initialization Des ESC des moteurs ET TOUT LE RESTE
	my_motor_value[0] = 0;
 8000e40:	4b9f      	ldr	r3, [pc, #636]	; (80010c0 <main+0x2f8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	801a      	strh	r2, [r3, #0]
	my_motor_value[1] = 0;
 8000e46:	4b9e      	ldr	r3, [pc, #632]	; (80010c0 <main+0x2f8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	805a      	strh	r2, [r3, #2]
	my_motor_value[2] = 0;
 8000e4c:	4b9c      	ldr	r3, [pc, #624]	; (80010c0 <main+0x2f8>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	809a      	strh	r2, [r3, #4]
	my_motor_value[3] = 0;
 8000e52:	4b9b      	ldr	r3, [pc, #620]	; (80010c0 <main+0x2f8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	80da      	strh	r2, [r3, #6]
	my_motor_value[4] = 0;
 8000e58:	4b99      	ldr	r3, [pc, #612]	; (80010c0 <main+0x2f8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f003 f947 	bl	80040f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2110      	movs	r1, #16
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f003 f941 	bl	80040f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2108      	movs	r1, #8
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f003 f93b 	bl	80040f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2101      	movs	r1, #1
 8000e86:	488f      	ldr	r0, [pc, #572]	; (80010c4 <main+0x2fc>)
 8000e88:	f003 f936 	bl	80040f8 <HAL_GPIO_WritePin>
	//start to count (for tim6 interruption)
	HAL_TIM_Base_Start_IT(&htim6);
 8000e8c:	488e      	ldr	r0, [pc, #568]	; (80010c8 <main+0x300>)
 8000e8e:	f005 f9c5 	bl	800621c <HAL_TIM_Base_Start_IT>
	//a peu près temps minimal de delay pour laisser le temps aux moteurs de s'initialiser
	HAL_Delay(2600);
 8000e92:	f640 2028 	movw	r0, #2600	; 0xa28
 8000e96:	f001 fbf1 	bl	800267c <HAL_Delay>
	//On lance l'interruption sur l'UART2, à relancer dans le callback !
	command_hist = NULL;
 8000e9a:	4b8c      	ldr	r3, [pc, #560]	; (80010cc <main+0x304>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
	res1=HAL_UART_Receive_IT(&huart2, &command_buffer, 1);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	498b      	ldr	r1, [pc, #556]	; (80010d0 <main+0x308>)
 8000ea4:	488b      	ldr	r0, [pc, #556]	; (80010d4 <main+0x30c>)
 8000ea6:	f006 fad5 	bl	8007454 <HAL_UART_Receive_IT>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b8a      	ldr	r3, [pc, #552]	; (80010d8 <main+0x310>)
 8000eb0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Partie AU : récupération du state de l'AU
		AU_Current_Status = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1);
 8000eb2:	2102      	movs	r1, #2
 8000eb4:	4883      	ldr	r0, [pc, #524]	; (80010c4 <main+0x2fc>)
 8000eb6:	f003 f907 	bl	80040c8 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		//res1=HAL_UART_Receive(&huart2, &command_buffer, 1, 100);

		//Partie Reset_small : Reset de tout lorsque l'AU repasse à l'état haut (non coupé) alors qu'il était à l'état bas (coupé) juste avant
		if ((AU_Current_Status == GPIO_PIN_RESET) && AU_Old_Status == GPIO_PIN_SET){
 8000ec0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d140      	bne.n	8000f4a <main+0x182>
 8000ec8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d13c      	bne.n	8000f4a <main+0x182>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000ed0:	4b7b      	ldr	r3, [pc, #492]	; (80010c0 <main+0x2f8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000ed6:	4b7a      	ldr	r3, [pc, #488]	; (80010c0 <main+0x2f8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000edc:	4b78      	ldr	r3, [pc, #480]	; (80010c0 <main+0x2f8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000ee2:	4b77      	ldr	r3, [pc, #476]	; (80010c0 <main+0x2f8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000ee8:	4b75      	ldr	r3, [pc, #468]	; (80010c0 <main+0x2f8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	811a      	strh	r2, [r3, #8]
			HAL_Delay(2600);
 8000eee:	f640 2028 	movw	r0, #2600	; 0xa28
 8000ef2:	f001 fbc3 	bl	800267c <HAL_Delay>
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f003 f8fb 	bl	80040f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2110      	movs	r1, #16
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f003 f8f5 	bl	80040f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2108      	movs	r1, #8
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f003 f8ef 	bl	80040f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4869      	ldr	r0, [pc, #420]	; (80010c4 <main+0x2fc>)
 8000f20:	f003 f8ea 	bl	80040f8 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2120      	movs	r1, #32
 8000f28:	486c      	ldr	r0, [pc, #432]	; (80010dc <main+0x314>)
 8000f2a:	f003 f8e5 	bl	80040f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	486a      	ldr	r0, [pc, #424]	; (80010dc <main+0x314>)
 8000f34:	f003 f8e0 	bl	80040f8 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000f38:	4b69      	ldr	r3, [pc, #420]	; (80010e0 <main+0x318>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
			//reset le timer de purge
			BAU_tick = 0;
 8000f3e:	4b69      	ldr	r3, [pc, #420]	; (80010e4 <main+0x31c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8000f44:	4b68      	ldr	r3, [pc, #416]	; (80010e8 <main+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
		}

		//Partie Reset_Full : Si l'AU passe à l'état bas (coupé) alors qu'il était à l'état haut (non coupé), reset tout et lancer un timer de 2 minutes, au bout duquel on purge !
		if (AU_Current_Status == GPIO_PIN_SET && AU_Old_Status == GPIO_PIN_RESET){
 8000f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d139      	bne.n	8000fc6 <main+0x1fe>
 8000f52:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d135      	bne.n	8000fc6 <main+0x1fe>
			// arrêt moteurs (compr, canons, turbine)
			my_motor_value[0] = 0;
 8000f5a:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <main+0x2f8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	801a      	strh	r2, [r3, #0]
			my_motor_value[1] = 0;
 8000f60:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <main+0x2f8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	805a      	strh	r2, [r3, #2]
			my_motor_value[2] = 0;
 8000f66:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <main+0x2f8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	809a      	strh	r2, [r3, #4]
			my_motor_value[3] = 0;
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <main+0x2f8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	80da      	strh	r2, [r3, #6]
			my_motor_value[4] = 0;
 8000f72:	4b53      	ldr	r3, [pc, #332]	; (80010c0 <main+0x2f8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	811a      	strh	r2, [r3, #8]
			// arrêt EV 1, 2, 3 et Purge
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f003 f8ba 	bl	80040f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2110      	movs	r1, #16
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f003 f8b4 	bl	80040f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2108      	movs	r1, #8
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f003 f8ae 	bl	80040f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4848      	ldr	r0, [pc, #288]	; (80010c4 <main+0x2fc>)
 8000fa2:	f003 f8a9 	bl	80040f8 <HAL_GPIO_WritePin>
			// arrêt LCD et LED Enable
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2120      	movs	r1, #32
 8000faa:	484c      	ldr	r0, [pc, #304]	; (80010dc <main+0x314>)
 8000fac:	f003 f8a4 	bl	80040f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2110      	movs	r1, #16
 8000fb4:	4849      	ldr	r0, [pc, #292]	; (80010dc <main+0x314>)
 8000fb6:	f003 f89f 	bl	80040f8 <HAL_GPIO_WritePin>
			// reset la régulation de pression
			Press_order = 0;
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <main+0x318>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
			// tempo de 2 min, puis purge
			BAU_tick_enable = 1;
 8000fc0:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <main+0x320>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
		}
		//changer les valeurs des AU status
		AU_Old_Status = AU_Current_Status;
 8000fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fca:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		//Lecture de la pression en I2C et activation OU NON du compresseur en fonction
		res2 = HAL_I2C_Master_Receive(&hi2c1, 0xf1, I2C_buf, 4, 200);
 8000fce:	f107 0218 	add.w	r2, r7, #24
 8000fd2:	23c8      	movs	r3, #200	; 0xc8
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	21f1      	movs	r1, #241	; 0xf1
 8000fda:	4844      	ldr	r0, [pc, #272]	; (80010ec <main+0x324>)
 8000fdc:	f003 f934 	bl	8004248 <HAL_I2C_Master_Receive>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <main+0x328>)
 8000fe6:	701a      	strb	r2, [r3, #0]
		if (res2 == HAL_OK){
 8000fe8:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <main+0x328>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f040 80b1 	bne.w	8001154 <main+0x38c>
			//sprintf((char*)p_buf, "I2C : %d %d %d %d\r\n", (int)I2C_buf[0], (int)I2C_buf[1], (int)I2C_buf[2], (int)I2C_buf[3]);
			//HAL_UART_Receive(&huart2, p_buf, 4, 100);

			//Calcul de la pression en 10èmes de bar RELATIFS
			//voir infos_pressure_sensor plus haut pour infos sur variables
			P15bit = (int)((I2C_buf[0] << 8)|I2C_buf[1]);
 8000ff2:	7e3b      	ldrb	r3, [r7, #24]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	7e7a      	ldrb	r2, [r7, #25]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001002:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			//formule d'après la datasheet du capteur : pressure_val = [(P15bit - OUTP_MIN)*SENP)] + PMIN;
			//Conversion en 10èmes de bar à la fin
			pressure_val = P15bit - OUT_Pmin; //2383
 8001006:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800100a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800100e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001012:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val*SENP; //99.99068
 8001016:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800101a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001022:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val + Pmin; // -0,00932
 8001026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001038:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pressure_val = pressure_val * 0.1; // -0,000932
 800103c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800103e:	f7ff fb51 	bl	80006e4 <__aeabi_f2d>
 8001042:	a317      	add	r3, pc, #92	; (adr r3, 80010a0 <main+0x2d8>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff f8be 	bl	80001c8 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fb9e 	bl	8000794 <__aeabi_d2f>
 8001058:	4603      	mov	r3, r0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
			//	pressures[pressures_full_counter] = (int)pressure_val;
			//}
			//dès qu'il est plein, on calcule la moyenne du tableau renouvelé
			//on décale tout le tableau vers la droite, en faisant donc disparaître la valeur la plus ancienne

			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 800105c:	2309      	movs	r3, #9
 800105e:	657b      	str	r3, [r7, #84]	; 0x54
 8001060:	e010      	b.n	8001084 <main+0x2bc>
				pressures[i] = pressures[i-1];
 8001062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001064:	3b01      	subs	r3, #1
 8001066:	3358      	adds	r3, #88	; 0x58
 8001068:	f107 0208 	add.w	r2, r7, #8
 800106c:	4413      	add	r3, r2
 800106e:	f813 1c54 	ldrb.w	r1, [r3, #-84]
 8001072:	f107 020c 	add.w	r2, r7, #12
 8001076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001078:	4413      	add	r3, r2
 800107a:	460a      	mov	r2, r1
 800107c:	701a      	strb	r2, [r3, #0]
			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 800107e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001080:	3b01      	subs	r3, #1
 8001082:	657b      	str	r3, [r7, #84]	; 0x54
 8001084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001086:	2b00      	cmp	r3, #0
 8001088:	dceb      	bgt.n	8001062 <main+0x29a>
			}
			//On ajoute la nouvelle valeure
			pressures[0] = (int)pressure_val;
 800108a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001092:	edc7 7a01 	vstr	s15, [r7, #4]
 8001096:	793b      	ldrb	r3, [r7, #4]
 8001098:	733b      	strb	r3, [r7, #12]

			//puis on fait la moyenne des pressions
			for (int i = 0; i < PRESSURES_SIZE; i++){
 800109a:	2300      	movs	r3, #0
 800109c:	653b      	str	r3, [r7, #80]	; 0x50
 800109e:	e035      	b.n	800110c <main+0x344>
 80010a0:	9999999a 	.word	0x9999999a
 80010a4:	3fb99999 	.word	0x3fb99999
 80010a8:	3d2bde40 	.word	0x3d2bde40
 80010ac:	454cd000 	.word	0x454cd000
 80010b0:	3d20f909 	.word	0x3d20f909
 80010b4:	c01e147b 	.word	0xc01e147b
 80010b8:	bf3d70a4 	.word	0xbf3d70a4
 80010bc:	42d00000 	.word	0x42d00000
 80010c0:	200005e8 	.word	0x200005e8
 80010c4:	48001400 	.word	0x48001400
 80010c8:	200003c0 	.word	0x200003c0
 80010cc:	20000204 	.word	0x20000204
 80010d0:	20000208 	.word	0x20000208
 80010d4:	20000560 	.word	0x20000560
 80010d8:	2000020e 	.word	0x2000020e
 80010dc:	48000400 	.word	0x48000400
 80010e0:	200001f9 	.word	0x200001f9
 80010e4:	200001fc 	.word	0x200001fc
 80010e8:	20000200 	.word	0x20000200
 80010ec:	20000288 	.word	0x20000288
 80010f0:	2000020f 	.word	0x2000020f
				pressures_mean+=pressures[i];
 80010f4:	f107 020c 	add.w	r2, r7, #12
 80010f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001102:	4413      	add	r3, r2
 8001104:	65fb      	str	r3, [r7, #92]	; 0x5c
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8001106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001108:	3301      	adds	r3, #1
 800110a:	653b      	str	r3, [r7, #80]	; 0x50
 800110c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800110e:	2b09      	cmp	r3, #9
 8001110:	ddf0      	ble.n	80010f4 <main+0x32c>
			}
			pressures_mean/=PRESSURES_SIZE;
 8001112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001114:	4aa0      	ldr	r2, [pc, #640]	; (8001398 <main+0x5d0>)
 8001116:	fba2 2303 	umull	r2, r3, r2, r3
 800111a:	08db      	lsrs	r3, r3, #3
 800111c:	65fb      	str	r3, [r7, #92]	; 0x5c

			if (pressures_mean > (Press_order)){ // arrêter compresseur si dépassement de la pression de consigne
 800111e:	4b9f      	ldr	r3, [pc, #636]	; (800139c <main+0x5d4>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001126:	4293      	cmp	r3, r2
 8001128:	d903      	bls.n	8001132 <main+0x36a>
				my_motor_value[4] = 0;
 800112a:	4b9d      	ldr	r3, [pc, #628]	; (80013a0 <main+0x5d8>)
 800112c:	2200      	movs	r2, #0
 800112e:	811a      	strh	r2, [r3, #8]
 8001130:	e00e      	b.n	8001150 <main+0x388>
			}
			else if (pressures_mean < (Press_order - 2)) { // démarrage compresseur avec hysteresis de 0.4 bar
 8001132:	4b9a      	ldr	r3, [pc, #616]	; (800139c <main+0x5d4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3b02      	subs	r3, #2
 8001138:	461a      	mov	r2, r3
 800113a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800113c:	4293      	cmp	r3, r2
 800113e:	d207      	bcs.n	8001150 <main+0x388>
				if(Press_order >= 0 && COMPRESSOR_ENABLE){
 8001140:	4b98      	ldr	r3, [pc, #608]	; (80013a4 <main+0x5dc>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <main+0x388>
					my_motor_value[4] = COMPRESSOR_SPEED;
 8001148:	4b95      	ldr	r3, [pc, #596]	; (80013a0 <main+0x5d8>)
 800114a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800114e:	811a      	strh	r2, [r3, #8]
				else {}
			}
			else {}

			//on remet à 0 la moyenne des pressions
			pressures_mean = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	65fb      	str	r3, [r7, #92]	; 0x5c
		 */

		//Lecture Température du compresseur réservoir et activation ou désactivation du compresseur en fonction SSI il est pas déjà désactivé
		//#####A IMPLEMENTER : Lecture de la température en analogique sonde PT100#####
		//start an ADC conversion
		HAL_ADC_Start(&hadc1);
 8001154:	4894      	ldr	r0, [pc, #592]	; (80013a8 <main+0x5e0>)
 8001156:	f001 fc47 	bl	80029e8 <HAL_ADC_Start>
		//processor waits for an ADC conversion to complete
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800115a:	f04f 31ff 	mov.w	r1, #4294967295
 800115e:	4892      	ldr	r0, [pc, #584]	; (80013a8 <main+0x5e0>)
 8001160:	f001 fcf8 	bl	8002b54 <HAL_ADC_PollForConversion>
		//get raw value from the ADC channel register
		raw = HAL_ADC_GetValue(&hadc1);
 8001164:	4890      	ldr	r0, [pc, #576]	; (80013a8 <main+0x5e0>)
 8001166:	f001 fdc3 	bl	8002cf0 <HAL_ADC_GetValue>
 800116a:	4603      	mov	r3, r0
 800116c:	84fb      	strh	r3, [r7, #38]	; 0x26

		//get temperature value from raw value (100-Ohm = 0°C, 375-Ohm = 800°C)
		//first : conversion from raw value to resistance value : 2790=>112 kOhm, 90=>6 kOhm
		//then : conversion from resistance value to temperature value :  112 kOhm=>22 °c, 6 kOhm=>100°c
		compr_temp = res_to_temp_mult * (raw_to_res_mult * raw + raw_to_res_offset) + res_to_temp_offset;
 800116e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001178:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800117c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001180:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001188:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	edc7 7a08 	vstr	s15, [r7, #32]
		}
		 */


		//Notifier a la Rpi la bonne reception du mot de commande
		return_buffer[0]|= 1;
 800119c:	4b83      	ldr	r3, [pc, #524]	; (80013ac <main+0x5e4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b81      	ldr	r3, [pc, #516]	; (80013ac <main+0x5e4>)
 80011a8:	701a      	strb	r2, [r3, #0]
		//Retourner les infos a la Rpi !
		HAL_UART_Transmit(&huart2, return_buffer, 1, 100);
 80011aa:	2364      	movs	r3, #100	; 0x64
 80011ac:	2201      	movs	r2, #1
 80011ae:	497f      	ldr	r1, [pc, #508]	; (80013ac <main+0x5e4>)
 80011b0:	487f      	ldr	r0, [pc, #508]	; (80013b0 <main+0x5e8>)
 80011b2:	f006 f8c5 	bl	8007340 <HAL_UART_Transmit>
		uint8_t command = dequeue(&command_hist);
 80011b6:	487f      	ldr	r0, [pc, #508]	; (80013b4 <main+0x5ec>)
 80011b8:	f7ff fdc5 	bl	8000d46 <dequeue>
 80011bc:	4603      	mov	r3, r0
 80011be:	77fb      	strb	r3, [r7, #31]
		if(command != -1){
			switch(command >> 6){
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	099b      	lsrs	r3, r3, #6
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	f200 81c7 	bhi.w	800155a <main+0x792>
 80011cc:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <main+0x40c>)
 80011ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d2:	bf00      	nop
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	0800127d 	.word	0x0800127d
 80011dc:	0800134b 	.word	0x0800134b
 80011e0:	080013c1 	.word	0x080013c1
			case 0:
				//Mode 1 [00000001] : Reset nucleo: arrêt de TOUT
				if (command == 1){
 80011e4:	7ffb      	ldrb	r3, [r7, #31]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d130      	bne.n	800124c <main+0x484>
					// arrêt moteurs (compr, canons, turbine)
					my_motor_value[0] = 0;
 80011ea:	4b6d      	ldr	r3, [pc, #436]	; (80013a0 <main+0x5d8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 80011f0:	4b6b      	ldr	r3, [pc, #428]	; (80013a0 <main+0x5d8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 80011f6:	4b6a      	ldr	r3, [pc, #424]	; (80013a0 <main+0x5d8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 80011fc:	4b68      	ldr	r3, [pc, #416]	; (80013a0 <main+0x5d8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 8001202:	4b67      	ldr	r3, [pc, #412]	; (80013a0 <main+0x5d8>)
 8001204:	2200      	movs	r2, #0
 8001206:	811a      	strh	r2, [r3, #8]
					// arrêt EV 1, 2, 3 et Purge
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f002 ff72 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2110      	movs	r1, #16
 8001218:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121c:	f002 ff6c 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2108      	movs	r1, #8
 8001224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001228:	f002 ff66 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2101      	movs	r1, #1
 8001230:	4861      	ldr	r0, [pc, #388]	; (80013b8 <main+0x5f0>)
 8001232:	f002 ff61 	bl	80040f8 <HAL_GPIO_WritePin>
					// arrêt LCD et LED Enable
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2120      	movs	r1, #32
 800123a:	4860      	ldr	r0, [pc, #384]	; (80013bc <main+0x5f4>)
 800123c:	f002 ff5c 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001240:	2200      	movs	r2, #0
 8001242:	2110      	movs	r1, #16
 8001244:	485d      	ldr	r0, [pc, #372]	; (80013bc <main+0x5f4>)
 8001246:	f002 ff57 	bl	80040f8 <HAL_GPIO_WritePin>
					my_motor_value[3] = 0;
					my_motor_value[4] = 0;
					HAL_Delay(2600);
				}

				break;
 800124a:	e183      	b.n	8001554 <main+0x78c>
				else if (command == 2){
 800124c:	7ffb      	ldrb	r3, [r7, #31]
 800124e:	2b02      	cmp	r3, #2
 8001250:	f040 8180 	bne.w	8001554 <main+0x78c>
					my_motor_value[0] = 0;
 8001254:	4b52      	ldr	r3, [pc, #328]	; (80013a0 <main+0x5d8>)
 8001256:	2200      	movs	r2, #0
 8001258:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 800125a:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <main+0x5d8>)
 800125c:	2200      	movs	r2, #0
 800125e:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <main+0x5d8>)
 8001262:	2200      	movs	r2, #0
 8001264:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 8001266:	4b4e      	ldr	r3, [pc, #312]	; (80013a0 <main+0x5d8>)
 8001268:	2200      	movs	r2, #0
 800126a:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 800126c:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <main+0x5d8>)
 800126e:	2200      	movs	r2, #0
 8001270:	811a      	strh	r2, [r3, #8]
					HAL_Delay(2600);
 8001272:	f640 2028 	movw	r0, #2600	; 0xa28
 8001276:	f001 fa01 	bl	800267c <HAL_Delay>
				break;
 800127a:	e16b      	b.n	8001554 <main+0x78c>
			case 1:
				//Mode 2 [01]: Canons
				//ordre des canons : left=1 - right=2 - top=3
				//écriture dans le moteur 1 (left)
				if ((command & 48) >> 4 == 0){
 800127c:	7ffb      	ldrb	r3, [r7, #31]
 800127e:	111b      	asrs	r3, r3, #4
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d103      	bne.n	8001290 <main+0x4c8>
					my_motor_value[0] = 0;
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <main+0x5d8>)
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
 800128e:	e018      	b.n	80012c2 <main+0x4fa>
				}
				else if ((command & 48) >> 4 == 1){
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	111b      	asrs	r3, r3, #4
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d103      	bne.n	80012a4 <main+0x4dc>
					my_motor_value[0] = CANONS_SPEED_1;
 800129c:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <main+0x5d8>)
 800129e:	2264      	movs	r2, #100	; 0x64
 80012a0:	801a      	strh	r2, [r3, #0]
 80012a2:	e00e      	b.n	80012c2 <main+0x4fa>
				}
				else if ((command & 48) >> 4 == 2){
 80012a4:	7ffb      	ldrb	r3, [r7, #31]
 80012a6:	111b      	asrs	r3, r3, #4
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d104      	bne.n	80012ba <main+0x4f2>
					my_motor_value[0] = CANONS_SPEED_2;
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <main+0x5d8>)
 80012b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012b6:	801a      	strh	r2, [r3, #0]
 80012b8:	e003      	b.n	80012c2 <main+0x4fa>
				}
				else{
					my_motor_value[0] = CANONS_SPEED_3;
 80012ba:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <main+0x5d8>)
 80012bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80012c0:	801a      	strh	r2, [r3, #0]
				}

				//écriture dans le moteur 2 (right)
				if ((command & 12) >> 2 == 0){
 80012c2:	7ffb      	ldrb	r3, [r7, #31]
 80012c4:	109b      	asrs	r3, r3, #2
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <main+0x50e>
					my_motor_value[1] = 0;
 80012ce:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <main+0x5d8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	805a      	strh	r2, [r3, #2]
 80012d4:	e018      	b.n	8001308 <main+0x540>
				}
				else if ((command & 12) >> 2 == 1){
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	109b      	asrs	r3, r3, #2
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d103      	bne.n	80012ea <main+0x522>
					my_motor_value[1] = CANONS_SPEED_1;
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <main+0x5d8>)
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	805a      	strh	r2, [r3, #2]
 80012e8:	e00e      	b.n	8001308 <main+0x540>
				}
				else if ((command & 12) >> 2 == 2){
 80012ea:	7ffb      	ldrb	r3, [r7, #31]
 80012ec:	109b      	asrs	r3, r3, #2
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d104      	bne.n	8001300 <main+0x538>
					my_motor_value[1] = CANONS_SPEED_2;
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <main+0x5d8>)
 80012f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012fc:	805a      	strh	r2, [r3, #2]
 80012fe:	e003      	b.n	8001308 <main+0x540>
				}
				else{
					my_motor_value[1] = CANONS_SPEED_3;
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <main+0x5d8>)
 8001302:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001306:	805a      	strh	r2, [r3, #2]
				}

				//écriture dans le moteur 3 (top)
				if ((command & 3) == 0){
 8001308:	7ffb      	ldrb	r3, [r7, #31]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <main+0x552>
					my_motor_value[2] = 0;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <main+0x5d8>)
 8001314:	2200      	movs	r2, #0
 8001316:	809a      	strh	r2, [r3, #4]
				else{
					my_motor_value[2] = CANONS_SPEED_3;
				}


				break;
 8001318:	e11f      	b.n	800155a <main+0x792>
				else if ((command & 3) == 1){
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d103      	bne.n	800132c <main+0x564>
					my_motor_value[2] = CANONS_SPEED_1;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <main+0x5d8>)
 8001326:	2264      	movs	r2, #100	; 0x64
 8001328:	809a      	strh	r2, [r3, #4]
				break;
 800132a:	e116      	b.n	800155a <main+0x792>
				else if ((command & 3) == 2){
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d104      	bne.n	8001340 <main+0x578>
					my_motor_value[2] = CANONS_SPEED_2;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <main+0x5d8>)
 8001338:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800133c:	809a      	strh	r2, [r3, #4]
				break;
 800133e:	e10c      	b.n	800155a <main+0x792>
					my_motor_value[2] = CANONS_SPEED_3;
 8001340:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <main+0x5d8>)
 8001342:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001346:	809a      	strh	r2, [r3, #4]
				break;
 8001348:	e107      	b.n	800155a <main+0x792>
			case 2:
				//Mode 3 [10]: Compresseur / INIT
				//[10000001] : arrêt Compresseur + Consigne Pression => 0 + Purge EV4
				if ((command ^ 129) <= 1){
 800134a:	7ffb      	ldrb	r3, [r7, #31]
 800134c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001350:	43db      	mvns	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d813      	bhi.n	8001380 <main+0x5b8>
					my_motor_value[4] = 0;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <main+0x5d8>)
 800135a:	2200      	movs	r2, #0
 800135c:	811a      	strh	r2, [r3, #8]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, command ^ 128);
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8001364:	43db      	mvns	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	2101      	movs	r1, #1
 800136c:	4812      	ldr	r0, [pc, #72]	; (80013b8 <main+0x5f0>)
 800136e:	f002 fec3 	bl	80040f8 <HAL_GPIO_WritePin>
					Press_order = 0;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <main+0x5d4>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
					COMPRESSOR_ENABLE = 0;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <main+0x5dc>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
					//[10PPPPPP] : Val de consigne Pression, à récup SSI différente pour régulation au prochain tour de boucle
					Press_order = command ^ (2 << 6);
					COMPRESSOR_ENABLE = 1;
				}

				break;
 800137e:	e0ec      	b.n	800155a <main+0x792>
					Press_order = command ^ (2 << 6);
 8001380:	7ffb      	ldrb	r3, [r7, #31]
 8001382:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8001386:	43db      	mvns	r3, r3
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <main+0x5d4>)
 800138c:	701a      	strb	r2, [r3, #0]
					COMPRESSOR_ENABLE = 1;
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <main+0x5dc>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
				break;
 8001394:	e0e1      	b.n	800155a <main+0x792>
 8001396:	bf00      	nop
 8001398:	cccccccd 	.word	0xcccccccd
 800139c:	200001f9 	.word	0x200001f9
 80013a0:	200005e8 	.word	0x200005e8
 80013a4:	200001f8 	.word	0x200001f8
 80013a8:	20000210 	.word	0x20000210
 80013ac:	2000020c 	.word	0x2000020c
 80013b0:	20000560 	.word	0x20000560
 80013b4:	20000204 	.word	0x20000204
 80013b8:	48001400 	.word	0x48001400
 80013bc:	48000400 	.word	0x48000400
			case 3:
				//Mode 4 [11]: electrovannes OU LED OU Turbine OU LCD
				//cas 1 : Electrovannes
				if ((command & 240) >> 4 == 12){
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	091b      	lsrs	r3, r3, #4
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b0c      	cmp	r3, #12
 80013c8:	d12c      	bne.n	8001424 <main+0x65c>
					//4*1 bits(ABCE) pour les EV (ordre du code : A: EV1<->PA7, B: EV2<->PA4, C: EV3<->PA3, E: EV_Purge<->PF0)
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, (command & 0x08) >> 3);
 80013ca:	7ffb      	ldrb	r3, [r7, #31]
 80013cc:	10db      	asrs	r3, r3, #3
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f002 fe8b 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, (command & 0x04) >> 2);
 80013e2:	7ffb      	ldrb	r3, [r7, #31]
 80013e4:	109b      	asrs	r3, r3, #2
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	2110      	movs	r1, #16
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f002 fe7f 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, (command & 0x02) >> 1);
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
 80013fc:	105b      	asrs	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	2108      	movs	r1, #8
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f002 fe73 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOF, GPIO_PIN_0, command & 0x01);
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	2101      	movs	r1, #1
 800141e:	4851      	ldr	r0, [pc, #324]	; (8001564 <main+0x79c>)
 8001420:	f002 fe6a 	bl	80040f8 <HAL_GPIO_WritePin>
				}

				//cas 2 : EV-Pulse [1101000Z] => [0] : rien, [1] pulse ON-OFF-ON 1*, avec intervalle t-pulse_OFF
				if ((command & 240) >> 4 == 13){
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b0d      	cmp	r3, #13
 800142c:	d154      	bne.n	80014d8 <main+0x710>

					//Pulse EV 1
					if ((command & 8) >> 3 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d016      	beq.n	8001466 <main+0x69e>
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f002 fe43 	bl	80040c8 <HAL_GPIO_ReadPin>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00e      	beq.n	8001466 <main+0x69e>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2180      	movs	r1, #128	; 0x80
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f002 fe52 	bl	80040f8 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 8001454:	2096      	movs	r0, #150	; 0x96
 8001456:	f001 f911 	bl	800267c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f002 fe49 	bl	80040f8 <HAL_GPIO_WritePin>
					}
					//Pulse EV 2
					if ((command & 4) >> 2 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 8001466:	7ffb      	ldrb	r3, [r7, #31]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d016      	beq.n	800149e <main+0x6d6>
 8001470:	2110      	movs	r1, #16
 8001472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001476:	f002 fe27 	bl	80040c8 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00e      	beq.n	800149e <main+0x6d6>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2110      	movs	r1, #16
 8001484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001488:	f002 fe36 	bl	80040f8 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 800148c:	2096      	movs	r0, #150	; 0x96
 800148e:	f001 f8f5 	bl	800267c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2110      	movs	r1, #16
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f002 fe2d 	bl	80040f8 <HAL_GPIO_WritePin>
					}
					//Pulse EV 3
					if ((command & 2) >> 1 == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d057      	beq.n	8001558 <main+0x790>
 80014a8:	2108      	movs	r1, #8
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ae:	f002 fe0b 	bl	80040c8 <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d04f      	beq.n	8001558 <main+0x790>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	2108      	movs	r1, #8
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c0:	f002 fe1a 	bl	80040f8 <HAL_GPIO_WritePin>
						HAL_Delay(PULSE_TIME);
 80014c4:	2096      	movs	r0, #150	; 0x96
 80014c6:	f001 f8d9 	bl	800267c <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2108      	movs	r1, #8
 80014ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d2:	f002 fe11 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command & 2);

					//LED
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command & 1);
				}
				break;
 80014d6:	e03f      	b.n	8001558 <main+0x790>
				else if ((command & 240) >> 4 == 14){
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b0e      	cmp	r3, #14
 80014e0:	d120      	bne.n	8001524 <main+0x75c>
					if ((command & 3) == 0){
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d103      	bne.n	80014f4 <main+0x72c>
						my_motor_value[3] = 0;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <main+0x7a0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	80da      	strh	r2, [r3, #6]
				break;
 80014f2:	e031      	b.n	8001558 <main+0x790>
					else if ((command & 3) == 1){
 80014f4:	7ffb      	ldrb	r3, [r7, #31]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d103      	bne.n	8001506 <main+0x73e>
						my_motor_value[3] = TURBINE_SPEED_1;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <main+0x7a0>)
 8001500:	2264      	movs	r2, #100	; 0x64
 8001502:	80da      	strh	r2, [r3, #6]
				break;
 8001504:	e028      	b.n	8001558 <main+0x790>
					else if ((command & 3) == 2){
 8001506:	7ffb      	ldrb	r3, [r7, #31]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d104      	bne.n	800151a <main+0x752>
						my_motor_value[3] = TURBINE_SPEED_2;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <main+0x7a0>)
 8001512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001516:	80da      	strh	r2, [r3, #6]
				break;
 8001518:	e01e      	b.n	8001558 <main+0x790>
						my_motor_value[3] = TURBINE_SPEED_3;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <main+0x7a0>)
 800151c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001520:	80da      	strh	r2, [r3, #6]
				break;
 8001522:	e019      	b.n	8001558 <main+0x790>
				else if ((command & 240) >> 4 == 15){
 8001524:	7ffb      	ldrb	r3, [r7, #31]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b0f      	cmp	r3, #15
 800152c:	d114      	bne.n	8001558 <main+0x790>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command & 2);
 800152e:	7ffb      	ldrb	r3, [r7, #31]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	2120      	movs	r1, #32
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <main+0x7a4>)
 800153c:	f002 fddc 	bl	80040f8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command & 1);
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	2110      	movs	r1, #16
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <main+0x7a4>)
 800154e:	f002 fdd3 	bl	80040f8 <HAL_GPIO_WritePin>
				break;
 8001552:	e001      	b.n	8001558 <main+0x790>
				break;
 8001554:	bf00      	nop
 8001556:	e000      	b.n	800155a <main+0x792>
				break;
 8001558:	bf00      	nop
			}

		}

		HAL_Delay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f001 f88e 	bl	800267c <HAL_Delay>
	{
 8001560:	e4a7      	b.n	8000eb2 <main+0xea>
 8001562:	bf00      	nop
 8001564:	48001400 	.word	0x48001400
 8001568:	200005e8 	.word	0x200005e8
 800156c:	48000400 	.word	0x48000400

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b096      	sub	sp, #88	; 0x58
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800157a:	2228      	movs	r2, #40	; 0x28
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f007 f8f0 	bl	8008764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a4:	2302      	movs	r3, #2
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a8:	2301      	movs	r3, #1
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ac:	2310      	movs	r3, #16
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b0:	2302      	movs	r3, #2
 80015b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b4:	2300      	movs	r3, #0
 80015b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fa38 	bl	8004a38 <HAL_RCC_OscConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80015ce:	f000 fbc5 	bl	8001d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d2:	230f      	movs	r3, #15
 80015d4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 fa61 	bl	8005ab4 <HAL_RCC_ClockConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015f8:	f000 fbb0 	bl	8001d5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80015fc:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 8001600:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001606:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fc84 	bl	8005f20 <HAL_RCCEx_PeriphCLKConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800161e:	f000 fb9d 	bl	8001d5c <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3758      	adds	r7, #88	; 0x58
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001632:	f107 031c 	add.w	r3, r7, #28
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <MX_ADC1_Init+0xdc>)
 8001650:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001654:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001656:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <MX_ADC1_Init+0xdc>)
 8001658:	2200      	movs	r2, #0
 800165a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <MX_ADC1_Init+0xdc>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <MX_ADC1_Init+0xdc>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <MX_ADC1_Init+0xdc>)
 800166a:	2200      	movs	r2, #0
 800166c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <MX_ADC1_Init+0xdc>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <MX_ADC1_Init+0xdc>)
 8001678:	2200      	movs	r2, #0
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_ADC1_Init+0xdc>)
 800167e:	2201      	movs	r2, #1
 8001680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_ADC1_Init+0xdc>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_ADC1_Init+0xdc>)
 800168a:	2201      	movs	r2, #1
 800168c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_ADC1_Init+0xdc>)
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_ADC1_Init+0xdc>)
 8001698:	2204      	movs	r2, #4
 800169a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_ADC1_Init+0xdc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_ADC1_Init+0xdc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a8:	4817      	ldr	r0, [pc, #92]	; (8001708 <MX_ADC1_Init+0xdc>)
 80016aa:	f001 f80b 	bl	80026c4 <HAL_ADC_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80016b4:	f000 fb52 	bl	8001d5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_ADC1_Init+0xdc>)
 80016c4:	f001 fde2 	bl	800328c <HAL_ADCEx_MultiModeConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80016ce:	f000 fb45 	bl	8001d5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	; (8001708 <MX_ADC1_Init+0xdc>)
 80016f0:	f001 fb0c 	bl	8002d0c <HAL_ADC_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80016fa:	f000 fb2f 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3728      	adds	r7, #40	; 0x28
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000210 	.word	0x20000210

0800170c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_CAN_Init+0x60>)
 8001712:	4a17      	ldr	r2, [pc, #92]	; (8001770 <MX_CAN_Init+0x64>)
 8001714:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_CAN_Init+0x60>)
 8001718:	2210      	movs	r2, #16
 800171a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_CAN_Init+0x60>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_CAN_Init+0x60>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <MX_CAN_Init+0x60>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_CAN_Init+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <MX_CAN_Init+0x60>)
 8001736:	2200      	movs	r2, #0
 8001738:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_CAN_Init+0x60>)
 800173c:	2200      	movs	r2, #0
 800173e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_CAN_Init+0x60>)
 8001742:	2200      	movs	r2, #0
 8001744:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_CAN_Init+0x60>)
 8001748:	2200      	movs	r2, #0
 800174a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_CAN_Init+0x60>)
 800174e:	2200      	movs	r2, #0
 8001750:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_CAN_Init+0x60>)
 8001754:	2200      	movs	r2, #0
 8001756:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_CAN_Init+0x60>)
 800175a:	f001 ff27 	bl	80035ac <HAL_CAN_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001764:	f000 fafa 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000260 	.word	0x20000260
 8001770:	40006400 	.word	0x40006400

08001774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <MX_I2C1_Init+0x78>)
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <MX_I2C1_Init+0x7c>)
 800177c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020C;
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <MX_I2C1_Init+0x78>)
 8001780:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8001784:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001786:	4b19      	ldr	r3, [pc, #100]	; (80017ec <MX_I2C1_Init+0x78>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <MX_I2C1_Init+0x78>)
 800178e:	2201      	movs	r2, #1
 8001790:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <MX_I2C1_Init+0x78>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_I2C1_Init+0x78>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_I2C1_Init+0x78>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_I2C1_Init+0x78>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_I2C1_Init+0x78>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017b0:	480e      	ldr	r0, [pc, #56]	; (80017ec <MX_I2C1_Init+0x78>)
 80017b2:	f002 fcb9 	bl	8004128 <HAL_I2C_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017bc:	f000 face 	bl	8001d5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80017c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <MX_I2C1_Init+0x78>)
 80017c6:	f003 f87f 	bl	80048c8 <HAL_I2CEx_ConfigAnalogFilter>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80017d0:	f000 fac4 	bl	8001d5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017d4:	2100      	movs	r1, #0
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_I2C1_Init+0x78>)
 80017d8:	f003 f8c1 	bl	800495e <HAL_I2CEx_ConfigDigitalFilter>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80017e2:	f000 fabb 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000288 	.word	0x20000288
 80017f0:	40005400 	.word	0x40005400

080017f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b096      	sub	sp, #88	; 0x58
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	222c      	movs	r2, #44	; 0x2c
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f006 ff9f 	bl	8008764 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001826:	4b39      	ldr	r3, [pc, #228]	; (800190c <MX_TIM1_Init+0x118>)
 8001828:	4a39      	ldr	r2, [pc, #228]	; (8001910 <MX_TIM1_Init+0x11c>)
 800182a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <MX_TIM1_Init+0x118>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <MX_TIM1_Init+0x118>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001838:	4b34      	ldr	r3, [pc, #208]	; (800190c <MX_TIM1_Init+0x118>)
 800183a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <MX_TIM1_Init+0x118>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <MX_TIM1_Init+0x118>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <MX_TIM1_Init+0x118>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001852:	482e      	ldr	r0, [pc, #184]	; (800190c <MX_TIM1_Init+0x118>)
 8001854:	f004 fd3e 	bl	80062d4 <HAL_TIM_PWM_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800185e:	f000 fa7d 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001872:	4619      	mov	r1, r3
 8001874:	4825      	ldr	r0, [pc, #148]	; (800190c <MX_TIM1_Init+0x118>)
 8001876:	f005 fc11 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001880:	f000 fa6c 	bl	8001d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001884:	2360      	movs	r3, #96	; 0x60
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188c:	2300      	movs	r3, #0
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4818      	ldr	r0, [pc, #96]	; (800190c <MX_TIM1_Init+0x118>)
 80018aa:	f004 ff77 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80018b4:	f000 fa52 	bl	8001d5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4807      	ldr	r0, [pc, #28]	; (800190c <MX_TIM1_Init+0x118>)
 80018ee:	f005 fc43 	bl	8007178 <HAL_TIMEx_ConfigBreakDeadTime>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80018f8:	f000 fa30 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <MX_TIM1_Init+0x118>)
 80018fe:	f000 fc79 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8001902:	bf00      	nop
 8001904:	3758      	adds	r7, #88	; 0x58
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002dc 	.word	0x200002dc
 8001910:	40012c00 	.word	0x40012c00

08001914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	463b      	mov	r3, r7
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]
 8001936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <MX_TIM2_Init+0xc4>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <MX_TIM2_Init+0xc4>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <MX_TIM2_Init+0xc4>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800194c:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <MX_TIM2_Init+0xc4>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <MX_TIM2_Init+0xc4>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <MX_TIM2_Init+0xc4>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800195e:	481e      	ldr	r0, [pc, #120]	; (80019d8 <MX_TIM2_Init+0xc4>)
 8001960:	f004 fcb8 	bl	80062d4 <HAL_TIM_PWM_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800196a:	f000 f9f7 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4816      	ldr	r0, [pc, #88]	; (80019d8 <MX_TIM2_Init+0xc4>)
 800197e:	f005 fb8d 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001988:	f000 f9e8 	bl	8001d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198c:	2360      	movs	r3, #96	; 0x60
 800198e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	480d      	ldr	r0, [pc, #52]	; (80019d8 <MX_TIM2_Init+0xc4>)
 80019a4:	f004 fefa 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80019ae:	f000 f9d5 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b2:	463b      	mov	r3, r7
 80019b4:	2208      	movs	r2, #8
 80019b6:	4619      	mov	r1, r3
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <MX_TIM2_Init+0xc4>)
 80019ba:	f004 feef 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019c4:	f000 f9ca 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <MX_TIM2_Init+0xc4>)
 80019ca:	f000 fc13 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 80019ce:	bf00      	nop
 80019d0:	3728      	adds	r7, #40	; 0x28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000328 	.word	0x20000328

080019dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a02:	4a28      	ldr	r2, [pc, #160]	; (8001aa4 <MX_TIM3_Init+0xc8>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a06:	4b26      	ldr	r3, [pc, #152]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a26:	481e      	ldr	r0, [pc, #120]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a28:	f004 fc54 	bl	80062d4 <HAL_TIM_PWM_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a32:	f000 f993 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a46:	f005 fb29 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a50:	f000 f984 	bl	8001d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a54:	2360      	movs	r3, #96	; 0x60
 8001a56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	2200      	movs	r2, #0
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a6c:	f004 fe96 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001a76:	f000 f971 	bl	8001d5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a82:	f004 fe8b 	bl	800679c <HAL_TIM_PWM_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a8c:	f000 f966 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <MX_TIM3_Init+0xc4>)
 8001a92:	f000 fbaf 	bl	80021f4 <HAL_TIM_MspPostInit>

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000374 	.word	0x20000374
 8001aa4:	40000400 	.word	0x40000400

08001aa8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_TIM6_Init+0x64>)
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <MX_TIM6_Init+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <MX_TIM6_Init+0x64>)
 8001ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <MX_TIM6_Init+0x64>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 24;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <MX_TIM6_Init+0x64>)
 8001ace:	2218      	movs	r2, #24
 8001ad0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_TIM6_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_TIM6_Init+0x64>)
 8001ada:	f004 fb47 	bl	800616c <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ae4:	f000 f93a 	bl	8001d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM6_Init+0x64>)
 8001af6:	f005 fad1 	bl	800709c <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001b00:	f000 f92c 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200003c0 	.word	0x200003c0
 8001b10:	40001000 	.word	0x40001000

08001b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b1a:	4a15      	ldr	r2, [pc, #84]	; (8001b70 <MX_USART2_UART_Init+0x5c>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_USART2_UART_Init+0x58>)
 8001b58:	f005 fba4 	bl	80072a4 <HAL_UART_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b62:	f000 f8fb 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000560 	.word	0x20000560
 8001b70:	40004400 	.word	0x40004400

08001b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_DMA_Init+0x78>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	4a1b      	ldr	r2, [pc, #108]	; (8001bec <MX_DMA_Init+0x78>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6153      	str	r3, [r2, #20]
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_DMA_Init+0x78>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	200b      	movs	r0, #11
 8001b98:	f001 fedf 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b9c:	200b      	movs	r0, #11
 8001b9e:	f001 fef8 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	200c      	movs	r0, #12
 8001ba8:	f001 fed7 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bac:	200c      	movs	r0, #12
 8001bae:	f001 fef0 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200d      	movs	r0, #13
 8001bb8:	f001 fecf 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bbc:	200d      	movs	r0, #13
 8001bbe:	f001 fee8 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	200f      	movs	r0, #15
 8001bc8:	f001 fec7 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001bcc:	200f      	movs	r0, #15
 8001bce:	f001 fee0 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2010      	movs	r0, #16
 8001bd8:	f001 febf 	bl	800395a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001bdc:	2010      	movs	r0, #16
 8001bde:	f001 fed8 	bl	8003992 <HAL_NVIC_EnableIRQ>

}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000

08001bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c06:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	4a36      	ldr	r2, [pc, #216]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c10:	6153      	str	r3, [r2, #20]
 8001c12:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	4a30      	ldr	r2, [pc, #192]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	6153      	str	r3, [r2, #20]
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6153      	str	r3, [r2, #20]
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <MX_GPIO_Init+0xf4>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_Output_EV_P_GPIO_Port, GPIO_Output_EV_P_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2101      	movs	r1, #1
 8001c52:	4825      	ldr	r0, [pc, #148]	; (8001ce8 <MX_GPIO_Init+0xf8>)
 8001c54:	f002 fa50 	bl	80040f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2198      	movs	r1, #152	; 0x98
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f002 fa4a 	bl	80040f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2138      	movs	r1, #56	; 0x38
 8001c68:	4820      	ldr	r0, [pc, #128]	; (8001cec <MX_GPIO_Init+0xfc>)
 8001c6a:	f002 fa45 	bl	80040f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_Output_EV_P_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_EV_P_Pin;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_Output_EV_P_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	4619      	mov	r1, r3
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <MX_GPIO_Init+0xf8>)
 8001c86:	f002 f8ad 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_AU_STATUS_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_AU_STATUS_Pin;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_Input_AU_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <MX_GPIO_Init+0xf8>)
 8001c9e:	f002 f8a1 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Output_EV_3_Pin GPIO_Output_EV_2_Pin GPIO_Output_EV_1_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin;
 8001ca2:	2398      	movs	r3, #152	; 0x98
 8001ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cbc:	f002 f892 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Built_in_LED_Pin GPIO_Output_LED_EN_Pin GPIO_Output_LCD_EN_Pin */
  GPIO_InitStruct.Pin = Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin;
 8001cc0:	2338      	movs	r3, #56	; 0x38
 8001cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_GPIO_Init+0xfc>)
 8001cd8:	f002 f884 	bl	8003de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cdc:	bf00      	nop
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	48001400 	.word	0x48001400
 8001cec:	48000400 	.word	0x48000400

08001cf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d102      	bne.n	8001d0a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		dshot_write(my_motor_value);
 8001d04:	4811      	ldr	r0, [pc, #68]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001d06:	f7fe fdab 	bl	8000860 <dshot_write>
	}
	//on start la tempo si le BAU est enclenché
	if (BAU_tick_enable == 1){
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d115      	bne.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x4e>
		BAU_tick++;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d1a:	6013      	str	r3, [r2, #0]
		// on purge quand on veut purger, 1000 => 1s
		if (BAU_tick > 30000){
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d24:	4293      	cmp	r3, r2
 8001d26:	dd0a      	ble.n	8001d3e <HAL_TIM_PeriodElapsedCallback+0x4e>
			BAU_tick = 0;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
			BAU_tick_enable = 0;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	2101      	movs	r1, #1
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d3a:	f002 f9dd 	bl	80040f8 <HAL_GPIO_WritePin>
		}
	}
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200003c0 	.word	0x200003c0
 8001d4c:	200005e8 	.word	0x200005e8
 8001d50:	20000200 	.word	0x20000200
 8001d54:	200001fc 	.word	0x200001fc
 8001d58:	48001400 	.word	0x48001400

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d64:	e7fe      	b.n	8001d64 <Error_Handler+0x8>
	...

08001d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_MspInit+0x44>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_MspInit+0x44>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_MspInit+0x44>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_MspInit+0x44>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_MspInit+0x44>)
 8001d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d90:	61d3      	str	r3, [r2, #28]
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_MspInit+0x44>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000

08001db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dd0:	d124      	bne.n	8001e1c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_ADC_MspInit+0x74>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <HAL_ADC_MspInit+0x74>)
 8001dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	6153      	str	r3, [r2, #20]
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_ADC_MspInit+0x74>)
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <HAL_ADC_MspInit+0x74>)
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_ADC_MspInit+0x74>)
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	6153      	str	r3, [r2, #20]
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_ADC_MspInit+0x74>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_A_TEMP_Pin|ADC2_IN_A_PRESS_Pin;
 8001e02:	2303      	movs	r3, #3
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f001 ffe4 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a18      	ldr	r2, [pc, #96]	; (8001ea8 <HAL_CAN_MspInit+0x80>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d129      	bne.n	8001e9e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e4a:	4b18      	ldr	r3, [pc, #96]	; (8001eac <HAL_CAN_MspInit+0x84>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_CAN_MspInit+0x84>)
 8001e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_CAN_MspInit+0x84>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_CAN_MspInit+0x84>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_CAN_MspInit+0x84>)
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	6153      	str	r3, [r2, #20]
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <HAL_CAN_MspInit+0x84>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RD_Pin|CAN_TD_Pin;
 8001e7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001e8c:	2309      	movs	r3, #9
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9a:	f001 ffa3 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40006400 	.word	0x40006400
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	; (8001f3c <HAL_I2C_MspInit+0x8c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d12f      	bne.n	8001f32 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_I2C_MspInit+0x90>)
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	4a1a      	ldr	r2, [pc, #104]	; (8001f40 <HAL_I2C_MspInit+0x90>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6153      	str	r3, [r2, #20]
 8001ede:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_I2C_MspInit+0x90>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eea:	23c0      	movs	r3, #192	; 0xc0
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eee:	2312      	movs	r3, #18
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001efa:	2304      	movs	r3, #4
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	480f      	ldr	r0, [pc, #60]	; (8001f44 <HAL_I2C_MspInit+0x94>)
 8001f06:	f001 ff6d 	bl	8003de4 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001f0a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001f0e:	f002 fd73 	bl	80049f8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001f12:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001f16:	f002 fd6f 	bl	80049f8 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_I2C_MspInit+0x90>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	4a08      	ldr	r2, [pc, #32]	; (8001f40 <HAL_I2C_MspInit+0x90>)
 8001f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f24:	61d3      	str	r3, [r2, #28]
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_I2C_MspInit+0x90>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	; 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40005400 	.word	0x40005400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000400 	.word	0x48000400

08001f48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a87      	ldr	r2, [pc, #540]	; (8002174 <HAL_TIM_PWM_MspInit+0x22c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d135      	bne.n	8001fc6 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5a:	4b87      	ldr	r3, [pc, #540]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4a86      	ldr	r2, [pc, #536]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 8001f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f64:	6193      	str	r3, [r2, #24]
 8001f66:	4b84      	ldr	r3, [pc, #528]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001f72:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001f74:	4a82      	ldr	r2, [pc, #520]	; (8002180 <HAL_TIM_PWM_MspInit+0x238>)
 8001f76:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f78:	4b80      	ldr	r3, [pc, #512]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f84:	4b7d      	ldr	r3, [pc, #500]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f8a:	4b7c      	ldr	r3, [pc, #496]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f90:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f92:	4b7a      	ldr	r3, [pc, #488]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f98:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001f9a:	4b78      	ldr	r3, [pc, #480]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001fa0:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001fa8:	4874      	ldr	r0, [pc, #464]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001faa:	f001 fd0c 	bl	80039c6 <HAL_DMA_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8001fb4:	f7ff fed2 	bl	8001d5c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a70      	ldr	r2, [pc, #448]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8001fbe:	4a6f      	ldr	r2, [pc, #444]	; (800217c <HAL_TIM_PWM_MspInit+0x234>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fc4:	e0d2      	b.n	800216c <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fce:	d15e      	bne.n	800208e <HAL_TIM_PWM_MspInit+0x146>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fd0:	4b69      	ldr	r3, [pc, #420]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	4a68      	ldr	r2, [pc, #416]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	61d3      	str	r3, [r2, #28]
 8001fdc:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	613b      	str	r3, [r7, #16]
 8001fe6:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001fe8:	4b66      	ldr	r3, [pc, #408]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8001fea:	4a67      	ldr	r2, [pc, #412]	; (8002188 <HAL_TIM_PWM_MspInit+0x240>)
 8001fec:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fee:	4b65      	ldr	r3, [pc, #404]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff4:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ffa:	4b62      	ldr	r3, [pc, #392]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002000:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8002002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002006:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002008:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 800200a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800200e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002010:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002016:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8002018:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800201e:	4859      	ldr	r0, [pc, #356]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8002020:	f001 fcd1 	bl	80039c6 <HAL_DMA_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_TIM_PWM_MspInit+0xe6>
      Error_Handler();
 800202a:	f7ff fe97 	bl	8001d5c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a54      	ldr	r2, [pc, #336]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
 8002034:	4a53      	ldr	r2, [pc, #332]	; (8002184 <HAL_TIM_PWM_MspInit+0x23c>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 800203c:	4a54      	ldr	r2, [pc, #336]	; (8002190 <HAL_TIM_PWM_MspInit+0x248>)
 800203e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 8002042:	2210      	movs	r2, #16
 8002044:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002046:	4b51      	ldr	r3, [pc, #324]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800204c:	4b4f      	ldr	r3, [pc, #316]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 800204e:	2280      	movs	r2, #128	; 0x80
 8002050:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 8002054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002058:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 800205c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002060:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002062:	4b4a      	ldr	r3, [pc, #296]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8002068:	4b48      	ldr	r3, [pc, #288]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 800206a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800206e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002070:	4846      	ldr	r0, [pc, #280]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 8002072:	f001 fca8 	bl	80039c6 <HAL_DMA_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_TIM_PWM_MspInit+0x138>
      Error_Handler();
 800207c:	f7ff fe6e 	bl	8001d5c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a42      	ldr	r2, [pc, #264]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
 8002086:	4a41      	ldr	r2, [pc, #260]	; (800218c <HAL_TIM_PWM_MspInit+0x244>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800208c:	e06e      	b.n	800216c <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM3)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <HAL_TIM_PWM_MspInit+0x24c>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d169      	bne.n	800216c <HAL_TIM_PWM_MspInit+0x224>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	4a36      	ldr	r2, [pc, #216]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 800209e:	f043 0302 	orr.w	r3, r3, #2
 80020a2:	61d3      	str	r3, [r2, #28]
 80020a4:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_TIM_PWM_MspInit+0x230>)
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 80020b0:	4b39      	ldr	r3, [pc, #228]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020b2:	4a3a      	ldr	r2, [pc, #232]	; (800219c <HAL_TIM_PWM_MspInit+0x254>)
 80020b4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020b8:	2210      	movs	r2, #16
 80020ba:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020c4:	2280      	movs	r2, #128	; 0x80
 80020c6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ce:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020d0:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80020d8:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80020e6:	482c      	ldr	r0, [pc, #176]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020e8:	f001 fc6d 	bl	80039c6 <HAL_DMA_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_TIM_PWM_MspInit+0x1ae>
      Error_Handler();
 80020f2:	f7ff fe33 	bl	8001d5c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a27      	ldr	r2, [pc, #156]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
 8002108:	4a23      	ldr	r2, [pc, #140]	; (8002198 <HAL_TIM_PWM_MspInit+0x250>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <HAL_TIM_PWM_MspInit+0x25c>)
 8002112:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002116:	2210      	movs	r2, #16
 8002118:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800212c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002134:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 800213e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002142:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002144:	4816      	ldr	r0, [pc, #88]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002146:	f001 fc3e 	bl	80039c6 <HAL_DMA_Init>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_TIM_PWM_MspInit+0x20c>
      Error_Handler();
 8002150:	f7ff fe04 	bl	8001d5c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
 800215a:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002164:	621a      	str	r2, [r3, #32]
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_TIM_PWM_MspInit+0x258>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800216c:	bf00      	nop
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40021000 	.word	0x40021000
 800217c:	2000040c 	.word	0x2000040c
 8002180:	4002001c 	.word	0x4002001c
 8002184:	20000450 	.word	0x20000450
 8002188:	40020058 	.word	0x40020058
 800218c:	20000494 	.word	0x20000494
 8002190:	40020008 	.word	0x40020008
 8002194:	40000400 	.word	0x40000400
 8002198:	200004d8 	.word	0x200004d8
 800219c:	4002006c 	.word	0x4002006c
 80021a0:	2000051c 	.word	0x2000051c
 80021a4:	40020030 	.word	0x40020030

080021a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_TIM_Base_MspInit+0x44>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d113      	bne.n	80021e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a0c      	ldr	r2, [pc, #48]	; (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2036      	movs	r0, #54	; 0x36
 80021d8:	f001 fbbf 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80021dc:	2036      	movs	r0, #54	; 0x36
 80021de:	f001 fbd8 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40001000 	.word	0x40001000
 80021f0:	40021000 	.word	0x40021000

080021f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b08c      	sub	sp, #48	; 0x30
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a4c      	ldr	r2, [pc, #304]	; (8002344 <HAL_TIM_MspPostInit+0x150>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d11e      	bne.n	8002254 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4a4b      	ldr	r2, [pc, #300]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	6153      	str	r3, [r2, #20]
 8002222:	4b49      	ldr	r3, [pc, #292]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	61bb      	str	r3, [r7, #24]
 800222c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_DS_M3_Pin;
 800222e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002240:	2306      	movs	r3, #6
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH1_DS_M3_GPIO_Port, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224e:	f001 fdc9 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002252:	e072      	b.n	800233a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225c:	d12f      	bne.n	80022be <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	4a39      	ldr	r2, [pc, #228]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 8002264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002268:	6153      	str	r3, [r2, #20]
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_DS_COMP_Pin;
 8002276:	2320      	movs	r3, #32
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002286:	2301      	movs	r3, #1
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_DS_COMP_GPIO_Port, &GPIO_InitStruct);
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4619      	mov	r1, r3
 8002290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002294:	f001 fda6 	bl	8003de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_DS_M1_Pin;
 8002298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80022aa:	230a      	movs	r3, #10
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_DS_M1_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	4619      	mov	r1, r3
 80022b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b8:	f001 fd94 	bl	8003de4 <HAL_GPIO_Init>
}
 80022bc:	e03d      	b.n	800233a <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a22      	ldr	r2, [pc, #136]	; (800234c <HAL_TIM_MspPostInit+0x158>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d138      	bne.n	800233a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 80022ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d2:	6153      	str	r3, [r2, #20]
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	4a18      	ldr	r2, [pc, #96]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 80022e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ea:	6153      	str	r3, [r2, #20]
 80022ec:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_TIM_MspPostInit+0x154>)
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_DS_TURB_Pin;
 80022f8:	2340      	movs	r3, #64	; 0x40
 80022fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002304:	2300      	movs	r3, #0
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002308:	2302      	movs	r3, #2
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_DS_TURB_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4619      	mov	r1, r3
 8002312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002316:	f001 fd65 	bl	8003de4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4_DS_M2_Pin;
 800231a:	2302      	movs	r3, #2
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002326:	2300      	movs	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800232a:	2302      	movs	r3, #2
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH4_DS_M2_GPIO_Port, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <HAL_TIM_MspPostInit+0x15c>)
 8002336:	f001 fd55 	bl	8003de4 <HAL_GPIO_Init>
}
 800233a:	bf00      	nop
 800233c:	3730      	adds	r7, #48	; 0x30
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40021000 	.word	0x40021000
 800234c:	40000400 	.word	0x40000400
 8002350:	48000400 	.word	0x48000400

08002354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1c      	ldr	r2, [pc, #112]	; (80023e4 <HAL_UART_MspInit+0x90>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d131      	bne.n	80023da <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002376:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_UART_MspInit+0x94>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a1b      	ldr	r2, [pc, #108]	; (80023e8 <HAL_UART_MspInit+0x94>)
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_UART_MspInit+0x94>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_UART_MspInit+0x94>)
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <HAL_UART_MspInit+0x94>)
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	6153      	str	r3, [r2, #20]
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_UART_MspInit+0x94>)
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80023a6:	f248 0304 	movw	r3, #32772	; 0x8004
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b8:	2307      	movs	r3, #7
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c6:	f001 fd0d 	bl	8003de4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2026      	movs	r0, #38	; 0x26
 80023d0:	f001 fac3 	bl	800395a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023d4:	2026      	movs	r0, #38	; 0x26
 80023d6:	f001 fadc 	bl	8003992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023da:	bf00      	nop
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40004400 	.word	0x40004400
 80023e8:	40021000 	.word	0x40021000

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <NMI_Handler+0x4>

080023f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <HardFault_Handler+0x4>

080023f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <MemManage_Handler+0x4>

080023fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002402:	e7fe      	b.n	8002402 <BusFault_Handler+0x4>

08002404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002408:	e7fe      	b.n	8002408 <UsageFault_Handler+0x4>

0800240a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002438:	f000 f900 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}

08002440 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <DMA1_Channel1_IRQHandler+0x10>)
 8002446:	f001 fbdb 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000494 	.word	0x20000494

08002454 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <DMA1_Channel2_IRQHandler+0x10>)
 800245a:	f001 fbd1 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000040c 	.word	0x2000040c

08002468 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <DMA1_Channel3_IRQHandler+0x10>)
 800246e:	f001 fbc7 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000051c 	.word	0x2000051c

0800247c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Channel5_IRQHandler+0x10>)
 8002482:	f001 fbbd 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000450 	.word	0x20000450

08002490 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <DMA1_Channel6_IRQHandler+0x10>)
 8002496:	f001 fbb3 	bl	8003c00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200004d8 	.word	0x200004d8

080024a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <USART2_IRQHandler+0x10>)
 80024aa:	f005 f817 	bl	80074dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000560 	.word	0x20000560

080024b8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <TIM6_DAC1_IRQHandler+0x10>)
 80024be:	f004 f84d 	bl	800655c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200003c0 	.word	0x200003c0

080024cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <_sbrk+0x5c>)
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <_sbrk+0x60>)
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <_sbrk+0x64>)
 80024ea:	4a12      	ldr	r2, [pc, #72]	; (8002534 <_sbrk+0x68>)
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d207      	bcs.n	800250c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024fc:	f006 f8f8 	bl	80086f0 <__errno>
 8002500:	4603      	mov	r3, r0
 8002502:	220c      	movs	r2, #12
 8002504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	e009      	b.n	8002520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <_sbrk+0x64>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <_sbrk+0x64>)
 800251c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800251e:	68fb      	ldr	r3, [r7, #12]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3718      	adds	r7, #24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20003000 	.word	0x20003000
 800252c:	00000400 	.word	0x00000400
 8002530:	200005f4 	.word	0x200005f4
 8002534:	20000610 	.word	0x20000610

08002538 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800255c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002594 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002560:	f7ff ffea 	bl	8002538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002564:	480c      	ldr	r0, [pc, #48]	; (8002598 <LoopForever+0x6>)
  ldr r1, =_edata
 8002566:	490d      	ldr	r1, [pc, #52]	; (800259c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002568:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <LoopForever+0xe>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800256c:	e002      	b.n	8002574 <LoopCopyDataInit>

0800256e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002572:	3304      	adds	r3, #4

08002574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002578:	d3f9      	bcc.n	800256e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800257c:	4c0a      	ldr	r4, [pc, #40]	; (80025a8 <LoopForever+0x16>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002580:	e001      	b.n	8002586 <LoopFillZerobss>

08002582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002584:	3204      	adds	r2, #4

08002586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002588:	d3fb      	bcc.n	8002582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258a:	f006 f8b7 	bl	80086fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800258e:	f7fe fc1b 	bl	8000dc8 <main>

08002592 <LoopForever>:

LoopForever:
    b LoopForever
 8002592:	e7fe      	b.n	8002592 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002594:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800259c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025a0:	08008a50 	.word	0x08008a50
  ldr r2, =_sbss
 80025a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025a8:	2000060c 	.word	0x2000060c

080025ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC1_2_IRQHandler>
	...

080025b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x28>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x28>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f001 f9bf 	bl	8003944 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	2003      	movs	r0, #3
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fbcc 	bl	8001d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000

080025dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 f9d7 	bl	80039ae <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	f001 f99f 	bl	800395a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000000 	.word	0x20000000
 8002634:	20000008 	.word	0x20000008
 8002638:	20000004 	.word	0x20000004

0800263c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008
 8002660:	200005f8 	.word	0x200005f8

08002664 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;  
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200005f8 	.word	0x200005f8

0800267c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff ffee 	bl	8002664 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_Delay+0x44>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffde 	bl	8002664 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000008 	.word	0x20000008

080026c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b09a      	sub	sp, #104	; 0x68
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e172      	b.n	80029ca <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d176      	bne.n	80027e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d152      	bne.n	80027a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff fb49 	bl	8001db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d13b      	bne.n	80027a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fed7 	bl	80034e0 <ADC_Disable>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	2b00      	cmp	r3, #0
 8002742:	d12f      	bne.n	80027a4 <HAL_ADC_Init+0xe0>
 8002744:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002748:	2b00      	cmp	r3, #0
 800274a:	d12b      	bne.n	80027a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002754:	f023 0302 	bic.w	r3, r3, #2
 8002758:	f043 0202 	orr.w	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800276e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800277e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002780:	4b94      	ldr	r3, [pc, #592]	; (80029d4 <HAL_ADC_Init+0x310>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a94      	ldr	r2, [pc, #592]	; (80029d8 <HAL_ADC_Init+0x314>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0c9a      	lsrs	r2, r3, #18
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002796:	e002      	b.n	800279e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	3b01      	subs	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f9      	bne.n	8002798 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c0:	d110      	bne.n	80027e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f023 0312 	bic.w	r3, r3, #18
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 80df 	bne.w	80029b0 <HAL_ADC_Init+0x2ec>
 80027f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 80da 	bne.w	80029b0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 80d2 	bne.w	80029b0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002814:	f043 0202 	orr.w	r2, r3, #2
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281c:	4b6f      	ldr	r3, [pc, #444]	; (80029dc <HAL_ADC_Init+0x318>)
 800281e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002828:	d102      	bne.n	8002830 <HAL_ADC_Init+0x16c>
 800282a:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_ADC_Init+0x31c>)
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e002      	b.n	8002836 <HAL_ADC_Init+0x172>
 8002830:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002834:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d108      	bne.n	8002856 <HAL_ADC_Init+0x192>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_ADC_Init+0x192>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_ADC_Init+0x194>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d11c      	bne.n	8002896 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800285c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d010      	beq.n	8002884 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_ADC_Init+0x1ba>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_ADC_Init+0x1ba>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_ADC_Init+0x1bc>
 800287e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002880:	2b00      	cmp	r3, #0
 8002882:	d108      	bne.n	8002896 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	431a      	orrs	r2, r3
 8002892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002894:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7e5b      	ldrb	r3, [r3, #25]
 800289a:	035b      	lsls	r3, r3, #13
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028a0:	2a01      	cmp	r2, #1
 80028a2:	d002      	beq.n	80028aa <HAL_ADC_Init+0x1e6>
 80028a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028a8:	e000      	b.n	80028ac <HAL_ADC_Init+0x1e8>
 80028aa:	2200      	movs	r2, #0
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028bc:	4313      	orrs	r3, r2
 80028be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d11b      	bne.n	8002902 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7e5b      	ldrb	r3, [r3, #25]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	3b01      	subs	r3, #1
 80028d8:	045a      	lsls	r2, r3, #17
 80028da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028dc:	4313      	orrs	r3, r2
 80028de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e2:	663b      	str	r3, [r7, #96]	; 0x60
 80028e4:	e00d      	b.n	8002902 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f043 0201 	orr.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	2b01      	cmp	r3, #1
 8002908:	d007      	beq.n	800291a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	4313      	orrs	r3, r2
 8002914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002916:	4313      	orrs	r3, r2
 8002918:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b00      	cmp	r3, #0
 8002926:	d114      	bne.n	8002952 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002936:	f023 0302 	bic.w	r3, r3, #2
 800293a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e1b      	ldrb	r3, [r3, #24]
 8002940:	039a      	lsls	r2, r3, #14
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4313      	orrs	r3, r2
 800294c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800294e:	4313      	orrs	r3, r2
 8002950:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <HAL_ADC_Init+0x320>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002962:	430b      	orrs	r3, r1
 8002964:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10c      	bne.n	8002988 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	f023 010f 	bic.w	r1, r3, #15
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	430a      	orrs	r2, r1
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
 8002986:	e007      	b.n	8002998 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 020f 	bic.w	r2, r2, #15
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
 80029ae:	e00a      	b.n	80029c6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f023 0312 	bic.w	r3, r3, #18
 80029b8:	f043 0210 	orr.w	r2, r3, #16
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80029c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3768      	adds	r7, #104	; 0x68
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000
 80029d8:	431bde83 	.word	0x431bde83
 80029dc:	50000300 	.word	0x50000300
 80029e0:	50000100 	.word	0x50000100
 80029e4:	fff0c007 	.word	0xfff0c007

080029e8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f040 809c 	bne.w	8002b3c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_Start+0x2a>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e097      	b.n	8002b42 <HAL_ADC_Start+0x15a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fcfc 	bl	8003418 <ADC_Enable>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 8083 	bne.w	8002b32 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a40:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <HAL_ADC_Start+0x164>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <HAL_ADC_Start+0x6e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a54:	d115      	bne.n	8002a82 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d027      	beq.n	8002ac0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002a80:	e01e      	b.n	8002ac0 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a96:	d004      	beq.n	8002aa2 <HAL_ADC_Start+0xba>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2c      	ldr	r2, [pc, #176]	; (8002b50 <HAL_ADC_Start+0x168>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_ADC_Start+0xd8>
 8002aa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ab8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002acc:	d106      	bne.n	8002adc <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f023 0206 	bic.w	r2, r3, #6
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
 8002ada:	e002      	b.n	8002ae2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	221c      	movs	r2, #28
 8002af0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_ADC_Start+0x164>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_ADC_Start+0x138>
 8002afe:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_ADC_Start+0x164>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d00a      	beq.n	8002b20 <HAL_ADC_Start+0x138>
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_ADC_Start+0x164>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	2b09      	cmp	r3, #9
 8002b14:	d004      	beq.n	8002b20 <HAL_ADC_Start+0x138>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b1e:	d10f      	bne.n	8002b40 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0204 	orr.w	r2, r2, #4
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	e006      	b.n	8002b40 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b3a:	e001      	b.n	8002b40 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	50000300 	.word	0x50000300
 8002b50:	50000100 	.word	0x50000100

08002b54 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d102      	bne.n	8002b70 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	e02e      	b.n	8002bce <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b70:	4b5e      	ldr	r3, [pc, #376]	; (8002cec <HAL_ADC_PollForConversion+0x198>)
 8002b72:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d112      	bne.n	8002ba6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11d      	bne.n	8002bca <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e09d      	b.n	8002ce2 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e08b      	b.n	8002ce2 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002bca:	230c      	movs	r3, #12
 8002bcc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_ADC_PollForConversion+0x198>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_ADC_PollForConversion+0x90>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be2:	d104      	bne.n	8002bee <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002bee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002bf6:	f7ff fd35 	bl	8002664 <HAL_GetTick>
 8002bfa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002bfc:	e021      	b.n	8002c42 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d01d      	beq.n	8002c42 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_ADC_PollForConversion+0xc8>
 8002c0c:	f7ff fd2a 	bl	8002664 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d212      	bcs.n	8002c42 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10b      	bne.n	8002c42 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0204 	orr.w	r2, r3, #4
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e04f      	b.n	8002ce2 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0d6      	beq.n	8002bfe <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d131      	bne.n	8002cce <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d12c      	bne.n	8002cce <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d125      	bne.n	8002cce <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d112      	bne.n	8002cb6 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d112      	bne.n	8002cce <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb4:	e00b      	b.n	8002cce <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d103      	bne.n	8002ce0 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	50000300 	.word	0x50000300

08002cf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b09b      	sub	sp, #108	; 0x6c
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x22>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e2a4      	b.n	8003278 <HAL_ADC_ConfigChannel+0x56c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f040 8288 	bne.w	8003256 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d81c      	bhi.n	8002d88 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	461a      	mov	r2, r3
 8002d62:	231f      	movs	r3, #31
 8002d64:	4093      	lsls	r3, r2
 8002d66:	43db      	mvns	r3, r3
 8002d68:	4019      	ands	r1, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
 8002d86:	e063      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b09      	cmp	r3, #9
 8002d8e:	d81e      	bhi.n	8002dce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	3b1e      	subs	r3, #30
 8002da4:	221f      	movs	r2, #31
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	4019      	ands	r1, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	3b1e      	subs	r3, #30
 8002dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
 8002dcc:	e040      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b0e      	cmp	r3, #14
 8002dd4:	d81e      	bhi.n	8002e14 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	3b3c      	subs	r3, #60	; 0x3c
 8002dea:	221f      	movs	r2, #31
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	4019      	ands	r1, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	3b3c      	subs	r3, #60	; 0x3c
 8002e06:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	639a      	str	r2, [r3, #56]	; 0x38
 8002e12:	e01d      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	3b5a      	subs	r3, #90	; 0x5a
 8002e28:	221f      	movs	r2, #31
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	4019      	ands	r1, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4413      	add	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	3b5a      	subs	r3, #90	; 0x5a
 8002e44:	fa00 f203 	lsl.w	r2, r0, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 80e5 	bne.w	800302a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b09      	cmp	r3, #9
 8002e66:	d91c      	bls.n	8002ea2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6999      	ldr	r1, [r3, #24]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	3b1e      	subs	r3, #30
 8002e7a:	2207      	movs	r2, #7
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	4019      	ands	r1, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6898      	ldr	r0, [r3, #8]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	3b1e      	subs	r3, #30
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	619a      	str	r2, [r3, #24]
 8002ea0:	e019      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6959      	ldr	r1, [r3, #20]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	08db      	lsrs	r3, r3, #3
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d84f      	bhi.n	8002f98 <HAL_ADC_ConfigChannel+0x28c>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <HAL_ADC_ConfigChannel+0x1f4>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f11 	.word	0x08002f11
 8002f04:	08002f33 	.word	0x08002f33
 8002f08:	08002f55 	.word	0x08002f55
 8002f0c:	08002f77 	.word	0x08002f77
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f16:	4b94      	ldr	r3, [pc, #592]	; (8003168 <HAL_ADC_ConfigChannel+0x45c>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	0691      	lsls	r1, r2, #26
 8002f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f22:	430a      	orrs	r2, r1
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f2e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f30:	e07e      	b.n	8003030 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f38:	4b8b      	ldr	r3, [pc, #556]	; (8003168 <HAL_ADC_ConfigChannel+0x45c>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	0691      	lsls	r1, r2, #26
 8002f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f44:	430a      	orrs	r2, r1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f50:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f52:	e06d      	b.n	8003030 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f5a:	4b83      	ldr	r3, [pc, #524]	; (8003168 <HAL_ADC_ConfigChannel+0x45c>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	0691      	lsls	r1, r2, #26
 8002f64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f66:	430a      	orrs	r2, r1
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f72:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f74:	e05c      	b.n	8003030 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f7c:	4b7a      	ldr	r3, [pc, #488]	; (8003168 <HAL_ADC_ConfigChannel+0x45c>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	0691      	lsls	r1, r2, #26
 8002f86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f94:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002f96:	e04b      	b.n	8003030 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	069b      	lsls	r3, r3, #26
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d107      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	069b      	lsls	r3, r3, #26
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d107      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fde:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	069b      	lsls	r3, r3, #26
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d107      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003002:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800300a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	069b      	lsls	r3, r3, #26
 8003014:	429a      	cmp	r2, r3
 8003016:	d10a      	bne.n	800302e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003026:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003028:	e001      	b.n	800302e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800302a:	bf00      	nop
 800302c:	e000      	b.n	8003030 <HAL_ADC_ConfigChannel+0x324>
      break;
 800302e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d108      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x344>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x344>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_ADC_ConfigChannel+0x346>
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 810a 	bne.w	800326c <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d00f      	beq.n	8003080 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2201      	movs	r2, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800307e:	e049      	b.n	8003114 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2201      	movs	r2, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b09      	cmp	r3, #9
 80030a0:	d91c      	bls.n	80030dc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6999      	ldr	r1, [r3, #24]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	3b1b      	subs	r3, #27
 80030b4:	2207      	movs	r2, #7
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	4019      	ands	r1, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6898      	ldr	r0, [r3, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	3b1b      	subs	r3, #27
 80030ce:	fa00 f203 	lsl.w	r2, r0, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	619a      	str	r2, [r3, #24]
 80030da:	e01b      	b.n	8003114 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6959      	ldr	r1, [r3, #20]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	2207      	movs	r2, #7
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	4019      	ands	r1, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6898      	ldr	r0, [r3, #8]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	fa00 f203 	lsl.w	r2, r0, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003114:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_ADC_ConfigChannel+0x460>)
 8003116:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d105      	bne.n	800312c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d015      	beq.n	8003158 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003130:	2b11      	cmp	r3, #17
 8003132:	d105      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003144:	2b12      	cmp	r3, #18
 8003146:	f040 8091 	bne.w	800326c <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800314a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 808a 	bne.w	800326c <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003160:	d108      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x468>
 8003162:	4b03      	ldr	r3, [pc, #12]	; (8003170 <HAL_ADC_ConfigChannel+0x464>)
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	e008      	b.n	800317a <HAL_ADC_ConfigChannel+0x46e>
 8003168:	83fff000 	.word	0x83fff000
 800316c:	50000300 	.word	0x50000300
 8003170:	50000100 	.word	0x50000100
 8003174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003178:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d108      	bne.n	800319a <HAL_ADC_ConfigChannel+0x48e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x48e>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_ADC_ConfigChannel+0x490>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d150      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d010      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d107      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x4b6>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x4b6>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x4b8>
 80031c2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d13c      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d11d      	bne.n	800320c <HAL_ADC_ConfigChannel+0x500>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d8:	d118      	bne.n	800320c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80031da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031e6:	4b27      	ldr	r3, [pc, #156]	; (8003284 <HAL_ADC_ConfigChannel+0x578>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a27      	ldr	r2, [pc, #156]	; (8003288 <HAL_ADC_ConfigChannel+0x57c>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	0c9a      	lsrs	r2, r3, #18
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031fc:	e002      	b.n	8003204 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3b01      	subs	r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f9      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800320a:	e02e      	b.n	800326a <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b11      	cmp	r3, #17
 8003212:	d10b      	bne.n	800322c <HAL_ADC_ConfigChannel+0x520>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800321c:	d106      	bne.n	800322c <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800321e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003228:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800322a:	e01e      	b.n	800326a <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b12      	cmp	r3, #18
 8003232:	d11a      	bne.n	800326a <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800323c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800323e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003240:	e013      	b.n	800326a <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003254:	e00a      	b.n	800326c <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003268:	e000      	b.n	800326c <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800326a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003278:	4618      	mov	r0, r3
 800327a:	376c      	adds	r7, #108	; 0x6c
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	20000000 	.word	0x20000000
 8003288:	431bde83 	.word	0x431bde83

0800328c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800328c:	b480      	push	{r7}
 800328e:	b099      	sub	sp, #100	; 0x64
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a4:	d102      	bne.n	80032ac <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80032a6:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	e002      	b.n	80032b2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80032ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032b0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0a2      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e09b      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d17f      	bne.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d179      	bne.n	80033e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ec:	4b49      	ldr	r3, [pc, #292]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80032ee:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d040      	beq.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80032f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800330a:	035b      	lsls	r3, r3, #13
 800330c:	430b      	orrs	r3, r1
 800330e:	431a      	orrs	r2, r3
 8003310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003312:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d15c      	bne.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b01      	cmp	r3, #1
 8003344:	d107      	bne.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003356:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003358:	2b00      	cmp	r3, #0
 800335a:	d14b      	bne.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800335c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003364:	f023 030f 	bic.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	6892      	ldr	r2, [r2, #8]
 8003370:	430a      	orrs	r2, r1
 8003372:	431a      	orrs	r2, r3
 8003374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003376:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003378:	e03c      	b.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800337a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003384:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d108      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d123      	bne.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d107      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80033c8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d112      	bne.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80033ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033d6:	f023 030f 	bic.w	r3, r3, #15
 80033da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033dc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033de:	e009      	b.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80033f2:	e000      	b.n	80033f6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80033fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003402:	4618      	mov	r0, r3
 8003404:	3764      	adds	r7, #100	; 0x64
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	50000100 	.word	0x50000100
 8003414:	50000300 	.word	0x50000300

08003418 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d108      	bne.n	8003444 <ADC_Enable+0x2c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <ADC_Enable+0x2c>
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <ADC_Enable+0x2e>
 8003444:	2300      	movs	r3, #0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d143      	bne.n	80034d2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <ADC_Enable+0xc4>)
 8003452:	4013      	ands	r3, r2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f043 0210 	orr.w	r2, r3, #16
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e02f      	b.n	80034d4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003484:	f7ff f8ee 	bl	8002664 <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800348a:	e01b      	b.n	80034c4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800348c:	f7ff f8ea 	bl	8002664 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d914      	bls.n	80034c4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d00d      	beq.n	80034c4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f043 0210 	orr.w	r2, r3, #16
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e007      	b.n	80034d4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d1dc      	bne.n	800348c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	8000003f 	.word	0x8000003f

080034e0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d108      	bne.n	800350c <ADC_Disable+0x2c>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <ADC_Disable+0x2c>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <ADC_Disable+0x2e>
 800350c:	2300      	movs	r3, #0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d047      	beq.n	80035a2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 030d 	and.w	r3, r3, #13
 800351c:	2b01      	cmp	r3, #1
 800351e:	d10f      	bne.n	8003540 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0202 	orr.w	r2, r2, #2
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2203      	movs	r2, #3
 8003536:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003538:	f7ff f894 	bl	8002664 <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800353e:	e029      	b.n	8003594 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f043 0210 	orr.w	r2, r3, #16
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0201 	orr.w	r2, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e023      	b.n	80035a4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800355c:	f7ff f882 	bl	8002664 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d914      	bls.n	8003594 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10d      	bne.n	8003594 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f043 0210 	orr.w	r2, r3, #16
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003588:	f043 0201 	orr.w	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e007      	b.n	80035a4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d0dc      	beq.n	800355c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0ed      	b.n	800379a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe fc2c 	bl	8001e28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e0:	f7ff f840 	bl	8002664 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035e6:	e012      	b.n	800360e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035e8:	f7ff f83c 	bl	8002664 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b0a      	cmp	r3, #10
 80035f4:	d90b      	bls.n	800360e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2205      	movs	r2, #5
 8003606:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0c5      	b.n	800379a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0e5      	beq.n	80035e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0202 	bic.w	r2, r2, #2
 800362a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800362c:	f7ff f81a 	bl	8002664 <HAL_GetTick>
 8003630:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003632:	e012      	b.n	800365a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003634:	f7ff f816 	bl	8002664 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b0a      	cmp	r3, #10
 8003640:	d90b      	bls.n	800365a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2205      	movs	r2, #5
 8003652:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e09f      	b.n	800379a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7e1b      	ldrb	r3, [r3, #24]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e007      	b.n	8003692 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	7e5b      	ldrb	r3, [r3, #25]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d108      	bne.n	80036ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	e007      	b.n	80036bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	7e9b      	ldrb	r3, [r3, #26]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d108      	bne.n	80036d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0220 	orr.w	r2, r2, #32
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	e007      	b.n	80036e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0220 	bic.w	r2, r2, #32
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7edb      	ldrb	r3, [r3, #27]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d108      	bne.n	8003700 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0210 	bic.w	r2, r2, #16
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	e007      	b.n	8003710 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0210 	orr.w	r2, r2, #16
 800370e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7f1b      	ldrb	r3, [r3, #28]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d108      	bne.n	800372a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0208 	orr.w	r2, r2, #8
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e007      	b.n	800373a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0208 	bic.w	r2, r2, #8
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7f5b      	ldrb	r3, [r3, #29]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d108      	bne.n	8003754 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0204 	orr.w	r2, r2, #4
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e007      	b.n	8003764 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	ea42 0103 	orr.w	r1, r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c0:	4013      	ands	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d6:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <__NVIC_SetPriorityGrouping+0x44>)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	60d3      	str	r3, [r2, #12]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <__NVIC_GetPriorityGrouping+0x18>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f003 0307 	and.w	r3, r3, #7
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	2b00      	cmp	r3, #0
 8003818:	db0b      	blt.n	8003832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <__NVIC_EnableIRQ+0x38>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f202 	lsl.w	r2, r0, r2
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d301      	bcc.n	8003916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003912:	2301      	movs	r3, #1
 8003914:	e00f      	b.n	8003936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <SysTick_Config+0x40>)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391e:	210f      	movs	r1, #15
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f7ff ff8e 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <SysTick_Config+0x40>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SysTick_Config+0x40>)
 8003930:	2207      	movs	r2, #7
 8003932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	e000e010 	.word	0xe000e010

08003944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff29 	bl	80037a4 <__NVIC_SetPriorityGrouping>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	4603      	mov	r3, r0
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396c:	f7ff ff3e 	bl	80037ec <__NVIC_GetPriorityGrouping>
 8003970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f7ff ff8e 	bl	8003898 <NVIC_EncodePriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003982:	4611      	mov	r1, r2
 8003984:	4618      	mov	r0, r3
 8003986:	f7ff ff5d 	bl	8003844 <__NVIC_SetPriority>
}
 800398a:	bf00      	nop
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	4603      	mov	r3, r0
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff31 	bl	8003808 <__NVIC_EnableIRQ>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa2 	bl	8003900 <SysTick_Config>
 80039bc:	4603      	mov	r3, r0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e037      	b.n	8003a4c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80039f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9b8 	bl	8003da4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}  
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_DMA_Start_IT+0x20>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e04a      	b.n	8003b0a <HAL_DMA_Start_IT+0xb6>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d13a      	bne.n	8003afc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68b9      	ldr	r1, [r7, #8]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f94b 	bl	8003d46 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 020e 	orr.w	r2, r2, #14
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e00f      	b.n	8003aea <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 020a 	orr.w	r2, r2, #10
 8003ad8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0204 	bic.w	r2, r2, #4
 8003ae8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e005      	b.n	8003b08 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003b04:	2302      	movs	r3, #2
 8003b06:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d008      	beq.n	8003b36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2204      	movs	r2, #4
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e020      	b.n	8003b78 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 020e 	bic.w	r2, r2, #14
 8003b44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0201 	bic.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d005      	beq.n	8003ba6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e027      	b.n	8003bf6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 020e 	bic.w	r2, r2, #14
 8003bb4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	2101      	movs	r1, #1
 8003bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
    } 
  }
  return status;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d024      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x72>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01f      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d107      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c58:	2104      	movs	r1, #4
 8003c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d06a      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003c70:	e065      	b.n	8003d3e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2202      	movs	r2, #2
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02c      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xdc>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d027      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 020a 	bic.w	r2, r2, #10
 8003ca8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	2102      	movs	r1, #2
 8003cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d035      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003cda:	e030      	b.n	8003d3e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d028      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x13e>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d023      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 020e 	bic.w	r2, r2, #14
 8003d04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
    }
  }
}  
 8003d3c:	e7ff      	b.n	8003d3e <HAL_DMA_IRQHandler+0x13e>
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d62:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d108      	bne.n	8003d86 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d84:	e007      	b.n	8003d96 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	60da      	str	r2, [r3, #12]
}
 8003d96:	bf00      	nop
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x34>)
 8003db4:	4413      	add	r3, r2
 8003db6:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <DMA_CalcBaseAndBitshift+0x38>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	009a      	lsls	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a06      	ldr	r2, [pc, #24]	; (8003de0 <DMA_CalcBaseAndBitshift+0x3c>)
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	bffdfff8 	.word	0xbffdfff8
 8003ddc:	cccccccd 	.word	0xcccccccd
 8003de0:	40020000 	.word	0x40020000

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df2:	e14e      	b.n	8004092 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2101      	movs	r1, #1
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8140 	beq.w	800408c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d005      	beq.n	8003e24 <HAL_GPIO_Init+0x40>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d130      	bne.n	8003e86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	43db      	mvns	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f003 0201 	and.w	r2, r3, #1
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b03      	cmp	r3, #3
 8003e90:	d017      	beq.n	8003ec2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d123      	bne.n	8003f16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	08da      	lsrs	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3208      	adds	r2, #8
 8003ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	220f      	movs	r2, #15
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	08da      	lsrs	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3208      	adds	r2, #8
 8003f10:	6939      	ldr	r1, [r7, #16]
 8003f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	2203      	movs	r2, #3
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0203 	and.w	r2, r3, #3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 809a 	beq.w	800408c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f58:	4b55      	ldr	r3, [pc, #340]	; (80040b0 <HAL_GPIO_Init+0x2cc>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	4a54      	ldr	r2, [pc, #336]	; (80040b0 <HAL_GPIO_Init+0x2cc>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6193      	str	r3, [r2, #24]
 8003f64:	4b52      	ldr	r3, [pc, #328]	; (80040b0 <HAL_GPIO_Init+0x2cc>)
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f70:	4a50      	ldr	r2, [pc, #320]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	3302      	adds	r3, #2
 8003f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f9a:	d013      	beq.n	8003fc4 <HAL_GPIO_Init+0x1e0>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a46      	ldr	r2, [pc, #280]	; (80040b8 <HAL_GPIO_Init+0x2d4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_GPIO_Init+0x1dc>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a45      	ldr	r2, [pc, #276]	; (80040bc <HAL_GPIO_Init+0x2d8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d007      	beq.n	8003fbc <HAL_GPIO_Init+0x1d8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a44      	ldr	r2, [pc, #272]	; (80040c0 <HAL_GPIO_Init+0x2dc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <HAL_GPIO_Init+0x1d4>
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e006      	b.n	8003fc6 <HAL_GPIO_Init+0x1e2>
 8003fb8:	2305      	movs	r3, #5
 8003fba:	e004      	b.n	8003fc6 <HAL_GPIO_Init+0x1e2>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e002      	b.n	8003fc6 <HAL_GPIO_Init+0x1e2>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_GPIO_Init+0x1e2>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	f002 0203 	and.w	r2, r2, #3
 8003fcc:	0092      	lsls	r2, r2, #2
 8003fce:	4093      	lsls	r3, r2
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fd6:	4937      	ldr	r1, [pc, #220]	; (80040b4 <HAL_GPIO_Init+0x2d0>)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	3302      	adds	r3, #2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fe4:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <HAL_GPIO_Init+0x2e0>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004008:	4a2e      	ldr	r2, [pc, #184]	; (80040c4 <HAL_GPIO_Init+0x2e0>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800400e:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <HAL_GPIO_Init+0x2e0>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43db      	mvns	r3, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004032:	4a24      	ldr	r2, [pc, #144]	; (80040c4 <HAL_GPIO_Init+0x2e0>)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004038:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <HAL_GPIO_Init+0x2e0>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	43db      	mvns	r3, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4013      	ands	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800405c:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <HAL_GPIO_Init+0x2e0>)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <HAL_GPIO_Init+0x2e0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	43db      	mvns	r3, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4013      	ands	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004086:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <HAL_GPIO_Init+0x2e0>)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	3301      	adds	r3, #1
 8004090:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f aea9 	bne.w	8003df4 <HAL_GPIO_Init+0x10>
  }
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40010000 	.word	0x40010000
 80040b8:	48000400 	.word	0x48000400
 80040bc:	48000800 	.word	0x48000800
 80040c0:	48000c00 	.word	0x48000c00
 80040c4:	40010400 	.word	0x40010400

080040c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
 80040e4:	e001      	b.n	80040ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040e6:	2300      	movs	r3, #0
 80040e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	807b      	strh	r3, [r7, #2]
 8004104:	4613      	mov	r3, r2
 8004106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004108:	787b      	ldrb	r3, [r7, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004114:	e002      	b.n	800411c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e081      	b.n	800423e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd feae 	bl	8001eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004178:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004188:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	e006      	b.n	80041b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d104      	bne.n	80041c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69d9      	ldr	r1, [r3, #28]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	461a      	mov	r2, r3
 8004254:	460b      	mov	r3, r1
 8004256:	817b      	strh	r3, [r7, #10]
 8004258:	4613      	mov	r3, r2
 800425a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	f040 80db 	bne.w	8004420 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_I2C_Master_Receive+0x30>
 8004274:	2302      	movs	r3, #2
 8004276:	e0d4      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004280:	f7fe f9f0 	bl	8002664 <HAL_GetTick>
 8004284:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	2319      	movs	r3, #25
 800428c:	2201      	movs	r2, #1
 800428e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8f2 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0bf      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2222      	movs	r2, #34	; 0x22
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2210      	movs	r2, #16
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	893a      	ldrh	r2, [r7, #8]
 80042c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2bff      	cmp	r3, #255	; 0xff
 80042d2:	d90e      	bls.n	80042f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	22ff      	movs	r2, #255	; 0xff
 80042d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	8979      	ldrh	r1, [r7, #10]
 80042e2:	4b52      	ldr	r3, [pc, #328]	; (800442c <HAL_I2C_Master_Receive+0x1e4>)
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 faba 	bl	8004864 <I2C_TransferConfig>
 80042f0:	e06d      	b.n	80043ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	b2da      	uxtb	r2, r3
 8004302:	8979      	ldrh	r1, [r7, #10]
 8004304:	4b49      	ldr	r3, [pc, #292]	; (800442c <HAL_I2C_Master_Receive+0x1e4>)
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 faa9 	bl	8004864 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004312:	e05c      	b.n	80043ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	6a39      	ldr	r1, [r7, #32]
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f941 	bl	80045a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e07c      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d034      	beq.n	80043ce <HAL_I2C_Master_Receive+0x186>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d130      	bne.n	80043ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2200      	movs	r2, #0
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f880 	bl	800447c <I2C_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e04d      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	2bff      	cmp	r3, #255	; 0xff
 800438e:	d90e      	bls.n	80043ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	22ff      	movs	r2, #255	; 0xff
 8004394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	b2da      	uxtb	r2, r3
 800439c:	8979      	ldrh	r1, [r7, #10]
 800439e:	2300      	movs	r3, #0
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fa5c 	bl	8004864 <I2C_TransferConfig>
 80043ac:	e00f      	b.n	80043ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	8979      	ldrh	r1, [r7, #10]
 80043c0:	2300      	movs	r3, #0
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fa4b 	bl	8004864 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d19d      	bne.n	8004314 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	6a39      	ldr	r1, [r7, #32]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f89c 	bl	800451a <I2C_WaitOnSTOPFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e01a      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2220      	movs	r2, #32
 80043f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <HAL_I2C_Master_Receive+0x1e8>)
 8004400:	400b      	ands	r3, r1
 8004402:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	80002400 	.word	0x80002400
 8004430:	fe00e800 	.word	0xfe00e800

08004434 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d103      	bne.n	8004452 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b01      	cmp	r3, #1
 800445e:	d007      	beq.n	8004470 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	619a      	str	r2, [r3, #24]
  }
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800448c:	e031      	b.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004494:	d02d      	beq.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fe f8e5 	bl	8002664 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d122      	bne.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d113      	bne.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e00f      	b.n	8004512 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	bf0c      	ite	eq
 8004502:	2301      	moveq	r3, #1
 8004504:	2300      	movne	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	429a      	cmp	r2, r3
 800450e:	d0be      	beq.n	800448e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004526:	e02f      	b.n	8004588 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	68b9      	ldr	r1, [r7, #8]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f8b9 	bl	80046a4 <I2C_IsErrorOccurred>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e02d      	b.n	8004598 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453c:	f7fe f892 	bl	8002664 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d11a      	bne.n	8004588 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b20      	cmp	r3, #32
 800455e:	d013      	beq.n	8004588 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	f043 0220 	orr.w	r2, r3, #32
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e007      	b.n	8004598 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b20      	cmp	r3, #32
 8004594:	d1c8      	bne.n	8004528 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045ac:	e06b      	b.n	8004686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f876 	bl	80046a4 <I2C_IsErrorOccurred>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e069      	b.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d138      	bne.n	8004642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d105      	bne.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e055      	b.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b10      	cmp	r3, #16
 80045f6:	d107      	bne.n	8004608 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2210      	movs	r2, #16
 80045fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2204      	movs	r2, #4
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
 8004606:	e002      	b.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2220      	movs	r2, #32
 8004614:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b1f      	ldr	r3, [pc, #124]	; (80046a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004622:	400b      	ands	r3, r1
 8004624:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e029      	b.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7fe f80f 	bl	8002664 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d116      	bne.n	8004686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b04      	cmp	r3, #4
 8004664:	d00f      	beq.n	8004686 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	f043 0220 	orr.w	r2, r3, #32
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e007      	b.n	8004696 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b04      	cmp	r3, #4
 8004692:	d18c      	bne.n	80045ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	fe00e800 	.word	0xfe00e800

080046a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08a      	sub	sp, #40	; 0x28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d068      	beq.n	80047a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2210      	movs	r2, #16
 80046d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046d8:	e049      	b.n	800476e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e0:	d045      	beq.n	800476e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046e2:	f7fd ffbf 	bl	8002664 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d302      	bcc.n	80046f8 <I2C_IsErrorOccurred+0x54>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d13a      	bne.n	800476e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004702:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800470a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471a:	d121      	bne.n	8004760 <I2C_IsErrorOccurred+0xbc>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004722:	d01d      	beq.n	8004760 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004724:	7cfb      	ldrb	r3, [r7, #19]
 8004726:	2b20      	cmp	r3, #32
 8004728:	d01a      	beq.n	8004760 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004738:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800473a:	f7fd ff93 	bl	8002664 <HAL_GetTick>
 800473e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004740:	e00e      	b.n	8004760 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004742:	f7fd ff8f 	bl	8002664 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b19      	cmp	r3, #25
 800474e:	d907      	bls.n	8004760 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	f043 0320 	orr.w	r3, r3, #32
 8004756:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800475e:	e006      	b.n	800476e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	2b20      	cmp	r3, #32
 800476c:	d1e9      	bne.n	8004742 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b20      	cmp	r3, #32
 800477a:	d003      	beq.n	8004784 <I2C_IsErrorOccurred+0xe0>
 800477c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0aa      	beq.n	80046da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2220      	movs	r2, #32
 8004792:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00b      	beq.n	80047cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	f043 0308 	orr.w	r3, r3, #8
 80047dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f043 0302 	orr.w	r3, r3, #2
 80047fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01c      	beq.n	8004852 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7ff fe0b 	bl	8004434 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <I2C_IsErrorOccurred+0x1bc>)
 800482a:	400b      	ands	r3, r1
 800482c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	431a      	orrs	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004856:	4618      	mov	r0, r3
 8004858:	3728      	adds	r7, #40	; 0x28
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	fe00e800 	.word	0xfe00e800

08004864 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	817b      	strh	r3, [r7, #10]
 8004872:	4613      	mov	r3, r2
 8004874:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004876:	897b      	ldrh	r3, [r7, #10]
 8004878:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800487c:	7a7b      	ldrb	r3, [r7, #9]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004884:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	4313      	orrs	r3, r2
 800488e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004892:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	0d5b      	lsrs	r3, r3, #21
 800489e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <I2C_TransferConfig+0x60>)
 80048a4:	430b      	orrs	r3, r1
 80048a6:	43db      	mvns	r3, r3
 80048a8:	ea02 0103 	and.w	r1, r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	03ff63ff 	.word	0x03ff63ff

080048c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d138      	bne.n	8004950 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e032      	b.n	8004952 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2224      	movs	r2, #36	; 0x24
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800491a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6819      	ldr	r1, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b20      	cmp	r3, #32
 8004972:	d139      	bne.n	80049e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800497e:	2302      	movs	r3, #2
 8004980:	e033      	b.n	80049ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2224      	movs	r2, #36	; 0x24
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e000      	b.n	80049ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
  }
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	4a0a      	ldr	r2, [pc, #40]	; (8004a30 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6193      	str	r3, [r2, #24]
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4905      	ldr	r1, [pc, #20]	; (8004a34 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	600b      	str	r3, [r1, #0]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40021000 	.word	0x40021000
 8004a34:	40010000 	.word	0x40010000

08004a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d102      	bne.n	8004a5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f001 b823 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 817d 	beq.w	8004d6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a74:	4bbc      	ldr	r3, [pc, #752]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f003 030c 	and.w	r3, r3, #12
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d00c      	beq.n	8004a9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a80:	4bb9      	ldr	r3, [pc, #740]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d15c      	bne.n	8004b46 <HAL_RCC_OscConfig+0x10e>
 8004a8c:	4bb6      	ldr	r3, [pc, #728]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d155      	bne.n	8004b46 <HAL_RCC_OscConfig+0x10e>
 8004a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004aae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	f043 0301 	orr.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d102      	bne.n	8004acc <HAL_RCC_OscConfig+0x94>
 8004ac6:	4ba8      	ldr	r3, [pc, #672]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	e015      	b.n	8004af8 <HAL_RCC_OscConfig+0xc0>
 8004acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004ad8:	fa93 f3a3 	rbit	r3, r3
 8004adc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ae4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004ae8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004aec:	fa93 f3a3 	rbit	r3, r3
 8004af0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004af4:	4b9c      	ldr	r3, [pc, #624]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004afc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004b00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004b04:	fa92 f2a2 	rbit	r2, r2
 8004b08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004b0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004b10:	fab2 f282 	clz	r2, r2
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	f042 0220 	orr.w	r2, r2, #32
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	f002 021f 	and.w	r2, r2, #31
 8004b20:	2101      	movs	r1, #1
 8004b22:	fa01 f202 	lsl.w	r2, r1, r2
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 811f 	beq.w	8004d6c <HAL_RCC_OscConfig+0x334>
 8004b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 8116 	bne.w	8004d6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	f000 bfaf 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12e>
 8004b58:	4b83      	ldr	r3, [pc, #524]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a82      	ldr	r2, [pc, #520]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	e036      	b.n	8004bd4 <HAL_RCC_OscConfig+0x19c>
 8004b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCC_OscConfig+0x158>
 8004b76:	4b7c      	ldr	r3, [pc, #496]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a7b      	ldr	r2, [pc, #492]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	4b79      	ldr	r3, [pc, #484]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a78      	ldr	r2, [pc, #480]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e021      	b.n	8004bd4 <HAL_RCC_OscConfig+0x19c>
 8004b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x184>
 8004ba2:	4b71      	ldr	r3, [pc, #452]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a70      	ldr	r2, [pc, #448]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b6e      	ldr	r3, [pc, #440]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a6d      	ldr	r2, [pc, #436]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x19c>
 8004bbc:	4b6a      	ldr	r3, [pc, #424]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a69      	ldr	r2, [pc, #420]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b67      	ldr	r3, [pc, #412]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a66      	ldr	r2, [pc, #408]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bd4:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	f023 020f 	bic.w	r2, r3, #15
 8004bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	495f      	ldr	r1, [pc, #380]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d059      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fd fd31 	bl	8002664 <HAL_GetTick>
 8004c02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c08:	f7fd fd2c 	bl	8002664 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b64      	cmp	r3, #100	; 0x64
 8004c16:	d902      	bls.n	8004c1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	f000 bf43 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>
 8004c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004c2a:	fa93 f3a3 	rbit	r3, r3
 8004c2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004c32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d102      	bne.n	8004c50 <HAL_RCC_OscConfig+0x218>
 8004c4a:	4b47      	ldr	r3, [pc, #284]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	e015      	b.n	8004c7c <HAL_RCC_OscConfig+0x244>
 8004c50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004c5c:	fa93 f3a3 	rbit	r3, r3
 8004c60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004c6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004c70:	fa93 f3a3 	rbit	r3, r3
 8004c74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004c78:	4b3b      	ldr	r3, [pc, #236]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004c84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c88:	fa92 f2a2 	rbit	r2, r2
 8004c8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004c90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004c94:	fab2 f282 	clz	r2, r2
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	f042 0220 	orr.w	r2, r2, #32
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	f002 021f 	and.w	r2, r2, #31
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ab      	beq.n	8004c08 <HAL_RCC_OscConfig+0x1d0>
 8004cb0:	e05d      	b.n	8004d6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fd fcd7 	bl	8002664 <HAL_GetTick>
 8004cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fd fcd2 	bl	8002664 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b64      	cmp	r3, #100	; 0x64
 8004cca:	d902      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	f000 bee9 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>
 8004cd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cd6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004cde:	fa93 f3a3 	rbit	r3, r3
 8004ce2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004ce6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d102      	bne.n	8004d04 <HAL_RCC_OscConfig+0x2cc>
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	e015      	b.n	8004d30 <HAL_RCC_OscConfig+0x2f8>
 8004d04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d08:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d1c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004d20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004d24:	fa93 f3a3 	rbit	r3, r3
 8004d28:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004d2c:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <HAL_RCC_OscConfig+0x330>)
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d34:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004d38:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004d3c:	fa92 f2a2 	rbit	r2, r2
 8004d40:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004d44:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004d48:	fab2 f282 	clz	r2, r2
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	f042 0220 	orr.w	r2, r2, #32
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	f002 021f 	and.w	r2, r2, #31
 8004d58:	2101      	movs	r1, #1
 8004d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1ab      	bne.n	8004cbc <HAL_RCC_OscConfig+0x284>
 8004d64:	e003      	b.n	8004d6e <HAL_RCC_OscConfig+0x336>
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 817d 	beq.w	800507e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004d84:	4ba6      	ldr	r3, [pc, #664]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 030c 	and.w	r3, r3, #12
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00b      	beq.n	8004da8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004d90:	4ba3      	ldr	r3, [pc, #652]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 030c 	and.w	r3, r3, #12
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d172      	bne.n	8004e82 <HAL_RCC_OscConfig+0x44a>
 8004d9c:	4ba0      	ldr	r3, [pc, #640]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d16c      	bne.n	8004e82 <HAL_RCC_OscConfig+0x44a>
 8004da8:	2302      	movs	r3, #2
 8004daa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004dba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x3a0>
 8004dd2:	4b93      	ldr	r3, [pc, #588]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	e013      	b.n	8004e00 <HAL_RCC_OscConfig+0x3c8>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004de2:	fa93 f3a3 	rbit	r3, r3
 8004de6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004dea:	2302      	movs	r3, #2
 8004dec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004df0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004df4:	fa93 f3a3 	rbit	r3, r3
 8004df8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004dfc:	4b88      	ldr	r3, [pc, #544]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2202      	movs	r2, #2
 8004e02:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004e06:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004e0a:	fa92 f2a2 	rbit	r2, r2
 8004e0e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004e12:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004e16:	fab2 f282 	clz	r2, r2
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	f042 0220 	orr.w	r2, r2, #32
 8004e20:	b2d2      	uxtb	r2, r2
 8004e22:	f002 021f 	and.w	r2, r2, #31
 8004e26:	2101      	movs	r1, #1
 8004e28:	fa01 f202 	lsl.w	r2, r1, r2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCC_OscConfig+0x410>
 8004e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d002      	beq.n	8004e48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f000 be2e 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e48:	4b75      	ldr	r3, [pc, #468]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	21f8      	movs	r1, #248	; 0xf8
 8004e5e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004e66:	fa91 f1a1 	rbit	r1, r1
 8004e6a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004e6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004e72:	fab1 f181 	clz	r1, r1
 8004e76:	b2c9      	uxtb	r1, r1
 8004e78:	408b      	lsls	r3, r1
 8004e7a:	4969      	ldr	r1, [pc, #420]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e80:	e0fd      	b.n	800507e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8088 	beq.w	8004fa4 <HAL_RCC_OscConfig+0x56c>
 8004e94:	2301      	movs	r3, #1
 8004e96:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004e9e:	fa93 f3a3 	rbit	r3, r3
 8004ea2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004ea6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004eb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec0:	f7fd fbd0 	bl	8002664 <HAL_GetTick>
 8004ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec8:	e00a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eca:	f7fd fbcb 	bl	8002664 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d902      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	f000 bde2 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004eea:	fa93 f3a3 	rbit	r3, r3
 8004eee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004ef2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef6:	fab3 f383 	clz	r3, r3
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d102      	bne.n	8004f10 <HAL_RCC_OscConfig+0x4d8>
 8004f0a:	4b45      	ldr	r3, [pc, #276]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	e013      	b.n	8004f38 <HAL_RCC_OscConfig+0x500>
 8004f10:	2302      	movs	r3, #2
 8004f12:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f16:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004f1a:	fa93 f3a3 	rbit	r3, r3
 8004f1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004f22:	2302      	movs	r3, #2
 8004f24:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004f28:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004f2c:	fa93 f3a3 	rbit	r3, r3
 8004f30:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004f34:	4b3a      	ldr	r3, [pc, #232]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004f3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004f42:	fa92 f2a2 	rbit	r2, r2
 8004f46:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004f4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004f4e:	fab2 f282 	clz	r2, r2
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	f042 0220 	orr.w	r2, r2, #32
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	f002 021f 	and.w	r2, r2, #31
 8004f5e:	2101      	movs	r1, #1
 8004f60:	fa01 f202 	lsl.w	r2, r1, r2
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0af      	beq.n	8004eca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f6a:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	21f8      	movs	r1, #248	; 0xf8
 8004f80:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f84:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f88:	fa91 f1a1 	rbit	r1, r1
 8004f8c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004f90:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004f94:	fab1 f181 	clz	r1, r1
 8004f98:	b2c9      	uxtb	r1, r1
 8004f9a:	408b      	lsls	r3, r1
 8004f9c:	4920      	ldr	r1, [pc, #128]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
 8004fa2:	e06c      	b.n	800507e <HAL_RCC_OscConfig+0x646>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fae:	fa93 f3a3 	rbit	r3, r3
 8004fb2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004fb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fba:	fab3 f383 	clz	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fb48 	bl	8002664 <HAL_GetTick>
 8004fd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd8:	e00a      	b.n	8004ff0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fda:	f7fd fb43 	bl	8002664 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d902      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	f000 bd5a 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	fab3 f383 	clz	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d104      	bne.n	8005024 <HAL_RCC_OscConfig+0x5ec>
 800501a:	4b01      	ldr	r3, [pc, #4]	; (8005020 <HAL_RCC_OscConfig+0x5e8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	e015      	b.n	800504c <HAL_RCC_OscConfig+0x614>
 8005020:	40021000 	.word	0x40021000
 8005024:	2302      	movs	r3, #2
 8005026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005036:	2302      	movs	r3, #2
 8005038:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800503c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005040:	fa93 f3a3 	rbit	r3, r3
 8005044:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005048:	4bc8      	ldr	r3, [pc, #800]	; (800536c <HAL_RCC_OscConfig+0x934>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2202      	movs	r2, #2
 800504e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005052:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005056:	fa92 f2a2 	rbit	r2, r2
 800505a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800505e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005062:	fab2 f282 	clz	r2, r2
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	f042 0220 	orr.w	r2, r2, #32
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	f002 021f 	and.w	r2, r2, #31
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f202 	lsl.w	r2, r1, r2
 8005078:	4013      	ands	r3, r2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1ad      	bne.n	8004fda <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800507e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8110 	beq.w	80052b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d079      	beq.n	8005198 <HAL_RCC_OscConfig+0x760>
 80050a4:	2301      	movs	r3, #1
 80050a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050ae:	fa93 f3a3 	rbit	r3, r3
 80050b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80050b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ba:	fab3 f383 	clz	r3, r3
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	4bab      	ldr	r3, [pc, #684]	; (8005370 <HAL_RCC_OscConfig+0x938>)
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	461a      	mov	r2, r3
 80050ca:	2301      	movs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7fd fac9 	bl	8002664 <HAL_GetTick>
 80050d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d6:	e00a      	b.n	80050ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d8:	f7fd fac4 	bl	8002664 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d902      	bls.n	80050ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	f000 bcdb 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>
 80050ee:	2302      	movs	r3, #2
 80050f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050f8:	fa93 f3a3 	rbit	r3, r3
 80050fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005104:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005108:	2202      	movs	r2, #2
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005110:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	fa93 f2a3 	rbit	r2, r3
 800511a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800511e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800512c:	2202      	movs	r2, #2
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	fa93 f2a3 	rbit	r2, r3
 800513e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005142:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005146:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005148:	4b88      	ldr	r3, [pc, #544]	; (800536c <HAL_RCC_OscConfig+0x934>)
 800514a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800514c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005150:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005154:	2102      	movs	r1, #2
 8005156:	6019      	str	r1, [r3, #0]
 8005158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800515c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	fa93 f1a3 	rbit	r1, r3
 8005166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800516a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800516e:	6019      	str	r1, [r3, #0]
  return result;
 8005170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005174:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005184:	b2db      	uxtb	r3, r3
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	2101      	movs	r1, #1
 800518c:	fa01 f303 	lsl.w	r3, r1, r3
 8005190:	4013      	ands	r3, r2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0a0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x6a0>
 8005196:	e08d      	b.n	80052b4 <HAL_RCC_OscConfig+0x87c>
 8005198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	fa93 f2a3 	rbit	r2, r3
 80051b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051ba:	601a      	str	r2, [r3, #0]
  return result;
 80051bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b68      	ldr	r3, [pc, #416]	; (8005370 <HAL_RCC_OscConfig+0x938>)
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051da:	f7fd fa43 	bl	8002664 <HAL_GetTick>
 80051de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e4:	f7fd fa3e 	bl	8002664 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d902      	bls.n	80051fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	f000 bc55 	b.w	8005aa4 <HAL_RCC_OscConfig+0x106c>
 80051fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005202:	2202      	movs	r2, #2
 8005204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	fa93 f2a3 	rbit	r2, r3
 8005214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005218:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005222:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005226:	2202      	movs	r2, #2
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800522e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	fa93 f2a3 	rbit	r2, r3
 8005238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005246:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800524a:	2202      	movs	r2, #2
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	fa93 f2a3 	rbit	r2, r3
 800525c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005260:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005264:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005266:	4b41      	ldr	r3, [pc, #260]	; (800536c <HAL_RCC_OscConfig+0x934>)
 8005268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800526a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800526e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005272:	2102      	movs	r1, #2
 8005274:	6019      	str	r1, [r3, #0]
 8005276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	fa93 f1a3 	rbit	r1, r3
 8005284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005288:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800528c:	6019      	str	r1, [r3, #0]
  return result;
 800528e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005292:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	fab3 f383 	clz	r3, r3
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f003 031f 	and.w	r3, r3, #31
 80052a8:	2101      	movs	r1, #1
 80052aa:	fa01 f303 	lsl.w	r3, r1, r3
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d197      	bne.n	80051e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 81a1 	beq.w	800560c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d0:	4b26      	ldr	r3, [pc, #152]	; (800536c <HAL_RCC_OscConfig+0x934>)
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d116      	bne.n	800530a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052dc:	4b23      	ldr	r3, [pc, #140]	; (800536c <HAL_RCC_OscConfig+0x934>)
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	4a22      	ldr	r2, [pc, #136]	; (800536c <HAL_RCC_OscConfig+0x934>)
 80052e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e6:	61d3      	str	r3, [r2, #28]
 80052e8:	4b20      	ldr	r3, [pc, #128]	; (800536c <HAL_RCC_OscConfig+0x934>)
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80052f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005302:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530a:	4b1a      	ldr	r3, [pc, #104]	; (8005374 <HAL_RCC_OscConfig+0x93c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d11a      	bne.n	800534c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005316:	4b17      	ldr	r3, [pc, #92]	; (8005374 <HAL_RCC_OscConfig+0x93c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_RCC_OscConfig+0x93c>)
 800531c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005320:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005322:	f7fd f99f 	bl	8002664 <HAL_GetTick>
 8005326:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532a:	e009      	b.n	8005340 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532c:	f7fd f99a 	bl	8002664 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	; 0x64
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e3b1      	b.n	8005aa4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b0c      	ldr	r3, [pc, #48]	; (8005374 <HAL_RCC_OscConfig+0x93c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0ef      	beq.n	800532c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005350:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10d      	bne.n	8005378 <HAL_RCC_OscConfig+0x940>
 800535c:	4b03      	ldr	r3, [pc, #12]	; (800536c <HAL_RCC_OscConfig+0x934>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4a02      	ldr	r2, [pc, #8]	; (800536c <HAL_RCC_OscConfig+0x934>)
 8005362:	f043 0301 	orr.w	r3, r3, #1
 8005366:	6213      	str	r3, [r2, #32]
 8005368:	e03c      	b.n	80053e4 <HAL_RCC_OscConfig+0x9ac>
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000
 8005370:	10908120 	.word	0x10908120
 8005374:	40007000 	.word	0x40007000
 8005378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10c      	bne.n	80053a2 <HAL_RCC_OscConfig+0x96a>
 8005388:	4bc1      	ldr	r3, [pc, #772]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	4ac0      	ldr	r2, [pc, #768]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	6213      	str	r3, [r2, #32]
 8005394:	4bbe      	ldr	r3, [pc, #760]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	4abd      	ldr	r2, [pc, #756]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 800539a:	f023 0304 	bic.w	r3, r3, #4
 800539e:	6213      	str	r3, [r2, #32]
 80053a0:	e020      	b.n	80053e4 <HAL_RCC_OscConfig+0x9ac>
 80053a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d10c      	bne.n	80053cc <HAL_RCC_OscConfig+0x994>
 80053b2:	4bb7      	ldr	r3, [pc, #732]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	4ab6      	ldr	r2, [pc, #728]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80053b8:	f043 0304 	orr.w	r3, r3, #4
 80053bc:	6213      	str	r3, [r2, #32]
 80053be:	4bb4      	ldr	r3, [pc, #720]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	4ab3      	ldr	r2, [pc, #716]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	6213      	str	r3, [r2, #32]
 80053ca:	e00b      	b.n	80053e4 <HAL_RCC_OscConfig+0x9ac>
 80053cc:	4bb0      	ldr	r3, [pc, #704]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	4aaf      	ldr	r2, [pc, #700]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	6213      	str	r3, [r2, #32]
 80053d8:	4bad      	ldr	r3, [pc, #692]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	4aac      	ldr	r2, [pc, #688]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80053de:	f023 0304 	bic.w	r3, r3, #4
 80053e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8081 	beq.w	80054f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f6:	f7fd f935 	bl	8002664 <HAL_GetTick>
 80053fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fe:	e00b      	b.n	8005418 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005400:	f7fd f930 	bl	8002664 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e345      	b.n	8005aa4 <HAL_RCC_OscConfig+0x106c>
 8005418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800541c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005420:	2202      	movs	r2, #2
 8005422:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005428:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	fa93 f2a3 	rbit	r2, r3
 8005432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005436:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005440:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005444:	2202      	movs	r2, #2
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800544c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	fa93 f2a3 	rbit	r2, r3
 8005456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800545e:	601a      	str	r2, [r3, #0]
  return result;
 8005460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005464:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005468:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800546a:	fab3 f383 	clz	r3, r3
 800546e:	b2db      	uxtb	r3, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f043 0302 	orr.w	r3, r3, #2
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d102      	bne.n	8005484 <HAL_RCC_OscConfig+0xa4c>
 800547e:	4b84      	ldr	r3, [pc, #528]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	e013      	b.n	80054ac <HAL_RCC_OscConfig+0xa74>
 8005484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005488:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800548c:	2202      	movs	r2, #2
 800548e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005494:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	fa93 f2a3 	rbit	r2, r3
 800549e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	4b79      	ldr	r3, [pc, #484]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80054b4:	2102      	movs	r1, #2
 80054b6:	6011      	str	r1, [r2, #0]
 80054b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80054c0:	6812      	ldr	r2, [r2, #0]
 80054c2:	fa92 f1a2 	rbit	r1, r2
 80054c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80054ce:	6011      	str	r1, [r2, #0]
  return result;
 80054d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80054d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	fab2 f282 	clz	r2, r2
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	f002 021f 	and.w	r2, r2, #31
 80054ea:	2101      	movs	r1, #1
 80054ec:	fa01 f202 	lsl.w	r2, r1, r2
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d084      	beq.n	8005400 <HAL_RCC_OscConfig+0x9c8>
 80054f6:	e07f      	b.n	80055f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f8:	f7fd f8b4 	bl	8002664 <HAL_GetTick>
 80054fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005500:	e00b      	b.n	800551a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005502:	f7fd f8af 	bl	8002664 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005512:	4293      	cmp	r3, r2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e2c4      	b.n	8005aa4 <HAL_RCC_OscConfig+0x106c>
 800551a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005522:	2202      	movs	r2, #2
 8005524:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800552a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	fa93 f2a3 	rbit	r2, r3
 8005534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005538:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005542:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005546:	2202      	movs	r2, #2
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800554e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	fa93 f2a3 	rbit	r2, r3
 8005558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800555c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005560:	601a      	str	r2, [r3, #0]
  return result;
 8005562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005566:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800556a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800556c:	fab3 f383 	clz	r3, r3
 8005570:	b2db      	uxtb	r3, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	b2db      	uxtb	r3, r3
 8005576:	f043 0302 	orr.w	r3, r3, #2
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d102      	bne.n	8005586 <HAL_RCC_OscConfig+0xb4e>
 8005580:	4b43      	ldr	r3, [pc, #268]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	e013      	b.n	80055ae <HAL_RCC_OscConfig+0xb76>
 8005586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800558e:	2202      	movs	r2, #2
 8005590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005596:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	fa93 f2a3 	rbit	r2, r3
 80055a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	4b39      	ldr	r3, [pc, #228]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80055b6:	2102      	movs	r1, #2
 80055b8:	6011      	str	r1, [r2, #0]
 80055ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	fa92 f1a2 	rbit	r1, r2
 80055c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80055d0:	6011      	str	r1, [r2, #0]
  return result;
 80055d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	fab2 f282 	clz	r2, r2
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	f002 021f 	and.w	r2, r2, #31
 80055ec:	2101      	movs	r1, #1
 80055ee:	fa01 f202 	lsl.w	r2, r1, r2
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d184      	bne.n	8005502 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d105      	bne.n	800560c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005600:	4b23      	ldr	r3, [pc, #140]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4a22      	ldr	r2, [pc, #136]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 8005606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800560a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8242 	beq.w	8005aa2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <HAL_RCC_OscConfig+0xc58>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f003 030c 	and.w	r3, r3, #12
 8005626:	2b08      	cmp	r3, #8
 8005628:	f000 8213 	beq.w	8005a52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800562c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005630:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	2b02      	cmp	r3, #2
 800563a:	f040 8162 	bne.w	8005902 <HAL_RCC_OscConfig+0xeca>
 800563e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005642:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005646:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800564a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800564c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005650:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	fa93 f2a3 	rbit	r2, r3
 800565a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005662:	601a      	str	r2, [r3, #0]
  return result;
 8005664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005668:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800566c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	fab3 f383 	clz	r3, r3
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005678:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	461a      	mov	r2, r3
 8005680:	2300      	movs	r3, #0
 8005682:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005684:	f7fc ffee 	bl	8002664 <HAL_GetTick>
 8005688:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800568c:	e00c      	b.n	80056a8 <HAL_RCC_OscConfig+0xc70>
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005694:	f7fc ffe6 	bl	8002664 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e1fd      	b.n	8005aa4 <HAL_RCC_OscConfig+0x106c>
 80056a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80056b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	fa93 f2a3 	rbit	r2, r3
 80056c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80056cc:	601a      	str	r2, [r3, #0]
  return result;
 80056ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80056d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056d8:	fab3 f383 	clz	r3, r3
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d102      	bne.n	80056f2 <HAL_RCC_OscConfig+0xcba>
 80056ec:	4bb0      	ldr	r3, [pc, #704]	; (80059b0 <HAL_RCC_OscConfig+0xf78>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	e027      	b.n	8005742 <HAL_RCC_OscConfig+0xd0a>
 80056f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80056fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005704:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	fa93 f2a3 	rbit	r2, r3
 800570e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005712:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800571c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800572a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	fa93 f2a3 	rbit	r2, r3
 8005734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005738:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	4b9c      	ldr	r3, [pc, #624]	; (80059b0 <HAL_RCC_OscConfig+0xf78>)
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005746:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800574a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800574e:	6011      	str	r1, [r2, #0]
 8005750:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005754:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	fa92 f1a2 	rbit	r1, r2
 800575e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005762:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005766:	6011      	str	r1, [r2, #0]
  return result;
 8005768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800576c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	fab2 f282 	clz	r2, r2
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	f042 0220 	orr.w	r2, r2, #32
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	f002 021f 	and.w	r2, r2, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f202 	lsl.w	r2, r1, r2
 8005788:	4013      	ands	r3, r2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d182      	bne.n	8005694 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800578e:	4b88      	ldr	r3, [pc, #544]	; (80059b0 <HAL_RCC_OscConfig+0xf78>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	430b      	orrs	r3, r1
 80057b0:	497f      	ldr	r1, [pc, #508]	; (80059b0 <HAL_RCC_OscConfig+0xf78>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	604b      	str	r3, [r1, #4]
 80057b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80057be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057c8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	fa93 f2a3 	rbit	r2, r3
 80057d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80057da:	601a      	str	r2, [r3, #0]
  return result;
 80057dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80057e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e6:	fab3 f383 	clz	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	461a      	mov	r2, r3
 80057f8:	2301      	movs	r3, #1
 80057fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fc ff32 	bl	8002664 <HAL_GetTick>
 8005800:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005804:	e009      	b.n	800581a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005806:	f7fc ff2d 	bl	8002664 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e144      	b.n	8005aa4 <HAL_RCC_OscConfig+0x106c>
 800581a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800581e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800582c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	fa93 f2a3 	rbit	r2, r3
 8005836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800583a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800583e:	601a      	str	r2, [r3, #0]
  return result;
 8005840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005844:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005848:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	b2db      	uxtb	r3, r3
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b01      	cmp	r3, #1
 800585c:	d102      	bne.n	8005864 <HAL_RCC_OscConfig+0xe2c>
 800585e:	4b54      	ldr	r3, [pc, #336]	; (80059b0 <HAL_RCC_OscConfig+0xf78>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	e027      	b.n	80058b4 <HAL_RCC_OscConfig+0xe7c>
 8005864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005868:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800586c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005876:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	fa93 f2a3 	rbit	r2, r3
 8005880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005884:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800589c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	fa93 f2a3 	rbit	r2, r3
 80058a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80058aa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	4b3f      	ldr	r3, [pc, #252]	; (80059b0 <HAL_RCC_OscConfig+0xf78>)
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058b8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80058bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80058c0:	6011      	str	r1, [r2, #0]
 80058c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058c6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	fa92 f1a2 	rbit	r1, r2
 80058d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058d4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80058d8:	6011      	str	r1, [r2, #0]
  return result;
 80058da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80058de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	fab2 f282 	clz	r2, r2
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	f042 0220 	orr.w	r2, r2, #32
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	f002 021f 	and.w	r2, r2, #31
 80058f4:	2101      	movs	r1, #1
 80058f6:	fa01 f202 	lsl.w	r2, r1, r2
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d082      	beq.n	8005806 <HAL_RCC_OscConfig+0xdce>
 8005900:	e0cf      	b.n	8005aa2 <HAL_RCC_OscConfig+0x106a>
 8005902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005906:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800590a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800590e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005914:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	fa93 f2a3 	rbit	r2, r3
 800591e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005922:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005926:	601a      	str	r2, [r3, #0]
  return result;
 8005928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800592c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005930:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800593c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	461a      	mov	r2, r3
 8005944:	2300      	movs	r3, #0
 8005946:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005948:	f7fc fe8c 	bl	8002664 <HAL_GetTick>
 800594c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005950:	e009      	b.n	8005966 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005952:	f7fc fe87 	bl	8002664 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e09e      	b.n	8005aa4 <HAL_RCC_OscConfig+0x106c>
 8005966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800596a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800596e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005978:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	fa93 f2a3 	rbit	r2, r3
 8005982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005986:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800598a:	601a      	str	r2, [r3, #0]
  return result;
 800598c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005990:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005994:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005996:	fab3 f383 	clz	r3, r3
 800599a:	b2db      	uxtb	r3, r3
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d104      	bne.n	80059b4 <HAL_RCC_OscConfig+0xf7c>
 80059aa:	4b01      	ldr	r3, [pc, #4]	; (80059b0 <HAL_RCC_OscConfig+0xf78>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	e029      	b.n	8005a04 <HAL_RCC_OscConfig+0xfcc>
 80059b0:	40021000 	.word	0x40021000
 80059b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80059bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059c6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	fa93 f2a3 	rbit	r2, r3
 80059d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059de:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80059e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	fa93 f2a3 	rbit	r2, r3
 80059f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_RCC_OscConfig+0x1078>)
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	fa92 f1a2 	rbit	r1, r2
 8005a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005a28:	6011      	str	r1, [r2, #0]
  return result;
 8005a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005a2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	fab2 f282 	clz	r2, r2
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	f042 0220 	orr.w	r2, r2, #32
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	f002 021f 	and.w	r2, r2, #31
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d180      	bne.n	8005952 <HAL_RCC_OscConfig+0xf1a>
 8005a50:	e027      	b.n	8005aa2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e01e      	b.n	8005aa4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a66:	4b12      	ldr	r3, [pc, #72]	; (8005ab0 <HAL_RCC_OscConfig+0x1078>)
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d10b      	bne.n	8005a9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005a86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005a8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d001      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000

08005ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b09e      	sub	sp, #120	; 0x78
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e162      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005acc:	4b90      	ldr	r3, [pc, #576]	; (8005d10 <HAL_RCC_ClockConfig+0x25c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d910      	bls.n	8005afc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b8d      	ldr	r3, [pc, #564]	; (8005d10 <HAL_RCC_ClockConfig+0x25c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 0207 	bic.w	r2, r3, #7
 8005ae2:	498b      	ldr	r1, [pc, #556]	; (8005d10 <HAL_RCC_ClockConfig+0x25c>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b89      	ldr	r3, [pc, #548]	; (8005d10 <HAL_RCC_ClockConfig+0x25c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e14a      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b08:	4b82      	ldr	r3, [pc, #520]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	497f      	ldr	r1, [pc, #508]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80dc 	beq.w	8005ce0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d13c      	bne.n	8005baa <HAL_RCC_ClockConfig+0xf6>
 8005b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b38:	fa93 f3a3 	rbit	r3, r3
 8005b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b40:	fab3 f383 	clz	r3, r3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d102      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xa6>
 8005b54:	4b6f      	ldr	r3, [pc, #444]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	e00f      	b.n	8005b7a <HAL_RCC_ClockConfig+0xc6>
 8005b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b62:	fa93 f3a3 	rbit	r3, r3
 8005b66:	667b      	str	r3, [r7, #100]	; 0x64
 8005b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b70:	fa93 f3a3 	rbit	r3, r3
 8005b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b76:	4b67      	ldr	r3, [pc, #412]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b82:	fa92 f2a2 	rbit	r2, r2
 8005b86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005b88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b8a:	fab2 f282 	clz	r2, r2
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	f042 0220 	orr.w	r2, r2, #32
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	f002 021f 	and.w	r2, r2, #31
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d17b      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e0f3      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d13c      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x178>
 8005bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bba:	fa93 f3a3 	rbit	r3, r3
 8005bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc2:	fab3 f383 	clz	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f043 0301 	orr.w	r3, r3, #1
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d102      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x128>
 8005bd6:	4b4f      	ldr	r3, [pc, #316]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	e00f      	b.n	8005bfc <HAL_RCC_ClockConfig+0x148>
 8005bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005be0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be4:	fa93 f3a3 	rbit	r3, r3
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bee:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf2:	fa93 f3a3 	rbit	r3, r3
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf8:	4b46      	ldr	r3, [pc, #280]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c00:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c04:	fa92 f2a2 	rbit	r2, r2
 8005c08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c0c:	fab2 f282 	clz	r2, r2
 8005c10:	b2d2      	uxtb	r2, r2
 8005c12:	f042 0220 	orr.w	r2, r2, #32
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	f002 021f 	and.w	r2, r2, #31
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d13a      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0b2      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2de>
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	fa93 f3a3 	rbit	r3, r3
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c3a:	fab3 f383 	clz	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d102      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x1a0>
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	e00d      	b.n	8005c70 <HAL_RCC_ClockConfig+0x1bc>
 8005c54:	2302      	movs	r3, #2
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	fa93 f3a3 	rbit	r3, r3
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c60:	2302      	movs	r3, #2
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	fa93 f3a3 	rbit	r3, r3
 8005c6a:	61fb      	str	r3, [r7, #28]
 8005c6c:	4b29      	ldr	r3, [pc, #164]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	2202      	movs	r2, #2
 8005c72:	61ba      	str	r2, [r7, #24]
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	fa92 f2a2 	rbit	r2, r2
 8005c7a:	617a      	str	r2, [r7, #20]
  return result;
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	fab2 f282 	clz	r2, r2
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	f042 0220 	orr.w	r2, r2, #32
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	f002 021f 	and.w	r2, r2, #31
 8005c8e:	2101      	movs	r1, #1
 8005c90:	fa01 f202 	lsl.w	r2, r1, r2
 8005c94:	4013      	ands	r3, r2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e079      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f023 0203 	bic.w	r2, r3, #3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	491a      	ldr	r1, [pc, #104]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb0:	f7fc fcd8 	bl	8002664 <HAL_GetTick>
 8005cb4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb8:	f7fc fcd4 	bl	8002664 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e061      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <HAL_RCC_ClockConfig+0x260>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 020c 	and.w	r2, r3, #12
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d1eb      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_ClockConfig+0x25c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d214      	bcs.n	8005d18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_RCC_ClockConfig+0x25c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 0207 	bic.w	r2, r3, #7
 8005cf6:	4906      	ldr	r1, [pc, #24]	; (8005d10 <HAL_RCC_ClockConfig+0x25c>)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <HAL_RCC_ClockConfig+0x25c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e040      	b.n	8005d92 <HAL_RCC_ClockConfig+0x2de>
 8005d10:	40022000 	.word	0x40022000
 8005d14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d24:	4b1d      	ldr	r3, [pc, #116]	; (8005d9c <HAL_RCC_ClockConfig+0x2e8>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	491a      	ldr	r1, [pc, #104]	; (8005d9c <HAL_RCC_ClockConfig+0x2e8>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d009      	beq.n	8005d56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d42:	4b16      	ldr	r3, [pc, #88]	; (8005d9c <HAL_RCC_ClockConfig+0x2e8>)
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	4912      	ldr	r1, [pc, #72]	; (8005d9c <HAL_RCC_ClockConfig+0x2e8>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d56:	f000 f829 	bl	8005dac <HAL_RCC_GetSysClockFreq>
 8005d5a:	4601      	mov	r1, r0
 8005d5c:	4b0f      	ldr	r3, [pc, #60]	; (8005d9c <HAL_RCC_ClockConfig+0x2e8>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d64:	22f0      	movs	r2, #240	; 0xf0
 8005d66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	fa92 f2a2 	rbit	r2, r2
 8005d6e:	60fa      	str	r2, [r7, #12]
  return result;
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	fab2 f282 	clz	r2, r2
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	40d3      	lsrs	r3, r2
 8005d7a:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <HAL_RCC_ClockConfig+0x2ec>)
 8005d7c:	5cd3      	ldrb	r3, [r2, r3]
 8005d7e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d82:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <HAL_RCC_ClockConfig+0x2f0>)
 8005d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005d86:	4b08      	ldr	r3, [pc, #32]	; (8005da8 <HAL_RCC_ClockConfig+0x2f4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fc fc26 	bl	80025dc <HAL_InitTick>
  
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3778      	adds	r7, #120	; 0x78
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	08008a08 	.word	0x08008a08
 8005da4:	20000000 	.word	0x20000000
 8005da8:	20000004 	.word	0x20000004

08005dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b08b      	sub	sp, #44	; 0x2c
 8005db0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 030c 	and.w	r3, r3, #12
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d002      	beq.n	8005ddc <HAL_RCC_GetSysClockFreq+0x30>
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d003      	beq.n	8005de2 <HAL_RCC_GetSysClockFreq+0x36>
 8005dda:	e03c      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ddc:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005dde:	623b      	str	r3, [r7, #32]
      break;
 8005de0:	e03c      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005de8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005dec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	fa92 f2a2 	rbit	r2, r2
 8005df4:	607a      	str	r2, [r7, #4]
  return result;
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	fab2 f282 	clz	r2, r2
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	40d3      	lsrs	r3, r2
 8005e00:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005e02:	5cd3      	ldrb	r3, [r2, r3]
 8005e04:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005e06:	4b19      	ldr	r3, [pc, #100]	; (8005e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	220f      	movs	r2, #15
 8005e10:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	fa92 f2a2 	rbit	r2, r2
 8005e18:	60fa      	str	r2, [r7, #12]
  return result;
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	fab2 f282 	clz	r2, r2
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	40d3      	lsrs	r3, r2
 8005e24:	4a14      	ldr	r2, [pc, #80]	; (8005e78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e26:	5cd3      	ldrb	r3, [r2, r3]
 8005e28:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d008      	beq.n	8005e46 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e34:	4a0e      	ldr	r2, [pc, #56]	; (8005e70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	fb02 f303 	mul.w	r3, r2, r3
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
 8005e44:	e004      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4a0c      	ldr	r2, [pc, #48]	; (8005e7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	623b      	str	r3, [r7, #32]
      break;
 8005e54:	e002      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e56:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e58:	623b      	str	r3, [r7, #32]
      break;
 8005e5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	372c      	adds	r7, #44	; 0x2c
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	007a1200 	.word	0x007a1200
 8005e74:	08008a20 	.word	0x08008a20
 8005e78:	08008a30 	.word	0x08008a30
 8005e7c:	003d0900 	.word	0x003d0900

08005e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e84:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e86:	681b      	ldr	r3, [r3, #0]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20000000 	.word	0x20000000

08005e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005e9e:	f7ff ffef 	bl	8005e80 <HAL_RCC_GetHCLKFreq>
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005eac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005eb0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	fa92 f2a2 	rbit	r2, r2
 8005eb8:	603a      	str	r2, [r7, #0]
  return result;
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	fab2 f282 	clz	r2, r2
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	40d3      	lsrs	r3, r2
 8005ec4:	4a04      	ldr	r2, [pc, #16]	; (8005ed8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005ec6:	5cd3      	ldrb	r3, [r2, r3]
 8005ec8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	08008a18 	.word	0x08008a18

08005edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005ee2:	f7ff ffcd 	bl	8005e80 <HAL_RCC_GetHCLKFreq>
 8005ee6:	4601      	mov	r1, r0
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005ef0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005ef4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	fa92 f2a2 	rbit	r2, r2
 8005efc:	603a      	str	r2, [r7, #0]
  return result;
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	fab2 f282 	clz	r2, r2
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	40d3      	lsrs	r3, r2
 8005f08:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <HAL_RCC_GetPCLK2Freq+0x40>)
 8005f0a:	5cd3      	ldrb	r3, [r2, r3]
 8005f0c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	08008a18 	.word	0x08008a18

08005f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b092      	sub	sp, #72	; 0x48
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80cd 	beq.w	80060de <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f44:	4b86      	ldr	r3, [pc, #536]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10e      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f50:	4b83      	ldr	r3, [pc, #524]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	4a82      	ldr	r2, [pc, #520]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	61d3      	str	r3, [r2, #28]
 8005f5c:	4b80      	ldr	r3, [pc, #512]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6e:	4b7d      	ldr	r3, [pc, #500]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d118      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f7a:	4b7a      	ldr	r3, [pc, #488]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a79      	ldr	r2, [pc, #484]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f84:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f86:	f7fc fb6d 	bl	8002664 <HAL_GetTick>
 8005f8a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8e:	f7fc fb69 	bl	8002664 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b64      	cmp	r3, #100	; 0x64
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e0db      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fa0:	4b70      	ldr	r3, [pc, #448]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0f0      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fac:	4b6c      	ldr	r3, [pc, #432]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d07d      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d076      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fca:	4b65      	ldr	r3, [pc, #404]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fd8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	fa93 f3a3 	rbit	r3, r3
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fe4:	fab3 f383 	clz	r3, r3
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b5e      	ldr	r3, [pc, #376]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	fa93 f3a3 	rbit	r3, r3
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006008:	fab3 f383 	clz	r3, r3
 800600c:	b2db      	uxtb	r3, r3
 800600e:	461a      	mov	r2, r3
 8006010:	4b55      	ldr	r3, [pc, #340]	; (8006168 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	461a      	mov	r2, r3
 8006018:	2300      	movs	r3, #0
 800601a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800601c:	4a50      	ldr	r2, [pc, #320]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800601e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006020:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d045      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602c:	f7fc fb1a 	bl	8002664 <HAL_GetTick>
 8006030:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006032:	e00a      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006034:	f7fc fb16 	bl	8002664 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e086      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800604a:	2302      	movs	r3, #2
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	fa93 f3a3 	rbit	r3, r3
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
 8006056:	2302      	movs	r3, #2
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	fa93 f3a3 	rbit	r3, r3
 8006060:	61fb      	str	r3, [r7, #28]
  return result;
 8006062:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006064:	fab3 f383 	clz	r3, r3
 8006068:	b2db      	uxtb	r3, r3
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	b2db      	uxtb	r3, r3
 800606e:	f043 0302 	orr.w	r3, r3, #2
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d102      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006078:	4b39      	ldr	r3, [pc, #228]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	e007      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800607e:	2302      	movs	r3, #2
 8006080:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	fa93 f3a3 	rbit	r3, r3
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	4b35      	ldr	r3, [pc, #212]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2202      	movs	r2, #2
 8006090:	613a      	str	r2, [r7, #16]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	fa92 f2a2 	rbit	r2, r2
 8006098:	60fa      	str	r2, [r7, #12]
  return result;
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	fab2 f282 	clz	r2, r2
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	f002 021f 	and.w	r2, r2, #31
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f202 	lsl.w	r2, r1, r2
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0bd      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80060b8:	4b29      	ldr	r3, [pc, #164]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	4926      	ldr	r1, [pc, #152]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d105      	bne.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d2:	4b23      	ldr	r3, [pc, #140]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	4a22      	ldr	r2, [pc, #136]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060dc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060ea:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	f023 0203 	bic.w	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	491a      	ldr	r1, [pc, #104]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006108:	4b15      	ldr	r3, [pc, #84]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	f023 0210 	bic.w	r2, r3, #16
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4912      	ldr	r1, [pc, #72]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006116:	4313      	orrs	r3, r2
 8006118:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	490b      	ldr	r1, [pc, #44]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006134:	4313      	orrs	r3, r2
 8006136:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	4903      	ldr	r1, [pc, #12]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006152:	4313      	orrs	r3, r2
 8006154:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3748      	adds	r7, #72	; 0x48
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40021000 	.word	0x40021000
 8006164:	40007000 	.word	0x40007000
 8006168:	10908100 	.word	0x10908100

0800616c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e049      	b.n	8006212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7fc f808 	bl	80021a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	4619      	mov	r1, r3
 80061aa:	4610      	mov	r0, r2
 80061ac:	f000 fc32 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	d001      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e040      	b.n	80062b6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0201 	orr.w	r2, r2, #1
 800624a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1c      	ldr	r2, [pc, #112]	; (80062c4 <HAL_TIM_Base_Start_IT+0xa8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x58>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625e:	d009      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x58>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_TIM_Base_Start_IT+0xac>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x58>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <HAL_TIM_Base_Start_IT+0xb0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d115      	bne.n	80062a0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	4b15      	ldr	r3, [pc, #84]	; (80062d0 <HAL_TIM_Base_Start_IT+0xb4>)
 800627c:	4013      	ands	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b06      	cmp	r3, #6
 8006284:	d015      	beq.n	80062b2 <HAL_TIM_Base_Start_IT+0x96>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800628c:	d011      	beq.n	80062b2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0201 	orr.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629e:	e008      	b.n	80062b2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	e000      	b.n	80062b4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40012c00 	.word	0x40012c00
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40014000 	.word	0x40014000
 80062d0:	00010007 	.word	0x00010007

080062d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e049      	b.n	800637a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fb fe24 	bl	8001f48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3304      	adds	r3, #4
 8006310:	4619      	mov	r1, r3
 8006312:	4610      	mov	r0, r2
 8006314:	f000 fb7e 	bl	8006a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d109      	bne.n	80063a8 <HAL_TIM_PWM_Start+0x24>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b01      	cmp	r3, #1
 800639e:	bf14      	ite	ne
 80063a0:	2301      	movne	r3, #1
 80063a2:	2300      	moveq	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	e03c      	b.n	8006422 <HAL_TIM_PWM_Start+0x9e>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d109      	bne.n	80063c2 <HAL_TIM_PWM_Start+0x3e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	bf14      	ite	ne
 80063ba:	2301      	movne	r3, #1
 80063bc:	2300      	moveq	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	e02f      	b.n	8006422 <HAL_TIM_PWM_Start+0x9e>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d109      	bne.n	80063dc <HAL_TIM_PWM_Start+0x58>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	bf14      	ite	ne
 80063d4:	2301      	movne	r3, #1
 80063d6:	2300      	moveq	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	e022      	b.n	8006422 <HAL_TIM_PWM_Start+0x9e>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b0c      	cmp	r3, #12
 80063e0:	d109      	bne.n	80063f6 <HAL_TIM_PWM_Start+0x72>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	bf14      	ite	ne
 80063ee:	2301      	movne	r3, #1
 80063f0:	2300      	moveq	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	e015      	b.n	8006422 <HAL_TIM_PWM_Start+0x9e>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d109      	bne.n	8006410 <HAL_TIM_PWM_Start+0x8c>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b01      	cmp	r3, #1
 8006406:	bf14      	ite	ne
 8006408:	2301      	movne	r3, #1
 800640a:	2300      	moveq	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e008      	b.n	8006422 <HAL_TIM_PWM_Start+0x9e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	bf14      	ite	ne
 800641c:	2301      	movne	r3, #1
 800641e:	2300      	moveq	r3, #0
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e088      	b.n	800653c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0xb6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006438:	e023      	b.n	8006482 <HAL_TIM_PWM_Start+0xfe>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b04      	cmp	r3, #4
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0xc6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006448:	e01b      	b.n	8006482 <HAL_TIM_PWM_Start+0xfe>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Start+0xd6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006458:	e013      	b.n	8006482 <HAL_TIM_PWM_Start+0xfe>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b0c      	cmp	r3, #12
 800645e:	d104      	bne.n	800646a <HAL_TIM_PWM_Start+0xe6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006468:	e00b      	b.n	8006482 <HAL_TIM_PWM_Start+0xfe>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b10      	cmp	r3, #16
 800646e:	d104      	bne.n	800647a <HAL_TIM_PWM_Start+0xf6>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006478:	e003      	b.n	8006482 <HAL_TIM_PWM_Start+0xfe>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2201      	movs	r2, #1
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fde0 	bl	8007050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a2b      	ldr	r2, [pc, #172]	; (8006544 <HAL_TIM_PWM_Start+0x1c0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <HAL_TIM_PWM_Start+0x134>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a2a      	ldr	r2, [pc, #168]	; (8006548 <HAL_TIM_PWM_Start+0x1c4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <HAL_TIM_PWM_Start+0x134>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a28      	ldr	r2, [pc, #160]	; (800654c <HAL_TIM_PWM_Start+0x1c8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <HAL_TIM_PWM_Start+0x134>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a27      	ldr	r2, [pc, #156]	; (8006550 <HAL_TIM_PWM_Start+0x1cc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <HAL_TIM_PWM_Start+0x138>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <HAL_TIM_PWM_Start+0x13a>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <HAL_TIM_PWM_Start+0x1c0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_TIM_PWM_Start+0x176>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e4:	d009      	beq.n	80064fa <HAL_TIM_PWM_Start+0x176>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <HAL_TIM_PWM_Start+0x1d0>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIM_PWM_Start+0x176>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a14      	ldr	r2, [pc, #80]	; (8006548 <HAL_TIM_PWM_Start+0x1c4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d115      	bne.n	8006526 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	4b15      	ldr	r3, [pc, #84]	; (8006558 <HAL_TIM_PWM_Start+0x1d4>)
 8006502:	4013      	ands	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b06      	cmp	r3, #6
 800650a:	d015      	beq.n	8006538 <HAL_TIM_PWM_Start+0x1b4>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006512:	d011      	beq.n	8006538 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006524:	e008      	b.n	8006538 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0201 	orr.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e000      	b.n	800653a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006538:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40012c00 	.word	0x40012c00
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800
 8006554:	40000400 	.word	0x40000400
 8006558:	00010007 	.word	0x00010007

0800655c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d122      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b02      	cmp	r3, #2
 800657e:	d11b      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0202 	mvn.w	r2, #2
 8006588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa1a 	bl	80069d8 <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fa0c 	bl	80069c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fa1d 	bl	80069ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d122      	bne.n	800660c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d11b      	bne.n	800660c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0204 	mvn.w	r2, #4
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f9f0 	bl	80069d8 <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f9e2 	bl	80069c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f9f3 	bl	80069ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b08      	cmp	r3, #8
 8006618:	d122      	bne.n	8006660 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b08      	cmp	r3, #8
 8006626:	d11b      	bne.n	8006660 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0208 	mvn.w	r2, #8
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2204      	movs	r2, #4
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9c6 	bl	80069d8 <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9b8 	bl	80069c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9c9 	bl	80069ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	2b10      	cmp	r3, #16
 800666c:	d122      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b10      	cmp	r3, #16
 800667a:	d11b      	bne.n	80066b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f06f 0210 	mvn.w	r2, #16
 8006684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2208      	movs	r2, #8
 800668a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f99c 	bl	80069d8 <HAL_TIM_IC_CaptureCallback>
 80066a0:	e005      	b.n	80066ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f98e 	bl	80069c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 f99f 	bl	80069ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d10e      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d107      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0201 	mvn.w	r2, #1
 80066d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fb fb08 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ea:	2b80      	cmp	r3, #128	; 0x80
 80066ec:	d10e      	bne.n	800670c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f8:	2b80      	cmp	r3, #128	; 0x80
 80066fa:	d107      	bne.n	800670c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fdb8 	bl	800727c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671a:	d10e      	bne.n	800673a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006726:	2b80      	cmp	r3, #128	; 0x80
 8006728:	d107      	bne.n	800673a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fdab 	bl	8007290 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d10e      	bne.n	8006766 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006752:	2b40      	cmp	r3, #64	; 0x40
 8006754:	d107      	bne.n	8006766 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800675e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f94d 	bl	8006a00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b20      	cmp	r3, #32
 8006772:	d10e      	bne.n	8006792 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b20      	cmp	r3, #32
 8006780:	d107      	bne.n	8006792 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f06f 0220 	mvn.w	r2, #32
 800678a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fd6b 	bl	8007268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006792:	bf00      	nop
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e0ff      	b.n	80069ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b14      	cmp	r3, #20
 80067c6:	f200 80f0 	bhi.w	80069aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067ca:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	08006825 	.word	0x08006825
 80067d4:	080069ab 	.word	0x080069ab
 80067d8:	080069ab 	.word	0x080069ab
 80067dc:	080069ab 	.word	0x080069ab
 80067e0:	08006865 	.word	0x08006865
 80067e4:	080069ab 	.word	0x080069ab
 80067e8:	080069ab 	.word	0x080069ab
 80067ec:	080069ab 	.word	0x080069ab
 80067f0:	080068a7 	.word	0x080068a7
 80067f4:	080069ab 	.word	0x080069ab
 80067f8:	080069ab 	.word	0x080069ab
 80067fc:	080069ab 	.word	0x080069ab
 8006800:	080068e7 	.word	0x080068e7
 8006804:	080069ab 	.word	0x080069ab
 8006808:	080069ab 	.word	0x080069ab
 800680c:	080069ab 	.word	0x080069ab
 8006810:	08006929 	.word	0x08006929
 8006814:	080069ab 	.word	0x080069ab
 8006818:	080069ab 	.word	0x080069ab
 800681c:	080069ab 	.word	0x080069ab
 8006820:	08006969 	.word	0x08006969
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f96a 	bl	8006b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699a      	ldr	r2, [r3, #24]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0208 	orr.w	r2, r2, #8
 800683e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0204 	bic.w	r2, r2, #4
 800684e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	619a      	str	r2, [r3, #24]
      break;
 8006862:	e0a5      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f9d0 	bl	8006c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	021a      	lsls	r2, r3, #8
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	619a      	str	r2, [r3, #24]
      break;
 80068a4:	e084      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 fa2f 	bl	8006d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	69da      	ldr	r2, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0208 	orr.w	r2, r2, #8
 80068c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0204 	bic.w	r2, r2, #4
 80068d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69d9      	ldr	r1, [r3, #28]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	61da      	str	r2, [r3, #28]
      break;
 80068e4:	e064      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fa8d 	bl	8006e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69d9      	ldr	r1, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	021a      	lsls	r2, r3, #8
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	61da      	str	r2, [r3, #28]
      break;
 8006926:	e043      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fad0 	bl	8006ed4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0208 	orr.w	r2, r2, #8
 8006942:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0204 	bic.w	r2, r2, #4
 8006952:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006966:	e023      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fb0e 	bl	8006f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069a8:	e002      	b.n	80069b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	75fb      	strb	r3, [r7, #23]
      break;
 80069ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop

080069c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <TIM_Base_SetConfig+0xdc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d007      	beq.n	8006a3c <TIM_Base_SetConfig+0x28>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a32:	d003      	beq.n	8006a3c <TIM_Base_SetConfig+0x28>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a2f      	ldr	r2, [pc, #188]	; (8006af4 <TIM_Base_SetConfig+0xe0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d108      	bne.n	8006a4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a27      	ldr	r2, [pc, #156]	; (8006af0 <TIM_Base_SetConfig+0xdc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <TIM_Base_SetConfig+0x6a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5c:	d00f      	beq.n	8006a7e <TIM_Base_SetConfig+0x6a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a24      	ldr	r2, [pc, #144]	; (8006af4 <TIM_Base_SetConfig+0xe0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_Base_SetConfig+0x6a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a23      	ldr	r2, [pc, #140]	; (8006af8 <TIM_Base_SetConfig+0xe4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_Base_SetConfig+0x6a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a22      	ldr	r2, [pc, #136]	; (8006afc <TIM_Base_SetConfig+0xe8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_Base_SetConfig+0x6a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a21      	ldr	r2, [pc, #132]	; (8006b00 <TIM_Base_SetConfig+0xec>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d108      	bne.n	8006a90 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <TIM_Base_SetConfig+0xdc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00b      	beq.n	8006ad4 <TIM_Base_SetConfig+0xc0>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a0e      	ldr	r2, [pc, #56]	; (8006af8 <TIM_Base_SetConfig+0xe4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d007      	beq.n	8006ad4 <TIM_Base_SetConfig+0xc0>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <TIM_Base_SetConfig+0xe8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_Base_SetConfig+0xc0>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <TIM_Base_SetConfig+0xec>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d103      	bne.n	8006adc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	615a      	str	r2, [r3, #20]
}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	40012c00 	.word	0x40012c00
 8006af4:	40000400 	.word	0x40000400
 8006af8:	40014000 	.word	0x40014000
 8006afc:	40014400 	.word	0x40014400
 8006b00:	40014800 	.word	0x40014800

08006b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f023 0201 	bic.w	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f023 0302 	bic.w	r3, r3, #2
 8006b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a28      	ldr	r2, [pc, #160]	; (8006c00 <TIM_OC1_SetConfig+0xfc>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00b      	beq.n	8006b7c <TIM_OC1_SetConfig+0x78>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a27      	ldr	r2, [pc, #156]	; (8006c04 <TIM_OC1_SetConfig+0x100>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d007      	beq.n	8006b7c <TIM_OC1_SetConfig+0x78>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a26      	ldr	r2, [pc, #152]	; (8006c08 <TIM_OC1_SetConfig+0x104>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_OC1_SetConfig+0x78>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a25      	ldr	r2, [pc, #148]	; (8006c0c <TIM_OC1_SetConfig+0x108>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d10c      	bne.n	8006b96 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f023 0308 	bic.w	r3, r3, #8
 8006b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f023 0304 	bic.w	r3, r3, #4
 8006b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <TIM_OC1_SetConfig+0xfc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00b      	beq.n	8006bb6 <TIM_OC1_SetConfig+0xb2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <TIM_OC1_SetConfig+0x100>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d007      	beq.n	8006bb6 <TIM_OC1_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC1_SetConfig+0x104>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d003      	beq.n	8006bb6 <TIM_OC1_SetConfig+0xb2>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC1_SetConfig+0x108>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d111      	bne.n	8006bda <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	621a      	str	r2, [r3, #32]
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	40012c00 	.word	0x40012c00
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400
 8006c0c:	40014800 	.word	0x40014800

08006c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	f023 0210 	bic.w	r2, r3, #16
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 0320 	bic.w	r3, r3, #32
 8006c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	011b      	lsls	r3, r3, #4
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a24      	ldr	r2, [pc, #144]	; (8006d00 <TIM_OC2_SetConfig+0xf0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d10d      	bne.n	8006c90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	011b      	lsls	r3, r3, #4
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a1b      	ldr	r2, [pc, #108]	; (8006d00 <TIM_OC2_SetConfig+0xf0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <TIM_OC2_SetConfig+0xa0>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a1a      	ldr	r2, [pc, #104]	; (8006d04 <TIM_OC2_SetConfig+0xf4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d007      	beq.n	8006cb0 <TIM_OC2_SetConfig+0xa0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a19      	ldr	r2, [pc, #100]	; (8006d08 <TIM_OC2_SetConfig+0xf8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_OC2_SetConfig+0xa0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a18      	ldr	r2, [pc, #96]	; (8006d0c <TIM_OC2_SetConfig+0xfc>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d113      	bne.n	8006cd8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cb6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cbe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40012c00 	.word	0x40012c00
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40014400 	.word	0x40014400
 8006d0c:	40014800 	.word	0x40014800

08006d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a23      	ldr	r2, [pc, #140]	; (8006dfc <TIM_OC3_SetConfig+0xec>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d10d      	bne.n	8006d8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a1a      	ldr	r2, [pc, #104]	; (8006dfc <TIM_OC3_SetConfig+0xec>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00b      	beq.n	8006dae <TIM_OC3_SetConfig+0x9e>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <TIM_OC3_SetConfig+0xf0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d007      	beq.n	8006dae <TIM_OC3_SetConfig+0x9e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <TIM_OC3_SetConfig+0xf4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_OC3_SetConfig+0x9e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <TIM_OC3_SetConfig+0xf8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d113      	bne.n	8006dd6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	011b      	lsls	r3, r3, #4
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	621a      	str	r2, [r3, #32]
}
 8006df0:	bf00      	nop
 8006df2:	371c      	adds	r7, #28
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	40012c00 	.word	0x40012c00
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40014400 	.word	0x40014400
 8006e08:	40014800 	.word	0x40014800

08006e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	031b      	lsls	r3, r3, #12
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <TIM_OC4_SetConfig+0xb8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_OC4_SetConfig+0x7c>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <TIM_OC4_SetConfig+0xbc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_OC4_SetConfig+0x7c>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a14      	ldr	r2, [pc, #80]	; (8006ecc <TIM_OC4_SetConfig+0xc0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC4_SetConfig+0x7c>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a13      	ldr	r2, [pc, #76]	; (8006ed0 <TIM_OC4_SetConfig+0xc4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d109      	bne.n	8006e9c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	019b      	lsls	r3, r3, #6
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400
 8006ed0:	40014800 	.word	0x40014800

08006ed4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <TIM_OC5_SetConfig+0xac>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00b      	beq.n	8006f46 <TIM_OC5_SetConfig+0x72>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a14      	ldr	r2, [pc, #80]	; (8006f84 <TIM_OC5_SetConfig+0xb0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <TIM_OC5_SetConfig+0x72>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a13      	ldr	r2, [pc, #76]	; (8006f88 <TIM_OC5_SetConfig+0xb4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_OC5_SetConfig+0x72>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a12      	ldr	r2, [pc, #72]	; (8006f8c <TIM_OC5_SetConfig+0xb8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d109      	bne.n	8006f5a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	621a      	str	r2, [r3, #32]
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	40012c00 	.word	0x40012c00
 8006f84:	40014000 	.word	0x40014000
 8006f88:	40014400 	.word	0x40014400
 8006f8c:	40014800 	.word	0x40014800

08006f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	051b      	lsls	r3, r3, #20
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a16      	ldr	r2, [pc, #88]	; (8007040 <TIM_OC6_SetConfig+0xb0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d00b      	beq.n	8007004 <TIM_OC6_SetConfig+0x74>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a15      	ldr	r2, [pc, #84]	; (8007044 <TIM_OC6_SetConfig+0xb4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d007      	beq.n	8007004 <TIM_OC6_SetConfig+0x74>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a14      	ldr	r2, [pc, #80]	; (8007048 <TIM_OC6_SetConfig+0xb8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d003      	beq.n	8007004 <TIM_OC6_SetConfig+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a13      	ldr	r2, [pc, #76]	; (800704c <TIM_OC6_SetConfig+0xbc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d109      	bne.n	8007018 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	029b      	lsls	r3, r3, #10
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	4313      	orrs	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40012c00 	.word	0x40012c00
 8007044:	40014000 	.word	0x40014000
 8007048:	40014400 	.word	0x40014400
 800704c:	40014800 	.word	0x40014800

08007050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	2201      	movs	r2, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	fa01 f303 	lsl.w	r3, r1, r3
 8007088:	431a      	orrs	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
	...

0800709c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e054      	b.n	800715e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a24      	ldr	r2, [pc, #144]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d108      	bne.n	80070f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	4313      	orrs	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a17      	ldr	r2, [pc, #92]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d00e      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800711c:	d009      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a13      	ldr	r2, [pc, #76]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d004      	beq.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a11      	ldr	r2, [pc, #68]	; (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10c      	bne.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4313      	orrs	r3, r2
 8007142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40000400 	.word	0x40000400
 8007174:	40014000 	.word	0x40014000

08007178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007190:	2302      	movs	r3, #2
 8007192:	e060      	b.n	8007256 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a14      	ldr	r2, [pc, #80]	; (8007264 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d115      	bne.n	8007244 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	051b      	lsls	r3, r3, #20
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	40012c00 	.word	0x40012c00

08007268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e040      	b.n	8007338 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fb f844 	bl	8002354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	; 0x24
 80072d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fc00 	bl	8007ae8 <UART_SetConfig>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e022      	b.n	8007338 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fd2a 	bl	8007d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800730e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800731e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fdb1 	bl	8007e98 <UART_CheckIdleState>
 8007336:	4603      	mov	r3, r0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007354:	2b20      	cmp	r3, #32
 8007356:	d178      	bne.n	800744a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <HAL_UART_Transmit+0x24>
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e071      	b.n	800744c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2221      	movs	r2, #33	; 0x21
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007376:	f7fb f975 	bl	8002664 <HAL_GetTick>
 800737a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	88fa      	ldrh	r2, [r7, #6]
 8007380:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	88fa      	ldrh	r2, [r7, #6]
 8007388:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007394:	d108      	bne.n	80073a8 <HAL_UART_Transmit+0x68>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800739e:	2300      	movs	r3, #0
 80073a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e003      	b.n	80073b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073b0:	e030      	b.n	8007414 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2200      	movs	r2, #0
 80073ba:	2180      	movs	r1, #128	; 0x80
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fe13 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e03c      	b.n	800744c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d10b      	bne.n	80073f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	881a      	ldrh	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073e4:	b292      	uxth	r2, r2
 80073e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	3302      	adds	r3, #2
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e008      	b.n	8007402 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	b292      	uxth	r2, r2
 80073fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	3301      	adds	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007408:	b29b      	uxth	r3, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1c8      	bne.n	80073b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2200      	movs	r2, #0
 8007428:	2140      	movs	r1, #64	; 0x40
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 fddc 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e005      	b.n	800744c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800744a:	2302      	movs	r3, #2
  }
}
 800744c:	4618      	mov	r0, r3
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007468:	2b20      	cmp	r3, #32
 800746a:	d132      	bne.n	80074d2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <HAL_UART_Receive_IT+0x24>
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e02b      	b.n	80074d4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d018      	beq.n	80074c2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	613b      	str	r3, [r7, #16]
   return(result);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074a4:	627b      	str	r3, [r7, #36]	; 0x24
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ae:	623b      	str	r3, [r7, #32]
 80074b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	69f9      	ldr	r1, [r7, #28]
 80074b4:	6a3a      	ldr	r2, [r7, #32]
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e6      	bne.n	8007490 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	461a      	mov	r2, r3
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fdf5 	bl	80080b8 <UART_Start_Receive_IT>
 80074ce:	4603      	mov	r3, r0
 80074d0:	e000      	b.n	80074d4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80074d2:	2302      	movs	r3, #2
  }
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3728      	adds	r7, #40	; 0x28
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b0ba      	sub	sp, #232	; 0xe8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007506:	f640 030f 	movw	r3, #2063	; 0x80f
 800750a:	4013      	ands	r3, r2
 800750c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d115      	bne.n	8007544 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00f      	beq.n	8007544 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 82ab 	beq.w	8007a90 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      }
      return;
 8007542:	e2a5      	b.n	8007a90 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8117 	beq.w	800777c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800754e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800755a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800755e:	4b85      	ldr	r3, [pc, #532]	; (8007774 <HAL_UART_IRQHandler+0x298>)
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 810a 	beq.w	800777c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d011      	beq.n	8007598 <HAL_UART_IRQHandler+0xbc>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2201      	movs	r2, #1
 8007586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800758e:	f043 0201 	orr.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d011      	beq.n	80075c8 <HAL_UART_IRQHandler+0xec>
 80075a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2202      	movs	r2, #2
 80075b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075be:	f043 0204 	orr.w	r2, r3, #4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d011      	beq.n	80075f8 <HAL_UART_IRQHandler+0x11c>
 80075d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2204      	movs	r2, #4
 80075e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ee:	f043 0202 	orr.w	r2, r3, #2
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d017      	beq.n	8007634 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007614:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2208      	movs	r2, #8
 8007622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800762a:	f043 0208 	orr.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800763c:	2b00      	cmp	r3, #0
 800763e:	d012      	beq.n	8007666 <HAL_UART_IRQHandler+0x18a>
 8007640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00c      	beq.n	8007666 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800765c:	f043 0220 	orr.w	r2, r3, #32
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 8211 	beq.w	8007a94 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00d      	beq.n	800769a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ae:	2b40      	cmp	r3, #64	; 0x40
 80076b0:	d005      	beq.n	80076be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d04f      	beq.n	800775e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fdc0 	bl	8008244 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d141      	bne.n	8007756 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3308      	adds	r3, #8
 80076d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3308      	adds	r3, #8
 80076fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800770a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1d9      	bne.n	80076d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007722:	2b00      	cmp	r3, #0
 8007724:	d013      	beq.n	800774e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800772a:	4a13      	ldr	r2, [pc, #76]	; (8007778 <HAL_UART_IRQHandler+0x29c>)
 800772c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007732:	4618      	mov	r0, r3
 8007734:	f7fc fa26 	bl	8003b84 <HAL_DMA_Abort_IT>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d017      	beq.n	800776e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800774c:	e00f      	b.n	800776e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f9b4 	bl	8007abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007754:	e00b      	b.n	800776e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9b0 	bl	8007abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775c:	e007      	b.n	800776e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f9ac 	bl	8007abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800776c:	e192      	b.n	8007a94 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776e:	bf00      	nop
    return;
 8007770:	e190      	b.n	8007a94 <HAL_UART_IRQHandler+0x5b8>
 8007772:	bf00      	nop
 8007774:	04000120 	.word	0x04000120
 8007778:	0800830d 	.word	0x0800830d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007780:	2b01      	cmp	r3, #1
 8007782:	f040 814b 	bne.w	8007a1c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8144 	beq.w	8007a1c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	2b00      	cmp	r3, #0
 800779e:	f000 813d 	beq.w	8007a1c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2210      	movs	r2, #16
 80077a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b4:	2b40      	cmp	r3, #64	; 0x40
 80077b6:	f040 80b5 	bne.w	8007924 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8164 	beq.w	8007a98 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077da:	429a      	cmp	r2, r3
 80077dc:	f080 815c 	bcs.w	8007a98 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	f000 8086 	beq.w	8007902 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800780a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800780e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007820:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007824:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800782c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1da      	bne.n	80077f6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007864:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007868:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800786c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e1      	bne.n	8007840 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800788c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800788e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007892:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078a0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078a8:	e841 2300 	strex	r3, r2, [r1]
 80078ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e3      	bne.n	800787c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d2:	f023 0310 	bic.w	r3, r3, #16
 80078d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80078e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e4      	bne.n	80078c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fc f908 	bl	8003b12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007914:	b29b      	uxth	r3, r3
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	b29b      	uxth	r3, r3
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f8d7 	bl	8007ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007922:	e0b9      	b.n	8007a98 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007930:	b29b      	uxth	r3, r3
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 80ab 	beq.w	8007a9c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007946:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80a6 	beq.w	8007a9c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800795e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007972:	647b      	str	r3, [r7, #68]	; 0x44
 8007974:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e4      	bne.n	8007950 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3308      	adds	r3, #8
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	623b      	str	r3, [r7, #32]
   return(result);
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	f023 0301 	bic.w	r3, r3, #1
 800799c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	3308      	adds	r3, #8
 80079a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079aa:	633a      	str	r2, [r7, #48]	; 0x30
 80079ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e3      	bne.n	8007986 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2220      	movs	r2, #32
 80079c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	60fb      	str	r3, [r7, #12]
   return(result);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0310 	bic.w	r3, r3, #16
 80079e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079f4:	61fb      	str	r3, [r7, #28]
 80079f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	69b9      	ldr	r1, [r7, #24]
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	617b      	str	r3, [r7, #20]
   return(result);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e4      	bne.n	80079d2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f85b 	bl	8007ad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a1a:	e03f      	b.n	8007a9c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00e      	beq.n	8007a46 <HAL_UART_IRQHandler+0x56a>
 8007a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d008      	beq.n	8007a46 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fe4c 	bl	80086dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a44:	e02d      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00e      	beq.n	8007a70 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01c      	beq.n	8007aa0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
    }
    return;
 8007a6e:	e017      	b.n	8007aa0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d012      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00c      	beq.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fc55 	bl	8008338 <UART_EndTransmit_IT>
    return;
 8007a8e:	e008      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a90:	bf00      	nop
 8007a92:	e006      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007a94:	bf00      	nop
 8007a96:	e004      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a98:	bf00      	nop
 8007a9a:	e002      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
      return;
 8007a9c:	bf00      	nop
 8007a9e:	e000      	b.n	8007aa2 <HAL_UART_IRQHandler+0x5c6>
    return;
 8007aa0:	bf00      	nop
  }

}
 8007aa2:	37e8      	adds	r7, #232	; 0xe8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b8a      	ldr	r3, [pc, #552]	; (8007d3c <UART_SetConfig+0x254>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	6979      	ldr	r1, [r7, #20]
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	430a      	orrs	r2, r1
 8007b58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a78      	ldr	r2, [pc, #480]	; (8007d40 <UART_SetConfig+0x258>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d120      	bne.n	8007ba6 <UART_SetConfig+0xbe>
 8007b64:	4b77      	ldr	r3, [pc, #476]	; (8007d44 <UART_SetConfig+0x25c>)
 8007b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d817      	bhi.n	8007ba0 <UART_SetConfig+0xb8>
 8007b70:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <UART_SetConfig+0x90>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007b89 	.word	0x08007b89
 8007b7c:	08007b95 	.word	0x08007b95
 8007b80:	08007b9b 	.word	0x08007b9b
 8007b84:	08007b8f 	.word	0x08007b8f
 8007b88:	2300      	movs	r3, #0
 8007b8a:	77fb      	strb	r3, [r7, #31]
 8007b8c:	e01d      	b.n	8007bca <UART_SetConfig+0xe2>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	77fb      	strb	r3, [r7, #31]
 8007b92:	e01a      	b.n	8007bca <UART_SetConfig+0xe2>
 8007b94:	2304      	movs	r3, #4
 8007b96:	77fb      	strb	r3, [r7, #31]
 8007b98:	e017      	b.n	8007bca <UART_SetConfig+0xe2>
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	77fb      	strb	r3, [r7, #31]
 8007b9e:	e014      	b.n	8007bca <UART_SetConfig+0xe2>
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e011      	b.n	8007bca <UART_SetConfig+0xe2>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a67      	ldr	r2, [pc, #412]	; (8007d48 <UART_SetConfig+0x260>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d102      	bne.n	8007bb6 <UART_SetConfig+0xce>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	77fb      	strb	r3, [r7, #31]
 8007bb4:	e009      	b.n	8007bca <UART_SetConfig+0xe2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a64      	ldr	r2, [pc, #400]	; (8007d4c <UART_SetConfig+0x264>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d102      	bne.n	8007bc6 <UART_SetConfig+0xde>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e001      	b.n	8007bca <UART_SetConfig+0xe2>
 8007bc6:	2310      	movs	r3, #16
 8007bc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd2:	d15a      	bne.n	8007c8a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8007bd4:	7ffb      	ldrb	r3, [r7, #31]
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d827      	bhi.n	8007c2a <UART_SetConfig+0x142>
 8007bda:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <UART_SetConfig+0xf8>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c05 	.word	0x08007c05
 8007be4:	08007c0d 	.word	0x08007c0d
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	08007c2b 	.word	0x08007c2b
 8007bf0:	08007c1b 	.word	0x08007c1b
 8007bf4:	08007c2b 	.word	0x08007c2b
 8007bf8:	08007c2b 	.word	0x08007c2b
 8007bfc:	08007c2b 	.word	0x08007c2b
 8007c00:	08007c23 	.word	0x08007c23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c04:	f7fe f948 	bl	8005e98 <HAL_RCC_GetPCLK1Freq>
 8007c08:	61b8      	str	r0, [r7, #24]
        break;
 8007c0a:	e013      	b.n	8007c34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c0c:	f7fe f966 	bl	8005edc <HAL_RCC_GetPCLK2Freq>
 8007c10:	61b8      	str	r0, [r7, #24]
        break;
 8007c12:	e00f      	b.n	8007c34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c14:	4b4e      	ldr	r3, [pc, #312]	; (8007d50 <UART_SetConfig+0x268>)
 8007c16:	61bb      	str	r3, [r7, #24]
        break;
 8007c18:	e00c      	b.n	8007c34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c1a:	f7fe f8c7 	bl	8005dac <HAL_RCC_GetSysClockFreq>
 8007c1e:	61b8      	str	r0, [r7, #24]
        break;
 8007c20:	e008      	b.n	8007c34 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c26:	61bb      	str	r3, [r7, #24]
        break;
 8007c28:	e004      	b.n	8007c34 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	77bb      	strb	r3, [r7, #30]
        break;
 8007c32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d074      	beq.n	8007d24 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	005a      	lsls	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2b0f      	cmp	r3, #15
 8007c54:	d916      	bls.n	8007c84 <UART_SetConfig+0x19c>
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5c:	d212      	bcs.n	8007c84 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	f023 030f 	bic.w	r3, r3, #15
 8007c66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	085b      	lsrs	r3, r3, #1
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f003 0307 	and.w	r3, r3, #7
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	89fb      	ldrh	r3, [r7, #14]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	89fa      	ldrh	r2, [r7, #14]
 8007c80:	60da      	str	r2, [r3, #12]
 8007c82:	e04f      	b.n	8007d24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	77bb      	strb	r3, [r7, #30]
 8007c88:	e04c      	b.n	8007d24 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c8a:	7ffb      	ldrb	r3, [r7, #31]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d828      	bhi.n	8007ce2 <UART_SetConfig+0x1fa>
 8007c90:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <UART_SetConfig+0x1b0>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cc5 	.word	0x08007cc5
 8007ca0:	08007ccd 	.word	0x08007ccd
 8007ca4:	08007ce3 	.word	0x08007ce3
 8007ca8:	08007cd3 	.word	0x08007cd3
 8007cac:	08007ce3 	.word	0x08007ce3
 8007cb0:	08007ce3 	.word	0x08007ce3
 8007cb4:	08007ce3 	.word	0x08007ce3
 8007cb8:	08007cdb 	.word	0x08007cdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cbc:	f7fe f8ec 	bl	8005e98 <HAL_RCC_GetPCLK1Freq>
 8007cc0:	61b8      	str	r0, [r7, #24]
        break;
 8007cc2:	e013      	b.n	8007cec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cc4:	f7fe f90a 	bl	8005edc <HAL_RCC_GetPCLK2Freq>
 8007cc8:	61b8      	str	r0, [r7, #24]
        break;
 8007cca:	e00f      	b.n	8007cec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ccc:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <UART_SetConfig+0x268>)
 8007cce:	61bb      	str	r3, [r7, #24]
        break;
 8007cd0:	e00c      	b.n	8007cec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cd2:	f7fe f86b 	bl	8005dac <HAL_RCC_GetSysClockFreq>
 8007cd6:	61b8      	str	r0, [r7, #24]
        break;
 8007cd8:	e008      	b.n	8007cec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cde:	61bb      	str	r3, [r7, #24]
        break;
 8007ce0:	e004      	b.n	8007cec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	77bb      	strb	r3, [r7, #30]
        break;
 8007cea:	bf00      	nop
    }

    if (pclk != 0U)
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d018      	beq.n	8007d24 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	085a      	lsrs	r2, r3, #1
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	441a      	add	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b0f      	cmp	r3, #15
 8007d0a:	d909      	bls.n	8007d20 <UART_SetConfig+0x238>
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d12:	d205      	bcs.n	8007d20 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60da      	str	r2, [r3, #12]
 8007d1e:	e001      	b.n	8007d24 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d30:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3720      	adds	r7, #32
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	efff69f3 	.word	0xefff69f3
 8007d40:	40013800 	.word	0x40013800
 8007d44:	40021000 	.word	0x40021000
 8007d48:	40004400 	.word	0x40004400
 8007d4c:	40004800 	.word	0x40004800
 8007d50:	007a1200 	.word	0x007a1200

08007d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	f003 0301 	and.w	r3, r3, #1
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00a      	beq.n	8007dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	f003 0308 	and.w	r3, r3, #8
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	f003 0310 	and.w	r3, r3, #16
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	f003 0320 	and.w	r3, r3, #32
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01a      	beq.n	8007e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e52:	d10a      	bne.n	8007e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	430a      	orrs	r2, r1
 8007e8a:	605a      	str	r2, [r3, #4]
  }
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b098      	sub	sp, #96	; 0x60
 8007e9c:	af02      	add	r7, sp, #8
 8007e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ea8:	f7fa fbdc 	bl	8002664 <HAL_GetTick>
 8007eac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d12e      	bne.n	8007f1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f88c 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d021      	beq.n	8007f1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eea:	653b      	str	r3, [r7, #80]	; 0x50
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007efa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e6      	bne.n	8007ed6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e062      	b.n	8007fe0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0304 	and.w	r3, r3, #4
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d149      	bne.n	8007fbc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f30:	2200      	movs	r2, #0
 8007f32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f856 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d03c      	beq.n	8007fbc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	623b      	str	r3, [r7, #32]
   return(result);
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f60:	633b      	str	r3, [r7, #48]	; 0x30
 8007f62:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e6      	bne.n	8007f42 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3308      	adds	r3, #8
 8007f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3308      	adds	r3, #8
 8007f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f94:	61fa      	str	r2, [r7, #28]
 8007f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	69b9      	ldr	r1, [r7, #24]
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e5      	bne.n	8007f74 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e011      	b.n	8007fe0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3758      	adds	r7, #88	; 0x58
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff8:	e049      	b.n	800808e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008000:	d045      	beq.n	800808e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008002:	f7fa fb2f 	bl	8002664 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	429a      	cmp	r2, r3
 8008010:	d302      	bcc.n	8008018 <UART_WaitOnFlagUntilTimeout+0x30>
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e048      	b.n	80080ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d031      	beq.n	800808e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	f003 0308 	and.w	r3, r3, #8
 8008034:	2b08      	cmp	r3, #8
 8008036:	d110      	bne.n	800805a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2208      	movs	r2, #8
 800803e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 f8ff 	bl	8008244 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2208      	movs	r2, #8
 800804a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e029      	b.n	80080ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008068:	d111      	bne.n	800808e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008072:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 f8e5 	bl	8008244 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e00f      	b.n	80080ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4013      	ands	r3, r2
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	429a      	cmp	r2, r3
 800809c:	bf0c      	ite	eq
 800809e:	2301      	moveq	r3, #1
 80080a0:	2300      	movne	r3, #0
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	461a      	mov	r2, r3
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d0a6      	beq.n	8007ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b097      	sub	sp, #92	; 0x5c
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	88fa      	ldrh	r2, [r7, #6]
 80080d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	88fa      	ldrh	r2, [r7, #6]
 80080d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ea:	d10e      	bne.n	800810a <UART_Start_Receive_IT+0x52>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d105      	bne.n	8008100 <UART_Start_Receive_IT+0x48>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080fe:	e02d      	b.n	800815c <UART_Start_Receive_IT+0xa4>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	22ff      	movs	r2, #255	; 0xff
 8008104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008108:	e028      	b.n	800815c <UART_Start_Receive_IT+0xa4>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10d      	bne.n	800812e <UART_Start_Receive_IT+0x76>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d104      	bne.n	8008124 <UART_Start_Receive_IT+0x6c>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	22ff      	movs	r2, #255	; 0xff
 800811e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008122:	e01b      	b.n	800815c <UART_Start_Receive_IT+0xa4>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	227f      	movs	r2, #127	; 0x7f
 8008128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800812c:	e016      	b.n	800815c <UART_Start_Receive_IT+0xa4>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008136:	d10d      	bne.n	8008154 <UART_Start_Receive_IT+0x9c>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d104      	bne.n	800814a <UART_Start_Receive_IT+0x92>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	227f      	movs	r2, #127	; 0x7f
 8008144:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008148:	e008      	b.n	800815c <UART_Start_Receive_IT+0xa4>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	223f      	movs	r2, #63	; 0x3f
 800814e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008152:	e003      	b.n	800815c <UART_Start_Receive_IT+0xa4>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2222      	movs	r2, #34	; 0x22
 8008168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3308      	adds	r3, #8
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	657b      	str	r3, [r7, #84]	; 0x54
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3308      	adds	r3, #8
 800818a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800818c:	64ba      	str	r2, [r7, #72]	; 0x48
 800818e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800819a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e5      	bne.n	800816c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a8:	d107      	bne.n	80081ba <UART_Start_Receive_IT+0x102>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d103      	bne.n	80081ba <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4a21      	ldr	r2, [pc, #132]	; (800823c <UART_Start_Receive_IT+0x184>)
 80081b6:	669a      	str	r2, [r3, #104]	; 0x68
 80081b8:	e002      	b.n	80081c0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	4a20      	ldr	r2, [pc, #128]	; (8008240 <UART_Start_Receive_IT+0x188>)
 80081be:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d019      	beq.n	80081fc <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80081dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e6:	637b      	str	r3, [r7, #52]	; 0x34
 80081e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e6      	bne.n	80081c8 <UART_Start_Receive_IT+0x110>
 80081fa:	e018      	b.n	800822e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	613b      	str	r3, [r7, #16]
   return(result);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f043 0320 	orr.w	r3, r3, #32
 8008210:	653b      	str	r3, [r7, #80]	; 0x50
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800821a:	623b      	str	r3, [r7, #32]
 800821c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	69f9      	ldr	r1, [r7, #28]
 8008220:	6a3a      	ldr	r2, [r7, #32]
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	61bb      	str	r3, [r7, #24]
   return(result);
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e6      	bne.n	80081fc <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	375c      	adds	r7, #92	; 0x5c
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	08008535 	.word	0x08008535
 8008240:	0800838d 	.word	0x0800838d

08008244 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008244:	b480      	push	{r7}
 8008246:	b095      	sub	sp, #84	; 0x54
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008260:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	461a      	mov	r2, r3
 8008268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800826a:	643b      	str	r3, [r7, #64]	; 0x40
 800826c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e6      	bne.n	800824c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3308      	adds	r3, #8
 8008284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	e853 3f00 	ldrex	r3, [r3]
 800828c:	61fb      	str	r3, [r7, #28]
   return(result);
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	64bb      	str	r3, [r7, #72]	; 0x48
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3308      	adds	r3, #8
 800829c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800829e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a6:	e841 2300 	strex	r3, r2, [r1]
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1e5      	bne.n	800827e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d118      	bne.n	80082ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	e853 3f00 	ldrex	r3, [r3]
 80082c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f023 0310 	bic.w	r3, r3, #16
 80082ce:	647b      	str	r3, [r7, #68]	; 0x44
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082dc:	6979      	ldr	r1, [r7, #20]
 80082de:	69ba      	ldr	r2, [r7, #24]
 80082e0:	e841 2300 	strex	r3, r2, [r1]
 80082e4:	613b      	str	r3, [r7, #16]
   return(result);
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e6      	bne.n	80082ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008300:	bf00      	nop
 8008302:	3754      	adds	r7, #84	; 0x54
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2200      	movs	r2, #0
 800831e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f7ff fbc6 	bl	8007abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008330:	bf00      	nop
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	e853 3f00 	ldrex	r3, [r3]
 800834c:	60bb      	str	r3, [r7, #8]
   return(result);
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008354:	61fb      	str	r3, [r7, #28]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	461a      	mov	r2, r3
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	61bb      	str	r3, [r7, #24]
 8008360:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	e841 2300 	strex	r3, r2, [r1]
 800836a:	613b      	str	r3, [r7, #16]
   return(result);
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1e6      	bne.n	8008340 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7ff fb92 	bl	8007aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008384:	bf00      	nop
 8008386:	3720      	adds	r7, #32
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b09c      	sub	sp, #112	; 0x70
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800839a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a4:	2b22      	cmp	r3, #34	; 0x22
 80083a6:	f040 80b9 	bne.w	800851c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80083b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80083b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80083b8:	b2d9      	uxtb	r1, r3
 80083ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c4:	400a      	ands	r2, r1
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 809c 	bne.w	800852c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008408:	66bb      	str	r3, [r7, #104]	; 0x68
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008412:	65bb      	str	r3, [r7, #88]	; 0x58
 8008414:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008416:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008418:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800841a:	e841 2300 	strex	r3, r2, [r1]
 800841e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1e6      	bne.n	80083f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3308      	adds	r3, #8
 800842c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	667b      	str	r3, [r7, #100]	; 0x64
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3308      	adds	r3, #8
 8008444:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008446:	647a      	str	r2, [r7, #68]	; 0x44
 8008448:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800844c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e5      	bne.n	8008426 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2220      	movs	r2, #32
 800845e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d018      	beq.n	80084ae <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	623b      	str	r3, [r7, #32]
   return(result);
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008490:	663b      	str	r3, [r7, #96]	; 0x60
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800849a:	633b      	str	r3, [r7, #48]	; 0x30
 800849c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e6      	bne.n	800847c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d12e      	bne.n	8008514 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	e853 3f00 	ldrex	r3, [r3]
 80084c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f023 0310 	bic.w	r3, r3, #16
 80084d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	69b9      	ldr	r1, [r7, #24]
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	617b      	str	r3, [r7, #20]
   return(result);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e6      	bne.n	80084bc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69db      	ldr	r3, [r3, #28]
 80084f4:	f003 0310 	and.w	r3, r3, #16
 80084f8:	2b10      	cmp	r3, #16
 80084fa:	d103      	bne.n	8008504 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2210      	movs	r2, #16
 8008502:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff fadf 	bl	8007ad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008512:	e00b      	b.n	800852c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7f8 fc35 	bl	8000d84 <HAL_UART_RxCpltCallback>
}
 800851a:	e007      	b.n	800852c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699a      	ldr	r2, [r3, #24]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f042 0208 	orr.w	r2, r2, #8
 800852a:	619a      	str	r2, [r3, #24]
}
 800852c:	bf00      	nop
 800852e:	3770      	adds	r7, #112	; 0x70
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b09c      	sub	sp, #112	; 0x70
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008542:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800854c:	2b22      	cmp	r3, #34	; 0x22
 800854e:	f040 80b9 	bne.w	80086c4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008558:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008560:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008562:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008566:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800856a:	4013      	ands	r3, r2
 800856c:	b29a      	uxth	r2, r3
 800856e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008570:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008576:	1c9a      	adds	r2, r3, #2
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008582:	b29b      	uxth	r3, r3
 8008584:	3b01      	subs	r3, #1
 8008586:	b29a      	uxth	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008594:	b29b      	uxth	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 809c 	bne.w	80086d4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a4:	e853 3f00 	ldrex	r3, [r3]
 80085a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80085aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085b0:	667b      	str	r3, [r7, #100]	; 0x64
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ba:	657b      	str	r3, [r7, #84]	; 0x54
 80085bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e6      	bne.n	800859c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3308      	adds	r3, #8
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	f023 0301 	bic.w	r3, r3, #1
 80085e4:	663b      	str	r3, [r7, #96]	; 0x60
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3308      	adds	r3, #8
 80085ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085ee:	643a      	str	r2, [r7, #64]	; 0x40
 80085f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d018      	beq.n	8008656 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	61fb      	str	r3, [r7, #28]
   return(result);
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008644:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e6      	bne.n	8008624 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865a:	2b01      	cmp	r3, #1
 800865c:	d12e      	bne.n	80086bc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	60bb      	str	r3, [r7, #8]
   return(result);
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f023 0310 	bic.w	r3, r3, #16
 8008678:	65bb      	str	r3, [r7, #88]	; 0x58
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008682:	61bb      	str	r3, [r7, #24]
 8008684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6979      	ldr	r1, [r7, #20]
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	613b      	str	r3, [r7, #16]
   return(result);
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e6      	bne.n	8008664 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	69db      	ldr	r3, [r3, #28]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b10      	cmp	r3, #16
 80086a2:	d103      	bne.n	80086ac <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2210      	movs	r2, #16
 80086aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7ff fa0b 	bl	8007ad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80086ba:	e00b      	b.n	80086d4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7f8 fb61 	bl	8000d84 <HAL_UART_RxCpltCallback>
}
 80086c2:	e007      	b.n	80086d4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0208 	orr.w	r2, r2, #8
 80086d2:	619a      	str	r2, [r3, #24]
}
 80086d4:	bf00      	nop
 80086d6:	3770      	adds	r7, #112	; 0x70
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <__errno>:
 80086f0:	4b01      	ldr	r3, [pc, #4]	; (80086f8 <__errno+0x8>)
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	4770      	bx	lr
 80086f6:	bf00      	nop
 80086f8:	2000000c 	.word	0x2000000c

080086fc <__libc_init_array>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	4d0d      	ldr	r5, [pc, #52]	; (8008734 <__libc_init_array+0x38>)
 8008700:	4c0d      	ldr	r4, [pc, #52]	; (8008738 <__libc_init_array+0x3c>)
 8008702:	1b64      	subs	r4, r4, r5
 8008704:	10a4      	asrs	r4, r4, #2
 8008706:	2600      	movs	r6, #0
 8008708:	42a6      	cmp	r6, r4
 800870a:	d109      	bne.n	8008720 <__libc_init_array+0x24>
 800870c:	4d0b      	ldr	r5, [pc, #44]	; (800873c <__libc_init_array+0x40>)
 800870e:	4c0c      	ldr	r4, [pc, #48]	; (8008740 <__libc_init_array+0x44>)
 8008710:	f000 f96e 	bl	80089f0 <_init>
 8008714:	1b64      	subs	r4, r4, r5
 8008716:	10a4      	asrs	r4, r4, #2
 8008718:	2600      	movs	r6, #0
 800871a:	42a6      	cmp	r6, r4
 800871c:	d105      	bne.n	800872a <__libc_init_array+0x2e>
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	f855 3b04 	ldr.w	r3, [r5], #4
 8008724:	4798      	blx	r3
 8008726:	3601      	adds	r6, #1
 8008728:	e7ee      	b.n	8008708 <__libc_init_array+0xc>
 800872a:	f855 3b04 	ldr.w	r3, [r5], #4
 800872e:	4798      	blx	r3
 8008730:	3601      	adds	r6, #1
 8008732:	e7f2      	b.n	800871a <__libc_init_array+0x1e>
 8008734:	08008a48 	.word	0x08008a48
 8008738:	08008a48 	.word	0x08008a48
 800873c:	08008a48 	.word	0x08008a48
 8008740:	08008a4c 	.word	0x08008a4c

08008744 <malloc>:
 8008744:	4b02      	ldr	r3, [pc, #8]	; (8008750 <malloc+0xc>)
 8008746:	4601      	mov	r1, r0
 8008748:	6818      	ldr	r0, [r3, #0]
 800874a:	f000 b87f 	b.w	800884c <_malloc_r>
 800874e:	bf00      	nop
 8008750:	2000000c 	.word	0x2000000c

08008754 <free>:
 8008754:	4b02      	ldr	r3, [pc, #8]	; (8008760 <free+0xc>)
 8008756:	4601      	mov	r1, r0
 8008758:	6818      	ldr	r0, [r3, #0]
 800875a:	f000 b80b 	b.w	8008774 <_free_r>
 800875e:	bf00      	nop
 8008760:	2000000c 	.word	0x2000000c

08008764 <memset>:
 8008764:	4402      	add	r2, r0
 8008766:	4603      	mov	r3, r0
 8008768:	4293      	cmp	r3, r2
 800876a:	d100      	bne.n	800876e <memset+0xa>
 800876c:	4770      	bx	lr
 800876e:	f803 1b01 	strb.w	r1, [r3], #1
 8008772:	e7f9      	b.n	8008768 <memset+0x4>

08008774 <_free_r>:
 8008774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008776:	2900      	cmp	r1, #0
 8008778:	d044      	beq.n	8008804 <_free_r+0x90>
 800877a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800877e:	9001      	str	r0, [sp, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f1a1 0404 	sub.w	r4, r1, #4
 8008786:	bfb8      	it	lt
 8008788:	18e4      	addlt	r4, r4, r3
 800878a:	f000 f8e3 	bl	8008954 <__malloc_lock>
 800878e:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <_free_r+0x94>)
 8008790:	9801      	ldr	r0, [sp, #4]
 8008792:	6813      	ldr	r3, [r2, #0]
 8008794:	b933      	cbnz	r3, 80087a4 <_free_r+0x30>
 8008796:	6063      	str	r3, [r4, #4]
 8008798:	6014      	str	r4, [r2, #0]
 800879a:	b003      	add	sp, #12
 800879c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a0:	f000 b8de 	b.w	8008960 <__malloc_unlock>
 80087a4:	42a3      	cmp	r3, r4
 80087a6:	d908      	bls.n	80087ba <_free_r+0x46>
 80087a8:	6825      	ldr	r5, [r4, #0]
 80087aa:	1961      	adds	r1, r4, r5
 80087ac:	428b      	cmp	r3, r1
 80087ae:	bf01      	itttt	eq
 80087b0:	6819      	ldreq	r1, [r3, #0]
 80087b2:	685b      	ldreq	r3, [r3, #4]
 80087b4:	1949      	addeq	r1, r1, r5
 80087b6:	6021      	streq	r1, [r4, #0]
 80087b8:	e7ed      	b.n	8008796 <_free_r+0x22>
 80087ba:	461a      	mov	r2, r3
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	b10b      	cbz	r3, 80087c4 <_free_r+0x50>
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	d9fa      	bls.n	80087ba <_free_r+0x46>
 80087c4:	6811      	ldr	r1, [r2, #0]
 80087c6:	1855      	adds	r5, r2, r1
 80087c8:	42a5      	cmp	r5, r4
 80087ca:	d10b      	bne.n	80087e4 <_free_r+0x70>
 80087cc:	6824      	ldr	r4, [r4, #0]
 80087ce:	4421      	add	r1, r4
 80087d0:	1854      	adds	r4, r2, r1
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	6011      	str	r1, [r2, #0]
 80087d6:	d1e0      	bne.n	800879a <_free_r+0x26>
 80087d8:	681c      	ldr	r4, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	6053      	str	r3, [r2, #4]
 80087de:	4421      	add	r1, r4
 80087e0:	6011      	str	r1, [r2, #0]
 80087e2:	e7da      	b.n	800879a <_free_r+0x26>
 80087e4:	d902      	bls.n	80087ec <_free_r+0x78>
 80087e6:	230c      	movs	r3, #12
 80087e8:	6003      	str	r3, [r0, #0]
 80087ea:	e7d6      	b.n	800879a <_free_r+0x26>
 80087ec:	6825      	ldr	r5, [r4, #0]
 80087ee:	1961      	adds	r1, r4, r5
 80087f0:	428b      	cmp	r3, r1
 80087f2:	bf04      	itt	eq
 80087f4:	6819      	ldreq	r1, [r3, #0]
 80087f6:	685b      	ldreq	r3, [r3, #4]
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	bf04      	itt	eq
 80087fc:	1949      	addeq	r1, r1, r5
 80087fe:	6021      	streq	r1, [r4, #0]
 8008800:	6054      	str	r4, [r2, #4]
 8008802:	e7ca      	b.n	800879a <_free_r+0x26>
 8008804:	b003      	add	sp, #12
 8008806:	bd30      	pop	{r4, r5, pc}
 8008808:	200005fc 	.word	0x200005fc

0800880c <sbrk_aligned>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4e0e      	ldr	r6, [pc, #56]	; (8008848 <sbrk_aligned+0x3c>)
 8008810:	460c      	mov	r4, r1
 8008812:	6831      	ldr	r1, [r6, #0]
 8008814:	4605      	mov	r5, r0
 8008816:	b911      	cbnz	r1, 800881e <sbrk_aligned+0x12>
 8008818:	f000 f88c 	bl	8008934 <_sbrk_r>
 800881c:	6030      	str	r0, [r6, #0]
 800881e:	4621      	mov	r1, r4
 8008820:	4628      	mov	r0, r5
 8008822:	f000 f887 	bl	8008934 <_sbrk_r>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d00a      	beq.n	8008840 <sbrk_aligned+0x34>
 800882a:	1cc4      	adds	r4, r0, #3
 800882c:	f024 0403 	bic.w	r4, r4, #3
 8008830:	42a0      	cmp	r0, r4
 8008832:	d007      	beq.n	8008844 <sbrk_aligned+0x38>
 8008834:	1a21      	subs	r1, r4, r0
 8008836:	4628      	mov	r0, r5
 8008838:	f000 f87c 	bl	8008934 <_sbrk_r>
 800883c:	3001      	adds	r0, #1
 800883e:	d101      	bne.n	8008844 <sbrk_aligned+0x38>
 8008840:	f04f 34ff 	mov.w	r4, #4294967295
 8008844:	4620      	mov	r0, r4
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	20000600 	.word	0x20000600

0800884c <_malloc_r>:
 800884c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008850:	1ccd      	adds	r5, r1, #3
 8008852:	f025 0503 	bic.w	r5, r5, #3
 8008856:	3508      	adds	r5, #8
 8008858:	2d0c      	cmp	r5, #12
 800885a:	bf38      	it	cc
 800885c:	250c      	movcc	r5, #12
 800885e:	2d00      	cmp	r5, #0
 8008860:	4607      	mov	r7, r0
 8008862:	db01      	blt.n	8008868 <_malloc_r+0x1c>
 8008864:	42a9      	cmp	r1, r5
 8008866:	d905      	bls.n	8008874 <_malloc_r+0x28>
 8008868:	230c      	movs	r3, #12
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	2600      	movs	r6, #0
 800886e:	4630      	mov	r0, r6
 8008870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008874:	4e2e      	ldr	r6, [pc, #184]	; (8008930 <_malloc_r+0xe4>)
 8008876:	f000 f86d 	bl	8008954 <__malloc_lock>
 800887a:	6833      	ldr	r3, [r6, #0]
 800887c:	461c      	mov	r4, r3
 800887e:	bb34      	cbnz	r4, 80088ce <_malloc_r+0x82>
 8008880:	4629      	mov	r1, r5
 8008882:	4638      	mov	r0, r7
 8008884:	f7ff ffc2 	bl	800880c <sbrk_aligned>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	4604      	mov	r4, r0
 800888c:	d14d      	bne.n	800892a <_malloc_r+0xde>
 800888e:	6834      	ldr	r4, [r6, #0]
 8008890:	4626      	mov	r6, r4
 8008892:	2e00      	cmp	r6, #0
 8008894:	d140      	bne.n	8008918 <_malloc_r+0xcc>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	4631      	mov	r1, r6
 800889a:	4638      	mov	r0, r7
 800889c:	eb04 0803 	add.w	r8, r4, r3
 80088a0:	f000 f848 	bl	8008934 <_sbrk_r>
 80088a4:	4580      	cmp	r8, r0
 80088a6:	d13a      	bne.n	800891e <_malloc_r+0xd2>
 80088a8:	6821      	ldr	r1, [r4, #0]
 80088aa:	3503      	adds	r5, #3
 80088ac:	1a6d      	subs	r5, r5, r1
 80088ae:	f025 0503 	bic.w	r5, r5, #3
 80088b2:	3508      	adds	r5, #8
 80088b4:	2d0c      	cmp	r5, #12
 80088b6:	bf38      	it	cc
 80088b8:	250c      	movcc	r5, #12
 80088ba:	4629      	mov	r1, r5
 80088bc:	4638      	mov	r0, r7
 80088be:	f7ff ffa5 	bl	800880c <sbrk_aligned>
 80088c2:	3001      	adds	r0, #1
 80088c4:	d02b      	beq.n	800891e <_malloc_r+0xd2>
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	442b      	add	r3, r5
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	e00e      	b.n	80088ec <_malloc_r+0xa0>
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	1b52      	subs	r2, r2, r5
 80088d2:	d41e      	bmi.n	8008912 <_malloc_r+0xc6>
 80088d4:	2a0b      	cmp	r2, #11
 80088d6:	d916      	bls.n	8008906 <_malloc_r+0xba>
 80088d8:	1961      	adds	r1, r4, r5
 80088da:	42a3      	cmp	r3, r4
 80088dc:	6025      	str	r5, [r4, #0]
 80088de:	bf18      	it	ne
 80088e0:	6059      	strne	r1, [r3, #4]
 80088e2:	6863      	ldr	r3, [r4, #4]
 80088e4:	bf08      	it	eq
 80088e6:	6031      	streq	r1, [r6, #0]
 80088e8:	5162      	str	r2, [r4, r5]
 80088ea:	604b      	str	r3, [r1, #4]
 80088ec:	4638      	mov	r0, r7
 80088ee:	f104 060b 	add.w	r6, r4, #11
 80088f2:	f000 f835 	bl	8008960 <__malloc_unlock>
 80088f6:	f026 0607 	bic.w	r6, r6, #7
 80088fa:	1d23      	adds	r3, r4, #4
 80088fc:	1af2      	subs	r2, r6, r3
 80088fe:	d0b6      	beq.n	800886e <_malloc_r+0x22>
 8008900:	1b9b      	subs	r3, r3, r6
 8008902:	50a3      	str	r3, [r4, r2]
 8008904:	e7b3      	b.n	800886e <_malloc_r+0x22>
 8008906:	6862      	ldr	r2, [r4, #4]
 8008908:	42a3      	cmp	r3, r4
 800890a:	bf0c      	ite	eq
 800890c:	6032      	streq	r2, [r6, #0]
 800890e:	605a      	strne	r2, [r3, #4]
 8008910:	e7ec      	b.n	80088ec <_malloc_r+0xa0>
 8008912:	4623      	mov	r3, r4
 8008914:	6864      	ldr	r4, [r4, #4]
 8008916:	e7b2      	b.n	800887e <_malloc_r+0x32>
 8008918:	4634      	mov	r4, r6
 800891a:	6876      	ldr	r6, [r6, #4]
 800891c:	e7b9      	b.n	8008892 <_malloc_r+0x46>
 800891e:	230c      	movs	r3, #12
 8008920:	603b      	str	r3, [r7, #0]
 8008922:	4638      	mov	r0, r7
 8008924:	f000 f81c 	bl	8008960 <__malloc_unlock>
 8008928:	e7a1      	b.n	800886e <_malloc_r+0x22>
 800892a:	6025      	str	r5, [r4, #0]
 800892c:	e7de      	b.n	80088ec <_malloc_r+0xa0>
 800892e:	bf00      	nop
 8008930:	200005fc 	.word	0x200005fc

08008934 <_sbrk_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d06      	ldr	r5, [pc, #24]	; (8008950 <_sbrk_r+0x1c>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7f9 fdc4 	bl	80024cc <_sbrk>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_sbrk_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_sbrk_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20000604 	.word	0x20000604

08008954 <__malloc_lock>:
 8008954:	4801      	ldr	r0, [pc, #4]	; (800895c <__malloc_lock+0x8>)
 8008956:	f000 b809 	b.w	800896c <__retarget_lock_acquire_recursive>
 800895a:	bf00      	nop
 800895c:	20000608 	.word	0x20000608

08008960 <__malloc_unlock>:
 8008960:	4801      	ldr	r0, [pc, #4]	; (8008968 <__malloc_unlock+0x8>)
 8008962:	f000 b804 	b.w	800896e <__retarget_lock_release_recursive>
 8008966:	bf00      	nop
 8008968:	20000608 	.word	0x20000608

0800896c <__retarget_lock_acquire_recursive>:
 800896c:	4770      	bx	lr

0800896e <__retarget_lock_release_recursive>:
 800896e:	4770      	bx	lr

08008970 <lrintf>:
 8008970:	ee10 3a10 	vmov	r3, s0
 8008974:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008978:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 800897c:	281e      	cmp	r0, #30
 800897e:	b082      	sub	sp, #8
 8008980:	dc2e      	bgt.n	80089e0 <lrintf+0x70>
 8008982:	1c41      	adds	r1, r0, #1
 8008984:	da02      	bge.n	800898c <lrintf+0x1c>
 8008986:	2000      	movs	r0, #0
 8008988:	b002      	add	sp, #8
 800898a:	4770      	bx	lr
 800898c:	2816      	cmp	r0, #22
 800898e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8008992:	dd09      	ble.n	80089a8 <lrintf+0x38>
 8008994:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008998:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800899c:	3a96      	subs	r2, #150	; 0x96
 800899e:	4090      	lsls	r0, r2
 80089a0:	2900      	cmp	r1, #0
 80089a2:	d0f1      	beq.n	8008988 <lrintf+0x18>
 80089a4:	4240      	negs	r0, r0
 80089a6:	e7ef      	b.n	8008988 <lrintf+0x18>
 80089a8:	4b10      	ldr	r3, [pc, #64]	; (80089ec <lrintf+0x7c>)
 80089aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80089ae:	ed93 7a00 	vldr	s14, [r3]
 80089b2:	ee37 0a00 	vadd.f32	s0, s14, s0
 80089b6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80089ba:	eddd 7a01 	vldr	s15, [sp, #4]
 80089be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089c2:	ee17 3a90 	vmov	r3, s15
 80089c6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80089ca:	d0dc      	beq.n	8008986 <lrintf+0x16>
 80089cc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80089d0:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80089d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80089d8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80089dc:	40d8      	lsrs	r0, r3
 80089de:	e7df      	b.n	80089a0 <lrintf+0x30>
 80089e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80089e4:	ee17 0a90 	vmov	r0, s15
 80089e8:	e7ce      	b.n	8008988 <lrintf+0x18>
 80089ea:	bf00      	nop
 80089ec:	08008a40 	.word	0x08008a40

080089f0 <_init>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr

080089fc <_fini>:
 80089fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fe:	bf00      	nop
 8008a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a02:	bc08      	pop	{r3}
 8008a04:	469e      	mov	lr, r3
 8008a06:	4770      	bx	lr

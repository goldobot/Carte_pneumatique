
Code_carte_pneumatique.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077d0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007958  08007958  00017958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007998  08007998  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007998  08007998  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007998  08007998  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800799c  0800799c  0001799c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080079a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000570  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000057c  2000057c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016690  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288e  00000000  00000000  000366cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00038f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011f8  00000000  00000000  0003a250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d35f  00000000  00000000  0003b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b4d  00000000  00000000  000587a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0ef6  00000000  00000000  000702f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001211ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005258  00000000  00000000  0012123c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007940 	.word	0x08007940

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007940 	.word	0x08007940

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <dshot_init>:

int dshot_ready = 0;

/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f83f 	bl	80008c4 <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000846:	f000 f8fb 	bl	8000a40 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800084a:	f000 f91d 	bl	8000a88 <dshot_start_pwm>
  dshot_ready = 1;
 800084e:	4b03      	ldr	r3, [pc, #12]	; (800085c <dshot_init+0x28>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000190 	.word	0x20000190

08000860 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if (!dshot_ready) return;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <dshot_write+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d007      	beq.n	8000880 <dshot_write+0x20>

	dshot_prepare_dmabuffer_all(motor_value);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f000 f98d 	bl	8000b90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000876:	f000 f9bf 	bl	8000bf8 <dshot_dma_start>
	dshot_enable_dma_request();
 800087a:	f000 fa03 	bl	8000c84 <dshot_enable_dma_request>
 800087e:	e000      	b.n	8000882 <dshot_write+0x22>
  if (!dshot_ready) return;
 8000880:	bf00      	nop
}
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000190 	.word	0x20000190

0800088c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d003      	beq.n	80008a4 <dshot_choose_type+0x18>
 800089c:	2b02      	cmp	r3, #2
 800089e:	d103      	bne.n	80008a8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <dshot_choose_type+0x2c>)
 80008a2:	e002      	b.n	80008aa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <dshot_choose_type+0x30>)
 80008a6:	e000      	b.n	80008aa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <dshot_choose_type+0x34>)
	}
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	00b71b00 	.word	0x00b71b00
 80008bc:	005b8d80 	.word	0x005b8d80
 80008c0:	002dc6c0 	.word	0x002dc6c0

080008c4 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	ed2d 8b02 	vpush	{d8}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008d2:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <dshot_set_timer+0xc4>)
 80008d4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	ee07 3a90 	vmov	s15, r3
 80008dc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffd2 	bl	800088c <dshot_choose_type>
 80008e8:	ee07 0a90 	vmov	s15, r0
 80008ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008f4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800098c <dshot_set_timer+0xc8>
 80008f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008fc:	eeb0 0a67 	vmov.f32	s0, s15
 8000900:	f006 ffde 	bl	80078c0 <lrintf>
 8000904:	4603      	mov	r3, r0
 8000906:	b29b      	uxth	r3, r3
 8000908:	3b01      	subs	r3, #1
 800090a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800090c:	4b20      	ldr	r3, [pc, #128]	; (8000990 <dshot_set_timer+0xcc>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	897a      	ldrh	r2, [r7, #10]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <dshot_set_timer+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2214      	movs	r2, #20
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <dshot_set_timer+0xcc>)
 800091e:	2214      	movs	r2, #20
 8000920:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <dshot_set_timer+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	897a      	ldrh	r2, [r7, #10]
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <dshot_set_timer+0xd0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2214      	movs	r2, #20
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <dshot_set_timer+0xd0>)
 8000934:	2214      	movs	r2, #20
 8000936:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <dshot_set_timer+0xd4>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	897a      	ldrh	r2, [r7, #10]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <dshot_set_timer+0xd4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2214      	movs	r2, #20
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <dshot_set_timer+0xd4>)
 800094a:	2214      	movs	r2, #20
 800094c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <dshot_set_timer+0xd0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	897a      	ldrh	r2, [r7, #10]
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <dshot_set_timer+0xd0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2214      	movs	r2, #20
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <dshot_set_timer+0xd0>)
 8000960:	2214      	movs	r2, #20
 8000962:	60da      	str	r2, [r3, #12]

	// motor5
	__HAL_TIM_SET_PRESCALER(MOTOR_5_TIM, dshot_prescaler);
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <dshot_set_timer+0xcc>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	897a      	ldrh	r2, [r7, #10]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_5_TIM, MOTOR_BITLENGTH);
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <dshot_set_timer+0xcc>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2214      	movs	r2, #20
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <dshot_set_timer+0xcc>)
 8000976:	2214      	movs	r2, #20
 8000978:	60da      	str	r2, [r3, #12]
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	ecbd 8b02 	vpop	{d8}
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	016e3600 	.word	0x016e3600
 800098c:	3c23d70a 	.word	0x3c23d70a
 8000990:	200002ac 	.word	0x200002ac
 8000994:	200002f8 	.word	0x200002f8
 8000998:	20000260 	.word	0x20000260

0800099c <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[MOTOR_1_TIM_DMA_ID])
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d108      	bne.n	80009c6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_1_TIM_DMA);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009c2:	60da      	str	r2, [r3, #12]
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
	{
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
	}

}
 80009c4:	e036      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_2_TIM_DMA_ID])
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d108      	bne.n	80009e2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_2_TIM_DMA);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	e028      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_3_TIM_DMA_ID])
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d108      	bne.n	80009fe <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_3_TIM_DMA);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68da      	ldr	r2, [r3, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009fa:	60da      	str	r2, [r3, #12]
}
 80009fc:	e01a      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_4_TIM_DMA_ID])
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d108      	bne.n	8000a1a <dshot_dma_tc_callback+0x7e>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_4_TIM_DMA);
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00c      	b.n	8000a34 <dshot_dma_tc_callback+0x98>
	else if(hdma == htim->hdma[MOTOR_5_TIM_DMA_ID])
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d107      	bne.n	8000a34 <dshot_dma_tc_callback+0x98>
		__HAL_TIM_DISABLE_DMA(htim, MOTOR_5_TIM_DMA);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68da      	ldr	r2, [r3, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a32:	60da      	str	r2, [r3, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a48:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a4a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <dshot_put_tc_callback_function+0x44>)
 8000a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a58:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <dshot_put_tc_callback_function+0x40>)
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
	MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID]->XferCpltCallback = dshot_dma_tc_callback;
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <dshot_put_tc_callback_function+0x38>)
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <dshot_put_tc_callback_function+0x3c>)
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200002ac 	.word	0x200002ac
 8000a7c:	0800099d 	.word	0x0800099d
 8000a80:	200002f8 	.word	0x200002f8
 8000a84:	20000260 	.word	0x20000260

08000a88 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000a90:	f005 faf6 	bl	8006080 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a94:	210c      	movs	r1, #12
 8000a96:	4809      	ldr	r0, [pc, #36]	; (8000abc <dshot_start_pwm+0x34>)
 8000a98:	f005 faf2 	bl	8006080 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <dshot_start_pwm+0x38>)
 8000aa0:	f005 faee 	bl	8006080 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <dshot_start_pwm+0x34>)
 8000aa8:	f005 faea 	bl	8006080 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_5_TIM, MOTOR_5_TIM_CHANNEL);
 8000aac:	2100      	movs	r1, #0
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <dshot_start_pwm+0x30>)
 8000ab0:	f005 fae6 	bl	8006080 <HAL_TIM_PWM_Start>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200002ac 	.word	0x200002ac
 8000abc:	200002f8 	.word	0x200002f8
 8000ac0:	20000260 	.word	0x20000260

08000ac4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	7afb      	ldrb	r3, [r7, #11]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000ae6:	893b      	ldrh	r3, [r7, #8]
 8000ae8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e009      	b.n	8000b04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	4053      	eors	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	091b      	lsrs	r3, r3, #4
 8000afc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddf2      	ble.n	8000af0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f003 030f 	and.w	r3, r3, #15
 8000b10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000b12:	893b      	ldrh	r3, [r7, #8]
 8000b14:	011b      	lsls	r3, r3, #4
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000b20:	893b      	ldrh	r3, [r7, #8]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	371c      	adds	r7, #28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b084      	sub	sp, #16
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ffc1 	bl	8000ac4 <dshot_prepare_packet>
 8000b42:	4603      	mov	r3, r0
 8000b44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	e011      	b.n	8000b70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000b4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da01      	bge.n	8000b58 <dshot_prepare_dmabuffer+0x2a>
 8000b54:	220e      	movs	r2, #14
 8000b56:	e000      	b.n	8000b5a <dshot_prepare_dmabuffer+0x2c>
 8000b58:	2207      	movs	r2, #7
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	440b      	add	r3, r1
 8000b62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	2b0f      	cmp	r3, #15
 8000b74:	ddea      	ble.n	8000b4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3340      	adds	r3, #64	; 0x40
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3344      	adds	r3, #68	; 0x44
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4811      	ldr	r0, [pc, #68]	; (8000be4 <dshot_prepare_dmabuffer_all+0x54>)
 8000ba0:	f7ff ffc5 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	480e      	ldr	r0, [pc, #56]	; (8000be8 <dshot_prepare_dmabuffer_all+0x58>)
 8000bae:	f7ff ffbe 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <dshot_prepare_dmabuffer_all+0x5c>)
 8000bbc:	f7ff ffb7 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3306      	adds	r3, #6
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <dshot_prepare_dmabuffer_all+0x60>)
 8000bca:	f7ff ffb0 	bl	8000b2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor5_dmabuffer, motor_value[4]);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3308      	adds	r3, #8
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <dshot_prepare_dmabuffer_all+0x64>)
 8000bd8:	f7ff ffa9 	bl	8000b2e <dshot_prepare_dmabuffer>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000028 	.word	0x20000028
 8000be8:	20000070 	.word	0x20000070
 8000bec:	200000b8 	.word	0x200000b8
 8000bf0:	20000100 	.word	0x20000100
 8000bf4:	20000148 	.word	0x20000148

08000bf8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[MOTOR_1_TIM_DMA_ID], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <dshot_dma_start+0x6c>)
 8000bfe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000c00:	4919      	ldr	r1, [pc, #100]	; (8000c68 <dshot_dma_start+0x70>)
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	333c      	adds	r3, #60	; 0x3c
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	f002 fe30 	bl	8003870 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[MOTOR_2_TIM_DMA_ID], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <dshot_dma_start+0x74>)
 8000c12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c14:	4916      	ldr	r1, [pc, #88]	; (8000c70 <dshot_dma_start+0x78>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <dshot_dma_start+0x74>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3340      	adds	r3, #64	; 0x40
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	2312      	movs	r3, #18
 8000c20:	f002 fe26 	bl	8003870 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[MOTOR_3_TIM_DMA_ID], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c28:	4913      	ldr	r1, [pc, #76]	; (8000c78 <dshot_dma_start+0x80>)
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <dshot_dma_start+0x7c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	3334      	adds	r3, #52	; 0x34
 8000c30:	461a      	mov	r2, r3
 8000c32:	2312      	movs	r3, #18
 8000c34:	f002 fe1c 	bl	8003870 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[MOTOR_4_TIM_DMA_ID], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <dshot_dma_start+0x74>)
 8000c3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c3c:	490f      	ldr	r1, [pc, #60]	; (8000c7c <dshot_dma_start+0x84>)
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <dshot_dma_start+0x74>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3334      	adds	r3, #52	; 0x34
 8000c44:	461a      	mov	r2, r3
 8000c46:	2312      	movs	r3, #18
 8000c48:	f002 fe12 	bl	8003870 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_5_TIM->hdma[MOTOR_5_TIM_DMA_ID], (uint32_t)motor5_dmabuffer, (uint32_t)&MOTOR_5_TIM_CCR, DSHOT_DMA_BUFFER_SIZE);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c50:	490b      	ldr	r1, [pc, #44]	; (8000c80 <dshot_dma_start+0x88>)
 8000c52:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <dshot_dma_start+0x6c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3334      	adds	r3, #52	; 0x34
 8000c58:	461a      	mov	r2, r3
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	f002 fe08 	bl	8003870 <HAL_DMA_Start_IT>

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	200002ac 	.word	0x200002ac
 8000c68:	20000028 	.word	0x20000028
 8000c6c:	200002f8 	.word	0x200002f8
 8000c70:	20000070 	.word	0x20000070
 8000c74:	20000260 	.word	0x20000260
 8000c78:	200000b8 	.word	0x200000b8
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	20000148 	.word	0x20000148

08000c84 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, MOTOR_1_TIM_DMA);
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c96:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, MOTOR_2_TIM_DMA);
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ca6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, MOTOR_3_TIM_DMA);
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <dshot_enable_dma_request+0x68>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cb6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, MOTOR_4_TIM_DMA);
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	68da      	ldr	r2, [r3, #12]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <dshot_enable_dma_request+0x64>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cc6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_5_TIM, MOTOR_5_TIM_DMA);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68da      	ldr	r2, [r3, #12]
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <dshot_enable_dma_request+0x60>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cd6:	60da      	str	r2, [r3, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	200002ac 	.word	0x200002ac
 8000ce8:	200002f8 	.word	0x200002f8
 8000cec:	20000260 	.word	0x20000260

08000cf0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0a2      	sub	sp, #136	; 0x88
 8000cf4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	HAL_StatusTypeDef res1;
	HAL_StatusTypeDef res2;

	//Partie moteurs (D-Shot)
	uint16_t motor_speed_1 = 100;
 8000cf6:	2364      	movs	r3, #100	; 0x64
 8000cf8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t motor_speed_2 = 300;
 8000cfc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint16_t motor_speed_3 = 400;
 8000d04:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d08:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	uint16_t turbine_speed_1 = 100;
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
	uint16_t turbine_speed_2 = 300;
 8000d12:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d16:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t turbine_speed_3 = 400;
 8000d1a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t compressor_speed = 1200;
 8000d22:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000d26:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	//Partie commandes et lecture des capteurs
	uint8_t command_buffer = 0; // Signal commande Rpi -> Nucléo, pas de log pour l'instant donc taille de 1
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//partie Capteur de Pression
	//modèle : 2513130810401
	float pressure_val;
	//SENP:  Pressure sensor sensitivity : 4.196 ×10-2
	float SENP = 0.04196;
 8000d30:	4b93      	ldr	r3, [pc, #588]	; (8000f80 <main+0x290>)
 8000d32:	65fb      	str	r3, [r7, #92]	; 0x5c
	//PMIN: Min Pressure output : -100 kPa
	int Pmin = -100;
 8000d34:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000d38:	65bb      	str	r3, [r7, #88]	; 0x58
	//OUTP_MIN: digital output at Pmin = 3277
	float OUT_Pmin = 3277;
 8000d3a:	4b92      	ldr	r3, [pc, #584]	; (8000f84 <main+0x294>)
 8000d3c:	657b      	str	r3, [r7, #84]	; 0x54
	//P15bit = PH & PL
	float P15bit;
	//tableaux des 100 dernières valeurs de pression, toutes les valeurs initialisées à 0
	uint8_t pressures[PRESSURES_SIZE] = {0};
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
	//valeur pour remplir le tableau des valeurs de pressions avant de calculer la moyennes des pressions
	uint8_t pressures_full_counter = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint32_t pressures_mean = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	67fb      	str	r3, [r7, #124]	; 0x7c

	// effet : change la pression de Commande initiale (avant 1ère commande compresseur)
	uint8_t Press_order = 0; //en 10e de bar
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	//Partie capteur de température du compresseur
	uint16_t raw;
	float compr_temp;
	uint8_t compr_crit_temp = 60; //à modifier en fonction du système (position de la sonde PT100)
 8000d60:	233c      	movs	r3, #60	; 0x3c
 8000d62:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	// explication de la conversion des valeurs de l'ADC en température
	// dans le fichier "Equation_Sonde_PT100, il y a 2 courbes, ces coeffs sont respectivement les pentes et les ordonnées à l'origine
	// raw = valeur numérique renvoyée par l'ADC
	// méthode de calibration sonde PT100 : mesure resistance et raw à 22°   &   mesure resistance et raw à 100° (pistolet à air chaud devant la PT100)
	float raw_to_res_mult = 0.0393;
 8000d66:	4b88      	ldr	r3, [pc, #544]	; (8000f88 <main+0x298>)
 8000d68:	64fb      	str	r3, [r7, #76]	; 0x4c
	float raw_to_res_offset = -2.47;
 8000d6a:	4b88      	ldr	r3, [pc, #544]	; (8000f8c <main+0x29c>)
 8000d6c:	64bb      	str	r3, [r7, #72]	; 0x48
	float res_to_temp_mult = -0.74;
 8000d6e:	4b88      	ldr	r3, [pc, #544]	; (8000f90 <main+0x2a0>)
 8000d70:	647b      	str	r3, [r7, #68]	; 0x44
	float res_to_temp_offset = 104;
 8000d72:	4b88      	ldr	r3, [pc, #544]	; (8000f94 <main+0x2a4>)
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40

	//Partie electrovannes
	uint16_t t_pulse_OFF = 1000; //valeur du pulse (ms)
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	87fb      	strh	r3, [r7, #62]	; 0x3e

	//Partie Arrêt d'urgence
	uint8_t AU_Current_Status = GPIO_PIN_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t AU_Old_Status = GPIO_PIN_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d88:	f001 fb20 	bl	80023cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d8c:	f000 fb66 	bl	800145c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d90:	f000 fea4 	bl	8001adc <MX_GPIO_Init>
	MX_DMA_Init();
 8000d94:	f000 fe64 	bl	8001a60 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000d98:	f000 fe32 	bl	8001a00 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000d9c:	f000 fd30 	bl	8001800 <MX_TIM2_Init>
	MX_TIM6_Init();
 8000da0:	f000 fdf8 	bl	8001994 <MX_TIM6_Init>
	MX_TIM3_Init();
 8000da4:	f000 fd90 	bl	80018c8 <MX_TIM3_Init>
	MX_TIM1_Init();
 8000da8:	f000 fc9a 	bl	80016e0 <MX_TIM1_Init>
	MX_I2C1_Init();
 8000dac:	f000 fc58 	bl	8001660 <MX_I2C1_Init>
	MX_ADC1_Init();
 8000db0:	f000 fbb2 	bl	8001518 <MX_ADC1_Init>
	MX_CAN_Init();
 8000db4:	f000 fc20 	bl	80015f8 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */

	dshot_init(DSHOT_SPEED);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff fd3b 	bl	8000834 <dshot_init>
	//Initialization Des ESC des moteurs ET TOUT LE RESTE
	my_motor_value[0] = 0;
 8000dbe:	4b76      	ldr	r3, [pc, #472]	; (8000f98 <main+0x2a8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	801a      	strh	r2, [r3, #0]
	my_motor_value[1] = 0;
 8000dc4:	4b74      	ldr	r3, [pc, #464]	; (8000f98 <main+0x2a8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	805a      	strh	r2, [r3, #2]
	my_motor_value[2] = 0;
 8000dca:	4b73      	ldr	r3, [pc, #460]	; (8000f98 <main+0x2a8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	809a      	strh	r2, [r3, #4]
	my_motor_value[3] = 0;
 8000dd0:	4b71      	ldr	r3, [pc, #452]	; (8000f98 <main+0x2a8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	80da      	strh	r2, [r3, #6]
	my_motor_value[4] = 0;
 8000dd6:	4b70      	ldr	r3, [pc, #448]	; (8000f98 <main+0x2a8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	811a      	strh	r2, [r3, #8]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f003 f806 	bl	8003df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2110      	movs	r1, #16
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f003 f800 	bl	8003df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2108      	movs	r1, #8
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f002 fffa 	bl	8003df4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2101      	movs	r1, #1
 8000e04:	4865      	ldr	r0, [pc, #404]	; (8000f9c <main+0x2ac>)
 8000e06:	f002 fff5 	bl	8003df4 <HAL_GPIO_WritePin>
	//start to count (for tim6 interruption)
	HAL_TIM_Base_Start_IT(&htim6);
 8000e0a:	4865      	ldr	r0, [pc, #404]	; (8000fa0 <main+0x2b0>)
 8000e0c:	f005 f884 	bl	8005f18 <HAL_TIM_Base_Start_IT>
	//a peu près temps minimal de delay pour laisser le temps aux moteurs de s'initialiser
	HAL_Delay(2600);
 8000e10:	f640 2028 	movw	r0, #2600	; 0xa28
 8000e14:	f001 fb40 	bl	8002498 <HAL_Delay>
		//Si l'AU était à l'état haut et qu'il passe à l'état bas, reset tout et lancer un timer de 2 minutes, au bout duquel on purge !

		//changer les valeurs des AU status

		//Réception du mot de 8 Bit de Goldo (par UART à priori)
		res1 = HAL_UART_Receive(&huart2, &command_buffer, 1, 100);
 8000e18:	f107 0127 	add.w	r1, r7, #39	; 0x27
 8000e1c:	2364      	movs	r3, #100	; 0x64
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4860      	ldr	r0, [pc, #384]	; (8000fa4 <main+0x2b4>)
 8000e22:	f006 f90b 	bl	800703c <HAL_UART_Receive>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


		//Lecture de la pression en I2C et activation OU NON du compresseur en fonction
		res2 = HAL_I2C_Master_Receive(&hi2c1, 0xf1, I2C_buf, 4, 200);
 8000e2c:	f107 0220 	add.w	r2, r7, #32
 8000e30:	23c8      	movs	r3, #200	; 0xc8
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2304      	movs	r3, #4
 8000e36:	21f1      	movs	r1, #241	; 0xf1
 8000e38:	485b      	ldr	r0, [pc, #364]	; (8000fa8 <main+0x2b8>)
 8000e3a:	f003 f883 	bl	8003f44 <HAL_I2C_Master_Receive>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		if (res2 == HAL_OK){
 8000e44:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f040 80b1 	bne.w	8000fb0 <main+0x2c0>
			//sprintf((char*)p_buf, "I2C : %d %d %d %d\r\n", (int)I2C_buf[0], (int)I2C_buf[1], (int)I2C_buf[2], (int)I2C_buf[3]);
			//HAL_UART_Receive(&huart2, p_buf, 4, 100);

			//Calcul de la pression en 10èmes de bar RELATIFS
			//voir infos_pressure_sensor plus haut pour infos sur variables
			P15bit = (int)((I2C_buf[0] << 8)|I2C_buf[1]);
 8000e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e62:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			//formule d'après la datasheet du capteur : pressure_val = [(P15bit - OUTP_MIN)*SENP)] + PMIN;
			//Conversion en 10èmes de bar à la fin
			pressure_val = P15bit - OUT_Pmin; //2383
 8000e66:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000e6a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e72:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			pressure_val = pressure_val*SENP; //99.99068
 8000e76:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e7a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e82:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			pressure_val = pressure_val + Pmin; // -0,00932
 8000e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e90:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e98:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			pressure_val = pressure_val * 0.1; // -0,000932
 8000e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e9e:	f7ff fc21 	bl	80006e4 <__aeabi_f2d>
 8000ea2:	a335      	add	r3, pc, #212	; (adr r3, 8000f78 <main+0x288>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff f98e 	bl	80001c8 <__aeabi_dmul>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fc6e 	bl	8000794 <__aeabi_d2f>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
			//	pressures[pressures_full_counter] = (int)pressure_val;
			//}
			//dès qu'il est plein, on calcule la moyenne du tableau renouvelé
			//on décale tout le tableau vers la droite, en faisant donc disparaître la valeur la plus ancienne

			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8000ebc:	2313      	movs	r3, #19
 8000ebe:	677b      	str	r3, [r7, #116]	; 0x74
 8000ec0:	e010      	b.n	8000ee4 <main+0x1f4>
				pressures[i] = pressures[i-1];
 8000ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	3378      	adds	r3, #120	; 0x78
 8000ec8:	f107 0208 	add.w	r2, r7, #8
 8000ecc:	4413      	add	r3, r2
 8000ece:	f813 1c74 	ldrb.w	r1, [r3, #-116]
 8000ed2:	f107 020c 	add.w	r2, r7, #12
 8000ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ed8:	4413      	add	r3, r2
 8000eda:	460a      	mov	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
			for (int i = PRESSURES_SIZE-1; i > 0; i--){
 8000ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dceb      	bgt.n	8000ec2 <main+0x1d2>
			}
			//On ajoute la nouvelle valeure
			pressures[0] = (int)pressure_val;
 8000eea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ef6:	793b      	ldrb	r3, [r7, #4]
 8000ef8:	733b      	strb	r3, [r7, #12]

			//puis on fait la moyenne des pressions
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8000efa:	2300      	movs	r3, #0
 8000efc:	673b      	str	r3, [r7, #112]	; 0x70
 8000efe:	e00b      	b.n	8000f18 <main+0x228>
				pressures_mean+=pressures[i];
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f0e:	4413      	add	r3, r2
 8000f10:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (int i = 0; i < PRESSURES_SIZE; i++){
 8000f12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f14:	3301      	adds	r3, #1
 8000f16:	673b      	str	r3, [r7, #112]	; 0x70
 8000f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f1a:	2b13      	cmp	r3, #19
 8000f1c:	ddf0      	ble.n	8000f00 <main+0x210>
			}
			pressures_mean/=PRESSURES_SIZE;
 8000f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f20:	4a22      	ldr	r2, [pc, #136]	; (8000fac <main+0x2bc>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	091b      	lsrs	r3, r3, #4
 8000f28:	67fb      	str	r3, [r7, #124]	; 0x7c

			if (pressures_mean > (Press_order)){ // arrêter compresseur si dépassement de la pression de consigne
 8000f2a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000f2e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d903      	bls.n	8000f3c <main+0x24c>
				my_motor_value[4] = 0;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <main+0x2a8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	811a      	strh	r2, [r3, #8]
 8000f3a:	e00e      	b.n	8000f5a <main+0x26a>
			}
			else if (pressures_mean < (Press_order - 4)) { // démarrage compresseur avec hysteresis de 0.4 bar
 8000f3c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000f40:	3b04      	subs	r3, #4
 8000f42:	461a      	mov	r2, r3
 8000f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d207      	bcs.n	8000f5a <main+0x26a>
				if(Press_order <= 0){}
 8000f4a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <main+0x26a>
				else {
					my_motor_value[4] = compressor_speed;
 8000f52:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <main+0x2a8>)
 8000f54:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000f58:	8113      	strh	r3, [r2, #8]
				}
			}
			else {}

			//on remet à 0 la moyenne des pressions
			pressures_mean = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	67fb      	str	r3, [r7, #124]	; 0x7c


			//retourner à la Rpi la pression courante du réservoir en dixième de bar [0ZZZZZZZ], MSB utilisé pour erreur de lecture en I2C de la pression
			return_buffer[0] = (uint8_t)pressure_val;
 8000f5e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f66:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f6a:	793b      	ldrb	r3, [r7, #4]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000f72:	e024      	b.n	8000fbe <main+0x2ce>
 8000f74:	f3af 8000 	nop.w
 8000f78:	9999999a 	.word	0x9999999a
 8000f7c:	3fb99999 	.word	0x3fb99999
 8000f80:	3d2bde40 	.word	0x3d2bde40
 8000f84:	454cd000 	.word	0x454cd000
 8000f88:	3d20f909 	.word	0x3d20f909
 8000f8c:	c01e147b 	.word	0xc01e147b
 8000f90:	bf3d70a4 	.word	0xbf3d70a4
 8000f94:	42d00000 	.word	0x42d00000
 8000f98:	2000056c 	.word	0x2000056c
 8000f9c:	48001400 	.word	0x48001400
 8000fa0:	20000344 	.word	0x20000344
 8000fa4:	200004e4 	.word	0x200004e4
 8000fa8:	2000020c 	.word	0x2000020c
 8000fac:	cccccccd 	.word	0xcccccccd
		}
		//retourner [10000000] si on arrive pas à communiquer avec le capteur de Pression
		else {
			return_buffer[0]|=128;
 8000fb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}

		//Lecture Température du compresseur réservoir et activation ou désactivation du compresseur en fonction SSI il est pas déjà désactivé
		//#####A IMPLEMENTER : Lecture de la température en analogique sonde PT100#####
		//start an ADC conversion
		HAL_ADC_Start(&hadc1);
 8000fbe:	4898      	ldr	r0, [pc, #608]	; (8001220 <main+0x530>)
 8000fc0:	f001 fc20 	bl	8002804 <HAL_ADC_Start>
		//processor waits for an ADC conversion to complete
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	4895      	ldr	r0, [pc, #596]	; (8001220 <main+0x530>)
 8000fca:	f001 fcd1 	bl	8002970 <HAL_ADC_PollForConversion>
		//get raw value from the ADC channel register
		raw = HAL_ADC_GetValue(&hadc1);
 8000fce:	4894      	ldr	r0, [pc, #592]	; (8001220 <main+0x530>)
 8000fd0:	f001 fd9c 	bl	8002b0c <HAL_ADC_GetValue>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

		//get temperature value from raw value (100-Ohm = 0°C, 375-Ohm = 800°C)
		//first : conversion from raw value to resistance value : 2790=>112 kOhm, 90=>6 kOhm
		//then : conversion from resistance value to temperature value :  112 kOhm=>22 °c, 6 kOhm=>100°c
		compr_temp = -0.74 * (0.0393 * raw - 2.47) + 104;
 8000fd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fb70 	bl	80006c0 <__aeabi_i2d>
 8000fe0:	a389      	add	r3, pc, #548	; (adr r3, 8001208 <main+0x518>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff f8ef 	bl	80001c8 <__aeabi_dmul>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	a387      	add	r3, pc, #540	; (adr r3, 8001210 <main+0x520>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fa14 	bl	8000424 <__aeabi_dsub>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	a384      	add	r3, pc, #528	; (adr r3, 8001218 <main+0x528>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff f8dd 	bl	80001c8 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b82      	ldr	r3, [pc, #520]	; (8001224 <main+0x534>)
 800101c:	f7ff fa04 	bl	8000428 <__adddf3>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fbb4 	bl	8000794 <__aeabi_d2f>
 800102c:	4603      	mov	r3, r0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28

		//si Température critique, arrêter le compresseur et notifier la température critique dans le retour à la Rpi
		if (compr_temp > compr_crit_temp) {
 8001030:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800103c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001040:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001048:	dd09      	ble.n	800105e <main+0x36e>
			my_motor_value[4] = 0;
 800104a:	4b77      	ldr	r3, [pc, #476]	; (8001228 <main+0x538>)
 800104c:	2200      	movs	r2, #0
 800104e:	811a      	strh	r2, [r3, #8]
			return_buffer[1]|=128;
 8001050:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}


		//#####AJOUTER un module pour chronométrer + tout reset après 100s (fin de match) en mode match.#####
		if (res1 == HAL_OK){
 800105e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 81ed 	bne.w	8001442 <main+0x752>
			switch(command_buffer >> 6){
 8001068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800106c:	099b      	lsrs	r3, r3, #6
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b03      	cmp	r3, #3
 8001072:	f200 81de 	bhi.w	8001432 <main+0x742>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <main+0x38c>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	0800108d 	.word	0x0800108d
 8001080:	080010f9 	.word	0x080010f9
 8001084:	080011df 	.word	0x080011df
 8001088:	08001235 	.word	0x08001235
			case 0:
				//Mode 1 [00000000] : Reset nucleo: arrêt de TOUT
				if (command_buffer == 1){
 800108c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001090:	2b01      	cmp	r3, #1
 8001092:	f040 81cb 	bne.w	800142c <main+0x73c>
					// arrêt moteurs (compr, canons, turbine)
					my_motor_value[0] = 0;
 8001096:	4b64      	ldr	r3, [pc, #400]	; (8001228 <main+0x538>)
 8001098:	2200      	movs	r2, #0
 800109a:	801a      	strh	r2, [r3, #0]
					my_motor_value[1] = 0;
 800109c:	4b62      	ldr	r3, [pc, #392]	; (8001228 <main+0x538>)
 800109e:	2200      	movs	r2, #0
 80010a0:	805a      	strh	r2, [r3, #2]
					my_motor_value[2] = 0;
 80010a2:	4b61      	ldr	r3, [pc, #388]	; (8001228 <main+0x538>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	809a      	strh	r2, [r3, #4]
					my_motor_value[3] = 0;
 80010a8:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <main+0x538>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	80da      	strh	r2, [r3, #6]
					my_motor_value[4] = 0;
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <main+0x538>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	811a      	strh	r2, [r3, #8]
					// arrêt EV 1, 2, 3 et Purge
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2180      	movs	r1, #128	; 0x80
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f002 fe9a 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2110      	movs	r1, #16
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f002 fe94 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2108      	movs	r1, #8
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f002 fe8e 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2101      	movs	r1, #1
 80010dc:	4853      	ldr	r0, [pc, #332]	; (800122c <main+0x53c>)
 80010de:	f002 fe89 	bl	8003df4 <HAL_GPIO_WritePin>
					// arrêt LCD et LED Enable
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2120      	movs	r1, #32
 80010e6:	4852      	ldr	r0, [pc, #328]	; (8001230 <main+0x540>)
 80010e8:	f002 fe84 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2110      	movs	r1, #16
 80010f0:	484f      	ldr	r0, [pc, #316]	; (8001230 <main+0x540>)
 80010f2:	f002 fe7f 	bl	8003df4 <HAL_GPIO_WritePin>
				}

				break;
 80010f6:	e199      	b.n	800142c <main+0x73c>
			case 1:
				//Mode 2 [01]: Canons
				//ordre des canons : left=1 - right=2 - top=3
				//écriture dans le moteur 1 (left)
				if ((command_buffer & 48) >> 4 == 0){
 80010f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010fc:	111b      	asrs	r3, r3, #4
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <main+0x41e>
					my_motor_value[0] = 0;
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <main+0x538>)
 8001108:	2200      	movs	r2, #0
 800110a:	801a      	strh	r2, [r3, #0]
 800110c:	e01b      	b.n	8001146 <main+0x456>
				}
				else if ((command_buffer & 48) >> 4 == 1){
 800110e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001112:	111b      	asrs	r3, r3, #4
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d104      	bne.n	8001126 <main+0x436>
					my_motor_value[0] = motor_speed_1;
 800111c:	4a42      	ldr	r2, [pc, #264]	; (8001228 <main+0x538>)
 800111e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001122:	8013      	strh	r3, [r2, #0]
 8001124:	e00f      	b.n	8001146 <main+0x456>
				}
				else if ((command_buffer & 48) >> 4 == 2){
 8001126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800112a:	111b      	asrs	r3, r3, #4
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d104      	bne.n	800113e <main+0x44e>
					my_motor_value[0] = motor_speed_2;
 8001134:	4a3c      	ldr	r2, [pc, #240]	; (8001228 <main+0x538>)
 8001136:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800113a:	8013      	strh	r3, [r2, #0]
 800113c:	e003      	b.n	8001146 <main+0x456>
				}
				else{
					my_motor_value[0] = motor_speed_3;
 800113e:	4a3a      	ldr	r2, [pc, #232]	; (8001228 <main+0x538>)
 8001140:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001144:	8013      	strh	r3, [r2, #0]
				}

				//écriture dans le moteur 2 (right)
				if ((command_buffer & 12) >> 2 == 0){
 8001146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800114a:	109b      	asrs	r3, r3, #2
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <main+0x46c>
					my_motor_value[1] = 0;
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <main+0x538>)
 8001156:	2200      	movs	r2, #0
 8001158:	805a      	strh	r2, [r3, #2]
 800115a:	e01b      	b.n	8001194 <main+0x4a4>
				}
				else if ((command_buffer & 12) >> 2 == 1){
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	109b      	asrs	r3, r3, #2
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d104      	bne.n	8001174 <main+0x484>
					my_motor_value[1] = motor_speed_1;
 800116a:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <main+0x538>)
 800116c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001170:	8053      	strh	r3, [r2, #2]
 8001172:	e00f      	b.n	8001194 <main+0x4a4>
				}
				else if ((command_buffer & 12) >> 2 == 2){
 8001174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001178:	109b      	asrs	r3, r3, #2
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d104      	bne.n	800118c <main+0x49c>
					my_motor_value[1] = motor_speed_2;
 8001182:	4a29      	ldr	r2, [pc, #164]	; (8001228 <main+0x538>)
 8001184:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001188:	8053      	strh	r3, [r2, #2]
 800118a:	e003      	b.n	8001194 <main+0x4a4>
				}
				else{
					my_motor_value[1] = motor_speed_3;
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <main+0x538>)
 800118e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001192:	8053      	strh	r3, [r2, #2]
				}

				//écriture dans le moteur 3 (top)
				if ((command_buffer & 3) == 0){
 8001194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d103      	bne.n	80011a8 <main+0x4b8>
					my_motor_value[2] = 0;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <main+0x538>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	809a      	strh	r2, [r3, #4]
				}
				else{
					my_motor_value[2] = motor_speed_3;
				}

				break;
 80011a6:	e144      	b.n	8001432 <main+0x742>
				else if ((command_buffer & 3) == 1){
 80011a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d104      	bne.n	80011be <main+0x4ce>
					my_motor_value[2] = motor_speed_1;
 80011b4:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <main+0x538>)
 80011b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80011ba:	8093      	strh	r3, [r2, #4]
				break;
 80011bc:	e139      	b.n	8001432 <main+0x742>
				else if ((command_buffer & 3) == 2){
 80011be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d104      	bne.n	80011d4 <main+0x4e4>
					my_motor_value[2] = motor_speed_2;
 80011ca:	4a17      	ldr	r2, [pc, #92]	; (8001228 <main+0x538>)
 80011cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80011d0:	8093      	strh	r3, [r2, #4]
				break;
 80011d2:	e12e      	b.n	8001432 <main+0x742>
					my_motor_value[2] = motor_speed_3;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <main+0x538>)
 80011d6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80011da:	8093      	strh	r3, [r2, #4]
				break;
 80011dc:	e129      	b.n	8001432 <main+0x742>
			case 2:
				//Mode 3 [10]: Compresseur
				//[000000] : arrêt Compresseur + Purge EV4
				if ((command_buffer ^ 128) == 0){
 80011de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e2:	2b80      	cmp	r3, #128	; 0x80
 80011e4:	d107      	bne.n	80011f6 <main+0x506>
					my_motor_value[4] = 0;
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <main+0x538>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	811a      	strh	r2, [r3, #8]
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	480e      	ldr	r0, [pc, #56]	; (800122c <main+0x53c>)
 80011f2:	f002 fdff 	bl	8003df4 <HAL_GPIO_WritePin>
				}
				//[PPPPPP] : Val de consigne Pression, à récup SSI différente pour régulation au prochain tour de boucle
				Press_order = command_buffer ^ (2 << 6);
 80011f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011fa:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80011fe:	43db      	mvns	r3, r3
 8001200:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

				break;
 8001204:	e115      	b.n	8001432 <main+0x742>
 8001206:	bf00      	nop
 8001208:	2d773190 	.word	0x2d773190
 800120c:	3fa41f21 	.word	0x3fa41f21
 8001210:	5c28f5c3 	.word	0x5c28f5c3
 8001214:	4003c28f 	.word	0x4003c28f
 8001218:	7ae147ae 	.word	0x7ae147ae
 800121c:	bfe7ae14 	.word	0xbfe7ae14
 8001220:	20000194 	.word	0x20000194
 8001224:	405a0000 	.word	0x405a0000
 8001228:	2000056c 	.word	0x2000056c
 800122c:	48001400 	.word	0x48001400
 8001230:	48000400 	.word	0x48000400
			case 3:
				//Mode 4 [11]: electrovannes OU LED OU Turbine OU LCD
				//cas 1 : Electrovannes
				if ((command_buffer & 240) >> 4 == 12){
 8001234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d130      	bne.n	80012a2 <main+0x5b2>
					//4*1 bits(ABCE) pour les EV (ordre du code : A: EV1<->PA7, B: EV2<->PA4, C: EV3<->PA3, E: EV_Purge<->PF0)
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_7, (command_buffer & 0x08) >> 3);
 8001240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001244:	10db      	asrs	r3, r3, #3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f002 fdcd 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_4, (command_buffer & 0x04) >> 2);
 800125a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125e:	109b      	asrs	r3, r3, #2
 8001260:	b2db      	uxtb	r3, r3
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	2110      	movs	r1, #16
 800126c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001270:	f002 fdc0 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOA, GPIO_PIN_3, (command_buffer & 0x02) >> 1);
 8001274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001278:	105b      	asrs	r3, r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	2108      	movs	r1, #8
 8001286:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128a:	f002 fdb3 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (GPIOF, GPIO_PIN_0, command_buffer & 0x01);
 800128e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	2101      	movs	r1, #1
 800129c:	486c      	ldr	r0, [pc, #432]	; (8001450 <main+0x760>)
 800129e:	f002 fda9 	bl	8003df4 <HAL_GPIO_WritePin>
				}

				//cas 2 : EV-Pulse [1101000Z] => [0] : rien, [1] pulse ON-OFF-ON 1*, avec intervalle t-pulse_OFF
				if ((command_buffer & 240) >> 4 == 13){
 80012a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b0d      	cmp	r3, #13
 80012ac:	d178      	bne.n	80013a0 <main+0x6b0>
					//Pulse EV 1
					if ((command_buffer & 8) >> 3 == 1){
 80012ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d018      	beq.n	80012ec <main+0x5fc>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f002 fd97 	bl	8003df4 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	; 0x64
 80012c8:	f001 f8e6 	bl	8002498 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f002 fd8e 	bl	8003df4 <HAL_GPIO_WritePin>
						HAL_Delay(t_pulse_OFF);
 80012d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 f8dc 	bl	8002498 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e8:	f002 fd84 	bl	8003df4 <HAL_GPIO_WritePin>
					}
					//Pulse EV 2
					if ((command_buffer & 4) >> 2 == 1){
 80012ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d017      	beq.n	8001328 <main+0x638>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2110      	movs	r1, #16
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f002 fd78 	bl	8003df4 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 8001304:	2064      	movs	r0, #100	; 0x64
 8001306:	f001 f8c7 	bl	8002498 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f002 fd6f 	bl	8003df4 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 8001316:	2064      	movs	r0, #100	; 0x64
 8001318:	f001 f8be 	bl	8002498 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800131c:	2201      	movs	r2, #1
 800131e:	2110      	movs	r1, #16
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f002 fd66 	bl	8003df4 <HAL_GPIO_WritePin>
					}
					//Pulse EV 3
					if ((command_buffer & 2) >> 1 == 1){
 8001328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d018      	beq.n	8001366 <main+0x676>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2108      	movs	r1, #8
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f002 fd5a 	bl	8003df4 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 8001340:	2064      	movs	r0, #100	; 0x64
 8001342:	f001 f8a9 	bl	8002498 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2108      	movs	r1, #8
 800134a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134e:	f002 fd51 	bl	8003df4 <HAL_GPIO_WritePin>
						HAL_Delay(t_pulse_OFF);
 8001352:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f89f 	bl	8002498 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800135a:	2201      	movs	r2, #1
 800135c:	2108      	movs	r1, #8
 800135e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001362:	f002 fd47 	bl	8003df4 <HAL_GPIO_WritePin>
					}
					//Pulse EV Purge
					if ((command_buffer & 1) == 1){
 8001366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d05e      	beq.n	8001430 <main+0x740>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2101      	movs	r1, #1
 8001376:	4836      	ldr	r0, [pc, #216]	; (8001450 <main+0x760>)
 8001378:	f002 fd3c 	bl	8003df4 <HAL_GPIO_WritePin>
						HAL_Delay(100);
 800137c:	2064      	movs	r0, #100	; 0x64
 800137e:	f001 f88b 	bl	8002498 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2101      	movs	r1, #1
 8001386:	4832      	ldr	r0, [pc, #200]	; (8001450 <main+0x760>)
 8001388:	f002 fd34 	bl	8003df4 <HAL_GPIO_WritePin>
						HAL_Delay(t_pulse_OFF);
 800138c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800138e:	4618      	mov	r0, r3
 8001390:	f001 f882 	bl	8002498 <HAL_Delay>
						HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2101      	movs	r1, #1
 8001398:	482d      	ldr	r0, [pc, #180]	; (8001450 <main+0x760>)
 800139a:	f002 fd2b 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command_buffer & 2);

					//LED
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command_buffer & 1);
				}
				break;
 800139e:	e047      	b.n	8001430 <main+0x740>
				else if ((command_buffer & 240) >> 4 == 14){
 80013a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b0e      	cmp	r3, #14
 80013aa:	d124      	bne.n	80013f6 <main+0x706>
					if ((command_buffer & 3) == 0){
 80013ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d103      	bne.n	80013c0 <main+0x6d0>
						my_motor_value[3] = 0;
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <main+0x764>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	80da      	strh	r2, [r3, #6]
				break;
 80013be:	e037      	b.n	8001430 <main+0x740>
					else if ((command_buffer & 3) == 1){
 80013c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d104      	bne.n	80013d6 <main+0x6e6>
						my_motor_value[3] = turbine_speed_1;
 80013cc:	4a21      	ldr	r2, [pc, #132]	; (8001454 <main+0x764>)
 80013ce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80013d2:	80d3      	strh	r3, [r2, #6]
				break;
 80013d4:	e02c      	b.n	8001430 <main+0x740>
					else if ((command_buffer & 3) == 2){
 80013d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d104      	bne.n	80013ec <main+0x6fc>
						my_motor_value[3] = turbine_speed_2;
 80013e2:	4a1c      	ldr	r2, [pc, #112]	; (8001454 <main+0x764>)
 80013e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80013e8:	80d3      	strh	r3, [r2, #6]
				break;
 80013ea:	e021      	b.n	8001430 <main+0x740>
						my_motor_value[3] = turbine_speed_3;
 80013ec:	4a19      	ldr	r2, [pc, #100]	; (8001454 <main+0x764>)
 80013ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80013f2:	80d3      	strh	r3, [r2, #6]
				break;
 80013f4:	e01c      	b.n	8001430 <main+0x740>
				else if ((command_buffer & 240) >> 4 == 15){
 80013f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b0f      	cmp	r3, #15
 8001400:	d116      	bne.n	8001430 <main+0x740>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, command_buffer & 2);
 8001402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	2120      	movs	r1, #32
 8001410:	4811      	ldr	r0, [pc, #68]	; (8001458 <main+0x768>)
 8001412:	f002 fcef 	bl	8003df4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, command_buffer & 1);
 8001416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	2110      	movs	r1, #16
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <main+0x768>)
 8001426:	f002 fce5 	bl	8003df4 <HAL_GPIO_WritePin>
				break;
 800142a:	e001      	b.n	8001430 <main+0x740>
				break;
 800142c:	bf00      	nop
 800142e:	e000      	b.n	8001432 <main+0x742>
				break;
 8001430:	bf00      	nop
			}

			//Notifier à la Rpi la bonne réception du mot de commande
			return_buffer[1]|= 1;
 8001432:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001440:	e002      	b.n	8001448 <main+0x758>
		}
		else {return_buffer[1]&= 0;}
 8001442:	2300      	movs	r3, #0
 8001444:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		//Retourner la potentielle erreur de COM avec la nucléo !

		//Retourner les infos à la Rpi !
		//HAL_UART_Transmit(&huart2, return_buffer, 2, 10);

		HAL_Delay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f001 f825 	bl	8002498 <HAL_Delay>
		res1 = HAL_UART_Receive(&huart2, &command_buffer, 1, 100);
 800144e:	e4e3      	b.n	8000e18 <main+0x128>
 8001450:	48001400 	.word	0x48001400
 8001454:	2000056c 	.word	0x2000056c
 8001458:	48000400 	.word	0x48000400

0800145c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b096      	sub	sp, #88	; 0x58
 8001460:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001466:	2228      	movs	r2, #40	; 0x28
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f006 fa20 	bl	80078b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001490:	2302      	movs	r3, #2
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001498:	2310      	movs	r3, #16
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149c:	2302      	movs	r3, #2
 800149e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a0:	2300      	movs	r3, #0
 80014a2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014a8:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 f940 	bl	8004734 <HAL_RCC_OscConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0x62>
	{
		Error_Handler();
 80014ba:	f000 fba5 	bl	8001c08 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014be:	230f      	movs	r3, #15
 80014c0:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 f969 	bl	80057b0 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 80014e4:	f000 fb90 	bl	8001c08 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80014e8:	f44f 5385 	mov.w	r3, #4256	; 0x10a0
 80014ec:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_ADC12;
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80014ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f2:	617b      	str	r3, [r7, #20]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 fb8c 	bl	8005c1c <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xb2>
	{
		Error_Handler();
 800150a:	f000 fb7d 	bl	8001c08 <Error_Handler>
	}
}
 800150e:	bf00      	nop
 8001510:	3758      	adds	r7, #88	; 0x58
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <MX_ADC1_Init+0xdc>)
 800153c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001540:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001548:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <MX_ADC1_Init+0xdc>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001556:	2200      	movs	r2, #0
 8001558:	765a      	strb	r2, [r3, #25]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <MX_ADC1_Init+0xdc>)
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001564:	2200      	movs	r2, #0
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <MX_ADC1_Init+0xdc>)
 800156a:	2201      	movs	r2, #1
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001576:	2201      	movs	r2, #1
 8001578:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MX_ADC1_Init+0xdc>)
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001584:	2204      	movs	r2, #4
 8001586:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_ADC1_Init+0xdc>)
 800158a:	2200      	movs	r2, #0
 800158c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800158e:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001590:	2200      	movs	r2, #0
 8001592:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001594:	4817      	ldr	r0, [pc, #92]	; (80015f4 <MX_ADC1_Init+0xdc>)
 8001596:	f000 ffa3 	bl	80024e0 <HAL_ADC_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC1_Init+0x8c>
	{
		Error_Handler();
 80015a0:	f000 fb32 	bl	8001c08 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4811      	ldr	r0, [pc, #68]	; (80015f4 <MX_ADC1_Init+0xdc>)
 80015b0:	f001 fd7a 	bl	80030a8 <HAL_ADCEx_MultiModeConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 80015ba:	f000 fb25 	bl	8001c08 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80015be:	2301      	movs	r3, #1
 80015c0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_ADC1_Init+0xdc>)
 80015dc:	f001 faa4 	bl	8002b28 <HAL_ADC_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0xd2>
	{
		Error_Handler();
 80015e6:	f000 fb0f 	bl	8001c08 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000194 	.word	0x20000194

080015f8 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_CAN_Init+0x60>)
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <MX_CAN_Init+0x64>)
 8001600:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_CAN_Init+0x60>)
 8001604:	2210      	movs	r2, #16
 8001606:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001608:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_CAN_Init+0x60>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_CAN_Init+0x60>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_CAN_Init+0x60>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_CAN_Init+0x60>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <MX_CAN_Init+0x60>)
 8001622:	2200      	movs	r2, #0
 8001624:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_CAN_Init+0x60>)
 8001628:	2200      	movs	r2, #0
 800162a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_CAN_Init+0x60>)
 800162e:	2200      	movs	r2, #0
 8001630:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_CAN_Init+0x60>)
 8001634:	2200      	movs	r2, #0
 8001636:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_CAN_Init+0x60>)
 800163a:	2200      	movs	r2, #0
 800163c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_CAN_Init+0x60>)
 8001640:	2200      	movs	r2, #0
 8001642:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_CAN_Init+0x60>)
 8001646:	f001 febf 	bl	80033c8 <HAL_CAN_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_CAN_Init+0x5c>
	{
		Error_Handler();
 8001650:	f000 fada 	bl	8001c08 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200001e4 	.word	0x200001e4
 800165c:	40006400 	.word	0x40006400

08001660 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_I2C1_Init+0x78>)
 8001666:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <MX_I2C1_Init+0x7c>)
 8001668:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0000020C;
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <MX_I2C1_Init+0x78>)
 800166c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8001670:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_I2C1_Init+0x78>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_I2C1_Init+0x78>)
 800167a:	2201      	movs	r2, #1
 800167c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <MX_I2C1_Init+0x78>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001684:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_I2C1_Init+0x78>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_I2C1_Init+0x78>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_I2C1_Init+0x78>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <MX_I2C1_Init+0x78>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800169c:	480e      	ldr	r0, [pc, #56]	; (80016d8 <MX_I2C1_Init+0x78>)
 800169e:	f002 fbc1 	bl	8003e24 <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80016a8:	f000 faae 	bl	8001c08 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80016ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <MX_I2C1_Init+0x78>)
 80016b2:	f002 ff87 	bl	80045c4 <HAL_I2CEx_ConfigAnalogFilter>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_I2C1_Init+0x60>
	{
		Error_Handler();
 80016bc:	f000 faa4 	bl	8001c08 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c0:	2100      	movs	r1, #0
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_I2C1_Init+0x78>)
 80016c4:	f002 ffc9 	bl	800465a <HAL_I2CEx_ConfigDigitalFilter>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_I2C1_Init+0x72>
	{
		Error_Handler();
 80016ce:	f000 fa9b 	bl	8001c08 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000020c 	.word	0x2000020c
 80016dc:	40005400 	.word	0x40005400

080016e0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b096      	sub	sp, #88	; 0x58
 80016e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80016f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	222c      	movs	r2, #44	; 0x2c
 800170a:	2100      	movs	r1, #0
 800170c:	4618      	mov	r0, r3
 800170e:	f006 f8cf 	bl	80078b0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001712:	4b39      	ldr	r3, [pc, #228]	; (80017f8 <MX_TIM1_Init+0x118>)
 8001714:	4a39      	ldr	r2, [pc, #228]	; (80017fc <MX_TIM1_Init+0x11c>)
 8001716:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001718:	4b37      	ldr	r3, [pc, #220]	; (80017f8 <MX_TIM1_Init+0x118>)
 800171a:	2200      	movs	r2, #0
 800171c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <MX_TIM1_Init+0x118>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001724:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <MX_TIM1_Init+0x118>)
 8001726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800172a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <MX_TIM1_Init+0x118>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <MX_TIM1_Init+0x118>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <MX_TIM1_Init+0x118>)
 800173a:	2200      	movs	r2, #0
 800173c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800173e:	482e      	ldr	r0, [pc, #184]	; (80017f8 <MX_TIM1_Init+0x118>)
 8001740:	f004 fc46 	bl	8005fd0 <HAL_TIM_PWM_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 800174a:	f000 fa5d 	bl	8001c08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800175a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800175e:	4619      	mov	r1, r3
 8001760:	4825      	ldr	r0, [pc, #148]	; (80017f8 <MX_TIM1_Init+0x118>)
 8001762:	f005 fb19 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 800176c:	f000 fa4c 	bl	8001c08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001770:	2360      	movs	r3, #96	; 0x60
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001790:	2200      	movs	r2, #0
 8001792:	4619      	mov	r1, r3
 8001794:	4818      	ldr	r0, [pc, #96]	; (80017f8 <MX_TIM1_Init+0x118>)
 8001796:	f004 fe7f 	bl	8006498 <HAL_TIM_PWM_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 80017a0:	f000 fa32 	bl	8001c08 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017bc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <MX_TIM1_Init+0x118>)
 80017da:	f005 fb4b 	bl	8006e74 <HAL_TIMEx_ConfigBreakDeadTime>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0x108>
	{
		Error_Handler();
 80017e4:	f000 fa10 	bl	8001c08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80017e8:	4803      	ldr	r0, [pc, #12]	; (80017f8 <MX_TIM1_Init+0x118>)
 80017ea:	f000 fc59 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 80017ee:	bf00      	nop
 80017f0:	3758      	adds	r7, #88	; 0x58
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000260 	.word	0x20000260
 80017fc:	40012c00 	.word	0x40012c00

08001800 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	615a      	str	r2, [r3, #20]
 8001822:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001824:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <MX_TIM2_Init+0xc4>)
 8001826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <MX_TIM2_Init+0xc4>)
 800182e:	2200      	movs	r2, #0
 8001830:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <MX_TIM2_Init+0xc4>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <MX_TIM2_Init+0xc4>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <MX_TIM2_Init+0xc4>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <MX_TIM2_Init+0xc4>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800184a:	481e      	ldr	r0, [pc, #120]	; (80018c4 <MX_TIM2_Init+0xc4>)
 800184c:	f004 fbc0 	bl	8005fd0 <HAL_TIM_PWM_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 8001856:	f000 f9d7 	bl	8001c08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	4816      	ldr	r0, [pc, #88]	; (80018c4 <MX_TIM2_Init+0xc4>)
 800186a:	f005 fa95 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8001874:	f000 f9c8 	bl	8001c08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001878:	2360      	movs	r3, #96	; 0x60
 800187a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <MX_TIM2_Init+0xc4>)
 8001890:	f004 fe02 	bl	8006498 <HAL_TIM_PWM_ConfigChannel>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 800189a:	f000 f9b5 	bl	8001c08 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800189e:	463b      	mov	r3, r7
 80018a0:	2208      	movs	r2, #8
 80018a2:	4619      	mov	r1, r3
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <MX_TIM2_Init+0xc4>)
 80018a6:	f004 fdf7 	bl	8006498 <HAL_TIM_PWM_ConfigChannel>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 80018b0:	f000 f9aa 	bl	8001c08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MX_TIM2_Init+0xc4>)
 80018b6:	f000 fbf3 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	; 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200002ac 	.word	0x200002ac

080018c8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	463b      	mov	r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
 80018e8:	615a      	str	r2, [r3, #20]
 80018ea:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <MX_TIM3_Init+0xc4>)
 80018ee:	4a28      	ldr	r2, [pc, #160]	; (8001990 <MX_TIM3_Init+0xc8>)
 80018f0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <MX_TIM3_Init+0xc4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	4b24      	ldr	r3, [pc, #144]	; (800198c <MX_TIM3_Init+0xc4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <MX_TIM3_Init+0xc4>)
 8001900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001904:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <MX_TIM3_Init+0xc4>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <MX_TIM3_Init+0xc4>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001912:	481e      	ldr	r0, [pc, #120]	; (800198c <MX_TIM3_Init+0xc4>)
 8001914:	f004 fb5c 	bl	8005fd0 <HAL_TIM_PWM_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM3_Init+0x5a>
	{
		Error_Handler();
 800191e:	f000 f973 	bl	8001c08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800192a:	f107 031c 	add.w	r3, r7, #28
 800192e:	4619      	mov	r1, r3
 8001930:	4816      	ldr	r0, [pc, #88]	; (800198c <MX_TIM3_Init+0xc4>)
 8001932:	f005 fa31 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM3_Init+0x78>
	{
		Error_Handler();
 800193c:	f000 f964 	bl	8001c08 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001940:	2360      	movs	r3, #96	; 0x60
 8001942:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001950:	463b      	mov	r3, r7
 8001952:	2200      	movs	r2, #0
 8001954:	4619      	mov	r1, r3
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <MX_TIM3_Init+0xc4>)
 8001958:	f004 fd9e 	bl	8006498 <HAL_TIM_PWM_ConfigChannel>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM3_Init+0x9e>
	{
		Error_Handler();
 8001962:	f000 f951 	bl	8001c08 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001966:	463b      	mov	r3, r7
 8001968:	220c      	movs	r2, #12
 800196a:	4619      	mov	r1, r3
 800196c:	4807      	ldr	r0, [pc, #28]	; (800198c <MX_TIM3_Init+0xc4>)
 800196e:	f004 fd93 	bl	8006498 <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 8001978:	f000 f946 	bl	8001c08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800197c:	4803      	ldr	r0, [pc, #12]	; (800198c <MX_TIM3_Init+0xc4>)
 800197e:	f000 fb8f 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 8001982:	bf00      	nop
 8001984:	3728      	adds	r7, #40	; 0x28
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002f8 	.word	0x200002f8
 8001990:	40000400 	.word	0x40000400

08001994 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019a6:	4a15      	ldr	r2, [pc, #84]	; (80019fc <MX_TIM6_Init+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 1000;
 80019aa:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019b0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 24;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019ba:	2218      	movs	r2, #24
 80019bc:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019c4:	480c      	ldr	r0, [pc, #48]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019c6:	f004 fa4f 	bl	8005e68 <HAL_TIM_Base_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 80019d0:	f000 f91a 	bl	8001c08 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_TIM6_Init+0x64>)
 80019e2:	f005 f9d9 	bl	8006d98 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 80019ec:	f000 f90c 	bl	8001c08 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000344 	.word	0x20000344
 80019fc:	40001000 	.word	0x40001000

08001a00 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <MX_USART2_UART_Init+0x5c>)
 8001a08:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_USART2_UART_Init+0x58>)
 8001a44:	f005 faac 	bl	8006fa0 <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001a4e:	f000 f8db 	bl	8001c08 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200004e4 	.word	0x200004e4
 8001a5c:	40004400 	.word	0x40004400

08001a60 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_DMA_Init+0x78>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <MX_DMA_Init+0x78>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6153      	str	r3, [r2, #20]
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_DMA_Init+0x78>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	200b      	movs	r0, #11
 8001a84:	f001 fe77 	bl	8003776 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a88:	200b      	movs	r0, #11
 8001a8a:	f001 fe90 	bl	80037ae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	200c      	movs	r0, #12
 8001a94:	f001 fe6f 	bl	8003776 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a98:	200c      	movs	r0, #12
 8001a9a:	f001 fe88 	bl	80037ae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	200d      	movs	r0, #13
 8001aa4:	f001 fe67 	bl	8003776 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001aa8:	200d      	movs	r0, #13
 8001aaa:	f001 fe80 	bl	80037ae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	200f      	movs	r0, #15
 8001ab4:	f001 fe5f 	bl	8003776 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001ab8:	200f      	movs	r0, #15
 8001aba:	f001 fe78 	bl	80037ae <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2010      	movs	r0, #16
 8001ac4:	f001 fe57 	bl	8003776 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ac8:	2010      	movs	r0, #16
 8001aca:	f001 fe70 	bl	80037ae <HAL_NVIC_EnableIRQ>

}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b088      	sub	sp, #32
 8001ae0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001af2:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	4a36      	ldr	r2, [pc, #216]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001afc:	6153      	str	r3, [r2, #20]
 8001afe:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	4a30      	ldr	r2, [pc, #192]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	6153      	str	r3, [r2, #20]
 8001b16:	4b2e      	ldr	r3, [pc, #184]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	4a2a      	ldr	r2, [pc, #168]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2c:	6153      	str	r3, [r2, #20]
 8001b2e:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <MX_GPIO_Init+0xf4>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIO_Output_EV_P_GPIO_Port, GPIO_Output_EV_P_Pin, GPIO_PIN_RESET);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <MX_GPIO_Init+0xf8>)
 8001b40:	f002 f958 	bl	8003df4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2198      	movs	r1, #152	; 0x98
 8001b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4c:	f002 f952 	bl	8003df4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2138      	movs	r1, #56	; 0x38
 8001b54:	4820      	ldr	r0, [pc, #128]	; (8001bd8 <MX_GPIO_Init+0xfc>)
 8001b56:	f002 f94d 	bl	8003df4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : GPIO_Output_EV_P_Pin */
	GPIO_InitStruct.Pin = GPIO_Output_EV_P_Pin;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIO_Output_EV_P_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <MX_GPIO_Init+0xf8>)
 8001b72:	f001 ffcd 	bl	8003b10 <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_Input_AU_STATUS_Pin */
	GPIO_InitStruct.Pin = GPIO_Input_AU_STATUS_Pin;
 8001b76:	2302      	movs	r3, #2
 8001b78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_Input_AU_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	4619      	mov	r1, r3
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <MX_GPIO_Init+0xf8>)
 8001b8a:	f001 ffc1 	bl	8003b10 <HAL_GPIO_Init>

	/*Configure GPIO pins : GPIO_Output_EV_3_Pin GPIO_Output_EV_2_Pin GPIO_Output_EV_1_Pin */
	GPIO_InitStruct.Pin = GPIO_Output_EV_3_Pin|GPIO_Output_EV_2_Pin|GPIO_Output_EV_1_Pin;
 8001b8e:	2398      	movs	r3, #152	; 0x98
 8001b90:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 030c 	add.w	r3, r7, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba8:	f001 ffb2 	bl	8003b10 <HAL_GPIO_Init>

	/*Configure GPIO pins : Built_in_LED_Pin GPIO_Output_LED_EN_Pin GPIO_Output_LCD_EN_Pin */
	GPIO_InitStruct.Pin = Built_in_LED_Pin|GPIO_Output_LED_EN_Pin|GPIO_Output_LCD_EN_Pin;
 8001bac:	2338      	movs	r3, #56	; 0x38
 8001bae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_GPIO_Init+0xfc>)
 8001bc4:	f001 ffa4 	bl	8003b10 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001bc8:	bf00      	nop
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	48001400 	.word	0x48001400
 8001bd8:	48000400 	.word	0x48000400

08001bdc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim6.Instance)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d102      	bne.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		dshot_write(my_motor_value);
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001bf2:	f7fe fe35 	bl	8000860 <dshot_write>
	}
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000344 	.word	0x20000344
 8001c04:	2000056c 	.word	0x2000056c

08001c08 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c10:	e7fe      	b.n	8001c10 <Error_Handler+0x8>
	...

08001c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <HAL_MspInit+0x44>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_MspInit+0x44>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6193      	str	r3, [r2, #24]
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_MspInit+0x44>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_MspInit+0x44>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_MspInit+0x44>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_MspInit+0x44>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c7c:	d124      	bne.n	8001cc8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_ADC_MspInit+0x74>)
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <HAL_ADC_MspInit+0x74>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c88:	6153      	str	r3, [r2, #20]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_ADC_MspInit+0x74>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_ADC_MspInit+0x74>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_ADC_MspInit+0x74>)
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_ADC_MspInit+0x74>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_A_TEMP_Pin|ADC1_IN2_A_PRES_Pin;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc4:	f001 ff24 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000

08001cd4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a18      	ldr	r2, [pc, #96]	; (8001d54 <HAL_CAN_MspInit+0x80>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d129      	bne.n	8001d4a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_CAN_MspInit+0x84>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <HAL_CAN_MspInit+0x84>)
 8001cfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d00:	61d3      	str	r3, [r2, #28]
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_CAN_MspInit+0x84>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_CAN_MspInit+0x84>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_CAN_MspInit+0x84>)
 8001d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d18:	6153      	str	r3, [r2, #20]
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_CAN_MspInit+0x84>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = CAN_RD_Pin|CAN_TD_Pin;
 8001d26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001d38:	2309      	movs	r3, #9
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d46:	f001 fee3 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40006400 	.word	0x40006400
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1b      	ldr	r2, [pc, #108]	; (8001de8 <HAL_I2C_MspInit+0x8c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d12f      	bne.n	8001dde <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_I2C_MspInit+0x90>)
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <HAL_I2C_MspInit+0x90>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6153      	str	r3, [r2, #20]
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_I2C_MspInit+0x90>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d96:	23c0      	movs	r3, #192	; 0xc0
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9a:	2312      	movs	r3, #18
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da6:	2304      	movs	r3, #4
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	480f      	ldr	r0, [pc, #60]	; (8001df0 <HAL_I2C_MspInit+0x94>)
 8001db2:	f001 fead 	bl	8003b10 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001db6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001dba:	f002 fc9b 	bl	80046f4 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001dbe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001dc2:	f002 fc97 	bl	80046f4 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_I2C_MspInit+0x90>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_I2C_MspInit+0x90>)
 8001dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd0:	61d3      	str	r3, [r2, #28]
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_I2C_MspInit+0x90>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40005400 	.word	0x40005400
 8001dec:	40021000 	.word	0x40021000
 8001df0:	48000400 	.word	0x48000400

08001df4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a87      	ldr	r2, [pc, #540]	; (8002020 <HAL_TIM_PWM_MspInit+0x22c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d135      	bne.n	8001e72 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e06:	4b87      	ldr	r3, [pc, #540]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	4a86      	ldr	r2, [pc, #536]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e10:	6193      	str	r3, [r2, #24]
 8001e12:	4b84      	ldr	r3, [pc, #528]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001e1e:	4b82      	ldr	r3, [pc, #520]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e20:	4a82      	ldr	r2, [pc, #520]	; (800202c <HAL_TIM_PWM_MspInit+0x238>)
 8001e22:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e24:	4b80      	ldr	r3, [pc, #512]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e26:	2210      	movs	r2, #16
 8001e28:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e30:	4b7d      	ldr	r3, [pc, #500]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e36:	4b7c      	ldr	r3, [pc, #496]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e3c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e3e:	4b7a      	ldr	r3, [pc, #488]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e44:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001e46:	4b78      	ldr	r3, [pc, #480]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e4c:	4b76      	ldr	r3, [pc, #472]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001e54:	4874      	ldr	r0, [pc, #464]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e56:	f001 fcc4 	bl	80037e2 <HAL_DMA_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 8001e60:	f7ff fed2 	bl	8001c08 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a70      	ldr	r2, [pc, #448]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
 8001e6a:	4a6f      	ldr	r2, [pc, #444]	; (8002028 <HAL_TIM_PWM_MspInit+0x234>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e70:	e0d2      	b.n	8002018 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d15e      	bne.n	8001f3a <HAL_TIM_PWM_MspInit+0x146>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7c:	4b69      	ldr	r3, [pc, #420]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4a68      	ldr	r2, [pc, #416]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	61d3      	str	r3, [r2, #28]
 8001e88:	4b66      	ldr	r3, [pc, #408]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001e96:	4a67      	ldr	r2, [pc, #412]	; (8002034 <HAL_TIM_PWM_MspInit+0x240>)
 8001e98:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e9a:	4b65      	ldr	r3, [pc, #404]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea0:	4b63      	ldr	r3, [pc, #396]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ea6:	4b62      	ldr	r3, [pc, #392]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001eac:	4b60      	ldr	r3, [pc, #384]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eba:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001ebc:	4b5c      	ldr	r3, [pc, #368]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ec4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001eca:	4859      	ldr	r0, [pc, #356]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ecc:	f001 fc89 	bl	80037e2 <HAL_DMA_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_TIM_PWM_MspInit+0xe6>
      Error_Handler();
 8001ed6:	f7ff fe97 	bl	8001c08 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a54      	ldr	r2, [pc, #336]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
 8001ee0:	4a53      	ldr	r2, [pc, #332]	; (8002030 <HAL_TIM_PWM_MspInit+0x23c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8001ee6:	4b54      	ldr	r3, [pc, #336]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001ee8:	4a54      	ldr	r2, [pc, #336]	; (800203c <HAL_TIM_PWM_MspInit+0x248>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eec:	4b52      	ldr	r3, [pc, #328]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001eee:	2210      	movs	r2, #16
 8001ef0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef2:	4b51      	ldr	r3, [pc, #324]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001ef8:	4b4f      	ldr	r3, [pc, #316]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001efe:	4b4e      	ldr	r3, [pc, #312]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f04:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f06:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f0c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001f1c:	4846      	ldr	r0, [pc, #280]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001f1e:	f001 fc60 	bl	80037e2 <HAL_DMA_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_TIM_PWM_MspInit+0x138>
      Error_Handler();
 8001f28:	f7ff fe6e 	bl	8001c08 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a42      	ldr	r2, [pc, #264]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f32:	4a41      	ldr	r2, [pc, #260]	; (8002038 <HAL_TIM_PWM_MspInit+0x244>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001f38:	e06e      	b.n	8002018 <HAL_TIM_PWM_MspInit+0x224>
  else if(htim_pwm->Instance==TIM3)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a40      	ldr	r2, [pc, #256]	; (8002040 <HAL_TIM_PWM_MspInit+0x24c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d169      	bne.n	8002018 <HAL_TIM_PWM_MspInit+0x224>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f44:	4b37      	ldr	r3, [pc, #220]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	4a36      	ldr	r2, [pc, #216]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	61d3      	str	r3, [r2, #28]
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <HAL_TIM_PWM_MspInit+0x230>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1_trig.Instance = DMA1_Channel6;
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f5e:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <HAL_TIM_PWM_MspInit+0x254>)
 8001f60:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f64:	2210      	movs	r2, #16
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001f6e:	4b35      	ldr	r3, [pc, #212]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f70:	2280      	movs	r2, #128	; 0x80
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f74:	4b33      	ldr	r3, [pc, #204]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f7a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f7c:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f82:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f90:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001f92:	482c      	ldr	r0, [pc, #176]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001f94:	f001 fc25 	bl	80037e2 <HAL_DMA_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_TIM_PWM_MspInit+0x1ae>
      Error_Handler();
 8001f9e:	f7ff fe33 	bl	8001c08 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
 8001fa8:	4a26      	ldr	r2, [pc, #152]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a24      	ldr	r2, [pc, #144]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
 8001fb4:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_TIM_PWM_MspInit+0x250>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_TIM_PWM_MspInit+0x25c>)
 8001fbe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fd8:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe0:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001ff0:	4816      	ldr	r0, [pc, #88]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8001ff2:	f001 fbf6 	bl	80037e2 <HAL_DMA_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_TIM_PWM_MspInit+0x20c>
      Error_Handler();
 8001ffc:	f7ff fe04 	bl	8001c08 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
 8002006:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8002010:	621a      	str	r2, [r3, #32]
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_TIM_PWM_MspInit+0x258>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40021000 	.word	0x40021000
 8002028:	20000390 	.word	0x20000390
 800202c:	4002001c 	.word	0x4002001c
 8002030:	200003d4 	.word	0x200003d4
 8002034:	40020058 	.word	0x40020058
 8002038:	20000418 	.word	0x20000418
 800203c:	40020008 	.word	0x40020008
 8002040:	40000400 	.word	0x40000400
 8002044:	2000045c 	.word	0x2000045c
 8002048:	4002006c 	.word	0x4002006c
 800204c:	200004a0 	.word	0x200004a0
 8002050:	40020030 	.word	0x40020030

08002054 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_TIM_Base_MspInit+0x44>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d113      	bne.n	800208e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a0c      	ldr	r2, [pc, #48]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_TIM_Base_MspInit+0x48>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0310 	and.w	r3, r3, #16
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	2036      	movs	r0, #54	; 0x36
 8002084:	f001 fb77 	bl	8003776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002088:	2036      	movs	r0, #54	; 0x36
 800208a:	f001 fb90 	bl	80037ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40001000 	.word	0x40001000
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a4c      	ldr	r2, [pc, #304]	; (80021f0 <HAL_TIM_MspPostInit+0x150>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d11e      	bne.n	8002100 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	4a4b      	ldr	r2, [pc, #300]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	6153      	str	r3, [r2, #20]
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1_DS_M3_Pin;
 80020da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020ec:	2306      	movs	r3, #6
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM1_CH1_DS_M3_GPIO_Port, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f001 fd09 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020fe:	e072      	b.n	80021e6 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d12f      	bne.n	800216a <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	4b3a      	ldr	r3, [pc, #232]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4a39      	ldr	r2, [pc, #228]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	6153      	str	r3, [r2, #20]
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_DS_COMP_Pin;
 8002122:	2320      	movs	r3, #32
 8002124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002132:	2301      	movs	r3, #1
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_DS_COMP_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002140:	f001 fce6 	bl	8003b10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM2_CH3_DS_M1_Pin;
 8002144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002156:	230a      	movs	r3, #10
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_DS_M1_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4619      	mov	r1, r3
 8002160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002164:	f001 fcd4 	bl	8003b10 <HAL_GPIO_Init>
}
 8002168:	e03d      	b.n	80021e6 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_TIM_MspPostInit+0x158>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d138      	bne.n	80021e6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002174:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 800217a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217e:	6153      	str	r3, [r2, #20]
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 8002192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002196:	6153      	str	r3, [r2, #20]
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_TIM_MspPostInit+0x154>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM3_CH1_DS_TURB_Pin;
 80021a4:	2340      	movs	r3, #64	; 0x40
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a8:	2302      	movs	r3, #2
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b4:	2302      	movs	r3, #2
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH1_DS_TURB_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c2:	f001 fca5 	bl	8003b10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM3_CH4_DS_M2_Pin;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021d6:	2302      	movs	r3, #2
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM3_CH4_DS_M2_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	4619      	mov	r1, r3
 80021e0:	4806      	ldr	r0, [pc, #24]	; (80021fc <HAL_TIM_MspPostInit+0x15c>)
 80021e2:	f001 fc95 	bl	8003b10 <HAL_GPIO_Init>
}
 80021e6:	bf00      	nop
 80021e8:	3730      	adds	r7, #48	; 0x30
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40000400 	.word	0x40000400
 80021fc:	48000400 	.word	0x48000400

08002200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_UART_MspInit+0x80>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d129      	bne.n	8002276 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_UART_MspInit+0x84>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_UART_MspInit+0x84>)
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	61d3      	str	r3, [r2, #28]
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_UART_MspInit+0x84>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_UART_MspInit+0x84>)
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_UART_MspInit+0x84>)
 8002240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002244:	6153      	str	r3, [r2, #20]
 8002246:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <HAL_UART_MspInit+0x84>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002252:	f248 0304 	movw	r3, #32772	; 0x8004
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002264:	2307      	movs	r3, #7
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002272:	f001 fc4d 	bl	8003b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	; 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40004400 	.word	0x40004400
 8002284:	40021000 	.word	0x40021000

08002288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800228c:	e7fe      	b.n	800228c <NMI_Handler+0x4>

0800228e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <HardFault_Handler+0x4>

08002294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <MemManage_Handler+0x4>

0800229a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d4:	f000 f8c0 	bl	8002458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <DMA1_Channel1_IRQHandler+0x10>)
 80022e2:	f001 fb24 	bl	800392e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000418 	.word	0x20000418

080022f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <DMA1_Channel2_IRQHandler+0x10>)
 80022f6:	f001 fb1a 	bl	800392e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000390 	.word	0x20000390

08002304 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <DMA1_Channel3_IRQHandler+0x10>)
 800230a:	f001 fb10 	bl	800392e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200004a0 	.word	0x200004a0

08002318 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <DMA1_Channel5_IRQHandler+0x10>)
 800231e:	f001 fb06 	bl	800392e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200003d4 	.word	0x200003d4

0800232c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <DMA1_Channel6_IRQHandler+0x10>)
 8002332:	f001 fafc 	bl	800392e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000045c 	.word	0x2000045c

08002340 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <TIM6_DAC1_IRQHandler+0x10>)
 8002346:	f003 ff87 	bl	8006258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000344 	.word	0x20000344

08002354 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <SystemInit+0x20>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <SystemInit+0x20>)
 8002360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800237c:	f7ff ffea 	bl	8002354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002380:	480c      	ldr	r0, [pc, #48]	; (80023b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002382:	490d      	ldr	r1, [pc, #52]	; (80023b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002384:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <LoopForever+0xe>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002388:	e002      	b.n	8002390 <LoopCopyDataInit>

0800238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238e:	3304      	adds	r3, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002394:	d3f9      	bcc.n	800238a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002398:	4c0a      	ldr	r4, [pc, #40]	; (80023c4 <LoopForever+0x16>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800239c:	e001      	b.n	80023a2 <LoopFillZerobss>

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a0:	3204      	adds	r2, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a6:	f005 fa5f 	bl	8007868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023aa:	f7fe fca1 	bl	8000cf0 <main>

080023ae <LoopForever>:

LoopForever:
    b LoopForever
 80023ae:	e7fe      	b.n	80023ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80023b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80023bc:	080079a0 	.word	0x080079a0
  ldr r2, =_sbss
 80023c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80023c4:	2000057c 	.word	0x2000057c

080023c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC1_2_IRQHandler>
	...

080023cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_Init+0x28>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_Init+0x28>)
 80023d6:	f043 0310 	orr.w	r3, r3, #16
 80023da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023dc:	2003      	movs	r0, #3
 80023de:	f001 f9bf 	bl	8003760 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e2:	2003      	movs	r0, #3
 80023e4:	f000 f808 	bl	80023f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e8:	f7ff fc14 	bl	8001c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40022000 	.word	0x40022000

080023f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_InitTick+0x54>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_InitTick+0x58>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f001 f9d7 	bl	80037ca <HAL_SYSTICK_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00e      	b.n	8002444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d80a      	bhi.n	8002442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f001 f99f 	bl	8003776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <HAL_InitTick+0x5c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e000      	b.n	8002444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000000 	.word	0x20000000
 8002450:	20000008 	.word	0x20000008
 8002454:	20000004 	.word	0x20000004

08002458 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x20>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x24>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_IncTick+0x24>)
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008
 800247c:	20000578 	.word	0x20000578

08002480 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;  
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000578 	.word	0x20000578

08002498 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff ffee 	bl	8002480 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d005      	beq.n	80024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_Delay+0x44>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80024be:	bf00      	nop
 80024c0:	f7ff ffde 	bl	8002480 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8f7      	bhi.n	80024c0 <HAL_Delay+0x28>
  {
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000008 	.word	0x20000008

080024e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b09a      	sub	sp, #104	; 0x68
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e172      	b.n	80027e6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	d176      	bne.n	8002600 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d152      	bne.n	80025c0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fb91 	bl	8001c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d13b      	bne.n	80025c0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fed7 	bl	80032fc <ADC_Disable>
 800254e:	4603      	mov	r3, r0
 8002550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	2b00      	cmp	r3, #0
 800255e:	d12f      	bne.n	80025c0 <HAL_ADC_Init+0xe0>
 8002560:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002564:	2b00      	cmp	r3, #0
 8002566:	d12b      	bne.n	80025c0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002570:	f023 0302 	bic.w	r3, r3, #2
 8002574:	f043 0202 	orr.w	r2, r3, #2
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800258a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800259a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800259c:	4b94      	ldr	r3, [pc, #592]	; (80027f0 <HAL_ADC_Init+0x310>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a94      	ldr	r2, [pc, #592]	; (80027f4 <HAL_ADC_Init+0x314>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	0c9a      	lsrs	r2, r3, #18
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025b2:	e002      	b.n	80025ba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025dc:	d110      	bne.n	8002600 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f023 0312 	bic.w	r3, r3, #18
 80025e6:	f043 0210 	orr.w	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 80df 	bne.w	80027cc <HAL_ADC_Init+0x2ec>
 800260e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 80da 	bne.w	80027cc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 80d2 	bne.w	80027cc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002630:	f043 0202 	orr.w	r2, r3, #2
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_ADC_Init+0x318>)
 800263a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002644:	d102      	bne.n	800264c <HAL_ADC_Init+0x16c>
 8002646:	4b6d      	ldr	r3, [pc, #436]	; (80027fc <HAL_ADC_Init+0x31c>)
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e002      	b.n	8002652 <HAL_ADC_Init+0x172>
 800264c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002650:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b01      	cmp	r3, #1
 800265e:	d108      	bne.n	8002672 <HAL_ADC_Init+0x192>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Init+0x192>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_ADC_Init+0x194>
 8002672:	2300      	movs	r3, #0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11c      	bne.n	80026b2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002678:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d107      	bne.n	800269a <HAL_ADC_Init+0x1ba>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_ADC_Init+0x1ba>
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_ADC_Init+0x1bc>
 800269a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800269c:	2b00      	cmp	r3, #0
 800269e:	d108      	bne.n	80026b2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80026a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7e5b      	ldrb	r3, [r3, #25]
 80026b6:	035b      	lsls	r3, r3, #13
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026bc:	2a01      	cmp	r2, #1
 80026be:	d002      	beq.n	80026c6 <HAL_ADC_Init+0x1e6>
 80026c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026c4:	e000      	b.n	80026c8 <HAL_ADC_Init+0x1e8>
 80026c6:	2200      	movs	r2, #0
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026d8:	4313      	orrs	r3, r2
 80026da:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d11b      	bne.n	800271e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	7e5b      	ldrb	r3, [r3, #25]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	3b01      	subs	r3, #1
 80026f4:	045a      	lsls	r2, r3, #17
 80026f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fe:	663b      	str	r3, [r7, #96]	; 0x60
 8002700:	e00d      	b.n	800271e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	2b01      	cmp	r3, #1
 8002724:	d007      	beq.n	8002736 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	4313      	orrs	r3, r2
 8002730:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002732:	4313      	orrs	r3, r2
 8002734:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b00      	cmp	r3, #0
 8002742:	d114      	bne.n	800276e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002752:	f023 0302 	bic.w	r3, r3, #2
 8002756:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7e1b      	ldrb	r3, [r3, #24]
 800275c:	039a      	lsls	r2, r3, #14
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4313      	orrs	r3, r2
 8002768:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800276a:	4313      	orrs	r3, r2
 800276c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <HAL_ADC_Init+0x320>)
 8002776:	4013      	ands	r3, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800277e:	430b      	orrs	r3, r1
 8002780:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10c      	bne.n	80027a4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002790:	f023 010f 	bic.w	r1, r3, #15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
 80027a2:	e007      	b.n	80027b4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 020f 	bic.w	r2, r2, #15
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f023 0303 	bic.w	r3, r3, #3
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
 80027ca:	e00a      	b.n	80027e2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f023 0312 	bic.w	r3, r3, #18
 80027d4:	f043 0210 	orr.w	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80027e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3768      	adds	r7, #104	; 0x68
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000000 	.word	0x20000000
 80027f4:	431bde83 	.word	0x431bde83
 80027f8:	50000300 	.word	0x50000300
 80027fc:	50000100 	.word	0x50000100
 8002800:	fff0c007 	.word	0xfff0c007

08002804 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 809c 	bne.w	8002958 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_ADC_Start+0x2a>
 800282a:	2302      	movs	r3, #2
 800282c:	e097      	b.n	800295e <HAL_ADC_Start+0x15a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fcfc 	bl	8003234 <ADC_Enable>
 800283c:	4603      	mov	r3, r0
 800283e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 8083 	bne.w	800294e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800285c:	4b42      	ldr	r3, [pc, #264]	; (8002968 <HAL_ADC_Start+0x164>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <HAL_ADC_Start+0x6e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002870:	d115      	bne.n	800289e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d027      	beq.n	80028dc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002894:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800289c:	e01e      	b.n	80028dc <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b2:	d004      	beq.n	80028be <HAL_ADC_Start+0xba>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2c      	ldr	r2, [pc, #176]	; (800296c <HAL_ADC_Start+0x168>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10e      	bne.n	80028dc <HAL_ADC_Start+0xd8>
 80028be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	d106      	bne.n	80028f8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f023 0206 	bic.w	r2, r3, #6
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
 80028f6:	e002      	b.n	80028fe <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	221c      	movs	r2, #28
 800290c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_ADC_Start+0x164>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2b00      	cmp	r3, #0
 8002918:	d010      	beq.n	800293c <HAL_ADC_Start+0x138>
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_ADC_Start+0x164>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2b05      	cmp	r3, #5
 8002924:	d00a      	beq.n	800293c <HAL_ADC_Start+0x138>
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_ADC_Start+0x164>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	2b09      	cmp	r3, #9
 8002930:	d004      	beq.n	800293c <HAL_ADC_Start+0x138>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800293a:	d10f      	bne.n	800295c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0204 	orr.w	r2, r2, #4
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e006      	b.n	800295c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002956:	e001      	b.n	800295c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002958:	2302      	movs	r3, #2
 800295a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800295c:	7bfb      	ldrb	r3, [r7, #15]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	50000300 	.word	0x50000300
 800296c:	50000100 	.word	0x50000100

08002970 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	2b08      	cmp	r3, #8
 8002984:	d102      	bne.n	800298c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002986:	2308      	movs	r3, #8
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e02e      	b.n	80029ea <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800298c:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <HAL_ADC_PollForConversion+0x198>)
 800298e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b00      	cmp	r3, #0
 800299a:	d112      	bne.n	80029c2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d11d      	bne.n	80029e6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e09d      	b.n	8002afe <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e08b      	b.n	8002afe <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80029e6:	230c      	movs	r3, #12
 80029e8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_ADC_PollForConversion+0x198>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_ADC_PollForConversion+0x90>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029fe:	d104      	bne.n	8002a0a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	e003      	b.n	8002a12 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002a12:	f7ff fd35 	bl	8002480 <HAL_GetTick>
 8002a16:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002a18:	e021      	b.n	8002a5e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d01d      	beq.n	8002a5e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_ADC_PollForConversion+0xc8>
 8002a28:	f7ff fd2a 	bl	8002480 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d212      	bcs.n	8002a5e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f043 0204 	orr.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e04f      	b.n	8002afe <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0d6      	beq.n	8002a1a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d131      	bne.n	8002aea <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d12c      	bne.n	8002aea <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d125      	bne.n	8002aea <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d112      	bne.n	8002ad2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d112      	bne.n	8002aea <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
 8002ad0:	e00b      	b.n	8002aea <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	50000300 	.word	0x50000300

08002b0c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b09b      	sub	sp, #108	; 0x6c
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x22>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e2a4      	b.n	8003094 <HAL_ADC_ConfigChannel+0x56c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f040 8288 	bne.w	8003072 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d81c      	bhi.n	8002ba4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	4413      	add	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	231f      	movs	r3, #31
 8002b80:	4093      	lsls	r3, r2
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4019      	ands	r1, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba2:	e063      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	d81e      	bhi.n	8002bea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	3b1e      	subs	r3, #30
 8002bc0:	221f      	movs	r2, #31
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	4019      	ands	r1, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	3b1e      	subs	r3, #30
 8002bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34
 8002be8:	e040      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b0e      	cmp	r3, #14
 8002bf0:	d81e      	bhi.n	8002c30 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	3b3c      	subs	r3, #60	; 0x3c
 8002c06:	221f      	movs	r2, #31
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	4019      	ands	r1, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	3b3c      	subs	r3, #60	; 0x3c
 8002c22:	fa00 f203 	lsl.w	r2, r0, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c2e:	e01d      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	3b5a      	subs	r3, #90	; 0x5a
 8002c44:	221f      	movs	r2, #31
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	4019      	ands	r1, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	3b5a      	subs	r3, #90	; 0x5a
 8002c60:	fa00 f203 	lsl.w	r2, r0, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 80e5 	bne.w	8002e46 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d91c      	bls.n	8002cbe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6999      	ldr	r1, [r3, #24]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	3b1e      	subs	r3, #30
 8002c96:	2207      	movs	r2, #7
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	4019      	ands	r1, r3
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6898      	ldr	r0, [r3, #8]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	3b1e      	subs	r3, #30
 8002cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	619a      	str	r2, [r3, #24]
 8002cbc:	e019      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6959      	ldr	r1, [r3, #20]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	2207      	movs	r2, #7
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	4019      	ands	r1, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6898      	ldr	r0, [r3, #8]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	08db      	lsrs	r3, r3, #3
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d84f      	bhi.n	8002db4 <HAL_ADC_ConfigChannel+0x28c>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_ADC_ConfigChannel+0x1f4>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d4f 	.word	0x08002d4f
 8002d24:	08002d71 	.word	0x08002d71
 8002d28:	08002d93 	.word	0x08002d93
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d32:	4b94      	ldr	r3, [pc, #592]	; (8002f84 <HAL_ADC_ConfigChannel+0x45c>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	0691      	lsls	r1, r2, #26
 8002d3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d4a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d4c:	e07e      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d54:	4b8b      	ldr	r3, [pc, #556]	; (8002f84 <HAL_ADC_ConfigChannel+0x45c>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	0691      	lsls	r1, r2, #26
 8002d5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d60:	430a      	orrs	r2, r1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d6c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d6e:	e06d      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d76:	4b83      	ldr	r3, [pc, #524]	; (8002f84 <HAL_ADC_ConfigChannel+0x45c>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	0691      	lsls	r1, r2, #26
 8002d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d82:	430a      	orrs	r2, r1
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d8e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002d90:	e05c      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d98:	4b7a      	ldr	r3, [pc, #488]	; (8002f84 <HAL_ADC_ConfigChannel+0x45c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	0691      	lsls	r1, r2, #26
 8002da2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002da4:	430a      	orrs	r2, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002db0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002db2:	e04b      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	069b      	lsls	r3, r3, #26
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d107      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	069b      	lsls	r3, r3, #26
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d107      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dfa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	069b      	lsls	r3, r3, #26
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e1e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	069b      	lsls	r3, r3, #26
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d10a      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e42:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002e44:	e001      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x324>
      break;
 8002e4a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d108      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x344>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x344>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x346>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 810a 	bne.w	8003088 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d00f      	beq.n	8002e9c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	400a      	ands	r2, r1
 8002e96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002e9a:	e049      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b09      	cmp	r3, #9
 8002ebc:	d91c      	bls.n	8002ef8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6999      	ldr	r1, [r3, #24]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b1b      	subs	r3, #27
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	4019      	ands	r1, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6898      	ldr	r0, [r3, #8]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b1b      	subs	r3, #27
 8002eea:	fa00 f203 	lsl.w	r2, r0, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	619a      	str	r2, [r3, #24]
 8002ef6:	e01b      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6959      	ldr	r1, [r3, #20]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	4019      	ands	r1, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	6898      	ldr	r0, [r3, #8]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	fa00 f203 	lsl.w	r2, r0, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_ADC_ConfigChannel+0x460>)
 8002f32:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002f4c:	2b11      	cmp	r3, #17
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002f60:	2b12      	cmp	r3, #18
 8002f62:	f040 8091 	bne.w	8003088 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 808a 	bne.w	8003088 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7c:	d108      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x468>
 8002f7e:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_ADC_ConfigChannel+0x464>)
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	e008      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x46e>
 8002f84:	83fff000 	.word	0x83fff000
 8002f88:	50000300 	.word	0x50000300
 8002f8c:	50000100 	.word	0x50000100
 8002f90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f94:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d108      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x48e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x48e>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x490>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d150      	bne.n	800305e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d010      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x4b6>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x4b6>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x4b8>
 8002fde:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d13c      	bne.n	800305e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d11d      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x500>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ff4:	d118      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003000:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003002:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_ADC_ConfigChannel+0x578>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <HAL_ADC_ConfigChannel+0x57c>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	0c9a      	lsrs	r2, r3, #18
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003018:	e002      	b.n	8003020 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3b01      	subs	r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f9      	bne.n	800301a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003026:	e02e      	b.n	8003086 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b11      	cmp	r3, #17
 800302e:	d10b      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x520>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003038:	d106      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800303a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003044:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003046:	e01e      	b.n	8003086 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b12      	cmp	r3, #18
 800304e:	d11a      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800305c:	e013      	b.n	8003086 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003070:	e00a      	b.n	8003088 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003084:	e000      	b.n	8003088 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003086:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003090:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003094:	4618      	mov	r0, r3
 8003096:	376c      	adds	r7, #108	; 0x6c
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	20000000 	.word	0x20000000
 80030a4:	431bde83 	.word	0x431bde83

080030a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b099      	sub	sp, #100	; 0x64
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c0:	d102      	bne.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80030c2:	4b5a      	ldr	r3, [pc, #360]	; (800322c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	e002      	b.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80030c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030cc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0a2      	b.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e09b      	b.n	800321e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d17f      	bne.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d179      	bne.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003108:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800310a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d040      	beq.n	8003196 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003126:	035b      	lsls	r3, r3, #13
 8003128:	430b      	orrs	r3, r1
 800312a:	431a      	orrs	r2, r3
 800312c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d108      	bne.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8003150:	2300      	movs	r3, #0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d15c      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8003172:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003174:	2b00      	cmp	r3, #0
 8003176:	d14b      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003180:	f023 030f 	bic.w	r3, r3, #15
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	6811      	ldr	r1, [r2, #0]
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	6892      	ldr	r2, [r2, #8]
 800318c:	430a      	orrs	r2, r1
 800318e:	431a      	orrs	r2, r3
 8003190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003192:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003194:	e03c      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80031c2:	2300      	movs	r3, #0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d123      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80031e4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d112      	bne.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80031ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031f2:	f023 030f 	bic.w	r3, r3, #15
 80031f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031f8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80031fa:	e009      	b.n	8003210 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800320e:	e000      	b.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003210:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800321a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800321e:	4618      	mov	r0, r3
 8003220:	3764      	adds	r7, #100	; 0x64
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	50000100 	.word	0x50000100
 8003230:	50000300 	.word	0x50000300

08003234 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <ADC_Enable+0x2c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <ADC_Enable+0x2c>
 800325c:	2301      	movs	r3, #1
 800325e:	e000      	b.n	8003262 <ADC_Enable+0x2e>
 8003260:	2300      	movs	r3, #0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d143      	bne.n	80032ee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <ADC_Enable+0xc4>)
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00d      	beq.n	8003290 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e02f      	b.n	80032f0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80032a0:	f7ff f8ee 	bl	8002480 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032a6:	e01b      	b.n	80032e0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032a8:	f7ff f8ea 	bl	8002480 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d914      	bls.n	80032e0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d00d      	beq.n	80032e0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0210 	orr.w	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e007      	b.n	80032f0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d1dc      	bne.n	80032a8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	8000003f 	.word	0x8000003f

080032fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d108      	bne.n	8003328 <ADC_Disable+0x2c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <ADC_Disable+0x2c>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <ADC_Disable+0x2e>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d047      	beq.n	80033be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030d 	and.w	r3, r3, #13
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10f      	bne.n	800335c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0202 	orr.w	r2, r2, #2
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2203      	movs	r2, #3
 8003352:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003354:	f7ff f894 	bl	8002480 <HAL_GetTick>
 8003358:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800335a:	e029      	b.n	80033b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0210 	orr.w	r2, r3, #16
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e023      	b.n	80033c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003378:	f7ff f882 	bl	8002480 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d914      	bls.n	80033b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10d      	bne.n	80033b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f043 0210 	orr.w	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d0dc      	beq.n	8003378 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0ed      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe fc74 	bl	8001cd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fc:	f7ff f840 	bl	8002480 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003402:	e012      	b.n	800342a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003404:	f7ff f83c 	bl	8002480 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b0a      	cmp	r3, #10
 8003410:	d90b      	bls.n	800342a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2205      	movs	r2, #5
 8003422:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e0c5      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0e5      	beq.n	8003404 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0202 	bic.w	r2, r2, #2
 8003446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003448:	f7ff f81a 	bl	8002480 <HAL_GetTick>
 800344c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800344e:	e012      	b.n	8003476 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003450:	f7ff f816 	bl	8002480 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b0a      	cmp	r3, #10
 800345c:	d90b      	bls.n	8003476 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2205      	movs	r2, #5
 800346e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e09f      	b.n	80035b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e5      	bne.n	8003450 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7e1b      	ldrb	r3, [r3, #24]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d108      	bne.n	800349e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	e007      	b.n	80034ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7e5b      	ldrb	r3, [r3, #25]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d108      	bne.n	80034c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e007      	b.n	80034d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7e9b      	ldrb	r3, [r3, #26]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0220 	orr.w	r2, r2, #32
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e007      	b.n	8003502 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0220 	bic.w	r2, r2, #32
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7edb      	ldrb	r3, [r3, #27]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d108      	bne.n	800351c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0210 	bic.w	r2, r2, #16
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e007      	b.n	800352c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0210 	orr.w	r2, r2, #16
 800352a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7f1b      	ldrb	r3, [r3, #28]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e007      	b.n	8003556 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0208 	bic.w	r2, r2, #8
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7f5b      	ldrb	r3, [r3, #29]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d108      	bne.n	8003570 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0204 	orr.w	r2, r2, #4
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e007      	b.n	8003580 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	ea42 0103 	orr.w	r1, r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	1e5a      	subs	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035dc:	4013      	ands	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f2:	4a04      	ldr	r2, [pc, #16]	; (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	60d3      	str	r3, [r2, #12]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <__NVIC_GetPriorityGrouping+0x18>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	f003 0307 	and.w	r3, r3, #7
}
 8003616:	4618      	mov	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	2b00      	cmp	r3, #0
 8003634:	db0b      	blt.n	800364e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	4907      	ldr	r1, [pc, #28]	; (800365c <__NVIC_EnableIRQ+0x38>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	2001      	movs	r0, #1
 8003646:	fa00 f202 	lsl.w	r2, r0, r2
 800364a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000e100 	.word	0xe000e100

08003660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db0a      	blt.n	800368a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	490c      	ldr	r1, [pc, #48]	; (80036ac <__NVIC_SetPriority+0x4c>)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	440b      	add	r3, r1
 8003684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003688:	e00a      	b.n	80036a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4908      	ldr	r1, [pc, #32]	; (80036b0 <__NVIC_SetPriority+0x50>)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	3b04      	subs	r3, #4
 8003698:	0112      	lsls	r2, r2, #4
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	440b      	add	r3, r1
 800369e:	761a      	strb	r2, [r3, #24]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000e100 	.word	0xe000e100
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f1c3 0307 	rsb	r3, r3, #7
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf28      	it	cs
 80036d2:	2304      	movcs	r3, #4
 80036d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3304      	adds	r3, #4
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d902      	bls.n	80036e4 <NVIC_EncodePriority+0x30>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3b03      	subs	r3, #3
 80036e2:	e000      	b.n	80036e6 <NVIC_EncodePriority+0x32>
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43d9      	mvns	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	4313      	orrs	r3, r2
         );
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800372c:	d301      	bcc.n	8003732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372e:	2301      	movs	r3, #1
 8003730:	e00f      	b.n	8003752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <SysTick_Config+0x40>)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373a:	210f      	movs	r1, #15
 800373c:	f04f 30ff 	mov.w	r0, #4294967295
 8003740:	f7ff ff8e 	bl	8003660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <SysTick_Config+0x40>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374a:	4b04      	ldr	r3, [pc, #16]	; (800375c <SysTick_Config+0x40>)
 800374c:	2207      	movs	r2, #7
 800374e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	e000e010 	.word	0xe000e010

08003760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff29 	bl	80035c0 <__NVIC_SetPriorityGrouping>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
 8003782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003788:	f7ff ff3e 	bl	8003608 <__NVIC_GetPriorityGrouping>
 800378c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff ff8e 	bl	80036b4 <NVIC_EncodePriority>
 8003798:	4602      	mov	r2, r0
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff5d 	bl	8003660 <__NVIC_SetPriority>
}
 80037a6:	bf00      	nop
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b082      	sub	sp, #8
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff31 	bl	8003624 <__NVIC_EnableIRQ>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7ff ffa2 	bl	800371c <SysTick_Config>
 80037d8:	4603      	mov	r3, r0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e037      	b.n	8003868 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800380e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800381c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f940 	bl	8003ad0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}  
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_DMA_Start_IT+0x20>
 800388c:	2302      	movs	r3, #2
 800388e:	e04a      	b.n	8003926 <HAL_DMA_Start_IT+0xb6>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d13a      	bne.n	8003918 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2202      	movs	r2, #2
 80038a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f8d4 	bl	8003a74 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 020e 	orr.w	r2, r2, #14
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e00f      	b.n	8003906 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 020a 	orr.w	r2, r2, #10
 80038f4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0204 	bic.w	r2, r2, #4
 8003904:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 0201 	orr.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e005      	b.n	8003924 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003920:	2302      	movs	r3, #2
 8003922:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003924:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2204      	movs	r2, #4
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d024      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x72>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01f      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d107      	bne.n	800397e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0204 	bic.w	r2, r2, #4
 800397c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	2104      	movs	r1, #4
 8003988:	fa01 f202 	lsl.w	r2, r1, r2
 800398c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d06a      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800399e:	e065      	b.n	8003a6c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	2202      	movs	r2, #2
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02c      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xdc>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d027      	beq.n	8003a0a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 020a 	bic.w	r2, r2, #10
 80039d6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	2102      	movs	r1, #2
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d035      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003a08:	e030      	b.n	8003a6c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2208      	movs	r2, #8
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d028      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x13e>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d023      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 020e 	bic.w	r2, r2, #14
 8003a32:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a42:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d004      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
    }
  }
}  
 8003a6a:	e7ff      	b.n	8003a6c <HAL_DMA_IRQHandler+0x13e>
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a90:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d108      	bne.n	8003ab4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ab2:	e007      	b.n	8003ac4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <DMA_CalcBaseAndBitshift+0x34>)
 8003ae0:	4413      	add	r3, r2
 8003ae2:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <DMA_CalcBaseAndBitshift+0x38>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <DMA_CalcBaseAndBitshift+0x3c>)
 8003af4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	bffdfff8 	.word	0xbffdfff8
 8003b08:	cccccccd 	.word	0xcccccccd
 8003b0c:	40020000 	.word	0x40020000

08003b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1e:	e14e      	b.n	8003dbe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	2101      	movs	r1, #1
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8140 	beq.w	8003db8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d005      	beq.n	8003b50 <HAL_GPIO_Init+0x40>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d130      	bne.n	8003bb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b86:	2201      	movs	r2, #1
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0201 	and.w	r2, r3, #1
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d017      	beq.n	8003bee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	2203      	movs	r2, #3
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d123      	bne.n	8003c42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43db      	mvns	r3, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	08da      	lsrs	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3208      	adds	r2, #8
 8003c3c:	6939      	ldr	r1, [r7, #16]
 8003c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0203 	and.w	r2, r3, #3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 809a 	beq.w	8003db8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c84:	4b55      	ldr	r3, [pc, #340]	; (8003ddc <HAL_GPIO_Init+0x2cc>)
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	4a54      	ldr	r2, [pc, #336]	; (8003ddc <HAL_GPIO_Init+0x2cc>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	6193      	str	r3, [r2, #24]
 8003c90:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <HAL_GPIO_Init+0x2cc>)
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c9c:	4a50      	ldr	r2, [pc, #320]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	220f      	movs	r2, #15
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cc6:	d013      	beq.n	8003cf0 <HAL_GPIO_Init+0x1e0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a46      	ldr	r2, [pc, #280]	; (8003de4 <HAL_GPIO_Init+0x2d4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00d      	beq.n	8003cec <HAL_GPIO_Init+0x1dc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a45      	ldr	r2, [pc, #276]	; (8003de8 <HAL_GPIO_Init+0x2d8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <HAL_GPIO_Init+0x1d8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a44      	ldr	r2, [pc, #272]	; (8003dec <HAL_GPIO_Init+0x2dc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_GPIO_Init+0x1d4>
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e006      	b.n	8003cf2 <HAL_GPIO_Init+0x1e2>
 8003ce4:	2305      	movs	r3, #5
 8003ce6:	e004      	b.n	8003cf2 <HAL_GPIO_Init+0x1e2>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e002      	b.n	8003cf2 <HAL_GPIO_Init+0x1e2>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_GPIO_Init+0x1e2>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	f002 0203 	and.w	r2, r2, #3
 8003cf8:	0092      	lsls	r2, r2, #2
 8003cfa:	4093      	lsls	r3, r2
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d02:	4937      	ldr	r1, [pc, #220]	; (8003de0 <HAL_GPIO_Init+0x2d0>)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	3302      	adds	r3, #2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d10:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <HAL_GPIO_Init+0x2e0>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d34:	4a2e      	ldr	r2, [pc, #184]	; (8003df0 <HAL_GPIO_Init+0x2e0>)
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <HAL_GPIO_Init+0x2e0>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d5e:	4a24      	ldr	r2, [pc, #144]	; (8003df0 <HAL_GPIO_Init+0x2e0>)
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d64:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <HAL_GPIO_Init+0x2e0>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <HAL_GPIO_Init+0x2e0>)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <HAL_GPIO_Init+0x2e0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003db2:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <HAL_GPIO_Init+0x2e0>)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f47f aea9 	bne.w	8003b20 <HAL_GPIO_Init+0x10>
  }
}
 8003dce:	bf00      	nop
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40010000 	.word	0x40010000
 8003de4:	48000400 	.word	0x48000400
 8003de8:	48000800 	.word	0x48000800
 8003dec:	48000c00 	.word	0x48000c00
 8003df0:	40010400 	.word	0x40010400

08003df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
 8003e00:	4613      	mov	r3, r2
 8003e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e04:	787b      	ldrb	r3, [r7, #1]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e0a:	887a      	ldrh	r2, [r7, #2]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e10:	e002      	b.n	8003e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e081      	b.n	8003f3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd ff86 	bl	8001d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2224      	movs	r2, #36	; 0x24
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d107      	bne.n	8003e9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	e006      	b.n	8003eac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003eaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d104      	bne.n	8003ebe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ebc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69d9      	ldr	r1, [r3, #28]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1a      	ldr	r2, [r3, #32]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	460b      	mov	r3, r1
 8003f52:	817b      	strh	r3, [r7, #10]
 8003f54:	4613      	mov	r3, r2
 8003f56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	f040 80db 	bne.w	800411c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_Master_Receive+0x30>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e0d4      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f7c:	f7fe fa80 	bl	8002480 <HAL_GetTick>
 8003f80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2319      	movs	r3, #25
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f8f2 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0bf      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2222      	movs	r2, #34	; 0x22
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	893a      	ldrh	r2, [r7, #8]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	2bff      	cmp	r3, #255	; 0xff
 8003fce:	d90e      	bls.n	8003fee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	22ff      	movs	r2, #255	; 0xff
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	4b52      	ldr	r3, [pc, #328]	; (8004128 <HAL_I2C_Master_Receive+0x1e4>)
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 faba 	bl	8004560 <I2C_TransferConfig>
 8003fec:	e06d      	b.n	80040ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	8979      	ldrh	r1, [r7, #10]
 8004000:	4b49      	ldr	r3, [pc, #292]	; (8004128 <HAL_I2C_Master_Receive+0x1e4>)
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 faa9 	bl	8004560 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800400e:	e05c      	b.n	80040ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	6a39      	ldr	r1, [r7, #32]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f941 	bl	800429c <I2C_WaitOnRXNEFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e07c      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d034      	beq.n	80040ca <HAL_I2C_Master_Receive+0x186>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d130      	bne.n	80040ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f880 	bl	8004178 <I2C_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e04d      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	2bff      	cmp	r3, #255	; 0xff
 800408a:	d90e      	bls.n	80040aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	22ff      	movs	r2, #255	; 0xff
 8004090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004096:	b2da      	uxtb	r2, r3
 8004098:	8979      	ldrh	r1, [r7, #10]
 800409a:	2300      	movs	r3, #0
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 fa5c 	bl	8004560 <I2C_TransferConfig>
 80040a8:	e00f      	b.n	80040ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	8979      	ldrh	r1, [r7, #10]
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa4b 	bl	8004560 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d19d      	bne.n	8004010 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	6a39      	ldr	r1, [r7, #32]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f89c 	bl	8004216 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e01a      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2220      	movs	r2, #32
 80040ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b0c      	ldr	r3, [pc, #48]	; (800412c <HAL_I2C_Master_Receive+0x1e8>)
 80040fc:	400b      	ands	r3, r1
 80040fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	e000      	b.n	800411e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
  }
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	80002400 	.word	0x80002400
 800412c:	fe00e800 	.word	0xfe00e800

08004130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b02      	cmp	r3, #2
 8004144:	d103      	bne.n	800414e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2200      	movs	r2, #0
 800414c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b01      	cmp	r3, #1
 800415a:	d007      	beq.n	800416c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699a      	ldr	r2, [r3, #24]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	619a      	str	r2, [r3, #24]
  }
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	603b      	str	r3, [r7, #0]
 8004184:	4613      	mov	r3, r2
 8004186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004188:	e031      	b.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004190:	d02d      	beq.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004192:	f7fe f975 	bl	8002480 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d302      	bcc.n	80041a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d122      	bne.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d113      	bne.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e00f      	b.n	800420e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4013      	ands	r3, r2
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	bf0c      	ite	eq
 80041fe:	2301      	moveq	r3, #1
 8004200:	2300      	movne	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	429a      	cmp	r2, r3
 800420a:	d0be      	beq.n	800418a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004222:	e02f      	b.n	8004284 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f8b9 	bl	80043a0 <I2C_IsErrorOccurred>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e02d      	b.n	8004294 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004238:	f7fe f922 	bl	8002480 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d302      	bcc.n	800424e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11a      	bne.n	8004284 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b20      	cmp	r3, #32
 800425a:	d013      	beq.n	8004284 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e007      	b.n	8004294 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b20      	cmp	r3, #32
 8004290:	d1c8      	bne.n	8004224 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042a8:	e06b      	b.n	8004382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f876 	bl	80043a0 <I2C_IsErrorOccurred>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e069      	b.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d138      	bne.n	800433e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d105      	bne.n	80042e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e055      	b.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d107      	bne.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2210      	movs	r2, #16
 80042fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2204      	movs	r2, #4
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
 8004302:	e002      	b.n	800430a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2220      	movs	r2, #32
 8004310:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6859      	ldr	r1, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b1f      	ldr	r3, [pc, #124]	; (800439c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800431e:	400b      	ands	r3, r1
 8004320:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e029      	b.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433e:	f7fe f89f 	bl	8002480 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	429a      	cmp	r2, r3
 800434c:	d302      	bcc.n	8004354 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d116      	bne.n	8004382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b04      	cmp	r3, #4
 8004360:	d00f      	beq.n	8004382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e007      	b.n	8004392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b04      	cmp	r3, #4
 800438e:	d18c      	bne.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d068      	beq.n	800449e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2210      	movs	r2, #16
 80043d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043d4:	e049      	b.n	800446a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d045      	beq.n	800446a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe f84f 	bl	8002480 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d302      	bcc.n	80043f4 <I2C_IsErrorOccurred+0x54>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d13a      	bne.n	800446a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004406:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004416:	d121      	bne.n	800445c <I2C_IsErrorOccurred+0xbc>
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800441e:	d01d      	beq.n	800445c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b20      	cmp	r3, #32
 8004424:	d01a      	beq.n	800445c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004434:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004436:	f7fe f823 	bl	8002480 <HAL_GetTick>
 800443a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800443c:	e00e      	b.n	800445c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800443e:	f7fe f81f 	bl	8002480 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b19      	cmp	r3, #25
 800444a:	d907      	bls.n	800445c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	f043 0320 	orr.w	r3, r3, #32
 8004452:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800445a:	e006      	b.n	800446a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b20      	cmp	r3, #32
 8004468:	d1e9      	bne.n	800443e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b20      	cmp	r3, #32
 8004476:	d003      	beq.n	8004480 <I2C_IsErrorOccurred+0xe0>
 8004478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0aa      	beq.n	80043d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004484:	2b00      	cmp	r3, #0
 8004486:	d103      	bne.n	8004490 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2220      	movs	r2, #32
 800448e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	f043 0304 	orr.w	r3, r3, #4
 8004496:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00b      	beq.n	80044c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f043 0308 	orr.w	r3, r3, #8
 80044d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004504:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800450c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01c      	beq.n	800454e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f7ff fe0b 	bl	8004130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b0d      	ldr	r3, [pc, #52]	; (800455c <I2C_IsErrorOccurred+0x1bc>)
 8004526:	400b      	ands	r3, r1
 8004528:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	431a      	orrs	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800454e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004552:	4618      	mov	r0, r3
 8004554:	3728      	adds	r7, #40	; 0x28
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	fe00e800 	.word	0xfe00e800

08004560 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004560:	b480      	push	{r7}
 8004562:	b087      	sub	sp, #28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	4613      	mov	r3, r2
 8004570:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004572:	897b      	ldrh	r3, [r7, #10]
 8004574:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004578:	7a7b      	ldrb	r3, [r7, #9]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004580:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	4313      	orrs	r3, r2
 800458a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800458e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	0d5b      	lsrs	r3, r3, #21
 800459a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <I2C_TransferConfig+0x60>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	43db      	mvns	r3, r3
 80045a4:	ea02 0103 	and.w	r1, r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	03ff63ff 	.word	0x03ff63ff

080045c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b20      	cmp	r3, #32
 80045d8:	d138      	bne.n	800464c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e032      	b.n	800464e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004616:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6819      	ldr	r1, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b20      	cmp	r3, #32
 800466e:	d139      	bne.n	80046e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800467a:	2302      	movs	r3, #2
 800467c:	e033      	b.n	80046e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2224      	movs	r2, #36	; 0x24
 800468a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	4a0a      	ldr	r2, [pc, #40]	; (800472c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6193      	str	r3, [r2, #24]
 8004708:	4b08      	ldr	r3, [pc, #32]	; (800472c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4905      	ldr	r1, [pc, #20]	; (8004730 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40021000 	.word	0x40021000
 8004730:	40010000 	.word	0x40010000

08004734 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800473a:	af00      	add	r7, sp, #0
 800473c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004744:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800474a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f001 b823 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 817d 	beq.w	8004a6a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004770:	4bbc      	ldr	r3, [pc, #752]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b04      	cmp	r3, #4
 800477a:	d00c      	beq.n	8004796 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800477c:	4bb9      	ldr	r3, [pc, #740]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b08      	cmp	r3, #8
 8004786:	d15c      	bne.n	8004842 <HAL_RCC_OscConfig+0x10e>
 8004788:	4bb6      	ldr	r3, [pc, #728]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004794:	d155      	bne.n	8004842 <HAL_RCC_OscConfig+0x10e>
 8004796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800479a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ae:	fab3 f383 	clz	r3, r3
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	095b      	lsrs	r3, r3, #5
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d102      	bne.n	80047c8 <HAL_RCC_OscConfig+0x94>
 80047c2:	4ba8      	ldr	r3, [pc, #672]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	e015      	b.n	80047f4 <HAL_RCC_OscConfig+0xc0>
 80047c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80047dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80047e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80047f0:	4b9c      	ldr	r3, [pc, #624]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80047fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004800:	fa92 f2a2 	rbit	r2, r2
 8004804:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004808:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800480c:	fab2 f282 	clz	r2, r2
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	f042 0220 	orr.w	r2, r2, #32
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	f002 021f 	and.w	r2, r2, #31
 800481c:	2101      	movs	r1, #1
 800481e:	fa01 f202 	lsl.w	r2, r1, r2
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 811f 	beq.w	8004a68 <HAL_RCC_OscConfig+0x334>
 800482a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f040 8116 	bne.w	8004a68 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f000 bfaf 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004846:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x12e>
 8004854:	4b83      	ldr	r3, [pc, #524]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a82      	ldr	r2, [pc, #520]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 800485a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	e036      	b.n	80048d0 <HAL_RCC_OscConfig+0x19c>
 8004862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004866:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x158>
 8004872:	4b7c      	ldr	r3, [pc, #496]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7b      	ldr	r2, [pc, #492]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b79      	ldr	r3, [pc, #484]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a78      	ldr	r2, [pc, #480]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e021      	b.n	80048d0 <HAL_RCC_OscConfig+0x19c>
 800488c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004890:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800489c:	d10c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x184>
 800489e:	4b71      	ldr	r3, [pc, #452]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a70      	ldr	r2, [pc, #448]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4b6e      	ldr	r3, [pc, #440]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6d      	ldr	r2, [pc, #436]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e00b      	b.n	80048d0 <HAL_RCC_OscConfig+0x19c>
 80048b8:	4b6a      	ldr	r3, [pc, #424]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a69      	ldr	r2, [pc, #420]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4b67      	ldr	r3, [pc, #412]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a66      	ldr	r2, [pc, #408]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048d0:	4b64      	ldr	r3, [pc, #400]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	f023 020f 	bic.w	r2, r3, #15
 80048d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	495f      	ldr	r1, [pc, #380]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d059      	beq.n	80049ae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fa:	f7fd fdc1 	bl	8002480 <HAL_GetTick>
 80048fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	e00a      	b.n	800491a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004904:	f7fd fdbc 	bl	8002480 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b64      	cmp	r3, #100	; 0x64
 8004912:	d902      	bls.n	800491a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	f000 bf43 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>
 800491a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800491e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004922:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004926:	fa93 f3a3 	rbit	r3, r3
 800492a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800492e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d102      	bne.n	800494c <HAL_RCC_OscConfig+0x218>
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	e015      	b.n	8004978 <HAL_RCC_OscConfig+0x244>
 800494c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004950:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004954:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004958:	fa93 f3a3 	rbit	r3, r3
 800495c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004964:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004968:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800496c:	fa93 f3a3 	rbit	r3, r3
 8004970:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004974:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800497c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004980:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004984:	fa92 f2a2 	rbit	r2, r2
 8004988:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800498c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004990:	fab2 f282 	clz	r2, r2
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	f042 0220 	orr.w	r2, r2, #32
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	f002 021f 	and.w	r2, r2, #31
 80049a0:	2101      	movs	r1, #1
 80049a2:	fa01 f202 	lsl.w	r2, r1, r2
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ab      	beq.n	8004904 <HAL_RCC_OscConfig+0x1d0>
 80049ac:	e05d      	b.n	8004a6a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fd fd67 	bl	8002480 <HAL_GetTick>
 80049b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049b6:	e00a      	b.n	80049ce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fd fd62 	bl	8002480 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b64      	cmp	r3, #100	; 0x64
 80049c6:	d902      	bls.n	80049ce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	f000 bee9 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>
 80049ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80049e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d102      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2cc>
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	e015      	b.n	8004a2c <HAL_RCC_OscConfig+0x2f8>
 8004a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a04:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004a0c:	fa93 f3a3 	rbit	r3, r3
 8004a10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a18:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a1c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <HAL_RCC_OscConfig+0x330>)
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a30:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a34:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a38:	fa92 f2a2 	rbit	r2, r2
 8004a3c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a40:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a44:	fab2 f282 	clz	r2, r2
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	f042 0220 	orr.w	r2, r2, #32
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	f002 021f 	and.w	r2, r2, #31
 8004a54:	2101      	movs	r1, #1
 8004a56:	fa01 f202 	lsl.w	r2, r1, r2
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ab      	bne.n	80049b8 <HAL_RCC_OscConfig+0x284>
 8004a60:	e003      	b.n	8004a6a <HAL_RCC_OscConfig+0x336>
 8004a62:	bf00      	nop
 8004a64:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 817d 	beq.w	8004d7a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a80:	4ba6      	ldr	r3, [pc, #664]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f003 030c 	and.w	r3, r3, #12
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a8c:	4ba3      	ldr	r3, [pc, #652]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d172      	bne.n	8004b7e <HAL_RCC_OscConfig+0x44a>
 8004a98:	4ba0      	ldr	r3, [pc, #640]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d16c      	bne.n	8004b7e <HAL_RCC_OscConfig+0x44a>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aaa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004ab6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aba:	fab3 f383 	clz	r3, r3
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	095b      	lsrs	r3, r3, #5
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x3a0>
 8004ace:	4b93      	ldr	r3, [pc, #588]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	e013      	b.n	8004afc <HAL_RCC_OscConfig+0x3c8>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ada:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004ade:	fa93 f3a3 	rbit	r3, r3
 8004ae2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004aec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004af8:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2202      	movs	r2, #2
 8004afe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004b02:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b06:	fa92 f2a2 	rbit	r2, r2
 8004b0a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004b0e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004b12:	fab2 f282 	clz	r2, r2
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	f042 0220 	orr.w	r2, r2, #32
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	f002 021f 	and.w	r2, r2, #31
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f202 	lsl.w	r2, r1, r2
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCC_OscConfig+0x410>
 8004b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d002      	beq.n	8004b44 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f000 be2e 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b44:	4b75      	ldr	r3, [pc, #468]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	21f8      	movs	r1, #248	; 0xf8
 8004b5a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b62:	fa91 f1a1 	rbit	r1, r1
 8004b66:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004b6a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b6e:	fab1 f181 	clz	r1, r1
 8004b72:	b2c9      	uxtb	r1, r1
 8004b74:	408b      	lsls	r3, r1
 8004b76:	4969      	ldr	r1, [pc, #420]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7c:	e0fd      	b.n	8004d7a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 8088 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x56c>
 8004b90:	2301      	movs	r3, #1
 8004b92:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004ba2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2301      	movs	r3, #1
 8004bba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fc60 	bl	8002480 <HAL_GetTick>
 8004bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fd fc5b 	bl	8002480 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d902      	bls.n	8004bdc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	f000 bde2 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004be6:	fa93 f3a3 	rbit	r3, r3
 8004bea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004bee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d102      	bne.n	8004c0c <HAL_RCC_OscConfig+0x4d8>
 8004c06:	4b45      	ldr	r3, [pc, #276]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	e013      	b.n	8004c34 <HAL_RCC_OscConfig+0x500>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004c16:	fa93 f3a3 	rbit	r3, r3
 8004c1a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c1e:	2302      	movs	r3, #2
 8004c20:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c24:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004c28:	fa93 f3a3 	rbit	r3, r3
 8004c2c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004c30:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	2202      	movs	r2, #2
 8004c36:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004c3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c3e:	fa92 f2a2 	rbit	r2, r2
 8004c42:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004c46:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c4a:	fab2 f282 	clz	r2, r2
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	f042 0220 	orr.w	r2, r2, #32
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	f002 021f 	and.w	r2, r2, #31
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0af      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c66:	4b2d      	ldr	r3, [pc, #180]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	21f8      	movs	r1, #248	; 0xf8
 8004c7c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c80:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c84:	fa91 f1a1 	rbit	r1, r1
 8004c88:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004c8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c90:	fab1 f181 	clz	r1, r1
 8004c94:	b2c9      	uxtb	r1, r1
 8004c96:	408b      	lsls	r3, r1
 8004c98:	4920      	ldr	r1, [pc, #128]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
 8004c9e:	e06c      	b.n	8004d7a <HAL_RCC_OscConfig+0x646>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004caa:	fa93 f3a3 	rbit	r3, r3
 8004cae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004cb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	2300      	movs	r3, #0
 8004cca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fbd8 	bl	8002480 <HAL_GetTick>
 8004cd0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fd fbd3 	bl	8002480 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d902      	bls.n	8004cec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	f000 bd5a 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>
 8004cec:	2302      	movs	r3, #2
 8004cee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cf6:	fa93 f3a3 	rbit	r3, r3
 8004cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	fab3 f383 	clz	r3, r3
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d104      	bne.n	8004d20 <HAL_RCC_OscConfig+0x5ec>
 8004d16:	4b01      	ldr	r3, [pc, #4]	; (8004d1c <HAL_RCC_OscConfig+0x5e8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	e015      	b.n	8004d48 <HAL_RCC_OscConfig+0x614>
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	2302      	movs	r3, #2
 8004d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d2a:	fa93 f3a3 	rbit	r3, r3
 8004d2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d32:	2302      	movs	r3, #2
 8004d34:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004d3c:	fa93 f3a3 	rbit	r3, r3
 8004d40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004d44:	4bc8      	ldr	r3, [pc, #800]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	2202      	movs	r2, #2
 8004d4a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004d4e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d52:	fa92 f2a2 	rbit	r2, r2
 8004d56:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004d5a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d5e:	fab2 f282 	clz	r2, r2
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	f042 0220 	orr.w	r2, r2, #32
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	f002 021f 	and.w	r2, r2, #31
 8004d6e:	2101      	movs	r1, #1
 8004d70:	fa01 f202 	lsl.w	r2, r1, r2
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ad      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8110 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d079      	beq.n	8004e94 <HAL_RCC_OscConfig+0x760>
 8004da0:	2301      	movs	r3, #1
 8004da2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004daa:	fa93 f3a3 	rbit	r3, r3
 8004dae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	fab3 f383 	clz	r3, r3
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4bab      	ldr	r3, [pc, #684]	; (800506c <HAL_RCC_OscConfig+0x938>)
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dca:	f7fd fb59 	bl	8002480 <HAL_GetTick>
 8004dce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dd4:	f7fd fb54 	bl	8002480 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d902      	bls.n	8004dea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	f000 bcdb 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>
 8004dea:	2302      	movs	r3, #2
 8004dec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004df4:	fa93 f3a3 	rbit	r3, r3
 8004df8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e04:	2202      	movs	r2, #2
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e0c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	fa93 f2a3 	rbit	r2, r3
 8004e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e28:	2202      	movs	r2, #2
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	fa93 f2a3 	rbit	r2, r3
 8004e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e44:	4b88      	ldr	r3, [pc, #544]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 8004e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e50:	2102      	movs	r1, #2
 8004e52:	6019      	str	r1, [r3, #0]
 8004e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	fa93 f1a3 	rbit	r1, r3
 8004e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e6a:	6019      	str	r1, [r3, #0]
  return result;
 8004e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	2101      	movs	r1, #1
 8004e88:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0a0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x6a0>
 8004e92:	e08d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x87c>
 8004e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ea4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	fa93 f2a3 	rbit	r2, r3
 8004eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004eb6:	601a      	str	r2, [r3, #0]
  return result;
 8004eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ebc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ec0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec2:	fab3 f383 	clz	r3, r3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b68      	ldr	r3, [pc, #416]	; (800506c <HAL_RCC_OscConfig+0x938>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed6:	f7fd fad3 	bl	8002480 <HAL_GetTick>
 8004eda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ee0:	f7fd face 	bl	8002480 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d902      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f000 bc55 	b.w	80057a0 <HAL_RCC_OscConfig+0x106c>
 8004ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004efe:	2202      	movs	r2, #2
 8004f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	fa93 f2a3 	rbit	r2, r3
 8004f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f1e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f22:	2202      	movs	r2, #2
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	fa93 f2a3 	rbit	r2, r3
 8004f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f46:	2202      	movs	r2, #2
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	fa93 f2a3 	rbit	r2, r3
 8004f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004f60:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f62:	4b41      	ldr	r3, [pc, #260]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 8004f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f6e:	2102      	movs	r1, #2
 8004f70:	6019      	str	r1, [r3, #0]
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f1a3 	rbit	r1, r3
 8004f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f84:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f88:	6019      	str	r1, [r3, #0]
  return result;
 8004f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f8e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d197      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004fb4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 81a1 	beq.w	8005308 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fcc:	4b26      	ldr	r3, [pc, #152]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d116      	bne.n	8005006 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd8:	4b23      	ldr	r3, [pc, #140]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	4a22      	ldr	r2, [pc, #136]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	61d3      	str	r3, [r2, #28]
 8004fe4:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ff0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ffe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005006:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <HAL_RCC_OscConfig+0x93c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d11a      	bne.n	8005048 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005012:	4b17      	ldr	r3, [pc, #92]	; (8005070 <HAL_RCC_OscConfig+0x93c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a16      	ldr	r2, [pc, #88]	; (8005070 <HAL_RCC_OscConfig+0x93c>)
 8005018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501e:	f7fd fa2f 	bl	8002480 <HAL_GetTick>
 8005022:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005026:	e009      	b.n	800503c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005028:	f7fd fa2a 	bl	8002480 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	; 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e3b1      	b.n	80057a0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503c:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <HAL_RCC_OscConfig+0x93c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0ef      	beq.n	8005028 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d10d      	bne.n	8005074 <HAL_RCC_OscConfig+0x940>
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	4a02      	ldr	r2, [pc, #8]	; (8005068 <HAL_RCC_OscConfig+0x934>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6213      	str	r3, [r2, #32]
 8005064:	e03c      	b.n	80050e0 <HAL_RCC_OscConfig+0x9ac>
 8005066:	bf00      	nop
 8005068:	40021000 	.word	0x40021000
 800506c:	10908120 	.word	0x10908120
 8005070:	40007000 	.word	0x40007000
 8005074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005078:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10c      	bne.n	800509e <HAL_RCC_OscConfig+0x96a>
 8005084:	4bc1      	ldr	r3, [pc, #772]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	4ac0      	ldr	r2, [pc, #768]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	6213      	str	r3, [r2, #32]
 8005090:	4bbe      	ldr	r3, [pc, #760]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	4abd      	ldr	r2, [pc, #756]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 8005096:	f023 0304 	bic.w	r3, r3, #4
 800509a:	6213      	str	r3, [r2, #32]
 800509c:	e020      	b.n	80050e0 <HAL_RCC_OscConfig+0x9ac>
 800509e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2b05      	cmp	r3, #5
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCC_OscConfig+0x994>
 80050ae:	4bb7      	ldr	r3, [pc, #732]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	4ab6      	ldr	r2, [pc, #728]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80050b4:	f043 0304 	orr.w	r3, r3, #4
 80050b8:	6213      	str	r3, [r2, #32]
 80050ba:	4bb4      	ldr	r3, [pc, #720]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	4ab3      	ldr	r2, [pc, #716]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	6213      	str	r3, [r2, #32]
 80050c6:	e00b      	b.n	80050e0 <HAL_RCC_OscConfig+0x9ac>
 80050c8:	4bb0      	ldr	r3, [pc, #704]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	4aaf      	ldr	r2, [pc, #700]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	6213      	str	r3, [r2, #32]
 80050d4:	4bad      	ldr	r3, [pc, #692]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4aac      	ldr	r2, [pc, #688]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80050da:	f023 0304 	bic.w	r3, r3, #4
 80050de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8081 	beq.w	80051f4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050f2:	f7fd f9c5 	bl	8002480 <HAL_GetTick>
 80050f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fa:	e00b      	b.n	8005114 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fc:	f7fd f9c0 	bl	8002480 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e345      	b.n	80057a0 <HAL_RCC_OscConfig+0x106c>
 8005114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005118:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800511c:	2202      	movs	r2, #2
 800511e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	fa93 f2a3 	rbit	r2, r3
 800512e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005132:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800513c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005140:	2202      	movs	r2, #2
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005148:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	fa93 f2a3 	rbit	r2, r3
 8005152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005156:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800515a:	601a      	str	r2, [r3, #0]
  return result;
 800515c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005160:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005164:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f043 0302 	orr.w	r3, r3, #2
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d102      	bne.n	8005180 <HAL_RCC_OscConfig+0xa4c>
 800517a:	4b84      	ldr	r3, [pc, #528]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	e013      	b.n	80051a8 <HAL_RCC_OscConfig+0xa74>
 8005180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005184:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005188:	2202      	movs	r2, #2
 800518a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005190:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	fa93 f2a3 	rbit	r2, r3
 800519a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800519e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	4b79      	ldr	r3, [pc, #484]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80051b0:	2102      	movs	r1, #2
 80051b2:	6011      	str	r1, [r2, #0]
 80051b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	fa92 f1a2 	rbit	r1, r2
 80051c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051ca:	6011      	str	r1, [r2, #0]
  return result;
 80051cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80051d0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	fab2 f282 	clz	r2, r2
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	f002 021f 	and.w	r2, r2, #31
 80051e6:	2101      	movs	r1, #1
 80051e8:	fa01 f202 	lsl.w	r2, r1, r2
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d084      	beq.n	80050fc <HAL_RCC_OscConfig+0x9c8>
 80051f2:	e07f      	b.n	80052f4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f4:	f7fd f944 	bl	8002480 <HAL_GetTick>
 80051f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fc:	e00b      	b.n	8005216 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051fe:	f7fd f93f 	bl	8002480 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f241 3288 	movw	r2, #5000	; 0x1388
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e2c4      	b.n	80057a0 <HAL_RCC_OscConfig+0x106c>
 8005216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800521a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800521e:	2202      	movs	r2, #2
 8005220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	fa93 f2a3 	rbit	r2, r3
 8005230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005234:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800523e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005242:	2202      	movs	r2, #2
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800524a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	fa93 f2a3 	rbit	r2, r3
 8005254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005258:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800525c:	601a      	str	r2, [r3, #0]
  return result;
 800525e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005262:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005266:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005268:	fab3 f383 	clz	r3, r3
 800526c:	b2db      	uxtb	r3, r3
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	b2db      	uxtb	r3, r3
 8005272:	f043 0302 	orr.w	r3, r3, #2
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d102      	bne.n	8005282 <HAL_RCC_OscConfig+0xb4e>
 800527c:	4b43      	ldr	r3, [pc, #268]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	e013      	b.n	80052aa <HAL_RCC_OscConfig+0xb76>
 8005282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005286:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800528a:	2202      	movs	r2, #2
 800528c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005292:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	fa93 f2a3 	rbit	r2, r3
 800529c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052a0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	4b39      	ldr	r3, [pc, #228]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80052b2:	2102      	movs	r1, #2
 80052b4:	6011      	str	r1, [r2, #0]
 80052b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	fa92 f1a2 	rbit	r1, r2
 80052c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052c8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052cc:	6011      	str	r1, [r2, #0]
  return result;
 80052ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052d2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	fab2 f282 	clz	r2, r2
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	f002 021f 	and.w	r2, r2, #31
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f202 	lsl.w	r2, r1, r2
 80052ee:	4013      	ands	r3, r2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d184      	bne.n	80051fe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d105      	bne.n	8005308 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	4a22      	ldr	r2, [pc, #136]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 8005302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005306:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8242 	beq.w	800579e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800531a:	4b1c      	ldr	r3, [pc, #112]	; (800538c <HAL_RCC_OscConfig+0xc58>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b08      	cmp	r3, #8
 8005324:	f000 8213 	beq.w	800574e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800532c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	2b02      	cmp	r3, #2
 8005336:	f040 8162 	bne.w	80055fe <HAL_RCC_OscConfig+0xeca>
 800533a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800533e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005342:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005346:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800534c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	fa93 f2a3 	rbit	r2, r3
 8005356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800535a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800535e:	601a      	str	r2, [r3, #0]
  return result;
 8005360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005364:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005368:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536a:	fab3 f383 	clz	r3, r3
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005374:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	461a      	mov	r2, r3
 800537c:	2300      	movs	r3, #0
 800537e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fd f87e 	bl	8002480 <HAL_GetTick>
 8005384:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005388:	e00c      	b.n	80053a4 <HAL_RCC_OscConfig+0xc70>
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005390:	f7fd f876 	bl	8002480 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e1fd      	b.n	80057a0 <HAL_RCC_OscConfig+0x106c>
 80053a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80053ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	fa93 f2a3 	rbit	r2, r3
 80053c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053c8:	601a      	str	r2, [r3, #0]
  return result;
 80053ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d4:	fab3 f383 	clz	r3, r3
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f043 0301 	orr.w	r3, r3, #1
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d102      	bne.n	80053ee <HAL_RCC_OscConfig+0xcba>
 80053e8:	4bb0      	ldr	r3, [pc, #704]	; (80056ac <HAL_RCC_OscConfig+0xf78>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	e027      	b.n	800543e <HAL_RCC_OscConfig+0xd0a>
 80053ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053f2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005400:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	fa93 f2a3 	rbit	r2, r3
 800540a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800540e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005418:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800541c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005426:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	fa93 f2a3 	rbit	r2, r3
 8005430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005434:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	4b9c      	ldr	r3, [pc, #624]	; (80056ac <HAL_RCC_OscConfig+0xf78>)
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005442:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005446:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800544a:	6011      	str	r1, [r2, #0]
 800544c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005450:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005454:	6812      	ldr	r2, [r2, #0]
 8005456:	fa92 f1a2 	rbit	r1, r2
 800545a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800545e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005462:	6011      	str	r1, [r2, #0]
  return result;
 8005464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005468:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	fab2 f282 	clz	r2, r2
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	f042 0220 	orr.w	r2, r2, #32
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	f002 021f 	and.w	r2, r2, #31
 800547e:	2101      	movs	r1, #1
 8005480:	fa01 f202 	lsl.w	r2, r1, r2
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d182      	bne.n	8005390 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800548a:	4b88      	ldr	r3, [pc, #544]	; (80056ac <HAL_RCC_OscConfig+0xf78>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800549e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	430b      	orrs	r3, r1
 80054ac:	497f      	ldr	r1, [pc, #508]	; (80056ac <HAL_RCC_OscConfig+0xf78>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	604b      	str	r3, [r1, #4]
 80054b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054b6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80054ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	fa93 f2a3 	rbit	r2, r3
 80054ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054d6:	601a      	str	r2, [r3, #0]
  return result;
 80054d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054dc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054e0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e2:	fab3 f383 	clz	r3, r3
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80054ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	461a      	mov	r2, r3
 80054f4:	2301      	movs	r3, #1
 80054f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f8:	f7fc ffc2 	bl	8002480 <HAL_GetTick>
 80054fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005500:	e009      	b.n	8005516 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005502:	f7fc ffbd 	bl	8002480 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e144      	b.n	80057a0 <HAL_RCC_OscConfig+0x106c>
 8005516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800551a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800551e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005528:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	fa93 f2a3 	rbit	r2, r3
 8005532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005536:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800553a:	601a      	str	r2, [r3, #0]
  return result;
 800553c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005540:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005544:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005546:	fab3 f383 	clz	r3, r3
 800554a:	b2db      	uxtb	r3, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	b2db      	uxtb	r3, r3
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b01      	cmp	r3, #1
 8005558:	d102      	bne.n	8005560 <HAL_RCC_OscConfig+0xe2c>
 800555a:	4b54      	ldr	r3, [pc, #336]	; (80056ac <HAL_RCC_OscConfig+0xf78>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	e027      	b.n	80055b0 <HAL_RCC_OscConfig+0xe7c>
 8005560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005564:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800556c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005572:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	fa93 f2a3 	rbit	r2, r3
 800557c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005580:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800558a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800558e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005598:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	fa93 f2a3 	rbit	r2, r3
 80055a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80055a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	4b3f      	ldr	r3, [pc, #252]	; (80056ac <HAL_RCC_OscConfig+0xf78>)
 80055ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055b4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80055b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055bc:	6011      	str	r1, [r2, #0]
 80055be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055c2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	fa92 f1a2 	rbit	r1, r2
 80055cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055d4:	6011      	str	r1, [r2, #0]
  return result;
 80055d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80055da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	fab2 f282 	clz	r2, r2
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	f042 0220 	orr.w	r2, r2, #32
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	f002 021f 	and.w	r2, r2, #31
 80055f0:	2101      	movs	r1, #1
 80055f2:	fa01 f202 	lsl.w	r2, r1, r2
 80055f6:	4013      	ands	r3, r2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d082      	beq.n	8005502 <HAL_RCC_OscConfig+0xdce>
 80055fc:	e0cf      	b.n	800579e <HAL_RCC_OscConfig+0x106a>
 80055fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005602:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005606:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800560a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005610:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	fa93 f2a3 	rbit	r2, r3
 800561a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800561e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005622:	601a      	str	r2, [r3, #0]
  return result;
 8005624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005628:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800562c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005638:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	461a      	mov	r2, r3
 8005640:	2300      	movs	r3, #0
 8005642:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005644:	f7fc ff1c 	bl	8002480 <HAL_GetTick>
 8005648:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800564c:	e009      	b.n	8005662 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564e:	f7fc ff17 	bl	8002480 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e09e      	b.n	80057a0 <HAL_RCC_OscConfig+0x106c>
 8005662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005666:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800566a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800566e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005674:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	fa93 f2a3 	rbit	r2, r3
 800567e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005682:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005686:	601a      	str	r2, [r3, #0]
  return result;
 8005688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800568c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005690:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005692:	fab3 f383 	clz	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d104      	bne.n	80056b0 <HAL_RCC_OscConfig+0xf7c>
 80056a6:	4b01      	ldr	r3, [pc, #4]	; (80056ac <HAL_RCC_OscConfig+0xf78>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	e029      	b.n	8005700 <HAL_RCC_OscConfig+0xfcc>
 80056ac:	40021000 	.word	0x40021000
 80056b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80056b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056c2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	fa93 f2a3 	rbit	r2, r3
 80056cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80056de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	fa93 f2a3 	rbit	r2, r3
 80056f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056f6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	4b2b      	ldr	r3, [pc, #172]	; (80057ac <HAL_RCC_OscConfig+0x1078>)
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005704:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005708:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005712:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	fa92 f1a2 	rbit	r1, r2
 800571c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005720:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005724:	6011      	str	r1, [r2, #0]
  return result;
 8005726:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800572a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	fab2 f282 	clz	r2, r2
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	f042 0220 	orr.w	r2, r2, #32
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	f002 021f 	and.w	r2, r2, #31
 8005740:	2101      	movs	r1, #1
 8005742:	fa01 f202 	lsl.w	r2, r1, r2
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d180      	bne.n	800564e <HAL_RCC_OscConfig+0xf1a>
 800574c:	e027      	b.n	800579e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800574e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e01e      	b.n	80057a0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <HAL_RCC_OscConfig+0x1078>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800576a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800576e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	429a      	cmp	r2, r3
 8005780:	d10b      	bne.n	800579a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005782:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005786:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800578a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005796:	429a      	cmp	r2, r3
 8005798:	d001      	beq.n	800579e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40021000 	.word	0x40021000

080057b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b09e      	sub	sp, #120	; 0x78
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e162      	b.n	8005a8e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c8:	4b90      	ldr	r3, [pc, #576]	; (8005a0c <HAL_RCC_ClockConfig+0x25c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d910      	bls.n	80057f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d6:	4b8d      	ldr	r3, [pc, #564]	; (8005a0c <HAL_RCC_ClockConfig+0x25c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f023 0207 	bic.w	r2, r3, #7
 80057de:	498b      	ldr	r1, [pc, #556]	; (8005a0c <HAL_RCC_ClockConfig+0x25c>)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e6:	4b89      	ldr	r3, [pc, #548]	; (8005a0c <HAL_RCC_ClockConfig+0x25c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d001      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e14a      	b.n	8005a8e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005804:	4b82      	ldr	r3, [pc, #520]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	497f      	ldr	r1, [pc, #508]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 8005812:	4313      	orrs	r3, r2
 8005814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80dc 	beq.w	80059dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d13c      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xf6>
 800582c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005830:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005834:	fa93 f3a3 	rbit	r3, r3
 8005838:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800583a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583c:	fab3 f383 	clz	r3, r3
 8005840:	b2db      	uxtb	r3, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d102      	bne.n	8005856 <HAL_RCC_ClockConfig+0xa6>
 8005850:	4b6f      	ldr	r3, [pc, #444]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	e00f      	b.n	8005876 <HAL_RCC_ClockConfig+0xc6>
 8005856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800585a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800585e:	fa93 f3a3 	rbit	r3, r3
 8005862:	667b      	str	r3, [r7, #100]	; 0x64
 8005864:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005868:	663b      	str	r3, [r7, #96]	; 0x60
 800586a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800586c:	fa93 f3a3 	rbit	r3, r3
 8005870:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005872:	4b67      	ldr	r3, [pc, #412]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800587a:	65ba      	str	r2, [r7, #88]	; 0x58
 800587c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800587e:	fa92 f2a2 	rbit	r2, r2
 8005882:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005886:	fab2 f282 	clz	r2, r2
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	f042 0220 	orr.w	r2, r2, #32
 8005890:	b2d2      	uxtb	r2, r2
 8005892:	f002 021f 	and.w	r2, r2, #31
 8005896:	2101      	movs	r1, #1
 8005898:	fa01 f202 	lsl.w	r2, r1, r2
 800589c:	4013      	ands	r3, r2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d17b      	bne.n	800599a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0f3      	b.n	8005a8e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d13c      	bne.n	8005928 <HAL_RCC_ClockConfig+0x178>
 80058ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b6:	fa93 f3a3 	rbit	r3, r3
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058be:	fab3 f383 	clz	r3, r3
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d102      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x128>
 80058d2:	4b4f      	ldr	r3, [pc, #316]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	e00f      	b.n	80058f8 <HAL_RCC_ClockConfig+0x148>
 80058d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e0:	fa93 f3a3 	rbit	r3, r3
 80058e4:	647b      	str	r3, [r7, #68]	; 0x44
 80058e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ea:	643b      	str	r3, [r7, #64]	; 0x40
 80058ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ee:	fa93 f3a3 	rbit	r3, r3
 80058f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f4:	4b46      	ldr	r3, [pc, #280]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80058fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005900:	fa92 f2a2 	rbit	r2, r2
 8005904:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005908:	fab2 f282 	clz	r2, r2
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	f042 0220 	orr.w	r2, r2, #32
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	f002 021f 	and.w	r2, r2, #31
 8005918:	2101      	movs	r1, #1
 800591a:	fa01 f202 	lsl.w	r2, r1, r2
 800591e:	4013      	ands	r3, r2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d13a      	bne.n	800599a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0b2      	b.n	8005a8e <HAL_RCC_ClockConfig+0x2de>
 8005928:	2302      	movs	r3, #2
 800592a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	fa93 f3a3 	rbit	r3, r3
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005936:	fab3 f383 	clz	r3, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b01      	cmp	r3, #1
 8005948:	d102      	bne.n	8005950 <HAL_RCC_ClockConfig+0x1a0>
 800594a:	4b31      	ldr	r3, [pc, #196]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	e00d      	b.n	800596c <HAL_RCC_ClockConfig+0x1bc>
 8005950:	2302      	movs	r3, #2
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	fa93 f3a3 	rbit	r3, r3
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	2302      	movs	r3, #2
 800595e:	623b      	str	r3, [r7, #32]
 8005960:	6a3b      	ldr	r3, [r7, #32]
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	4b29      	ldr	r3, [pc, #164]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2202      	movs	r2, #2
 800596e:	61ba      	str	r2, [r7, #24]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	fa92 f2a2 	rbit	r2, r2
 8005976:	617a      	str	r2, [r7, #20]
  return result;
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	fab2 f282 	clz	r2, r2
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	f042 0220 	orr.w	r2, r2, #32
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	f002 021f 	and.w	r2, r2, #31
 800598a:	2101      	movs	r1, #1
 800598c:	fa01 f202 	lsl.w	r2, r1, r2
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e079      	b.n	8005a8e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800599a:	4b1d      	ldr	r3, [pc, #116]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	491a      	ldr	r1, [pc, #104]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059ac:	f7fc fd68 	bl	8002480 <HAL_GetTick>
 80059b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b4:	f7fc fd64 	bl	8002480 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e061      	b.n	8005a8e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <HAL_RCC_ClockConfig+0x260>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 020c 	and.w	r2, r3, #12
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1eb      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059dc:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <HAL_RCC_ClockConfig+0x25c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d214      	bcs.n	8005a14 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ea:	4b08      	ldr	r3, [pc, #32]	; (8005a0c <HAL_RCC_ClockConfig+0x25c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f023 0207 	bic.w	r2, r3, #7
 80059f2:	4906      	ldr	r1, [pc, #24]	; (8005a0c <HAL_RCC_ClockConfig+0x25c>)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059fa:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <HAL_RCC_ClockConfig+0x25c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d005      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e040      	b.n	8005a8e <HAL_RCC_ClockConfig+0x2de>
 8005a0c:	40022000 	.word	0x40022000
 8005a10:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <HAL_RCC_ClockConfig+0x2e8>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	491a      	ldr	r1, [pc, #104]	; (8005a98 <HAL_RCC_ClockConfig+0x2e8>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <HAL_RCC_ClockConfig+0x2e8>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4912      	ldr	r1, [pc, #72]	; (8005a98 <HAL_RCC_ClockConfig+0x2e8>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a52:	f000 f829 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8005a56:	4601      	mov	r1, r0
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <HAL_RCC_ClockConfig+0x2e8>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a60:	22f0      	movs	r2, #240	; 0xf0
 8005a62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	fa92 f2a2 	rbit	r2, r2
 8005a6a:	60fa      	str	r2, [r7, #12]
  return result;
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	fab2 f282 	clz	r2, r2
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	40d3      	lsrs	r3, r2
 8005a76:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x2ec>)
 8005a78:	5cd3      	ldrb	r3, [r2, r3]
 8005a7a:	fa21 f303 	lsr.w	r3, r1, r3
 8005a7e:	4a08      	ldr	r2, [pc, #32]	; (8005aa0 <HAL_RCC_ClockConfig+0x2f0>)
 8005a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005a82:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <HAL_RCC_ClockConfig+0x2f4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fc fcb6 	bl	80023f8 <HAL_InitTick>
  
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3778      	adds	r7, #120	; 0x78
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	08007958 	.word	0x08007958
 8005aa0:	20000000 	.word	0x20000000
 8005aa4:	20000004 	.word	0x20000004

08005aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b08b      	sub	sp, #44	; 0x2c
 8005aac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005ac2:	4b29      	ldr	r3, [pc, #164]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d002      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x30>
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d003      	beq.n	8005ade <HAL_RCC_GetSysClockFreq+0x36>
 8005ad6:	e03c      	b.n	8005b52 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ad8:	4b24      	ldr	r3, [pc, #144]	; (8005b6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ada:	623b      	str	r3, [r7, #32]
      break;
 8005adc:	e03c      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005ae4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005ae8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	fa92 f2a2 	rbit	r2, r2
 8005af0:	607a      	str	r2, [r7, #4]
  return result;
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	fab2 f282 	clz	r2, r2
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	40d3      	lsrs	r3, r2
 8005afc:	4a1c      	ldr	r2, [pc, #112]	; (8005b70 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005afe:	5cd3      	ldrb	r3, [r2, r3]
 8005b00:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b02:	4b19      	ldr	r3, [pc, #100]	; (8005b68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	220f      	movs	r2, #15
 8005b0c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	fa92 f2a2 	rbit	r2, r2
 8005b14:	60fa      	str	r2, [r7, #12]
  return result;
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	fab2 f282 	clz	r2, r2
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	40d3      	lsrs	r3, r2
 8005b20:	4a14      	ldr	r2, [pc, #80]	; (8005b74 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b30:	4a0e      	ldr	r2, [pc, #56]	; (8005b6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b40:	e004      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	623b      	str	r3, [r7, #32]
      break;
 8005b50:	e002      	b.n	8005b58 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b52:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b54:	623b      	str	r3, [r7, #32]
      break;
 8005b56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b58:	6a3b      	ldr	r3, [r7, #32]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	372c      	adds	r7, #44	; 0x2c
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	007a1200 	.word	0x007a1200
 8005b70:	08007970 	.word	0x08007970
 8005b74:	08007980 	.word	0x08007980
 8005b78:	003d0900 	.word	0x003d0900

08005b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b82:	681b      	ldr	r3, [r3, #0]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000000 	.word	0x20000000

08005b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005b9a:	f7ff ffef 	bl	8005b7c <HAL_RCC_GetHCLKFreq>
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ba8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005bac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	fa92 f2a2 	rbit	r2, r2
 8005bb4:	603a      	str	r2, [r7, #0]
  return result;
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	fab2 f282 	clz	r2, r2
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	40d3      	lsrs	r3, r2
 8005bc0:	4a04      	ldr	r2, [pc, #16]	; (8005bd4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005bc2:	5cd3      	ldrb	r3, [r2, r3]
 8005bc4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	08007968 	.word	0x08007968

08005bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005bde:	f7ff ffcd 	bl	8005b7c <HAL_RCC_GetHCLKFreq>
 8005be2:	4601      	mov	r1, r0
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005bec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005bf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	fa92 f2a2 	rbit	r2, r2
 8005bf8:	603a      	str	r2, [r7, #0]
  return result;
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	fab2 f282 	clz	r2, r2
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	40d3      	lsrs	r3, r2
 8005c04:	4a04      	ldr	r2, [pc, #16]	; (8005c18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c06:	5cd3      	ldrb	r3, [r2, r3]
 8005c08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40021000 	.word	0x40021000
 8005c18:	08007968 	.word	0x08007968

08005c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b092      	sub	sp, #72	; 0x48
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 80cd 	beq.w	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c40:	4b86      	ldr	r3, [pc, #536]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10e      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c4c:	4b83      	ldr	r3, [pc, #524]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	4a82      	ldr	r2, [pc, #520]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c56:	61d3      	str	r3, [r2, #28]
 8005c58:	4b80      	ldr	r3, [pc, #512]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c60:	60bb      	str	r3, [r7, #8]
 8005c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c6a:	4b7d      	ldr	r3, [pc, #500]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d118      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c76:	4b7a      	ldr	r3, [pc, #488]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a79      	ldr	r2, [pc, #484]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c82:	f7fc fbfd 	bl	8002480 <HAL_GetTick>
 8005c86:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c88:	e008      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8a:	f7fc fbf9 	bl	8002480 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b64      	cmp	r3, #100	; 0x64
 8005c96:	d901      	bls.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e0db      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9c:	4b70      	ldr	r3, [pc, #448]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ca8:	4b6c      	ldr	r3, [pc, #432]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d07d      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d076      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	fa93 f3a3 	rbit	r3, r3
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ce0:	fab3 f383 	clz	r3, r3
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	4b5e      	ldr	r3, [pc, #376]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	461a      	mov	r2, r3
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfc:	fa93 f3a3 	rbit	r3, r3
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d04:	fab3 f383 	clz	r3, r3
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4b55      	ldr	r3, [pc, #340]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	461a      	mov	r2, r3
 8005d14:	2300      	movs	r3, #0
 8005d16:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d18:	4a50      	ldr	r2, [pc, #320]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d045      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d28:	f7fc fbaa 	bl	8002480 <HAL_GetTick>
 8005d2c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d2e:	e00a      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fc fba6 	bl	8002480 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e086      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005d46:	2302      	movs	r3, #2
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	fa93 f3a3 	rbit	r3, r3
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
 8005d52:	2302      	movs	r3, #2
 8005d54:	623b      	str	r3, [r7, #32]
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	fa93 f3a3 	rbit	r3, r3
 8005d5c:	61fb      	str	r3, [r7, #28]
  return result;
 8005d5e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d60:	fab3 f383 	clz	r3, r3
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	095b      	lsrs	r3, r3, #5
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f043 0302 	orr.w	r3, r3, #2
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d102      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005d74:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	e007      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	fa93 f3a3 	rbit	r3, r3
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	4b35      	ldr	r3, [pc, #212]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	613a      	str	r2, [r7, #16]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	fa92 f2a2 	rbit	r2, r2
 8005d94:	60fa      	str	r2, [r7, #12]
  return result;
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	fab2 f282 	clz	r2, r2
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	f002 021f 	and.w	r2, r2, #31
 8005da8:	2101      	movs	r1, #1
 8005daa:	fa01 f202 	lsl.w	r2, r1, r2
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0bd      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005db4:	4b29      	ldr	r3, [pc, #164]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4926      	ldr	r1, [pc, #152]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005dc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d105      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dce:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4a22      	ldr	r2, [pc, #136]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005de6:	4b1d      	ldr	r3, [pc, #116]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	f023 0203 	bic.w	r2, r3, #3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	491a      	ldr	r1, [pc, #104]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0320 	and.w	r3, r3, #32
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d008      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e04:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	f023 0210 	bic.w	r2, r3, #16
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	4912      	ldr	r1, [pc, #72]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e22:	4b0e      	ldr	r3, [pc, #56]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	490b      	ldr	r1, [pc, #44]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e40:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	4903      	ldr	r1, [pc, #12]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3748      	adds	r7, #72	; 0x48
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	40007000 	.word	0x40007000
 8005e64:	10908100 	.word	0x10908100

08005e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e049      	b.n	8005f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fc f8e0 	bl	8002054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f000 fc32 	bl	8006710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d001      	beq.n	8005f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e040      	b.n	8005fb2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1c      	ldr	r2, [pc, #112]	; (8005fc0 <HAL_TIM_Base_Start_IT+0xa8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00e      	beq.n	8005f70 <HAL_TIM_Base_Start_IT+0x58>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5a:	d009      	beq.n	8005f70 <HAL_TIM_Base_Start_IT+0x58>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a18      	ldr	r2, [pc, #96]	; (8005fc4 <HAL_TIM_Base_Start_IT+0xac>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_TIM_Base_Start_IT+0x58>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a17      	ldr	r2, [pc, #92]	; (8005fc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d115      	bne.n	8005f9c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <HAL_TIM_Base_Start_IT+0xb4>)
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b06      	cmp	r3, #6
 8005f80:	d015      	beq.n	8005fae <HAL_TIM_Base_Start_IT+0x96>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f88:	d011      	beq.n	8005fae <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9a:	e008      	b.n	8005fae <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	e000      	b.n	8005fb0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40014000 	.word	0x40014000
 8005fcc:	00010007 	.word	0x00010007

08005fd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e049      	b.n	8006076 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fb fefc 	bl	8001df4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f000 fb7e 	bl	8006710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_TIM_PWM_Start+0x24>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e03c      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d109      	bne.n	80060be <HAL_TIM_PWM_Start+0x3e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	bf14      	ite	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	2300      	moveq	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	e02f      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d109      	bne.n	80060d8 <HAL_TIM_PWM_Start+0x58>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e022      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d109      	bne.n	80060f2 <HAL_TIM_PWM_Start+0x72>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	bf14      	ite	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	2300      	moveq	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e015      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d109      	bne.n	800610c <HAL_TIM_PWM_Start+0x8c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e008      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e088      	b.n	8006238 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start+0xb6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006134:	e023      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b04      	cmp	r3, #4
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0xc6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006144:	e01b      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0xd6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006154:	e013      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b0c      	cmp	r3, #12
 800615a:	d104      	bne.n	8006166 <HAL_TIM_PWM_Start+0xe6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006164:	e00b      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b10      	cmp	r3, #16
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start+0xf6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006174:	e003      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fde0 	bl	8006d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2b      	ldr	r2, [pc, #172]	; (8006240 <HAL_TIM_PWM_Start+0x1c0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00e      	beq.n	80061b4 <HAL_TIM_PWM_Start+0x134>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2a      	ldr	r2, [pc, #168]	; (8006244 <HAL_TIM_PWM_Start+0x1c4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d009      	beq.n	80061b4 <HAL_TIM_PWM_Start+0x134>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a28      	ldr	r2, [pc, #160]	; (8006248 <HAL_TIM_PWM_Start+0x1c8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_TIM_PWM_Start+0x134>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a27      	ldr	r2, [pc, #156]	; (800624c <HAL_TIM_PWM_Start+0x1cc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d101      	bne.n	80061b8 <HAL_TIM_PWM_Start+0x138>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <HAL_TIM_PWM_Start+0x13a>
 80061b8:	2300      	movs	r3, #0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <HAL_TIM_PWM_Start+0x1c0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_TIM_PWM_Start+0x176>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e0:	d009      	beq.n	80061f6 <HAL_TIM_PWM_Start+0x176>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1a      	ldr	r2, [pc, #104]	; (8006250 <HAL_TIM_PWM_Start+0x1d0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_TIM_PWM_Start+0x176>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a14      	ldr	r2, [pc, #80]	; (8006244 <HAL_TIM_PWM_Start+0x1c4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d115      	bne.n	8006222 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	4b15      	ldr	r3, [pc, #84]	; (8006254 <HAL_TIM_PWM_Start+0x1d4>)
 80061fe:	4013      	ands	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b06      	cmp	r3, #6
 8006206:	d015      	beq.n	8006234 <HAL_TIM_PWM_Start+0x1b4>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620e:	d011      	beq.n	8006234 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006220:	e008      	b.n	8006234 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0201 	orr.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e000      	b.n	8006236 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	40012c00 	.word	0x40012c00
 8006244:	40014000 	.word	0x40014000
 8006248:	40014400 	.word	0x40014400
 800624c:	40014800 	.word	0x40014800
 8006250:	40000400 	.word	0x40000400
 8006254:	00010007 	.word	0x00010007

08006258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0202 	mvn.w	r2, #2
 8006284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa1a 	bl	80066d4 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa0c 	bl	80066c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa1d 	bl	80066e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0304 	and.w	r3, r3, #4
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0204 	mvn.w	r2, #4
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2202      	movs	r2, #2
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f9f0 	bl	80066d4 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9e2 	bl	80066c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f9f3 	bl	80066e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b08      	cmp	r3, #8
 8006314:	d122      	bne.n	800635c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d11b      	bne.n	800635c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0208 	mvn.w	r2, #8
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2204      	movs	r2, #4
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f9c6 	bl	80066d4 <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9b8 	bl	80066c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f9c9 	bl	80066e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b10      	cmp	r3, #16
 8006368:	d122      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0310 	and.w	r3, r3, #16
 8006374:	2b10      	cmp	r3, #16
 8006376:	d11b      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f06f 0210 	mvn.w	r2, #16
 8006380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2208      	movs	r2, #8
 8006386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f99c 	bl	80066d4 <HAL_TIM_IC_CaptureCallback>
 800639c:	e005      	b.n	80063aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f98e 	bl	80066c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f99f 	bl	80066e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d10e      	bne.n	80063dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d107      	bne.n	80063dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0201 	mvn.w	r2, #1
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb fc00 	bl	8001bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	2b80      	cmp	r3, #128	; 0x80
 80063e8:	d10e      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f4:	2b80      	cmp	r3, #128	; 0x80
 80063f6:	d107      	bne.n	8006408 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fdb8 	bl	8006f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006416:	d10e      	bne.n	8006436 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	d107      	bne.n	8006436 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800642e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fdab 	bl	8006f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	d10e      	bne.n	8006462 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b40      	cmp	r3, #64	; 0x40
 8006450:	d107      	bne.n	8006462 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800645a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f94d 	bl	80066fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0320 	and.w	r3, r3, #32
 800646c:	2b20      	cmp	r3, #32
 800646e:	d10e      	bne.n	800648e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b20      	cmp	r3, #32
 800647c:	d107      	bne.n	800648e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f06f 0220 	mvn.w	r2, #32
 8006486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fd6b 	bl	8006f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a4:	2300      	movs	r3, #0
 80064a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e0ff      	b.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b14      	cmp	r3, #20
 80064c2:	f200 80f0 	bhi.w	80066a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064c6:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	08006521 	.word	0x08006521
 80064d0:	080066a7 	.word	0x080066a7
 80064d4:	080066a7 	.word	0x080066a7
 80064d8:	080066a7 	.word	0x080066a7
 80064dc:	08006561 	.word	0x08006561
 80064e0:	080066a7 	.word	0x080066a7
 80064e4:	080066a7 	.word	0x080066a7
 80064e8:	080066a7 	.word	0x080066a7
 80064ec:	080065a3 	.word	0x080065a3
 80064f0:	080066a7 	.word	0x080066a7
 80064f4:	080066a7 	.word	0x080066a7
 80064f8:	080066a7 	.word	0x080066a7
 80064fc:	080065e3 	.word	0x080065e3
 8006500:	080066a7 	.word	0x080066a7
 8006504:	080066a7 	.word	0x080066a7
 8006508:	080066a7 	.word	0x080066a7
 800650c:	08006625 	.word	0x08006625
 8006510:	080066a7 	.word	0x080066a7
 8006514:	080066a7 	.word	0x080066a7
 8006518:	080066a7 	.word	0x080066a7
 800651c:	08006665 	.word	0x08006665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f96a 	bl	8006800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0208 	orr.w	r2, r2, #8
 800653a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0204 	bic.w	r2, r2, #4
 800654a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6999      	ldr	r1, [r3, #24]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	619a      	str	r2, [r3, #24]
      break;
 800655e:	e0a5      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f9d0 	bl	800690c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800657a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6999      	ldr	r1, [r3, #24]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	619a      	str	r2, [r3, #24]
      break;
 80065a0:	e084      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fa2f 	bl	8006a0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 0208 	orr.w	r2, r2, #8
 80065bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0204 	bic.w	r2, r2, #4
 80065cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69d9      	ldr	r1, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	61da      	str	r2, [r3, #28]
      break;
 80065e0:	e064      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fa8d 	bl	8006b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800660c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69d9      	ldr	r1, [r3, #28]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	021a      	lsls	r2, r3, #8
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	61da      	str	r2, [r3, #28]
      break;
 8006622:	e043      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fad0 	bl	8006bd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0208 	orr.w	r2, r2, #8
 800663e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0204 	bic.w	r2, r2, #4
 800664e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006662:	e023      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fb0e 	bl	8006c8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	021a      	lsls	r2, r3, #8
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80066a4:	e002      	b.n	80066ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	75fb      	strb	r3, [r7, #23]
      break;
 80066aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop

080066c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a32      	ldr	r2, [pc, #200]	; (80067ec <TIM_Base_SetConfig+0xdc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d007      	beq.n	8006738 <TIM_Base_SetConfig+0x28>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0x28>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a2f      	ldr	r2, [pc, #188]	; (80067f0 <TIM_Base_SetConfig+0xe0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d108      	bne.n	800674a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a27      	ldr	r2, [pc, #156]	; (80067ec <TIM_Base_SetConfig+0xdc>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <TIM_Base_SetConfig+0x6a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006758:	d00f      	beq.n	800677a <TIM_Base_SetConfig+0x6a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a24      	ldr	r2, [pc, #144]	; (80067f0 <TIM_Base_SetConfig+0xe0>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00b      	beq.n	800677a <TIM_Base_SetConfig+0x6a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a23      	ldr	r2, [pc, #140]	; (80067f4 <TIM_Base_SetConfig+0xe4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d007      	beq.n	800677a <TIM_Base_SetConfig+0x6a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <TIM_Base_SetConfig+0xe8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_Base_SetConfig+0x6a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a21      	ldr	r2, [pc, #132]	; (80067fc <TIM_Base_SetConfig+0xec>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d108      	bne.n	800678c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a0e      	ldr	r2, [pc, #56]	; (80067ec <TIM_Base_SetConfig+0xdc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00b      	beq.n	80067d0 <TIM_Base_SetConfig+0xc0>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0e      	ldr	r2, [pc, #56]	; (80067f4 <TIM_Base_SetConfig+0xe4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d007      	beq.n	80067d0 <TIM_Base_SetConfig+0xc0>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0d      	ldr	r2, [pc, #52]	; (80067f8 <TIM_Base_SetConfig+0xe8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_Base_SetConfig+0xc0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a0c      	ldr	r2, [pc, #48]	; (80067fc <TIM_Base_SetConfig+0xec>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d103      	bne.n	80067d8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	615a      	str	r2, [r3, #20]
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800

08006800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f023 0201 	bic.w	r2, r3, #1
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f023 0302 	bic.w	r3, r3, #2
 800684c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a28      	ldr	r2, [pc, #160]	; (80068fc <TIM_OC1_SetConfig+0xfc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00b      	beq.n	8006878 <TIM_OC1_SetConfig+0x78>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a27      	ldr	r2, [pc, #156]	; (8006900 <TIM_OC1_SetConfig+0x100>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_OC1_SetConfig+0x78>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a26      	ldr	r2, [pc, #152]	; (8006904 <TIM_OC1_SetConfig+0x104>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_OC1_SetConfig+0x78>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a25      	ldr	r2, [pc, #148]	; (8006908 <TIM_OC1_SetConfig+0x108>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d10c      	bne.n	8006892 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0308 	bic.w	r3, r3, #8
 800687e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 0304 	bic.w	r3, r3, #4
 8006890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a19      	ldr	r2, [pc, #100]	; (80068fc <TIM_OC1_SetConfig+0xfc>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00b      	beq.n	80068b2 <TIM_OC1_SetConfig+0xb2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a18      	ldr	r2, [pc, #96]	; (8006900 <TIM_OC1_SetConfig+0x100>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d007      	beq.n	80068b2 <TIM_OC1_SetConfig+0xb2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a17      	ldr	r2, [pc, #92]	; (8006904 <TIM_OC1_SetConfig+0x104>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_OC1_SetConfig+0xb2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a16      	ldr	r2, [pc, #88]	; (8006908 <TIM_OC1_SetConfig+0x108>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d111      	bne.n	80068d6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	621a      	str	r2, [r3, #32]
}
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40012c00 	.word	0x40012c00
 8006900:	40014000 	.word	0x40014000
 8006904:	40014400 	.word	0x40014400
 8006908:	40014800 	.word	0x40014800

0800690c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0210 	bic.w	r2, r3, #16
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f023 0320 	bic.w	r3, r3, #32
 800695a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a24      	ldr	r2, [pc, #144]	; (80069fc <TIM_OC2_SetConfig+0xf0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10d      	bne.n	800698c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a1b      	ldr	r2, [pc, #108]	; (80069fc <TIM_OC2_SetConfig+0xf0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00b      	beq.n	80069ac <TIM_OC2_SetConfig+0xa0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1a      	ldr	r2, [pc, #104]	; (8006a00 <TIM_OC2_SetConfig+0xf4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d007      	beq.n	80069ac <TIM_OC2_SetConfig+0xa0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a19      	ldr	r2, [pc, #100]	; (8006a04 <TIM_OC2_SetConfig+0xf8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC2_SetConfig+0xa0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a18      	ldr	r2, [pc, #96]	; (8006a08 <TIM_OC2_SetConfig+0xfc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d113      	bne.n	80069d4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069b2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ba:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40012c00 	.word	0x40012c00
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a23      	ldr	r2, [pc, #140]	; (8006af8 <TIM_OC3_SetConfig+0xec>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d10d      	bne.n	8006a8a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	; (8006af8 <TIM_OC3_SetConfig+0xec>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00b      	beq.n	8006aaa <TIM_OC3_SetConfig+0x9e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a19      	ldr	r2, [pc, #100]	; (8006afc <TIM_OC3_SetConfig+0xf0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <TIM_OC3_SetConfig+0x9e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a18      	ldr	r2, [pc, #96]	; (8006b00 <TIM_OC3_SetConfig+0xf4>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d003      	beq.n	8006aaa <TIM_OC3_SetConfig+0x9e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <TIM_OC3_SetConfig+0xf8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d113      	bne.n	8006ad2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	621a      	str	r2, [r3, #32]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	40012c00 	.word	0x40012c00
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40014400 	.word	0x40014400
 8006b04:	40014800 	.word	0x40014800

08006b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <TIM_OC4_SetConfig+0xb8>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00b      	beq.n	8006b84 <TIM_OC4_SetConfig+0x7c>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <TIM_OC4_SetConfig+0xbc>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d007      	beq.n	8006b84 <TIM_OC4_SetConfig+0x7c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a14      	ldr	r2, [pc, #80]	; (8006bc8 <TIM_OC4_SetConfig+0xc0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC4_SetConfig+0x7c>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <TIM_OC4_SetConfig+0xc4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d109      	bne.n	8006b98 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	019b      	lsls	r3, r3, #6
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <TIM_OC5_SetConfig+0xac>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00b      	beq.n	8006c42 <TIM_OC5_SetConfig+0x72>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <TIM_OC5_SetConfig+0xb0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d007      	beq.n	8006c42 <TIM_OC5_SetConfig+0x72>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <TIM_OC5_SetConfig+0xb4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d003      	beq.n	8006c42 <TIM_OC5_SetConfig+0x72>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <TIM_OC5_SetConfig+0xb8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d109      	bne.n	8006c56 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	621a      	str	r2, [r3, #32]
}
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	40012c00 	.word	0x40012c00
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800

08006c8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	051b      	lsls	r3, r3, #20
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a16      	ldr	r2, [pc, #88]	; (8006d3c <TIM_OC6_SetConfig+0xb0>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00b      	beq.n	8006d00 <TIM_OC6_SetConfig+0x74>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a15      	ldr	r2, [pc, #84]	; (8006d40 <TIM_OC6_SetConfig+0xb4>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d007      	beq.n	8006d00 <TIM_OC6_SetConfig+0x74>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a14      	ldr	r2, [pc, #80]	; (8006d44 <TIM_OC6_SetConfig+0xb8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC6_SetConfig+0x74>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a13      	ldr	r2, [pc, #76]	; (8006d48 <TIM_OC6_SetConfig+0xbc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d109      	bne.n	8006d14 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	029b      	lsls	r3, r3, #10
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40012c00 	.word	0x40012c00
 8006d40:	40014000 	.word	0x40014000
 8006d44:	40014400 	.word	0x40014400
 8006d48:	40014800 	.word	0x40014800

08006d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2201      	movs	r2, #1
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1a      	ldr	r2, [r3, #32]
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1a      	ldr	r2, [r3, #32]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d101      	bne.n	8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dac:	2302      	movs	r3, #2
 8006dae:	e054      	b.n	8006e5a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a24      	ldr	r2, [pc, #144]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d108      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006de0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00e      	beq.n	8006e2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e18:	d009      	beq.n	8006e2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a13      	ldr	r2, [pc, #76]	; (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a11      	ldr	r2, [pc, #68]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d10c      	bne.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40000400 	.word	0x40000400
 8006e70:	40014000 	.word	0x40014000

08006e74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e060      	b.n	8006f52 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	041b      	lsls	r3, r3, #16
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a14      	ldr	r2, [pc, #80]	; (8006f60 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d115      	bne.n	8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	051b      	lsls	r3, r3, #20
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	6a1b      	ldr	r3, [r3, #32]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40012c00 	.word	0x40012c00

08006f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e040      	b.n	8007034 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fb f91c 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2224      	movs	r2, #36	; 0x24
 8006fcc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0201 	bic.w	r2, r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8f6 	bl	80071d0 <UART_SetConfig>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d101      	bne.n	8006fee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e022      	b.n	8007034 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa20 	bl	800743c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800700a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800701a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 faa7 	bl	8007580 <UART_CheckIdleState>
 8007032:	4603      	mov	r3, r0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08a      	sub	sp, #40	; 0x28
 8007040:	af02      	add	r7, sp, #8
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007052:	2b20      	cmp	r3, #32
 8007054:	f040 80b6 	bne.w	80071c4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_UART_Receive+0x28>
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0ae      	b.n	80071c6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2222      	movs	r2, #34	; 0x22
 8007074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800707e:	f7fb f9ff 	bl	8002480 <HAL_GetTick>
 8007082:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	88fa      	ldrh	r2, [r7, #6]
 8007088:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	88fa      	ldrh	r2, [r7, #6]
 8007090:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800709c:	d10e      	bne.n	80070bc <HAL_UART_Receive+0x80>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d105      	bne.n	80070b2 <HAL_UART_Receive+0x76>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070b0:	e02d      	b.n	800710e <HAL_UART_Receive+0xd2>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	22ff      	movs	r2, #255	; 0xff
 80070b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ba:	e028      	b.n	800710e <HAL_UART_Receive+0xd2>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10d      	bne.n	80070e0 <HAL_UART_Receive+0xa4>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <HAL_UART_Receive+0x9a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	22ff      	movs	r2, #255	; 0xff
 80070d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070d4:	e01b      	b.n	800710e <HAL_UART_Receive+0xd2>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	227f      	movs	r2, #127	; 0x7f
 80070da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070de:	e016      	b.n	800710e <HAL_UART_Receive+0xd2>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070e8:	d10d      	bne.n	8007106 <HAL_UART_Receive+0xca>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <HAL_UART_Receive+0xc0>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	227f      	movs	r2, #127	; 0x7f
 80070f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070fa:	e008      	b.n	800710e <HAL_UART_Receive+0xd2>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	223f      	movs	r2, #63	; 0x3f
 8007100:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007104:	e003      	b.n	800710e <HAL_UART_Receive+0xd2>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007114:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711e:	d108      	bne.n	8007132 <HAL_UART_Receive+0xf6>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	e003      	b.n	800713a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007136:	2300      	movs	r3, #0
 8007138:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800713a:	e037      	b.n	80071ac <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2200      	movs	r2, #0
 8007144:	2120      	movs	r1, #32
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 fac2 	bl	80076d0 <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e033      	b.n	80071c6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10c      	bne.n	800717e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800716a:	b29a      	uxth	r2, r3
 800716c:	8a7b      	ldrh	r3, [r7, #18]
 800716e:	4013      	ands	r3, r2
 8007170:	b29a      	uxth	r2, r3
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	3302      	adds	r3, #2
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	e00d      	b.n	800719a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007184:	b29b      	uxth	r3, r3
 8007186:	b2da      	uxtb	r2, r3
 8007188:	8a7b      	ldrh	r3, [r7, #18]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	4013      	ands	r3, r2
 800718e:	b2da      	uxtb	r2, r3
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	3301      	adds	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1c1      	bne.n	800713c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	e000      	b.n	80071c6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80071c4:	2302      	movs	r3, #2
  }
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b088      	sub	sp, #32
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	431a      	orrs	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	4b8a      	ldr	r3, [pc, #552]	; (8007424 <UART_SetConfig+0x254>)
 80071fc:	4013      	ands	r3, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6812      	ldr	r2, [r2, #0]
 8007202:	6979      	ldr	r1, [r7, #20]
 8007204:	430b      	orrs	r3, r1
 8007206:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68da      	ldr	r2, [r3, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	430a      	orrs	r2, r1
 8007240:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a78      	ldr	r2, [pc, #480]	; (8007428 <UART_SetConfig+0x258>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d120      	bne.n	800728e <UART_SetConfig+0xbe>
 800724c:	4b77      	ldr	r3, [pc, #476]	; (800742c <UART_SetConfig+0x25c>)
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	2b03      	cmp	r3, #3
 8007256:	d817      	bhi.n	8007288 <UART_SetConfig+0xb8>
 8007258:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <UART_SetConfig+0x90>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007271 	.word	0x08007271
 8007264:	0800727d 	.word	0x0800727d
 8007268:	08007283 	.word	0x08007283
 800726c:	08007277 	.word	0x08007277
 8007270:	2300      	movs	r3, #0
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e01d      	b.n	80072b2 <UART_SetConfig+0xe2>
 8007276:	2302      	movs	r3, #2
 8007278:	77fb      	strb	r3, [r7, #31]
 800727a:	e01a      	b.n	80072b2 <UART_SetConfig+0xe2>
 800727c:	2304      	movs	r3, #4
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	e017      	b.n	80072b2 <UART_SetConfig+0xe2>
 8007282:	2308      	movs	r3, #8
 8007284:	77fb      	strb	r3, [r7, #31]
 8007286:	e014      	b.n	80072b2 <UART_SetConfig+0xe2>
 8007288:	2310      	movs	r3, #16
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e011      	b.n	80072b2 <UART_SetConfig+0xe2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a67      	ldr	r2, [pc, #412]	; (8007430 <UART_SetConfig+0x260>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d102      	bne.n	800729e <UART_SetConfig+0xce>
 8007298:	2300      	movs	r3, #0
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e009      	b.n	80072b2 <UART_SetConfig+0xe2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a64      	ldr	r2, [pc, #400]	; (8007434 <UART_SetConfig+0x264>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d102      	bne.n	80072ae <UART_SetConfig+0xde>
 80072a8:	2300      	movs	r3, #0
 80072aa:	77fb      	strb	r3, [r7, #31]
 80072ac:	e001      	b.n	80072b2 <UART_SetConfig+0xe2>
 80072ae:	2310      	movs	r3, #16
 80072b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ba:	d15a      	bne.n	8007372 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80072bc:	7ffb      	ldrb	r3, [r7, #31]
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d827      	bhi.n	8007312 <UART_SetConfig+0x142>
 80072c2:	a201      	add	r2, pc, #4	; (adr r2, 80072c8 <UART_SetConfig+0xf8>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	08007313 	.word	0x08007313
 80072d8:	08007303 	.word	0x08007303
 80072dc:	08007313 	.word	0x08007313
 80072e0:	08007313 	.word	0x08007313
 80072e4:	08007313 	.word	0x08007313
 80072e8:	0800730b 	.word	0x0800730b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ec:	f7fe fc52 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 80072f0:	61b8      	str	r0, [r7, #24]
        break;
 80072f2:	e013      	b.n	800731c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072f4:	f7fe fc70 	bl	8005bd8 <HAL_RCC_GetPCLK2Freq>
 80072f8:	61b8      	str	r0, [r7, #24]
        break;
 80072fa:	e00f      	b.n	800731c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072fc:	4b4e      	ldr	r3, [pc, #312]	; (8007438 <UART_SetConfig+0x268>)
 80072fe:	61bb      	str	r3, [r7, #24]
        break;
 8007300:	e00c      	b.n	800731c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007302:	f7fe fbd1 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8007306:	61b8      	str	r0, [r7, #24]
        break;
 8007308:	e008      	b.n	800731c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800730a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730e:	61bb      	str	r3, [r7, #24]
        break;
 8007310:	e004      	b.n	800731c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	77bb      	strb	r3, [r7, #30]
        break;
 800731a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d074      	beq.n	800740c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	005a      	lsls	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	441a      	add	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b0f      	cmp	r3, #15
 800733c:	d916      	bls.n	800736c <UART_SetConfig+0x19c>
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007344:	d212      	bcs.n	800736c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f023 030f 	bic.w	r3, r3, #15
 800734e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	085b      	lsrs	r3, r3, #1
 8007354:	b29b      	uxth	r3, r3
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	b29a      	uxth	r2, r3
 800735c:	89fb      	ldrh	r3, [r7, #14]
 800735e:	4313      	orrs	r3, r2
 8007360:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	89fa      	ldrh	r2, [r7, #14]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	e04f      	b.n	800740c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	77bb      	strb	r3, [r7, #30]
 8007370:	e04c      	b.n	800740c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007372:	7ffb      	ldrb	r3, [r7, #31]
 8007374:	2b08      	cmp	r3, #8
 8007376:	d828      	bhi.n	80073ca <UART_SetConfig+0x1fa>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <UART_SetConfig+0x1b0>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	080073a5 	.word	0x080073a5
 8007384:	080073ad 	.word	0x080073ad
 8007388:	080073b5 	.word	0x080073b5
 800738c:	080073cb 	.word	0x080073cb
 8007390:	080073bb 	.word	0x080073bb
 8007394:	080073cb 	.word	0x080073cb
 8007398:	080073cb 	.word	0x080073cb
 800739c:	080073cb 	.word	0x080073cb
 80073a0:	080073c3 	.word	0x080073c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073a4:	f7fe fbf6 	bl	8005b94 <HAL_RCC_GetPCLK1Freq>
 80073a8:	61b8      	str	r0, [r7, #24]
        break;
 80073aa:	e013      	b.n	80073d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ac:	f7fe fc14 	bl	8005bd8 <HAL_RCC_GetPCLK2Freq>
 80073b0:	61b8      	str	r0, [r7, #24]
        break;
 80073b2:	e00f      	b.n	80073d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073b4:	4b20      	ldr	r3, [pc, #128]	; (8007438 <UART_SetConfig+0x268>)
 80073b6:	61bb      	str	r3, [r7, #24]
        break;
 80073b8:	e00c      	b.n	80073d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ba:	f7fe fb75 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 80073be:	61b8      	str	r0, [r7, #24]
        break;
 80073c0:	e008      	b.n	80073d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c6:	61bb      	str	r3, [r7, #24]
        break;
 80073c8:	e004      	b.n	80073d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	77bb      	strb	r3, [r7, #30]
        break;
 80073d2:	bf00      	nop
    }

    if (pclk != 0U)
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d018      	beq.n	800740c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	085a      	lsrs	r2, r3, #1
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	441a      	add	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b0f      	cmp	r3, #15
 80073f2:	d909      	bls.n	8007408 <UART_SetConfig+0x238>
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073fa:	d205      	bcs.n	8007408 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	b29a      	uxth	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60da      	str	r2, [r3, #12]
 8007406:	e001      	b.n	800740c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007418:	7fbb      	ldrb	r3, [r7, #30]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3720      	adds	r7, #32
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	efff69f3 	.word	0xefff69f3
 8007428:	40013800 	.word	0x40013800
 800742c:	40021000 	.word	0x40021000
 8007430:	40004400 	.word	0x40004400
 8007434:	40004800 	.word	0x40004800
 8007438:	007a1200 	.word	0x007a1200

0800743c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01a      	beq.n	8007552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	430a      	orrs	r2, r1
 8007530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800753a:	d10a      	bne.n	8007552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b098      	sub	sp, #96	; 0x60
 8007584:	af02      	add	r7, sp, #8
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007590:	f7fa ff76 	bl	8002480 <HAL_GetTick>
 8007594:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d12e      	bne.n	8007602 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f88c 	bl	80076d0 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d021      	beq.n	8007602 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d2:	653b      	str	r3, [r7, #80]	; 0x50
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075dc:	647b      	str	r3, [r7, #68]	; 0x44
 80075de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e6      	bne.n	80075be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2220      	movs	r2, #32
 80075f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e062      	b.n	80076c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b04      	cmp	r3, #4
 800760e:	d149      	bne.n	80076a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007618:	2200      	movs	r2, #0
 800761a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f856 	bl	80076d0 <UART_WaitOnFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d03c      	beq.n	80076a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	623b      	str	r3, [r7, #32]
   return(result);
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800763e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007648:	633b      	str	r3, [r7, #48]	; 0x30
 800764a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800764e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e6      	bne.n	800762a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3308      	adds	r3, #8
 8007662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	60fb      	str	r3, [r7, #12]
   return(result);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0301 	bic.w	r3, r3, #1
 8007672:	64bb      	str	r3, [r7, #72]	; 0x48
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3308      	adds	r3, #8
 800767a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800767c:	61fa      	str	r2, [r7, #28]
 800767e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	69b9      	ldr	r1, [r7, #24]
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	617b      	str	r3, [r7, #20]
   return(result);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e5      	bne.n	800765c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2220      	movs	r2, #32
 8007694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e011      	b.n	80076c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3758      	adds	r7, #88	; 0x58
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	4613      	mov	r3, r2
 80076de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076e0:	e049      	b.n	8007776 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e8:	d045      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ea:	f7fa fec9 	bl	8002480 <HAL_GetTick>
 80076ee:	4602      	mov	r2, r0
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d302      	bcc.n	8007700 <UART_WaitOnFlagUntilTimeout+0x30>
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e048      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0304 	and.w	r3, r3, #4
 800770e:	2b00      	cmp	r3, #0
 8007710:	d031      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b08      	cmp	r3, #8
 800771e:	d110      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2208      	movs	r2, #8
 8007726:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f838 	bl	800779e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2208      	movs	r2, #8
 8007732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e029      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007750:	d111      	bne.n	8007776 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800775a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f81e 	bl	800779e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e00f      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69da      	ldr	r2, [r3, #28]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4013      	ands	r3, r2
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	429a      	cmp	r2, r3
 8007784:	bf0c      	ite	eq
 8007786:	2301      	moveq	r3, #1
 8007788:	2300      	movne	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	429a      	cmp	r2, r3
 8007792:	d0a6      	beq.n	80076e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800779e:	b480      	push	{r7}
 80077a0:	b095      	sub	sp, #84	; 0x54
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c4:	643b      	str	r3, [r7, #64]	; 0x40
 80077c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3308      	adds	r3, #8
 80077f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007810:	2b01      	cmp	r3, #1
 8007812:	d118      	bne.n	8007846 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	60bb      	str	r3, [r7, #8]
   return(result);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f023 0310 	bic.w	r3, r3, #16
 8007828:	647b      	str	r3, [r7, #68]	; 0x44
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6979      	ldr	r1, [r7, #20]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	613b      	str	r3, [r7, #16]
   return(result);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	669a      	str	r2, [r3, #104]	; 0x68
}
 800785a:	bf00      	nop
 800785c:	3754      	adds	r7, #84	; 0x54
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
	...

08007868 <__libc_init_array>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4d0d      	ldr	r5, [pc, #52]	; (80078a0 <__libc_init_array+0x38>)
 800786c:	4c0d      	ldr	r4, [pc, #52]	; (80078a4 <__libc_init_array+0x3c>)
 800786e:	1b64      	subs	r4, r4, r5
 8007870:	10a4      	asrs	r4, r4, #2
 8007872:	2600      	movs	r6, #0
 8007874:	42a6      	cmp	r6, r4
 8007876:	d109      	bne.n	800788c <__libc_init_array+0x24>
 8007878:	4d0b      	ldr	r5, [pc, #44]	; (80078a8 <__libc_init_array+0x40>)
 800787a:	4c0c      	ldr	r4, [pc, #48]	; (80078ac <__libc_init_array+0x44>)
 800787c:	f000 f860 	bl	8007940 <_init>
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	2600      	movs	r6, #0
 8007886:	42a6      	cmp	r6, r4
 8007888:	d105      	bne.n	8007896 <__libc_init_array+0x2e>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007890:	4798      	blx	r3
 8007892:	3601      	adds	r6, #1
 8007894:	e7ee      	b.n	8007874 <__libc_init_array+0xc>
 8007896:	f855 3b04 	ldr.w	r3, [r5], #4
 800789a:	4798      	blx	r3
 800789c:	3601      	adds	r6, #1
 800789e:	e7f2      	b.n	8007886 <__libc_init_array+0x1e>
 80078a0:	08007998 	.word	0x08007998
 80078a4:	08007998 	.word	0x08007998
 80078a8:	08007998 	.word	0x08007998
 80078ac:	0800799c 	.word	0x0800799c

080078b0 <memset>:
 80078b0:	4402      	add	r2, r0
 80078b2:	4603      	mov	r3, r0
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d100      	bne.n	80078ba <memset+0xa>
 80078b8:	4770      	bx	lr
 80078ba:	f803 1b01 	strb.w	r1, [r3], #1
 80078be:	e7f9      	b.n	80078b4 <memset+0x4>

080078c0 <lrintf>:
 80078c0:	ee10 3a10 	vmov	r3, s0
 80078c4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80078c8:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 80078cc:	281e      	cmp	r0, #30
 80078ce:	b082      	sub	sp, #8
 80078d0:	dc2e      	bgt.n	8007930 <lrintf+0x70>
 80078d2:	1c41      	adds	r1, r0, #1
 80078d4:	da02      	bge.n	80078dc <lrintf+0x1c>
 80078d6:	2000      	movs	r0, #0
 80078d8:	b002      	add	sp, #8
 80078da:	4770      	bx	lr
 80078dc:	2816      	cmp	r0, #22
 80078de:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80078e2:	dd09      	ble.n	80078f8 <lrintf+0x38>
 80078e4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80078e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80078ec:	3a96      	subs	r2, #150	; 0x96
 80078ee:	4090      	lsls	r0, r2
 80078f0:	2900      	cmp	r1, #0
 80078f2:	d0f1      	beq.n	80078d8 <lrintf+0x18>
 80078f4:	4240      	negs	r0, r0
 80078f6:	e7ef      	b.n	80078d8 <lrintf+0x18>
 80078f8:	4b10      	ldr	r3, [pc, #64]	; (800793c <lrintf+0x7c>)
 80078fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80078fe:	ed93 7a00 	vldr	s14, [r3]
 8007902:	ee37 0a00 	vadd.f32	s0, s14, s0
 8007906:	ed8d 0a01 	vstr	s0, [sp, #4]
 800790a:	eddd 7a01 	vldr	s15, [sp, #4]
 800790e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007912:	ee17 3a90 	vmov	r3, s15
 8007916:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800791a:	d0dc      	beq.n	80078d6 <lrintf+0x16>
 800791c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007920:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8007924:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007928:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800792c:	40d8      	lsrs	r0, r3
 800792e:	e7df      	b.n	80078f0 <lrintf+0x30>
 8007930:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007934:	ee17 0a90 	vmov	r0, s15
 8007938:	e7ce      	b.n	80078d8 <lrintf+0x18>
 800793a:	bf00      	nop
 800793c:	08007990 	.word	0x08007990

08007940 <_init>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	bf00      	nop
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr

0800794c <_fini>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	bf00      	nop
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr
